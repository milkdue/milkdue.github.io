<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>npm</title>
      <link href="a1345b2b/"/>
      <url>a1345b2b/</url>
      
        <content type="html"><![CDATA[<h1>npm</h1><h2 id="介绍">介绍</h2><p><code>npm</code> 全名 <code>node package manager</code></p><h2 id="基本命令">基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 命令列表</span></span><br><span class="line">npm <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看各个命令的简单用法</span></span><br><span class="line">npm -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 npm 版本</span></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 npm 配置</span></span><br><span class="line">npm config list -l</span><br></pre></td></tr></table></figure><h2 id="npm-使用"><code>npm</code> 使用</h2><ol><li><code>npm init</code> 一路回车，初始化 <code>package.json</code> 文件</li><li>如果使用 <code>-f</code>(代表 <code>force</code>)、<code>-y</code>(代表 <code>yes</code>)直接跳过询问阶段，直接生成 <code>package.json</code> 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm init -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># -y 和 -f 一样的效果</span></span><br></pre></td></tr></table></figure><h2 id="npm-set-设置环境变量"><code>npm set</code> 设置环境变量</h2><ul><li><code>mac</code> 的配置文件在 <code>vim ~/.npmrc</code> *</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">set</span> init-author-name <span class="string">&#x27;your name&#x27;</span></span><br><span class="line">npm <span class="built_in">set</span> init-author-email <span class="string">&#x27;your email&#x27;</span></span><br><span class="line">npm <span class="built_in">set</span> init-author-url <span class="string">&#x27;your website&#x27;</span></span><br><span class="line">npm <span class="built_in">set</span> init-license <span class="string">&#x27;开源协议 MIT&#x27;</span></span><br></pre></td></tr></table></figure><p>上面命令等于为npm init设置了默认值，以后执行npm init的时候，package.json的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的~/.npmrc文件，使得用户不用每个项目都输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局设置 下载的每个模块都确切版本，而不是一个可选的版本范围，版本前不带 ^ 或 ～</span></span><br><span class="line">npm <span class="built_in">set</span> save-exact <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要安装依赖时明确版本 固定依赖包axios的版本</span></span><br><span class="line">npm install axios --save-exact</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将指定的 $dir 目录，设为模块的全局安装目录，如果当前有这个目录的写权限，那么运行 npm i的时候，就不需要 sudo 命令授权了</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="variable">$dir</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> save-prefix ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的命令使得 `npm install --save` 和 `npm install --save-dev` 安装新模块时允许的版本范围从克拉符号 ^ 改成 ～，即从允许小版本升级，变成只允许补丁包的升级，详细的规则后面会有介绍</span></span><br></pre></td></tr></table></figure><h2 id="npm-info"><code>npm info</code></h2><p><code>npm info</code> 命令可以查看每个模块的具体信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看underscore模块的信息</span></span><br><span class="line">npm info underscore</span><br><span class="line">npm info underscore description</span><br><span class="line">npm info underscore homepage</span><br><span class="line">npm info underscore version</span><br></pre></td></tr></table></figure><h2 id="npm-search"><code>npm search</code></h2><p><code>npm search</code> 命令用于搜索 <code>npm</code> 仓库，它后面可以跟字符串，也可以跟正则表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm search &lt;搜索&gt;</span><br><span class="line"></span><br><span class="line">npm search axios</span><br></pre></td></tr></table></figure><h2 id="npm-list"><code>npm list</code></h2><p><code>npm list</code> 命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上global参数，会列出全局安装的模块。</span></span><br><span class="line">npm list -global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出单个模块</span></span><br><span class="line">npm list vue</span><br></pre></td></tr></table></figure><h2 id="npm-install"><code>npm install</code></h2><p><code>node</code> 模块采用 <code>npm install</code> 命令安装</p><p>每个模块都可以全局安装或是本地安装，全局安装指的是将一个模块安装到系统目录中，各个项目都可以调用，一般来说，全局安装只适合于工具模块，比如 <code>eslint</code> 和 <code>gulp</code>，本地安装指的是将一个模块下载到当前项目的 <code>node_modules</code> 子目录，在项目目录之中，才能调用这个模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line">npm install &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g &lt;package name&gt;</span><br><span class="line">npm install -global &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接输入github代码库地址</span></span><br><span class="line">npm install git://github.com/package/path.git</span><br><span class="line">npm install git://github.com/package/path.git<span class="comment">#0.1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制重新安装</span></span><br><span class="line">npm install &lt;packageName&gt; --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有模块强制重新安装，直接删除node_modules</span></span><br><span class="line">rm -rf node_modules</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载最新的npm @latest表示最新版本 npm可以自己安装自己，之所以可以这样是因为 npm 本身和 node 其他模块没有区别</span></span><br><span class="line">npm install npm@latest -g</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装不同版本">安装不同版本</h3><p><code>npm i</code> 总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上特定的版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">npm i axios@latest <span class="comment"># 安装最新版本</span></span><br><span class="line">npm i axios@0.1.1 <span class="comment"># 安装指定版本</span></span><br><span class="line">npm i axios@<span class="string">&quot;&gt;=0.1.0 &lt;0.2.0&quot;</span> <span class="comment"># 安装大于0.1.0小于0.2.0版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用 --save-exact参数 会在package.json文件指定安装模块的确切版本</span></span><br><span class="line"></span><br><span class="line">npm i readable-stream --save --save-exact</span><br><span class="line"></span><br><span class="line">npm i sax --save</span><br><span class="line">npm i node-tap --save-dev</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm i sax -S</span><br><span class="line">npm i node-tap -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># --save: 模块将被添加 dependencies 可以简化为 -S</span></span><br><span class="line"><span class="comment"># --save-dev: 模块将被添加到 devDependencies 可以简化为 -D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果安装beta版本的模块，使用如下命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新的beta版本</span></span><br><span class="line">npm i &lt;module-name&gt;@beta (latest beta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本的beta</span></span><br><span class="line">npm i &lt;module-name&gt;@1.3.1-beta.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm i会默认安装 dependencies字段和devDependencies字段中的所有模块，如果使用--production参数，可以只安装dependencies字段的模块</span></span><br><span class="line"></span><br><span class="line">npm i --production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">NODE_ENV=production npm install</span><br></pre></td></tr></table></figure><h2 id="避免系统权限">避免系统权限</h2><p>默认情况下，<code>npm</code> 全局模块会安装在系统目录(<code>/usr/local/lib</code>)，普通用户没有写入权限，需要使用 <code>sudo</code>，使用如下方式可以在没有 <code>root</code> 权限下，安装全局模块</p><p>首先，在主目录下新建配置文件 <code>.npmrc</code>，然后在改文件中将 <code>prefix</code> 变量定义到主目录下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prefix = /home/qingxin/npm</span><br></pre></td></tr></table></figure><p>然后在主目录下新建 <code>npm</code> 子目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/npm</span><br></pre></td></tr></table></figure><p>此后，全局安装的模块都会安装到这个子目录中，<code>npm</code> 也会到 <code>~/npm/bin</code> 目录去寻找命令</p><p>最后，将这个路径在 <code>.bash_profile</code> 文件(或 <code>.bashrc</code> 文件)中加入 <code>PATH</code> 变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/npm/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h2 id="npm-update"><code>npm update</code></h2><p><code>npm update</code> 命令用来更新本地安装的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级当前项目的指定模块</span></span><br><span class="line"></span><br><span class="line">npm update [module-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级全局安装的模块</span></span><br><span class="line"></span><br><span class="line">npm update -global [module-name]</span><br></pre></td></tr></table></figure><p>它会先到原创仓库查询最新版本，然后查询本地版本，如果本地版本不存在，或者远程版本较新，就会安装</p><p>使用 <code>-S</code> 或 <code>--save</code> 参数，可以在安装的时候更新 <code>package.json</code> 里面模块的版本号</p><p>注意，从 <code>npm v2.6.1</code> 开始，<code>npm update</code> 只更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的，如果想取到老版本的效果，使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --depth 9999 update</span><br></pre></td></tr></table></figure><h2 id="npm-uninstall"><code>npm uninstall</code></h2><p><code>npm uninstall</code> 命令，卸载已安装的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall [package name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载全局模块</span></span><br><span class="line">npm uninstall [package name] -global</span><br></pre></td></tr></table></figure><h2 id="npm-run"><code>npm run</code></h2><p><code>npm</code> 不仅可以用来模块管理，还可以用来执行脚本，<code>package.json</code> 文件有一个 <code>scripts</code> 字段，可以用于指定脚本命令，供 <code>npm</code> 直接调用</p><p><code>npm run</code> 命令会自动在环境变量 <code>$PATH</code> 添加 <code>node_modules/.bin</code> 目录，所以 <code>scripts</code> 字段里面调用命令时不用加上路径，这就避免了全局安装 <code>NPM</code> 模块</p><p><code>npm run</code> 如果不加任何参数，直接运行，会列出 <code>package.json</code> 里面所有可以执行的脚本命令，<code>npm run</code> 实际上是 <code>npm run lint</code> 的缩写</p><p><code>npm</code> 内置了两个命令简写，<code>npm test</code> 等同于执行 <code>npm run test</code>，<code>npm start</code> 等同于执行 <code>npm run start</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><code>npm run</code> 会创建一个 <code>shell</code> 执行指定的命令，并临时将 <code>node_modules/.bin</code> 加入 <code>PATH</code> 变量，这意味着本地模块可以直接运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint -S</span><br></pre></td></tr></table></figure><p>例如运行了上面的命令，它产生了两个结果，<code>eslint</code> 被安装在当前目录的 <code>node_modules</code> 目录下，其次，<code>node_modules/.bin</code> 目录会生成一个符号链接 <code>node_modules/.bin/eslint</code>，指向 <code>eslint</code> 模块的可执行脚本，然后就可以在 <code>package.json</code> 的 <code>script</code> 属性里面，不带路径的引用 <code>eslint</code> 这个脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Test Project&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^1.10.3&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint .&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>npm run lint</code>的时候，它会自动执行 <code>./node_modules/.bin/eslint .</code></p><p>如果希望一个操作的输出，是另一个操作的输入，可以借用 <code>linux</code> 系统的管道命令，酱两个操作链接在一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build-js&quot;</span>: <span class="string">&quot;browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js&quot;</span></span><br></pre></td></tr></table></figure><p>但是，更方便的写法是引用其他 <code>npm run</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;npm run build-js &amp;&amp; npm run build-css&quot;</span></span><br></pre></td></tr></table></figure><p>上面的写法是先运行 <code>npm run build-js</code>，然后再运行 <code>npm run build-css</code>，两个命令中间用 <code>&amp;&amp;</code> 连接。如果希望两个命令同时平行执行，它们中间可以用 <code>&amp;</code> 连接</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个例子</span></span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;autoprefixer&quot;: &quot;latest&quot;,</span><br><span class="line">  &quot;cssmin&quot;: &quot;latest&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build:css&quot;: &quot;autoprefixer -b &#x27;last 2 versions&#x27; &lt; assets/styles/main.css | cssmin &gt; dist/main.css&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写在 <code>scripts</code> 属性中的命令，也可以在 <code>node_modules/.bin</code> 目录中直接写成 <code>bash</code> 脚本。下面是一个 <code>bash</code> 脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> site/main</span><br><span class="line">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</span><br></pre></td></tr></table></figure><p><a href="http://xn--build-4h1hgl73cv8ecqnptvih1amqeg98dpg7arr4e.sh">假定上面的脚本文件名为build.sh</a>，并且权限为可执行，就可以在scripts属性中引用该文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build-js&quot;: &quot;bin/build.sh&quot;</span><br></pre></td></tr></table></figure><h2 id="npm-run-参数"><code>npm run</code> 参数</h2><p><code>npm run</code> 命令添加参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;mocha test/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码指定 <code>npm test</code>，实际运行 <code>mocha test/</code>，如果要通过 <code>npm test</code> 命令，将参数传到 <code>mocha</code>，则参数之前要加上两个连词线</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span> -- anothertest.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等于</span></span><br><span class="line"></span><br><span class="line">mocha <span class="built_in">test</span>/ anothertest.js</span><br></pre></td></tr></table></figure><p>上面命令表示，<code>mocha</code> 要运行所有 <code>test</code> 子目录的测试脚本，以及另外一个测试脚本<code>anothertest.js</code>。</p><p><code>npm run</code>本身有一个参数 <code>-s</code>，表示关闭 <code>npm</code> 本身的输出，只输出脚本产生的结果</p><h2 id="npm-run-all"><code>npm-run-all</code></h2><ol><li><code>npm-run-all</code> 这个模块可以运行多个 <code>scripts</code> 脚本命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i npm-run-all -D</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继发执行</span></span><br><span class="line">npm-run-all build:html build:js</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">npm run build:html &amp;&amp; npm run build:js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并行执行</span></span><br><span class="line">npm-run-all --parallel watch:html watch:js</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">npm run watch:html &amp; npm run watch:js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合执行</span></span><br><span class="line">npm-run-all clean lint --parallel watch:html watch:js</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">npm-run-all clean lint</span><br><span class="line">npm-run-all --parallel watch:html watch:js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符号</span></span><br><span class="line">npm-run-all --parallel watch:*</span><br></pre></td></tr></table></figure><ol><li><code>start</code> 脚本<ul><li><p><code>start</code> 脚本用于启动应用程序</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;npm-run-all --parallel dev serve&quot;</span><br><span class="line"># npm run start 并行执行 dev 脚本 和 serve 脚本命令</span><br><span class="line"># 相当于</span><br><span class="line">npm run dev &amp; npm run serve</span><br></pre></td></tr></table></figure></li><li><p>如果没有 <code>start</code> 脚本配置，<code>npm start</code> 命令默认执行下面的脚本，前提是模块的根目录存在一个 <code>server.js</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure></li></ul></li><li><code>dev</code> 脚本命令</li></ol><ul><li><p><code>dev</code> 脚本命令，规定开发阶段所要做的处理，比如构建网页资源</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;npm-run-all dev:*&quot;</span><br><span class="line"><span class="comment">// 这个命令用于继发执行所有 dev 的子命令 例如：dev:sass dev:autoprefix</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;predev:sass&quot;: &quot;node-sass --source-map src/css/hoodie.css.map --output-style nested src/sass/base.scss src/css/hoodie.css&quot;</span><br><span class="line"><span class="comment">// 这个命令 将 sass 文件编译为 css 文件，并生成 source map 文件 这个一个hook 后面会讲到</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;dev:sass&quot;: &quot;node-sass --source-map src/css/hoodie.css.map --watch --output-style nested src/sass/base.scss src/css/hoodie.css&quot;</span><br><span class="line"><span class="comment">// 这个命令会监听 sass 文件的变动，只要有变动，就自动将其编译为css文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;dev:autoprefix&quot;: &quot;postcss --use autoprefixer --autoprefixer.browsers \&quot;&gt; 5%\&quot; --output src/css/hoodie.css src/css/hoodie.css&quot;</span><br><span class="line"><span class="comment">// 这个命令 为css文件加上浏览器前缀，限制条件是只考虑市场份额大于5%的浏览器</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p><code>serve</code> 脚本命令</p><ul><li><code>serve</code> 脚本用于启动服务</li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;serve&quot;: &quot;live-server dist/ --port=9090&quot;</span><br><span class="line"><span class="comment">// 上面命令启动服务，用的是live-server模块，将服务启动在9090端口，展示dist子目录</span></span><br></pre></td></tr></table></figure><ul><li><code>live-server</code> 模块有三个功能<ul><li>启动一个 <code>HTTP</code> 服务器，展示指定目录的 <code>index.html</code> 文件，通过该文件加载各种网络资源，这是 <code>file://</code> 协议做不到的</li><li>添加自动刷新功能。只要指定目录之中，文件有任何变化，它就会刷新页面</li><li><code>npm run serve</code> 命令执行以后，自动打开浏览器</li><li>以前，上面三个功能需要三个模块来完成：<code>http-server</code>、<code>live-reload</code>和<code>opener</code>，现在只要 <code>live-server</code> 一个模块就够了</li></ul></li></ul></li><li><p><code>test</code> 脚本命令</p><ul><li><code>test</code> 命令用于执行测试</li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;test&quot;: &quot;npm-run-all test:*&quot;,</span><br><span class="line"><span class="comment">// 执行 npm run test 它会帮我们执行test的所有子命令 例如 test:lint</span></span><br><span class="line">&quot;test:lint&quot;: &quot;sass-lint --verbose --config .sass-lint.yml src/sass/*&quot;</span><br><span class="line"><span class="comment">// 上面命令规定，执行测试时，运行lint 脚本，检查脚本之中的语法错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>prod</code> 脚本命令</p><ul><li><code>prod</code> 脚本命令，规定进入生产环境时需要做的处理</li><li>例如下面的命令，将 <code>sass</code> 文件转为 <code>css</code> 文件，并加上浏览器前缀</li></ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;prod&quot;: &quot;npm-run-all prod:*&quot;,</span><br><span class="line">&quot;prod:sass&quot;: &quot;node-sass --output-style compressed src/sass/base.scss src/css/prod/hoodie.min.css&quot;,</span><br><span class="line">&quot;prod:autoprefix&quot;: &quot;postcss --use autoprefixer --autoprefixer.browsers &quot;&gt; 5%&quot; --output src/css/prod/hoodie.min.css src/css/prod/hoodie.min.css&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>help</code> 脚本命令</p><ul><li><code>help</code> 脚本命令用于展示帮助信息</li><li>下面的命令，<code>markdown-chalk</code> 模块用于将指定的 <code>markdown</code> 文件，转为彩色文本显示在终端</li></ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;help&quot;: &quot;markdown-chalk --input DEVLOPMENT.md&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>docs</code> 脚本命令</p><ul><li><code>docs</code> 脚本用于生成文档</li><li>下面的命令使用 <code>kss-node</code> 模块，提供源码的注释生成 <code>markdown</code> 格式的文档。</li></ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;docs&quot;: &quot;kss-node --source src/sass --homepage ../../styleguide.md&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="pre-和-post-脚本"><code>pre-</code> 和 <code>post-</code> 脚本</h2><p><code>npm run</code> 为每条命令提供了 <code>pre-</code> 和 <code>post-</code> 两个钩子(<code>hook</code>)，以 <code>npm run lint</code> 为例，执行这条命令之前，<code>npm</code> 会先查看有没有定义 <code>prelint</code> 和 <code>postlint</code> 两个钩子，如果有的话，就先执行 <code>npm run prelint</code>，然后执行 <code>npm run lint</code>，最后执行 <code>npm run postlint</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;myproject&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;latest&quot;</span></span><br><span class="line">    <span class="string">&quot;karma&quot;</span>: <span class="string">&quot;latest&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint --cache --ext .js --ext .jsx src&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;karma start --log-leve=error karma.config.js --single-run=true&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pretest&quot;</span>: <span class="string">&quot;npm run lint&quot;</span>,</span><br><span class="line">    <span class="comment">// 在执行 npm run test 之前执行</span></span><br><span class="line">    <span class="attr">&quot;posttest&quot;</span>: <span class="string">&quot;echo &#x27;Finished running tests&#x27;&quot;</span></span><br><span class="line">    <span class="comment">// 在执行 npm run test 之后执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>注意：如果执行过程出错，就不会执行排在后面的脚本，即如果 <code>prelint</code> 脚本执行出错，就不会接着执行 <code>lint</code> 和 <code>postlint</code> 脚本。</p></li><li><p>一些常见的 <code>pre-</code> 和 <code>post-</code> 脚本</p><ul><li><code>prepublish</code>：发布一个模块前执行</li><li><code>postpublish</code>：发布一个模块后执行</li><li><code>preinstall</code>：用户执行<code>npm install</code>命令时，先执行该脚本</li><li><code>postinstall</code>：用户执行<code>npm install</code>命令时，安装结束后执行该脚本，通常用于将下载的源码编译成用户需要的格式，比如有些模块需要在用户机器上跟本地的<code>C++</code>模块一起编译</li><li><code>preuninstall</code>：卸载一个模块前执行</li><li><code>postuninstall</code>：卸载一个模块后执行</li><li><code>preversion</code>：更改模块版本前执行</li><li><code>postversion</code>：更改模块版本后执行</li><li><code>pretest</code>：运行<code>npm test</code>命令前执行</li><li><code>posttest</code>：运行<code>npm test</code>命令后执行</li><li><code>prestop</code>：运行<code>npm stop</code>命令前执行</li><li>poststop：运行<code>npm stop</code>命令后执行</li><li>prestart：运行<code>npm start</code>命令前执行</li><li>poststart：运行<code>npm start</code>命令后执行</li><li>prerestart：运行<code>npm restart</code>命令前执行</li><li>postrestart：运行<code>npm restart</code>命令后执行</li></ul></li><li><p>对于最后一个<code>npm restart</code>命令，如果没有设置<code>restart</code>脚本，<code>prerestart</code>和<code>postrestart</code>会依次执行<code>stop</code>和<code>start</code>脚本</p></li><li><p>另外，不能在<code>pre</code>脚本之前再加<code>pre</code>，即<code>prepretest</code>脚本不起作用</p></li><li><p>注意，即使 <code>Npm</code> 可以自动运行<code>pre</code>和<code>post</code>脚本，也可以手动执行它们</p></li><li><p>一些例子</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;node lib/post_install.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于处理从Git仓库拉下来的源码。比如，有些源码是用TypeScript写的，可能需要转换一下 安装之后执行 lib/post_install.js</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;dist:modules&quot;</span>: <span class="string">&quot;babel ./src --out-dir ./dist-modules&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gh-pages&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gh-pages:deploy&quot;</span>: <span class="string">&quot;gh-pages -d gh-pages&quot;</span>,</span><br><span class="line"><span class="attr">&quot;prepublish&quot;</span>: <span class="string">&quot;npm run dist:modules&quot;</span>,</span><br><span class="line"><span class="comment">// npm run publish时，会先执行Babel编译，然后调用Webpack构建，最后发到Github Pages上面</span></span><br><span class="line"><span class="attr">&quot;postpublish&quot;</span>: <span class="string">&quot;npm run gh-pages &amp;&amp; npm run gh-pages:deploy&quot;</span></span><br><span class="line"><span class="comment">// &amp;&amp; 继发 先执行 npm run gh-page 然后执行 npm run gh-pages:deploy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以上都是<code>npm</code>相关操作的钩子，如果安装某些模块，还能支持<code>Git</code>相关的钩子。下面以<code>husky</code>模块为例</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev</span><br></pre></td></tr></table></figure> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint yourJsFiles.js&quot;</span>,</span><br><span class="line"><span class="attr">&quot;precommit&quot;</span>: <span class="string">&quot;npm run test &amp;&amp; npm run lint&quot;</span>,</span><br><span class="line"><span class="comment">// commit 之前</span></span><br><span class="line"><span class="attr">&quot;prepush&quot;</span>: <span class="string">&quot;npm run test &amp;&amp; npm run lint&quot;</span>,</span><br><span class="line"><span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line"><span class="comment">// push之前</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似作用的模块还有<code>pre-commit</code>、<code>precommit-hook</code>等</p></li><li><p>内部变量</p><ul><li><code>scripts</code> 字段可以使用一些内部变量，主要是 <code>package.json</code> 的各种字段</li><li>比如 <code>package.json</code> 的内容是 <code>&#123;&quot;name&quot;:&quot;foo&quot;, &quot;version&quot;:&quot;1.2.5&quot;&#125;</code> 那么变量 <code>npm_package_name</code> 的值就是 <code>foo</code>，变量 <code>npm_package_version</code> 就是 <code>1.2.5</code></li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span>:&#123;</span><br><span class="line"><span class="attr">&quot;bundle&quot;</span>: <span class="string">&quot;mkdir -p build/$npm_package_version/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行npm run bundle以后，将会生成build/1.2.5/子目录</span></span><br></pre></td></tr></table></figure><ul><li><code>config</code> 字段也可以用来设置内部字段</li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;fooproject&quot;,</span><br><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">&quot;reporter&quot;: &quot;xunit&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;test&quot;: &quot;mocha test/ --reporter $npm_package_config_reporter&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量npm_package_config_reporter对应的就是reporter</span></span><br></pre></td></tr></table></figure></li><li><p>通配符</p></li><li><p><code>npm</code> 的通配符的规则如下</p><ul><li><code>*</code> 匹配<code>0</code>个或多个字符</li><li><code>?</code> 匹配<code>1</code>个字符</li><li><code>[...]</code> 匹配某个范围的字符。如果该范围的第一个字符是<code>!</code>或<code>^</code>，则匹配不在该范围的字符</li><li><code>!(pattern|pattern|pattern)</code> 匹配任何不符合给定的模式</li><li><code>?(pattern|pattern|pattern)</code> 匹配<code>0</code>个或<code>1</code>个给定的模式</li><li><code>+(pattern|pattern|pattern)</code> 匹配<code>1</code>个或多个给定的模式</li><li><code>*(a|b|c)</code> 匹配<code>0</code>个或多个给定的模式</li><li><code>@(pattern|pat*|pat?erN)</code> 只匹配给定模式之一</li><li><code>**</code> 如果出现在路径部分，表示<code>0</code>个或多个子目录</li></ul></li></ol><h2 id="全局模块">全局模块</h2><ol><li>全局模块可以直接在任何地方使用</li></ol><h2 id="npm-link"><code>npm link</code></h2><p>就是将当前的目录临时放到全局下</p><p>开发 <code>npm</code> 模块的时候，有时我们会希望，边开发边试用，比如本地调试的时候 <code>require('module')</code>，会自动加载本机开发中的模块，<code>node</code> 规定，使用一个模块时，需要将其安装到全局或项目的 <code>node_modules</code> 目录中，对于开发中的模块，解决方法就是在全局的 <code>node_modules</code> 目录中，生成一个符号链接，指向模块的本地目录</p><p><code>npm link</code> 就是起到这个作用，会自动创建这个符号链接</p><p>举个🌰</p><p>在项目根目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该命令会在 npm 全局模块目录中，生成一个符号链接文件，该文件的名字就是 package.json文件中指定的模块名</span></span><br><span class="line">src/myModule$ npm link</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块名</span></span><br><span class="line">/path/to/global/node_modules/myModule -&gt; src/myModule</span><br></pre></td></tr></table></figure><p>这个时候，已经可以全局调用模块了，但是如果我们要让这个模块安装在项目内，还要进行下面的步骤</p><p>切换到项目目录，再次运行 <code>npm link</code> 命令，并指定模块名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/myProject$ npm link myModule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的命令等同于生成了本地模块的符号链接</span></span><br><span class="line"></span><br><span class="line">src/myProject/node_modules/myModule -&gt; /path/to/global/node_modules/myModule</span><br></pre></td></tr></table></figure><p>然后就可以加载模块了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleO = <span class="built_in">require</span>(<span class="string">&quot;myModule&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样一来，<code>myModule</code> 的任何变化，都可以直接反映在 <code>myProject</code> 项目之中。但是，这样也出现了风险，任何在 <code>myProject</code> 目录中对<code>myModule</code> 的修改，都会反映到模块的源码中</p><p>如果你的项目不再需要该模块，可以在项目目录内使用 <code>npm unlink</code> 命令，删除符号链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/myProject$ npm unlink myModule</span><br></pre></td></tr></table></figure><h2 id="npm-bin"><code>npm bin</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示相对于当前目录的，Node模块的可执行脚本所在的目录（即.bin目录）</span></span><br><span class="line">/User/qx/node_modules/.bin</span><br></pre></td></tr></table></figure><h2 id="npm-adduser"><code>npm adduser</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br><span class="line"></span><br><span class="line">Username: Username</span><br><span class="line">Password: Password</span><br><span class="line">Email: Email</span><br></pre></td></tr></table></figure><h2 id="npm-publish"><code>npm publish</code></h2><p><code>npm publish</code> 用于将当前模块发布到 <code>npm</code> 中，执行之前需要向 <code>npm</code> 申请用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 申请用户名</span></span><br><span class="line">npm adduser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前模块是一个 beta 版本，比如 1.3.1-beta.3 那么发布的时候 需要使用 tag 参数，将其发布到指定标签，默认的发布标签是 @latest</span></span><br><span class="line"></span><br><span class="line">npm publish --tag beta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布私有模块，模块初始化的时候，需要加上 scope 参数，只有 npm 的付费用户才能发布私有模块</span></span><br><span class="line">npm init --scope=&lt;yourscope&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果模块是 es6 语法，那么发布的时候，最好转成 es5 首先 需要安装Babel</span></span><br><span class="line">npm i babel-cli@6 babel-preset-es2015@6 -D</span><br></pre></td></tr></table></figure><p>然后在 package.json 里写入 build 脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;babel source --presets babel-preset-es2015 --out-dir distribution&quot;,</span><br><span class="line">    &quot;prepublish&quot;: &quot;npm run build&quot; // publish 之前打包</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的脚本，会将 <code>source</code> 目录中的 <code>es6</code> 源码文件，转为 <code>distribution</code> 目录里面的 <code>es5</code> 文件，然后创建 <code>.npmignore</code> 和 <code>.gitignore</code> ，分别写入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .npmignore</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .gitignore</span></span><br><span class="line">node_modules</span><br><span class="line">distribution</span><br></pre></td></tr></table></figure><h2 id="npm-deprecate"><code>npm deprecate</code></h2><p>如果想要废弃某个版本的模块，使用 <code>npm deprecate</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm deprecate my-thing@<span class="string">&quot;&lt; 0.2.3&quot;</span> <span class="string">&quot;critical bug fixed in v0.2.3&quot;</span></span><br></pre></td></tr></table></figure><p>运行上面的命令以后，小于 <code>0.2.3</code> 版本的模块的 <code>package.json</code> 都会写入一行警告，用户安装这些版本时，这行警告就会在命令行显示</p><h2 id="npm-owner"><code>npm owner</code></h2><ol><li>模块的维护者可以发布新版本，<code>npm owner</code> 命令用于管理模块的维护者</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出指定模块的维护者</span></span><br><span class="line">npm owner ls &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增维护者</span></span><br><span class="line">npm owner add &lt;user&gt; &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除维护者</span></span><br><span class="line">npm owner rm &lt;user&gt; &lt;package name&gt;</span><br></pre></td></tr></table></figure><h2 id="其他命令">其他命令</h2><ol><li><p><code>npm home</code> 打开一个模块的主页</p></li><li><p><code>npm repo</code> 打开一个模块的代码仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm home <span class="variable">$package</span></span><br><span class="line">npm repo <span class="variable">$package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两个命令不需要提前安装模块</span></span><br></pre></td></tr></table></figure></li><li><p><code>npm outdated</code> 检查当前项目所依赖的模块，是否已经有新版本</p><ul><li>它会输出当前版本 <code>current version</code> 应当安装的版本 <code>wanted version</code> 和最新发布的版本 <code>latest version</code></li></ul></li><li><p><code>npm prune</code> 检查当前项目的 <code>node_modules</code> 目录中，是否有 <code>package.json</code> 里面没有提到的模块，然后将所有这些模块输出在命令行</p></li><li><p><code>npm shrinkwrap</code> 锁定当前项目的依赖模块的版本</p><ul><li>运行该命令后，会在当前项目的根目录下生成一个 <code>npm-shrinkwrap.json</code> 文件，内容是<code>node_modules</code> 目录下所有已经安装的模块，以及它们的精确版本</li><li>下次运行 <code>npm install</code> 命令时，<code>npm</code> 发现当前目录下有 <code>npm-shrinkwrap.json</code> 文件，就会只安装里面提到的模块，且版本也会保持一致</li></ul></li></ol><h2 id="git-npm"><code>git / npm</code></h2><p><code>npm</code> 版本号管理的问题</p><ol><li><code>semver</code> 规范，规定了版本号，由 <code>MAJOR</code> <code>MINOR</code> <code>PATCH</code></li><li><code>MAJOR</code> 可能不在兼容老版本</li><li><code>MINOR</code> 新增了一些兼容旧版本的 <code>api</code></li><li><code>PATCH</code> 修复 <code>bug</code></li></ol><p><code>git</code> 的 <code>tag</code> 对应着 <code>npm</code> 的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会自动和git进行关联</span></span><br><span class="line">npm version major minor patch</span><br></pre></td></tr></table></figure><p>版本号的含义</p><ol><li><code>2.2.0</code> 必须是 <code>2.2.0</code></li><li><code>^2.2.0</code> 限定大版本，后面更新只要不超过 <code>2</code> 就可以</li><li><code>~2.2.0</code> 限定前两个版本，后面的版本只要比 <code>0</code> 大就可以</li><li><code>=2.0</code> 大于这个版本</li><li><code>&lt;=2.0</code> 小于等于这个版本</li></ol><p>预发版本</p><ol><li><code>alpha</code> 预览版本，内部测试版</li><li><code>beta</code> 测试版，公开测试版</li><li><code>rc</code> 最终测试版本</li></ol><h2 id="scripts"><code>scripts</code></h2><ol><li>可以配置脚本的命令 快捷键(可以把很长的命令放到 <code>scripts</code> 中)</li><li>执行命令 会将当前的 <code>node_modules</code> 目录下的 <code>.bin</code> 文件夹放到全局中(所以可以直接使用)</li><li><code>npm run start</code> 可以简写为 <code>npm start</code></li></ol><h2 id="npx"><code>npx</code></h2><ol><li><code>npx</code> 和 <code>script</code> 一样可以帮我们直接运行 <code>.bin</code> 目录下的内容</li><li>如果 <code>.bin</code> 目录下存在 会执行对应脚本，如果不存在会下载运行</li></ol><blockquote><p>npx 只是一个临时的使用方案。 npm5.2 之后产生的</p></blockquote><h2 id="源的切换">源的切换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i nrm -g</span><br><span class="line"></span><br><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">nrm use</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写githubcalendar爬虫api</title>
      <link href="700f0d34/"/>
      <url>700f0d34/</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>冰老师的 <code>api</code> 年久失修了，所以重新用 <code>node</code> 写一个 <code>githubcalendar</code> 的爬虫</p><p>可以在冰老师原有的教程修改修改即可使用该 <code>api</code></p></div><div class="tag link"><a class="link-card" title="冰老师教程贴" href="https://zfe.space/post/hexo-githubcalendar.html"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://zfe.space/images/headimage.png"/></div><div class="right"><p class="text">冰老师教程贴</p><p class="url">https://zfe.space/post/hexo-githubcalendar.html</p></div></a></div><div class="tabs" id="github"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#github-1">fork仓库方式</button></li><li class="tab"><button type="button" data-href="#github-2">源码方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="github-1"><p><code>fork</code> 如下仓库</p><div class="tag link"><a class="link-card" title="仓库" href="https://github.com/milkdue/github-contribute"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/avatar/69843097.jpg"/></div><div class="right"><p class="text">仓库</p><p class="url">https://github.com/milkdue/github-contribute</p></div></a></div><p>修改 <code>vercel.json</code>，替换 <code>headers</code> 的跨域设置为自己的域名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;https://blog.keyiqingxin.cn&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;content-type&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='nota' data-nota='vercel部署现在需要绑定自己的域名'>vercel</span> 部署此 <code>api</code></p><p>网页访问：vercel访问域名/api?name=github名字</p><p>接下来就是替换 <code>api</code> 了，可以看到该 <code>api</code> 和 冰老师提供的 <code>api</code> 有所差异，所以使用的话，需要修改一下 <code>npm包中的内容</code><br>1. 首先得安装 <code>hexo-githubcalendar</code> 插件包 <code>npm i hexo-githubcalendar</code><br>2. 在 <code>node_modules</code> 中找到该包，修改以下代码</p><pre><code>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GithubCalendarConfig</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">-    <span class="keyword">var</span> git_githubapiurl =<span class="string">&quot;$&#123;github_api&#125;?$&#123;github_user&#125;&quot;</span></span><br><span class="line">+    <span class="keyword">var</span> git_githubapiurl =<span class="string">&quot;$&#123;github_api&#125;?name=$&#123;github_user&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> git_color =$&#123;github_color&#125;;</span><br><span class="line">    <span class="keyword">var</span> git_user =<span class="string">&quot;$&#123;github_user&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> parent_div_git = $&#123;get_layout&#125;;</span><br><span class="line">    <span class="keyword">var</span> git_div_html = <span class="string">&#x27;$&#123;githubcalendar_html&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(parent_div_git &amp;&amp; location.pathname ==<span class="string">&#x27;$&#123;calendar_enable_page&#125;&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;已挂载github calendar&#x27;</span>)</span><br><span class="line">        <span class="comment">// parent_div_git.innerHTML=git_div_html+parent_div_git.innerHTML // 无报错，但不影响使用(支持pjax跳转)</span></span><br><span class="line">        parent_div_git.insertAdjacentHTML(<span class="string">&quot;afterbegin&quot;</span>,git_div_html) <span class="comment">// 有报错，但不影响使用(支持pjax跳转)</span></span><br><span class="line">    &#125;;</span><br><span class="line">    GithubCalendar(git_githubapiurl,git_color,git_user)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($&#123;get_layout&#125;)&#123;</span><br><span class="line">    GithubCalendarConfig()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github-2"><ol><li><p>初始化 <code>npm</code> 包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cheerio -S</span><br></pre></td></tr></table></figure></li><li><p>目录结构</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─package-lock.json</span><br><span class="line">├─package.json</span><br><span class="line">├─vercel.json</span><br><span class="line">├─api</span><br><span class="line">|  └index.js</span><br></pre></td></tr></table></figure></li><li><p><code>index.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Author: 可以清心</span></span><br><span class="line"><span class="comment">* @Description: </span></span><br><span class="line"><span class="comment">* @Date: 2023-01-21 21:43:31</span></span><br><span class="line"><span class="comment">* @LastEditTime: 2023-01-22 11:26:23</span></span><br><span class="line"><span class="comment">* @FilePath: \github-contribute\api\index.js</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">const</span> NAME = req.query.name;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    https.get(<span class="string">`https://github.com/<span class="subst">$&#123;NAME&#125;</span>`</span>, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">        resp.on(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">            html += chunk;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        resp.on(<span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result = [];</span><br><span class="line">            <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> $ = cheerio.load(html);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            $(<span class="string">&quot;.js-yearly-contributions &gt; .position-relative .js-calendar-graph &gt; .js-calendar-graph-svg &gt; g &gt; g&quot;</span>).each(<span class="function">(<span class="params">index, g</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> item = [];</span><br><span class="line">                $(g).find(<span class="string">&quot;rect&quot;</span>).each(<span class="function">(<span class="params">index, rect</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> $r = $(rect);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">const</span> date = $r.attr(<span class="string">&quot;data-date&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">const</span> text = $r.text();</span><br><span class="line">                    <span class="keyword">let</span> count = <span class="built_in">parseInt</span>(text);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(count))&#123;</span><br><span class="line">                        total += count;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        count = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    item.push(&#123;</span><br><span class="line">                        date,</span><br><span class="line">                        count</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                result.push(item);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">                total,</span><br><span class="line">                contributions: result</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        resp.on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">                code: <span class="number">500</span>,</span><br><span class="line">                message: <span class="string">&quot;请求超时&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vercel.json</p><ul><li>替换为自己的博客域名</li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;https://blog.keyiqingxin.cn&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;content-type&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传至 <code>github</code>，<code>vercel</code> 拉取部署</p></li><li><p>浅浅修改插件 <code>hexo-githubcalendar</code> 的源码（步骤见 <code>tab</code> fork源码方式）</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> vercel </tag>
            
            <tag> node </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react native0.67版本环境搭建</title>
      <link href="5307bd00/"/>
      <url>5307bd00/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>记录 <code>react native</code> 环境搭建过程，<code>rn</code> 迭代速度太快，本文记录 <code>0.67</code> 版本 <code>rn</code> 搭建 <code>android</code> 过程所遇到的坑，本人很多软件卸了再装，装了再卸，😭<br>下方附上 <code>react native</code> 官方文档</p></div><div class="tag link"><a class="link-card" title="react native官方文档" href="https://reactnative.cn/docs/getting-started"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://reactnative.cn/img/header_logo.svg"/></div><div class="right"><p class="text">react native官方文档</p><p class="url">https://reactnative.cn/docs/getting-started</p></div></a></div><h2 id="安装依赖">安装依赖</h2><ol><li><code>node</code>，注意 <code>node</code> 的版本应该大于 <code>12</code> (傻瓜式安装) <div class="btns rounded center grid5">            <a class="button" href='http://nodejs.cn/download' title='node'><i class='fas fa-download'></i>node</a>              </div></li><li><code>jdk</code>，<code>0.67</code> 版本需要的 <code>jdk</code> 版本是 <code>11</code> 版本，查看 <code>jdk</code> 版本 <code>javac -version</code>，低于 <code>0.67</code> 版本的 <code>rn</code> 需要 <code>jdk1.8</code> 版本 (安装后配置环境变量，具体安装教程已经有很多了，这里不多做介绍) <div class="btns rounded center grid5">            <a class="button" href='https://adoptopenjdk.net' title='jdk'><i class='fas fa-download'></i>jdk</a>              </div></li><li>android studio <div class="btns rounded center grid5">            <a class="button" href='https://developer.android.google.cn/studio' title='android studio'><i class='fas fa-download'></i>android studio</a>              </div></li><li>python2(之前需要安装py，建议安装)</li></ol><h2 id="安装-Android-Studio">安装 <code>Android Studio</code></h2><ol><li><code>Android Studio</code> 默认安装最新版本的 <code>sdk</code>，<code>rn</code> 需要 <code>Android 10 (Q)</code>，如果你的真机 <code>android</code> 版本小于 <code>10</code>，你也可以下载其他版本的 <code>sdk</code></li><li>安装以后，打开 <code>android studio</code> 界面中找到 <code>sdk manager</code>(如果没找到也可以到 <code>setting</code> 中搜索 <code>sdk</code> 找到)</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/reactnative/20220318-152727-0866.png" alt="sdk" style="width:600px;"/></div><span class="image-caption">sdk</span></div><ol start="3"><li>点击 <code>SDK Platforms</code>，勾选 <code>Show Package Details</code> 确保选中 <code>Android 10.0(Q)</code> 下的 <code>Android SDK Platform 29</code> 和 <code>Intel x86 Atom_64 System Image</code></li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/reactnative/20220318-153029-0484.png" alt="sdk" style="width:600px;"/></div><span class="image-caption">sdk</span></div><ol start="4"><li>点击 <code>SDK Tools</code> 选项卡，同样勾中右下角的 <code>Show Package Details</code> 展开 <code>Android SDK Build-Tools</code> 选项，确保选中了 <code>React Native</code> 所必须的 <code>29.0.2</code> 版本，你可以同时安装多个其他版本</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/reactnative/20220318-151430-0103.png" alt="sdk" style="width:600px;"/></div><span class="image-caption">sdk</span></div><ol start="5"><li>还是在 <code>SDK Tools</code> 选项卡，点击 <code>NDK (Side by side)</code>，同样勾中右下角的 <code>Show Package Details</code>，选择 <code>20.1.5948944</code> 版本进行安装</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/reactnative/20220318-153631-0153.png" alt="sdk" style="width:600px;"/></div><span class="image-caption">sdk</span></div><ol start="6"><li>点击 <code>Apply</code> 下载安装这些组件</li></ol><h2 id="配置环境变量">配置环境变量</h2><ol><li><code>React Native</code> 需要通过环境变量来知道 <code>Android SDK</code> 装在什么位置，从而正常编译</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/reactnative/20220318-173403-0944.png" alt="sdk安装路径" style="width:600px;"/></div><span class="image-caption">sdk安装路径</span></div><ol start="2"><li>打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 新建，创建一个名为 <code>ANDROID_HOME</code> 的环境变量指向 <code>Android SDK</code> 所在的目录</li><li>添加工具目录到环境变量 <code>path</code>(注意一定要点编辑，否则会冲掉之前的目录)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%ANDROID_HOME%\platform-tools</span><br><span class="line">%ANDROID_HOME%\emulator</span><br><span class="line">%ANDROID_HOME%\tools</span><br><span class="line">%ANDROID_HOME%\tools\bin</span><br></pre></td></tr></table></figure><h2 id="创建项目">创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init MyApp</span><br></pre></td></tr></table></figure><h2 id="连接手机">连接手机</h2><ol><li>打开手机的开发者选项</li><li>打开手机的 <code>usb</code> 调试功能</li><li>检测是否正确连接到设备(每次只应当连接一个设备)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">emulator-5554 offline   # Google emulator</span><br><span class="line">14ed2fcc device         # Physical device</span><br></pre></td></tr></table></figure><h2 id="启动项目">启动项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn android</span><br><span class="line"># 或者</span><br><span class="line">yarn react-native run-android</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> rn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表</title>
      <link href="71c610d3/"/>
      <url>71c610d3/</url>
      
        <content type="html"><![CDATA[<h2 id="单链表概念">单链表概念</h2><div class="tip cogs"><p>单链表是一种链式存取的数据结构，链表里的数据都是以结点来表示，每个结点的构成：数据域和指针域，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据，以结点的序列表示的线性结构叫做链表</p></div><h2 id="结点的定义">结点的定义</h2><p>一个结点包括了数据域和指针域，数据域存储任何类型的数据，指针域指向下一个结点或者 <code>NULL</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *LinkedList;</span><br></pre></td></tr></table></figure><h2 id="创建单链表">创建单链表</h2><h3 id="头插法">头插法</h3><p>顾名思义，把每个结点都插到<kbd>头部</kbd>，但是头插法<u>输出的结点是倒序的</u>，但是由于每个结点都是头结点也就不需要单独的辅助结点来存储头结点信息了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Node, *LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkedList <span class="title">linkedListCreateHead</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化一个头结点</span></span><br><span class="line">    LinkedList head = (LinkedList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;申请失败!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) != EOF)&#123;</span><br><span class="line">        LinkedList p = (LinkedList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(p == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;申请失败!&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        p.data = x;</span><br><span class="line">        p.next = head.next;</span><br><span class="line">        head.next = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="尾插法">尾插法</h3><p>把每个结点插到表尾，但是由于需要返回头节点，所以需要一个辅助结点来依次循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node, *LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinkedList <span class="title">linkedListCreateTail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkedList node = (LinkedList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;申请失败!&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LinkedList temp = node;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) != EOF)&#123;</span><br><span class="line">        LinkedList p = (LinkedList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        <span class="comment">// p-&gt;next = NULL;</span></span><br><span class="line">        temp-&gt;next = p;</span><br><span class="line">        temp = p;  <span class="comment">// temp = temp-&gt;next</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后一个结点结束</span></span><br><span class="line">    temp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS构造器与new操作符</title>
      <link href="787f2ffe/"/>
      <url>787f2ffe/</url>
      
        <content type="html"><![CDATA[<div class="tip "><p><code>{}</code> 语法可以创建一个对象，但是通常我们需要创建一些类似的对象，这个时候通常使用构造函数和 <code>new</code> 操作符来实现</p></div><h2 id="构造函数">构造函数</h2><div class="note purple icon flat"><i class="note-icon fa fa-thermometer-full"></i><p>构造函数也是常规函数，但是约定构造函数以大写字母开头，并且只能通过 <code>new</code> 关键字来执行</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, age, six</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 隐藏的操作</span></span><br><span class="line">    <span class="comment">// let this = &#123;&#125;;</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.six = six;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;吃吃吃&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏的操作</span></span><br><span class="line">    <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dog.prototype.color = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">Dog.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;苏西&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;雄性&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 苏西</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.age); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.six); <span class="comment">// 雄性</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.color); <span class="comment">// white</span></span><br><span class="line">dog.say(); <span class="comment">// 苏西</span></span><br></pre></td></tr></table></figure><h2 id="new-操作符">new 操作符</h2><ol><li>当一个函数使用 <code>new</code> 操作符创建对象时，相当于以下几个操作<ul><li>创建一个空对象并分配给 <code>this</code></li><li>函数体执行</li><li>返回 <code>this</code></li></ul></li><li>构造函数的目的在于实现对一类事物的创建复用代码</li></ol><h2 id="构造器的-return">构造器的 return</h2><ol><li>通常来说，构造器没有 <code>return</code> 语句，构造器自动将属性写入 <code>this</code> 并作为结果返回</li><li>如果一个构造器有 <code>return</code> 语句，它将遵循以下规则<ul><li><code>return</code> 一个对象，则返回这个对象</li><li><code>return</code> 一个原始类型，忽略掉并返回 <code>this</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;苏西&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog;</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 佩奇</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;苏西&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat;</span><br><span class="line"><span class="built_in">console</span>.log(cat.name); <span class="comment">// 苏西</span></span><br></pre></td></tr></table></figure><div class="tip "><p>构造器没有参数，可以省略其括号，<code>new Dog()</code> 等价于 <code>new Dog</code></p></div><h2 id="手动实现-new-构造符">手动实现 new 构造符</h2><div class="tabs" id="new"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#new-1">初步实现</button></li><li class="tab"><button type="button" data-href="#new-2">进阶实现</button></li><li class="tab"><button type="button" data-href="#new-3">最终版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="new-1"><ol><li>创建对象</li><li>对象原型指向构造函数原型</li><li>执行函数</li><li>返回该对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> object = &#123;&#125;;</span><br><span class="line">    <span class="comment">// arguments不是数组，类数组对象，但可以使用并且shift改变原类数组对象，剔除掉第一个参数（函数）</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title">constructor</span> = [].<span class="title">shift</span>.<span class="title">call</span>(<span class="params"><span class="built_in">arguments</span></span>);</span><br><span class="line">    <span class="comment">// 只有函数拥有prototype, 所有对象拥有__proto__</span></span><br><span class="line">    object.__proto__ = consturct.prototype;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">apply</span>(<span class="params">object, <span class="built_in">arguments</span></span>);</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="new-2"><ol><li>创建对象</li><li>对象原型指向构造函数原型</li><li>执行函数</li><li>判断返回值是否为对象</li><li>是返回该返回值，否返回该对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> object = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="title">constructor</span> = [].<span class="title">shift</span>.<span class="title">call</span>(<span class="params"><span class="built_in">arguments</span></span>);</span><br><span class="line">    object.__proto__ = <span class="title">constructor</span>.<span class="title">prototype</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title">constructor</span>.<span class="title">apply</span>(<span class="params">object, <span class="built_in">arguments</span></span>);</span><br><span class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// result是对象并且不是null</span></span><br><span class="line">    <span class="keyword">return</span> (type === <span class="string">&#x27;object&#x27;</span> || type === <span class="string">&#x27;function&#x27;</span>) &amp;&amp; result ? result : object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="new-3"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">F, ...args</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 指定原型创建对象</span></span><br><span class="line">    <span class="keyword">let</span> object = <span class="built_in">Object</span>.create(F.prototype);</span><br><span class="line">    <span class="keyword">let</span> result = F.apply(object, args);</span><br><span class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result &amp;&amp; (type === <span class="string">&#x27;object&#x27;</span> || type === <span class="string">&#x27;function&#x27;</span>) ? result : object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">F: () =&gt; <span class="built_in">any</span>, ...args: <span class="built_in">any</span></span>): <span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">object</span>: <span class="built_in">any</span> = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">any</span> = F.apply(<span class="built_in">object</span>, args);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">type</span>: <span class="built_in">string</span> = <span class="keyword">typeof</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result &amp;&amp; (<span class="keyword">type</span> === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">type</span> === <span class="string">&#x27;function&#x27;</span>) ? result : <span class="built_in">object</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="构造器模式检测">构造器模式检测</h2><div class="note blue icon disabled"><i class="note-icon fa fa-tree"></i><p>在一个函数内部可以使用 <code>new.target</code> 属性来检测是否使用 <code>new</code> 操作符进行了调用，对于使用了 <code>new</code> 关键字，该属性是该函数，否则为 <code>undefined</code></p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Dog(); <span class="comment">// function Dog()&#123;...&#125;</span></span><br><span class="line">Dog(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><div class="note default icon flat"><i class="note-icon fa fa-bicycle"></i><p>可以使用 <code>new.target</code> 使常规模式调用函数和使用 <code>new</code> 操作符有相同的行为</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">new</span>.target)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">new</span>.target)&#123;</span><br><span class="line">        <span class="comment">// arguments.callee() 调用函数本身</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">arguments</span>.callee(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js类型转换</title>
      <link href="92aca09d/"/>
      <url>92aca09d/</url>
      
        <content type="html"><![CDATA[<h2 id="类型转换">类型转换</h2><div class="tip "><p>大多数情况下，运算符和函数会自动将赋给它们的值转换为正确的类型<br>比如，<code>alert</code> 自动将值转换为字符串进行显示<br>在特殊情况下，我们需要将值显式的转换为所期望的类型</p></div><h2 id="字符串转换">字符串转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">14</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">String</span>(num); <span class="comment">// 14 - 字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><div class="note purple icon flat"><i class="note-icon fa fa-thermometer-full"></i><p>字符串的转换非常明显，false -&gt; ‘false’ null -&gt; ‘null’</p></div><h2 id="数字类型转换">数字类型转换</h2><p>在算术表达式中，会自动进行 <code>number</code> 类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span> / <span class="string">&#x27;2&#x27;</span>); <span class="comment">// 3 string -&gt; number</span></span><br><span class="line"><span class="comment">// 当然特殊的 + 法时表达式中有字符串是不会转换的</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;33&quot;</span> + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 332</span></span><br></pre></td></tr></table></figure><p>在 <code>js</code> 中可以使用 <code>Number(value)</code> 显式的将这个 <code>value</code> 转换为 <code>number</code> 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;32&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> string); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Number</span>(string);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果字符串不是一个有效的数字，转换结果是 NaN，注意 NaN 的类型也是 number，仅仅表示不是一个有效的数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span>); <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>number转换的规则</p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">规则</th></tr></thead><tbody><tr><td style="text-align:center"><code>undefined</code></td><td style="text-align:center"><code>NaN</code></td></tr><tr><td style="text-align:center"><code>null</code></td><td style="text-align:center"><code>0</code></td></tr><tr><td style="text-align:center"><code>true</code>和<code>false</code></td><td style="text-align:center"><code>1</code> and <code>0</code></td></tr><tr><td style="text-align:center"><code>string</code></td><td style="text-align:center">去掉首尾空格后的纯数字字符串中含有数字，如果剩余字符串为空，则转换结果为<code>0</code>，否则，将会聪剩余字符串中读取数字，类型转换出现错误后，返回 <code>NaN</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&quot;            000&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&quot;11111111111*&quot;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>)); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意虽然 null == undefined 但是 Number(undefined) = NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="布尔类型转换">布尔类型转换</h2><p>布尔类型转换通过 <code>Boolean()</code> 将其他类型转换为布尔类型，布尔类型转换规则如下：</p><ol><li><code>null</code>、<code>undefined</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>NaN</code>，转换为 <code>false</code></li><li>其他转换为 <code>true</code></li><li>注意 <code>&quot;0&quot;</code> 和 <code>&quot; &quot;</code> 也转换为 <code>true</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly分类页面魔改</title>
      <link href="679887a0/"/>
      <url>679887a0/</url>
      
        <content type="html"><![CDATA[<div class="tip "><p>觉得分类页面不是很好看，打算魔改一下分页页面，恰好店长有写过首页分类的磁贴插件，于是打算利用店长的<span class='nota' data-nota='当然也可以使用其他的配置'>插件中的配置</span>来进行魔改一番(具体效果可查看分类页面)，下面记录一下魔改步骤~</p></div><h2 id="修改源码">修改源码</h2><ol><li><p>修改 <code>[Blogroot]\themes\butterfly\layout\includes\page\categories.pug</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.category-lists</span><br><span class="line">- .category-title.is-center&#x3D; _p(&#39;page.category&#39;)</span><br><span class="line">-   |  - </span><br><span class="line">-   span.category-amount&#x3D; site.categories.length</span><br><span class="line">- div!&#x3D; list_categories()</span><br><span class="line">  div!&#x3D; list_category()</span><br></pre></td></tr></table></figure></li><li><p>新建 <code>[Blogroot]\themes\butterfly\scripts\helpers\category.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line">hexo.extend.helper.register(<span class="string">&#x27;list_category&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">categories, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!options &amp;&amp; (!categories || !<span class="built_in">Object</span>.prototype.hasOwnProperty.call(categories, <span class="string">&#x27;length&#x27;</span>))) &#123;</span><br><span class="line">        options = categories;</span><br><span class="line">        categories = <span class="built_in">this</span>.site.categories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!categories || !categories.length) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; style = <span class="string">&#x27;list&#x27;</span>, transform, separator = <span class="string">&#x27;, &#x27;</span>, suffix = <span class="string">&#x27;&#x27;</span> &#125; = options;</span><br><span class="line">    <span class="keyword">const</span> showCount = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(options, <span class="string">&#x27;show_count&#x27;</span>) ? options.show_count : <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> className = options.class || <span class="string">&#x27;category&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> depth = options.depth ? <span class="built_in">parseInt</span>(options.depth, <span class="number">10</span>) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> orderby = options.orderby || <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> order = options.order || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> showCurrent = options.show_current || <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> childrenIndicator = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(options, <span class="string">&#x27;children_indicator&#x27;</span>) ? options.children_indicator : <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> enable = <span class="literal">false</span>, cover = [], descr = [];</span><br><span class="line">    <span class="keyword">let</span> categoryConfig = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(hexo.theme.config.categoryBar)&#123;</span><br><span class="line">        categoryConfig = hexo.theme.config.categoryBar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hexo.theme.config.category)&#123;</span><br><span class="line">        categoryConfig = hexo.theme.config.category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enable = categoryConfig.enable;</span><br><span class="line">    cover = categoryConfig.cover;</span><br><span class="line">    descr = categoryConfig.descr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> prepareQuery = <span class="function"><span class="params">parent</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> query = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">            query.parent = parent;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            query.parent = &#123;<span class="attr">$exists</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> categories.find(query).sort(orderby, order).filter(<span class="function"><span class="params">cat</span> =&gt;</span> cat.length);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hierarchicalList = <span class="function">(<span class="params">level, parent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        prepareQuery(parent).forEach(<span class="function">(<span class="params">cat, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> child;</span><br><span class="line">            <span class="keyword">if</span> (!depth || level + <span class="number">1</span> &lt; depth) &#123;</span><br><span class="line">                child = hierarchicalList(level + <span class="number">1</span>, cat._id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> isCurrent = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (showCurrent &amp;&amp; <span class="built_in">this</span>.page) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cat.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">const</span> post = cat.posts.data[j];</span><br><span class="line">                    <span class="keyword">if</span> (post &amp;&amp; post._id === <span class="built_in">this</span>.page._id) &#123;</span><br><span class="line">                        isCurrent = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// special case: category page</span></span><br><span class="line">                isCurrent = isCurrent || (<span class="built_in">this</span>.page.base &amp;&amp; <span class="built_in">this</span>.page.base.startsWith(cat.path));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> additionalClassName = child &amp;&amp; childrenIndicator ? <span class="string">` <span class="subst">$&#123;childrenIndicator&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">`&lt;li class=&quot;<span class="subst">$&#123;className&#125;</span>-list-item<span class="subst">$&#123;additionalClassName&#125;</span>&quot;&gt;`</span>;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">`&lt;a class=&quot;<span class="subst">$&#123;className&#125;</span>-list-link<span class="subst">$&#123;isCurrent ? <span class="string">&#x27; current&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>&quot; href=&quot;/<span class="subst">$&#123;cat.path&#125;</span><span class="subst">$&#123;suffix&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">            result += transform ? transform(cat.name) : cat.name;</span><br><span class="line">            result += <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (showCount) &#123;</span><br><span class="line">                result += <span class="string">`&lt;span class=&quot;<span class="subst">$&#123;className&#125;</span>-list-count&quot;&gt;<span class="subst">$&#123;cat.length&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (child) &#123;</span><br><span class="line">                result += <span class="string">`&lt;ul class=&quot;<span class="subst">$&#123;className&#125;</span>-list-child&quot;&gt;<span class="subst">$&#123;child&#125;</span>&lt;/ul&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> flatList = <span class="function">(<span class="params">level, parent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        prepareQuery(parent).forEach(<span class="function">(<span class="params">cat, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i || level) result += separator;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">`&lt;a class=&quot;<span class="subst">$&#123;className&#125;</span>-link&quot; href=&quot;/<span class="subst">$&#123;cat.path&#125;</span><span class="subst">$&#123;suffix&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">            result += transform ? transform(cat.name) : cat.name;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (showCount) &#123;</span><br><span class="line">                result += <span class="string">`&lt;span class=&quot;<span class="subst">$&#123;className&#125;</span>-count&quot;&gt;<span class="subst">$&#123;cat.length&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!depth || level + <span class="number">1</span> &lt; depth) &#123;</span><br><span class="line">                result += flatList(level + <span class="number">1</span>, cat._id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> barList = <span class="function">(<span class="params">level, parent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> picture = cover.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item.slice(<span class="number">5</span>, -<span class="number">2</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        prepareQuery(parent).forEach(<span class="function">(<span class="params">cat, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i || level) result += separator;</span><br><span class="line">            </span><br><span class="line">            result += <span class="string">&#x27;&lt;figure class=&quot;effect-apollo&quot;&gt;&#x27;</span>;</span><br><span class="line">            result += <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;picture[i]&#125;</span>&quot; alt=&quot;<span class="subst">$&#123;descr[i]&#125;</span>&quot;&gt;&lt;figcaption&gt;`</span>;</span><br><span class="line">            result += <span class="string">&#x27;&lt;h3&gt;&#x27;</span>;</span><br><span class="line">            result += transform ? transform(cat.name) : cat.name;</span><br><span class="line">            result += <span class="string">&#x27;&lt;/h3&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (showCount) &#123;</span><br><span class="line">                result += <span class="string">`&lt;p&gt;<span class="subst">$&#123;cat.length&#125;</span>&lt;/p&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result += <span class="string">`&lt;a class=&quot;<span class="subst">$&#123;className&#125;</span>-list-link&quot; href=&quot;/<span class="subst">$&#123;cat.path&#125;</span><span class="subst">$&#123;suffix&#125;</span>&quot;&gt;<span class="subst">$&#123;cat.name&#125;</span>&lt;/a&gt;`</span>;</span><br><span class="line">            result += <span class="string">&#x27;&lt;/figcaption&gt;&lt;/figure&gt;&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(enable)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;category_card_wrap&quot;&gt;<span class="subst">$&#123;barList(<span class="number">0</span>)&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (style === <span class="string">&#x27;list&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;ul class=&quot;<span class="subst">$&#123;className&#125;</span>-list&quot;&gt;<span class="subst">$&#123;hierarchicalList(<span class="number">0</span>)&#125;</span>&lt;/ul&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flatList(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>新建 <code>[Blogroot\themes\butterfly\source\css\costom.css]</code></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.category_card_wrap</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">1%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">4px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: opacity <span class="number">0.35s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.35s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition-delay</span>: <span class="number">0.1s</span>;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">8em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25em</span>;</span><br><span class="line">    -webkit-<span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>: -<span class="number">0.15em</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.95</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: opacity <span class="number">0.35s</span>, -webkit-transform <span class="number">0.35s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">0.35s</span>, transform <span class="number">0.35s</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.05</span>,<span class="number">1.05</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.05</span>,<span class="number">1.05</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span> <span class="selector-tag">figcaption</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: -webkit-transform <span class="number">0.6s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.6s</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.9</span>,<span class="number">1.4</span>,<span class="number">1</span>) <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,-<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.9</span>,<span class="number">1.4</span>,<span class="number">1</span>) <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,-<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">figcaption</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.9</span>,<span class="number">1.4</span>,<span class="number">1</span>) <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.9</span>,<span class="number">1.4</span>,<span class="number">1</span>) <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>_config.butterfly.yml.yml</code> 的 <code>inject</code> 中引用 <code>css</code></p></li><li><p>如果使用店长的插件，不需要做任何配置即可在分类页面中看到不一样的分类，如果没有使用店长的插件，可以在 <code>_config.butterfly.yml.yml</code> 配置以下内容</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">category:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 控制分类魔改是否开启，false，表示使用原分类样式</span></span><br><span class="line">  <span class="attr">descr:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">作品集</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">听力练习</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">学习&amp;教程</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="comment"># 分类图片</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">url(&#x27;https://cdn.jsdelivr.net/gh/milkdue/cdn@2.9/img/girl2.jpg&#x27;)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">url(&#x27;https://cdn.jsdelivr.net/gh/milkdue/cdn@2.9/img/three.jpg&#x27;)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">url(&#x27;https://cdn.jsdelivr.net/gh/milkdue/cdn@3.0/img/four1.jpg&#x27;)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网格布局</title>
      <link href="df8718c1/"/>
      <url>df8718c1/</url>
      
        <content type="html"><![CDATA[<h2 id="网格布局-grid">网格布局(<code>grid</code>)</h2><div class="tip home"><p>网格布局是一套二维页面布局系统，以下内容来自<a href="http://topic.42du.cn/grid">学习css网格布局</a></p></div><h2 id="启用网格">启用网格</h2><p><code>display</code> 属性设为 <code>grid</code> 或 <code>inline-grid</code> 就创建了一个网格容器，容器的所有<u>直接子节点</u>自动成为网格项目</p><ol><li><code>display: grid</code> 网格项目按行排列，网格项目占用整个容器的宽度</li><li><code>display: inline-grid</code> 网格项目宽度由自身宽度决定</li><li><code>display: subgrid</code> 继承其父级网格容器的行列大小，它是其父级网格容器的一个网格项目</li></ol><iframe id="cp_embed_abwzgaL" src="//codepen.io/milkdue/embed/abwzgaL?height=350&theme-id=dark&slug-hash=abwzgaL&default-tab=result&editable=true" scrolling="no" frameborder="no" height="350" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><div class="tip "><p><code>column、float、clear</code> 和 <code>vertical-align</code> 对网格容器没有效果</p></div><h2 id="网格容器的一些属性">网格容器的一些属性</h2><h3 id="grid-template-columns-和-grid-template-rows"><code>grid-template-columns</code> 和 <code>grid-template-rows</code></h3><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>属性 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 用来显式定义网格，分为行轨道和列轨道</p></div><p><code>grid-template-rows</code> 定义行尺寸，即轨道尺寸，轨道尺寸可以是任何非负的长度值(<code>px、%、em</code> 等)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网格布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .container&#123;</span><br><span class="line"><span class="css">            <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">            grid-template-rows: <span class="number">50px</span> <span class="number">100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .item &#123;</span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: .<span class="number">2rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: .<span class="number">8em</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">min-height</span>: <span class="number">3rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: .<span class="number">75rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#f0f0f3</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#e91e63</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: -apple-system,BlinkMacSystemFont,.SFNSDisplay-Regular,Roboto,Helvetica,Arial,sans-serif;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网格项目1的轨道是50px --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网格项目2的轨道是100px --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网格项目3和4的轨道取决于本身的高度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-093540-0990.jpg" alt="轨道尺寸"/></div><span class="image-caption">轨道尺寸</span></div><p><code>grid-template-columns</code> 用于定义列的尺寸，例如 <code>grid-template-columns: 1fr 1fr 2fr;</code> <code>fr</code> 表示按比列划分空间，前两列宽度相同，是最后一列宽度的一半，<code>fr</code> 可以和其它单位混用，混用时，<code>fr</code> 的计算基于其它单位分配后的剩余空间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">3rem</span> <span class="number">25%</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-103214-0410.jpg" alt="fr和其它尺寸混用"/></div><span class="image-caption">fr和其它尺寸混用</span></div><iframe id="cp_embed_abwzeqQ" src="//codepen.io/milkdue/embed/abwzeqQ?height=300&theme-id=dark&slug-hash=abwzeqQ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="轨道最小最大尺寸设置">轨道最小最大尺寸设置</h3><p>函数 <code>minmax()</code> 用来定义轨道最小/最大边界值，<code>minmax</code> 接收两个参数，第一个参数表示最小轨道尺寸，第二个参数表示最大轨道尺寸，长度值可以是 <code>auto</code>，表示轨道尺寸可以根据内容大小进行伸长或收缩</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="comment">/* 轨道最小100px，即最小100px */</span></span><br><span class="line">    grid-template-rows: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span><br><span class="line">    <span class="comment">/* 第一列轨道最大50%，不能超过整个容器的50% */</span></span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">minmax</span>(auto, <span class="number">50%</span>) <span class="number">1</span>fr <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-100621-0030.jpg" alt="轨道最小最大尺寸设置"/></div><span class="image-caption">轨道最小最大尺寸设置</span></div><h3 id="重复的网格轨道">重复的网格轨道</h3><p>使用函数 <code>repeat()</code> 用来定义重复的网格轨道，特别是有多个相同轨道的项目，函数 <code>repeat</code> 接收两个参数：第一个参数表示重复的次数，第二个参数表示轨道尺寸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">100px</span>);</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-103322-0051.jpg" alt="repeat函数"/></div><span class="image-caption">repeat函数</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">30px</span> <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr) <span class="number">30px</span>;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-100529-0701.jpg" alt="repeat函数"/></div><span class="image-caption">repeat函数</span></div><h3 id="定义网格间隙">定义网格间隙</h3><p>属性 <code>grid-column-gap</code> 和 <code>grid-row-gap</code> 定义网格间隙，网格间隙只创建在行列之间，项目和边界之间无间隙，间隙尺寸可以是任何非负的长度值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-row-gap: <span class="number">20px</span>;</span><br><span class="line">    grid-<span class="attribute">column-gap</span>: <span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-105639-0516.jpg" alt="网格间隙"/></div><span class="image-caption">网格间隙</span></div><p>属性 <code>grid-gap</code> 是 <code>grid-row-gap</code> 和 <code>grid-column-gap</code> 的简写形式，第一个值表示行间隙，第二个值表示列间隙，如果只给定一个值，即表示行间隙也表示列间隙</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-gap: <span class="number">100px</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-130830-0383.jpg" alt="网格间隙"/></div><span class="image-caption">网格间隙</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-gap: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-135632-0660.jpg" alt="网格间隙"/></div><span class="image-caption">网格间隙</span></div><h3 id="网格线命名">网格线命名</h3><p>当利用属性 <code>grid-template-rows</code> 和 <code>grid-template-columns</code> 定义网格的时候，可以同时定义网格线的名称，网格线名称可以用来定位网格项目</p><p>为避免混淆，网格线名称应避免使用规范中的关键字(<code>span</code> 等)</p><p>定义网格线名称的方法是要将其放在中括号内([name-of-line])，并和网格轨道相对应</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: [row-<span class="number">1</span>-start] <span class="number">1</span>fr [row-<span class="number">2</span>-start] <span class="number">1</span>fr [row-<span class="number">2</span>-end];</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: [col-<span class="number">1</span>-start] <span class="number">1</span>fr [col-<span class="number">2</span>-start] <span class="number">1</span>fr [col-<span class="number">3</span>-start] <span class="number">1</span>fr [col-<span class="number">3</span>-end];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-141230-0693.jpg" alt="网格线命名"/></div><span class="image-caption">网格线命名</span></div><p>可以给同一网格线定义多个名称，方法就是在中括号内用空格将多个名称分开，每个网格线名都可以被引用，以用来定位网格项目</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: [row-start row-<span class="number">1</span>-start] <span class="number">1</span>fr [row-<span class="number">1</span>-end row-<span class="number">2</span>-start] <span class="number">1</span>fr [row-<span class="number">2</span>-end row-end];</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: [col-start] <span class="number">1</span>fr [col-<span class="number">2</span>-start] <span class="number">1</span>fr [col-<span class="number">3</span>-start] <span class="number">1</span>fr [col-end]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-153610-0713.jpg" alt="网格线给定多个名称"/></div><span class="image-caption">网格线给定多个名称</span></div><p>函数 <code>repeat()</code> 可以定义同名网格线，多个网格线拥有同样的名字，同名的网格线会被分配一个位置编号，作为其唯一标识</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, [row-start] <span class="number">1</span>fr [row-end]);</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, [col-start] <span class="number">1</span>fr [col-end]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-164317-0267.jpg" alt="重复同名网格线"/></div><span class="image-caption">重复同名网格线</span></div><h3 id="用网格区域命名">用网格区域命名</h3><p>一组区域名称要放在单引号或双引号内，每一个名称之间以空格分割，每一组名称定义一行，每一个名称定义一列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-areas: <span class="string">&quot;header header&quot;</span></span><br><span class="line">                        <span class="string">&quot;content sidebar&quot;</span></span><br><span class="line">                        <span class="string">&quot;footer footer&quot;</span>;</span><br><span class="line">    grid-template-rows: <span class="number">150px</span> <span class="number">1</span>fr <span class="number">100px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-093424-0291.jpg" alt="网格区域命名"/></div><span class="image-caption">网格区域命名</span></div><h2 id="网格项目上的一些属性">网格项目上的一些属性</h2><h3 id="用网格线编号定位项目">用网格线编号定位项目</h3><p>网格线本质上是用来表示网格轨道的开始和结束，每条网格线编号都以1开始，以1为步长向前编号，其中包括行列两组网格线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row-start: <span class="number">2</span>;</span><br><span class="line">    grid-row-end: <span class="number">3</span>;</span><br><span class="line">    grid-column-start: <span class="number">2</span></span><br><span class="line">    grid-column-end: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-131939-0246.jpg" alt="网格项目定位"/></div><span class="image-caption">网格项目定位</span></div><p>属性 <code>grid-row</code> 是 <code>grid-row-start</code> 和 <code>grid-row-end</code> 的简写形式</p><p>属性 <code>grid-column</code> 是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的简写形式</p><p>如果只指定一个值，它表示 <code>grid-row-start</code> 或 <code>grid-column-start</code></p><p>如果两个值都指定，第一个表示 <code>grid-row-start</code> 或 <code>grid-column-start</code> 第二个值表示 <code>grid-row-end</code> 或 <code>grid-column-end</code>，而且它们之间<span class='p cyan'>必须使用 / 隔开</span></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row: <span class="number">2</span>;</span><br><span class="line">    grid-column: <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-133054-0380.jpg" alt="网格项目定位"/></div><span class="image-caption">网格项目定位</span></div><p>属性 <code>grid-area</code> 是 <code>grid-column-start</code>、<code>grid-column-end</code>、<code>grid-row-start</code> 和 <code>grid-row-end</code> 的简写形式</p><p>如果四个值都指定，第一个表示 <code>grid-row-start</code>，第二个表示 <code>grid-column-start</code>，第三个表示 <code>grid-row-end</code>，第四个表示 <code>grid-column-end</code>，同样的它们之间需要使用 <code>/</code> 进行分割</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-area: <span class="number">2</span> / <span class="number">2</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-131958-0951.jpg" alt="网格项目定位"/></div><span class="image-caption">网格项目定位</span></div><h3 id="网格项目跨越行列">网格项目跨越行列</h3><p>网格项目默认都占用一行和一列，但可以使用定位项目的属性来指定项目跨越多行多列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-column-start: <span class="number">1</span>;</span><br><span class="line">    grid-column-end: <span class="number">4</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-143601-0492.jpg" alt="网格项目跨列"/></div><span class="image-caption">网格项目跨列</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row-start: <span class="number">1</span>;</span><br><span class="line">    grid-row-end: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-141203-0715.jpg" alt="网格项目跨行"/></div><span class="image-caption">网格项目跨行</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row: <span class="number">2</span> / <span class="number">5</span>;</span><br><span class="line">    grid-column: <span class="number">2</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-142004-0055.jpg" alt="网格项目跨行跨列"/></div><span class="image-caption">网格项目跨行跨列</span></div><p>关键字span可以指定跨越行和列的数量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row: <span class="number">2</span> / span <span class="number">3</span>;</span><br><span class="line">    grid-column: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-142707-0782.jpg" alt="span指定跨越行和列的数量"/></div><span class="image-caption">span指定跨越行和列的数量</span></div><h3 id="用网格线名称定义项目">用网格线名称定义项目</h3><p>利用命名的网格线来进行网格项目定位，注意：<emp>引用网格线名称不用加中括号</emp></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row-start: row-<span class="number">2</span>-start;</span><br><span class="line">    grid-row-end: row-end;</span><br><span class="line">    grid-column-start: col-<span class="number">2</span>-start;</span><br><span class="line">    grid-column-end: col-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210827-154721-0228.jpg" alt="网格名称进行项目定位"/></div><span class="image-caption">网格名称进行项目定位</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row: row-start <span class="number">2</span> / row-end <span class="number">3</span>;</span><br><span class="line">    grid-column: col-start / col-start <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用同名网格线来定位项目时，应注意在网格线名称和编号之间有<u>一个空格</u></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-080956-0095.jpg" alt="同名网格线定位项目"/></div><span class="image-caption">同名网格线定位项目</span></div><h3 id="使用网格区域定位项目">使用网格区域定位项目</h3><p>网格区域名称可以用在属性 <code>grid-row-start</code>、<code>grid-row-end</code>、<code>grid-column-start</code> 和 <code>grid-column-end</code> 的值中，用来定位项目</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">    grid-row-start: header;</span><br><span class="line">    grid-row-end: header;</span><br><span class="line">    grid-column-start: header;</span><br><span class="line">    grid-column-end: header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-092729-0402.jpg" alt="网格区域名称定位项目"/></div><span class="image-caption">网格区域名称定位项目</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">    grid-row: footer;</span><br><span class="line">    grid-column: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-095729-0098.jpg" alt="网格区域名称定位项目"/></div><span class="image-caption">网格区域名称定位项目</span></div><p>网格区域名称也可以用于简写属性 <code>grid-area</code> 的值中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">aside</span>&#123;</span><br><span class="line">    grid-area: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-094631-0368.jpg" alt="网格区域名称简写"/></div><span class="image-caption">网格区域名称简写</span></div><h2 id="隐式网络">隐式网络</h2><p>隐式网络用来在显式网格之外定位项目，有时在显示网格中没有足够的空间，或者要在显式网格之外定位项目就要用到隐式网格，这时可以把这些项目放置在隐式网格中</p><p>隐式网格可以通过属性 <code>grid-auto-rows</code>、<code>grid-auto-columns</code> 和 <code>grid-auto-flow</code> 来定义</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="number">70px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">    grid-<span class="attribute">auto</span>-rows: <span class="number">140px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面 <code>css</code> 只定义了一个行轨道，项目 <code>1</code> 和 <code>2</code>高 <code>70px</code>，第二行轨道由隐式网格自动创建并为项目 <code>3</code> 和 <code>4</code> 分配了空间，属性 <code>grid-auto-rows</code> 定义了隐式网格的行轨道尺寸，即项目 <code>3</code> 和 <code>4</code> 的高度是 <code>140px</code></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-093849-0064.jpg" alt="网格区域名称简写"/></div><span class="image-caption">网格区域名称简写</span></div><p>缺省的网络布局方向是行的方向(<code>row</code>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-<span class="attribute">auto</span>-flow: row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-104107-0340.jpg" alt="隐形网格"/></div><span class="image-caption">隐形网格</span></div><p>缺省的网格布局方向是定义为列的方向(column)</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-102715-0413.jpg" alt="隐形网格"/></div><span class="image-caption">隐形网格</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">30px</span> <span class="number">60px</span>;</span><br><span class="line">    grid-<span class="attribute">auto</span>-flow: column;</span><br><span class="line">    grid-<span class="attribute">auto</span>-<span class="attribute">columns</span>: <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中只定义了两个列轨道尺寸 <code>30px</code> 和 <code>60px</code></p><p>隐式网格中自动创建了其他列并给项目 <code>3</code>、<code>4</code>、<code>5</code> 分配空间，分配的尺寸通过 <code>grid-auto-columns</code> 定义</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-102222-0693.jpg" alt="隐形网格"/></div><span class="image-caption">隐形网格</span></div><h2 id="隐式命名的网格区域">隐式命名的网格区域</h2><p>网格线名称可以任意指定，但分配以 <code>-start</code> 和 <code>-end</code> 结尾的名字有额外的好处，这样隐式创建了具名网格区域，该名称可以用于项目定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: [outer-start] <span class="number">1</span>fr [inner-start] <span class="number">1</span>fr [inner-end] <span class="number">1</span>fr [outer-end];</span><br><span class="line">    grid-temlate-<span class="attribute">columns</span>: [outer-start] <span class="number">1</span>fr [inner-start] <span class="number">1</span>fr [inner-end] <span class="number">1</span>fr [outer-end];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，行和列都有名为 <code>inner-start</code> 和 <code>inner-end</code> 的网格线，它们隐式地给网格区域分配了名称(<code>inner</code>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item1&#123;</span><br><span class="line">    grid-area: inner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-102436-0849.jpg" alt="隐式命名的网格区域"/></div><span class="image-caption">隐式命名的网格区域</span></div><h2 id="隐式命名的网格线">隐式命名的网格线</h2><p>隐式命名网格线和隐式命名的网格区域的工作原理恰好相反</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-areas: <span class="string">&quot;header header&quot;</span></span><br><span class="line">                        <span class="string">&quot;content sidebar&quot;</span></span><br><span class="line">                        <span class="string">&quot;footer footer&quot;</span>;</span><br><span class="line">    grid-template-rows: <span class="number">80px</span> <span class="number">1</span>fr <span class="number">40px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义网格区域时隐式命名了网格线的名称，这些网格线的名称是基于区域名加上 <code>-start</code> 或  <code>-end</code> 后缀组成的</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-103351-0234.jpg" alt="隐式命名的网格线"/></div><span class="image-caption">隐式命名的网格线</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">item1&#123;</span><br><span class="line">    grid-row-start: header-start;</span><br><span class="line">    grid-row-end: content-start;</span><br><span class="line">    grid-<span class="attribute">columns</span>-start: footer-start;</span><br><span class="line">    grid-<span class="attribute">columns</span>-end: sidebar-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-110505-0211.jpg" alt="隐式命名的网格线"/></div><span class="image-caption">隐式命名的网格线</span></div><h2 id="层叠网格项目">层叠网格项目</h2><p>通过项目定位可以使多个项目层叠在一起，属性 <code>z-index</code> 可以改变层叠项目的层次</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>,</span><br><span class="line"><span class="selector-class">.item2</span>&#123;</span><br><span class="line">    grid-row-start: <span class="number">1</span>;</span><br><span class="line">    grid-column-end: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-column-start: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span>&#123;</span><br><span class="line">    grid-column-start: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，项目 <code>1</code> 和 <code>2</code>行定位于第一条网格线，并跨越两列，两个项目都是用网格线编号进行定位，项目 <code>1</code> 起始于第一条列网格线，项目 <code>2</code> 起始于第二条网格线，这使得两个项目在第一行中间列发生了层叠</p><p>缺省情况下，项目 <code>2</code> 将层叠于项目 <code>1</code> 之上，然而，给项目 <code>1</code> 设置属性 <code>z-index: 1</code> 就使得项目 <code>1</code> 层叠于项目 <code>2</code> 之上</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-112215-0116.jpg" alt="层叠网格项目"/></div><span class="image-caption">层叠网格项目</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.overlay</span>&#123;</span><br><span class="line">    grid-row-start: header-start;</span><br><span class="line">    grid-row-end: content-end;</span><br><span class="line">    grid-column-start: content-start;</span><br><span class="line">    grid-column-end: sidebar-start;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 <code>grid-template-areas</code> 定义中的隐式网格线名称，定位了一个网格项目 <code>overlay</code> 并将层叠于上层</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-114918-0371.jpg" alt="层叠网格项目"/></div><span class="image-caption">层叠网格项目</span></div><h2 id="网格项目的对齐方式">网格项目的对齐方式</h2><p>网格项目可以按行或列的轴线方向实现多种对齐方式</p><p>属性 <code>justify-items</code> 和 <code>justify-self</code> 以行轴为参照对齐项目，属性 <code>align-items</code> 和 <code>align-self</code> 以列轴为参照对齐项目</p><p>属性 <code>justify-items</code> 和 <code>align-items</code> 是网格容器的属性，支持如下值</p><ul><li><code>auto</code></li><li><code>normal</code></li><li><code>start</code></li><li><code>end</code></li><li><code>center</code></li><li><code>stretch</code></li><li><code>baseline</code></li><li><code>first baseline</code></li><li><code>last baseline</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    grid-template-rows: <span class="number">80px</span> <span class="number">80px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    grid-template-areas: <span class="string">&quot;content content&quot;</span></span><br><span class="line">                        <span class="string">&quot;content content&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    grid-area: content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    justify-items: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行的轴线起点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-143202-0043.jpg" alt="行的轴线起点处对齐"/></div><span class="image-caption">行的轴线起点处对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    justify-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行的轴线中心处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-145204-0125.jpg" alt="行的轴线中心对齐"/></div><span class="image-caption">行的轴线中心对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    justify-items: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行的轴线方向延伸并填满整个区域，<code>stretch</code> 是缺省值</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-143411-0573.png" alt="铺满整个区域"/></div><span class="image-caption">铺满整个区域</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列的轴线起点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-141318-0071.png" alt="列轴线起点对齐"/></div><span class="image-caption">列轴线起点对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-144733-0918.png" alt="列轴线中心对齐"/></div><span class="image-caption">列轴线中心对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列的轴线终点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-142235-0423.png" alt="列轴线终点处对齐"/></div><span class="image-caption">列轴线终点处对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列的轴线方向延伸并填满整个区域</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-145843-0573.png" alt="列轴线方向铺满"/></div><span class="image-caption">列轴线方向铺满</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    justify-items: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目定位于行轴和列轴线的中间位置</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-142648-0872.png" alt="行列轴线中间"/></div><span class="image-caption">行列轴线中间</span></div><p>网格项目可以使用属性 <code>align-self</code> 和 <code>justify-self</code> 定义自己的对齐方式，并支持如下属性值</p><ul><li><code>auto</code></li><li><code>normal</code></li><li><code>start</code></li><li><code>end</code></li><li><code>center</code></li><li><code>stretch</code></li><li><code>baseline</code></li><li><code>first baseline</code></li><li><code>last baseline</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    justify-self: start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span>&#123;</span><br><span class="line">    justify-self: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item3</span>&#123;</span><br><span class="line">    justify-self: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性 <code>justify-self</code> 在行的轴线方向定义对齐方式</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-145558-0556.png" alt="行轴线对齐方式"/></div><span class="image-caption">行轴线对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    <span class="attribute">align-self</span>: start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span>&#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item3</span>&#123;</span><br><span class="line">    <span class="attribute">align-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性 <code>align-self</code> 在列的轴线方向定义对齐方式</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-155200-0973.png" alt="列轴线对齐方式"/></div><span class="image-caption">列轴线对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    justify-self: center;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位于行轴线和列轴线的中间位置</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-142648-0872.png" alt="行轴线和列轴线的中间位置"/></div><span class="image-caption">行轴线和列轴线的中间位置</span></div><h2 id="网格轨道的对齐方式">网格轨道的对齐方式</h2><p>在网格容器中，网格轨道沿轴线方向有多种对齐方式</p><p>属性 <code>align-content</code> 用于定义<u>列的网格轨道</u>沿着行轴线对齐的方式，而属性 <code>justify-content</code> 用于定义<u>行的网格轨道</u>沿着列的轴线的对齐方式，并分别支持如下属性</p><ul><li><code>normal</code></li><li><code>start</code></li><li><code>end</code></li><li><code>center</code></li><li><code>stretch</code></li><li><code>space-around</code></li><li><code>space-between</code></li><li><code>space-evenly</code></li><li><code>baseline</code></li><li><code>first baseline</code></li><li><code>last baseline</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">45px</span>);</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">45px</span>);</span><br><span class="line">    grid-gap: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列的轨道在行的轴线起点处对齐，<code>start</code> 是缺省值</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-152243-0128.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列的轨道在行的轴线终点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-153445-0510.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列的轨道在行的轴线中间对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-151347-0325.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每一列的两侧平均分配额外空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-151649-0619.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列与列之间平均分配额外的空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-151052-0306.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列与列之间及列与边界之间平均分配额外的空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-154153-0977.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行的轨道在列的轴线起点处对齐，属性 <code>start</code> 是缺省值</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-152243-0128.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行的轨道在列的轴线终点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-153356-0937.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行的轨道在列的轴线中点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-154257-0279.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一行的两侧平均分配额外空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-162000-0592.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行与行之间平均分配额外空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-164601-0931.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行与行之间及行与边界之间平均分配额外空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/grid/20210830-165902-0289.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于butterfly的外挂标签引入</title>
      <link href="56718f73/"/>
      <url>56718f73/</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>本文档主要参考<a href="https://jq.qq.com/?_wv=1027&amp;k=EF1Elvqp">🧊Akilarの糖果屋🍭</a>，<a href="https://vlts.cc/v5/tag-plugins/">Volantis 5.0</a>，转载需注明出处</p><p>若您在使用本帖教程后，发现样式无法完全还原，请重点排查您的其余第三方魔改css样式，例如css中是否存在<code>.circle</code>、<code>.square</code>等易重class名。</p></div><details red><summary> 点开查看开发记录 </summary>              <div class='content'>              <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>本文所涉及的样式，主要参考的是各类已有主题，并对相应styl文件进行样式修改以及添加夜间模式适配。已尽可能追根溯源找到了各部分魔改内容最初的作者，如有错误和遗漏还请联系我修改。</p></div><div class="timeline"><p class='p h2'>开发记录</p><div class="timenode"><div class="meta"><p><p>2020-11-14:内测版v0.05</p></p></div><div class="body"><ol><li>主要使用了<a href="https://github.com/volantis-x/hexo-theme-volantis">Volantis</a>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。</li><li>主要参考内容</li></ol><ul><li><a href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></li><li><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins）</a></li><li><a href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></li><li><a href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></li><li><a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></li><li><a href="https://hunterx.xyz/use-mindmap-in-hexo.html">在hexo中使用思维导图</a></li></ul></div></div><div class="timenode"><div class="meta"><p><p>2020-11-15:正式版v1.0</p></p></div><div class="body"><ol><li>基本完成Volantis外挂标签移植。</li><li>移除了btn标签，因为存在冲突。而且不如butterfly自带的button样式好看。</li><li>适配了folding标签的夜间模式。</li><li>打包了静态资源文件，上传蓝奏云。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-11-16:正式版v1.1</p></p></div><div class="body"><ol><li>新增tip.js，将小康大佬的渐变色上标标签写法从HTML的方式改成用标签语法编写。</li><li>新增动态标签样式anima，使用了fontawesome-animation项目。</li><li>新增标签内容夜间模式适配。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-03:正式版v1.2</p></p></div><div class="body"><ol><li>新增当初弃用的issues.js标签，以配合友链魔改教程中的issues自动更新功能。</li><li>更新了静态资源文件，请之前的读者重新覆盖安装。</li><li>修改了<code>fontawesome-animation.min.css</code>的引入方式，改成使用<code>@import</code>注入<code>index.css</code>。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-07:正式版v1.21</p></p></div><div class="body"><ol><li>资源文件无任何改动。</li><li>更新了动态标签的使用说明。补全参数配置，更换示例。使得教程更加通俗易懂。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-13:正式版v1.3</p></p></div><div class="body"><ol><li>新增Butterfly_v3.4.0的配置文件。</li><li>请读者根据自己的主题版本选择替换。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-17:正式版v1.4</p></p></div><div class="body"><ol><li>新增两个样式标签poem和icon</li><li>修复了folding标签嵌套字体逐级放大的bug。</li><li>不再更新v3.4.0以下版本的适配内容。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-31:正式版v1.5</p></p></div><div class="body"><ol><li>新增两个样式标签，github徽标ghbdage和特效标签wow</li><li>移除静态资源中的<code>fontawesome-animation.min.css</code>以及<code>issues.js</code>，改为CDN引用。</li><li>本帖不专门提供特效标签wow的配置方案，若有需要，请查看相关教程<a href="https://akilar.top/posts/abab51cf/">使用wowjs给博客添加动画效果</a></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-02-24:正式版v1.6</p></p></div><div class="body"><ol><li>新增一个样式标签，进度条progress</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-03-19:正式版v1.61</p></p></div><div class="body"><ol><li>修复行内图片换行错误。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-07-07:发布插件版v1.0.0</p></p></div><div class="body"><ol><li>使用npm插件安装。</li><li>测试版本为butterfly_v3.1.0、3.3.0、3.7.8、3.8.0</li><li>插件写法调整为高内聚，理论上不受butterfly主题版本影响。</li><li>为了获得完整效果，建议打开主题的beautify配置项和theme_color配置项。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-08-06:发布插件版v1.0.3</p></p></div><div class="body"><ol><li>新增<code>carousel</code>旋转相册</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-08-06:发布插件版v1.0.3</p></p></div><div class="body"><ol><li>新增<code>mindmap</code><span class='nota' data-nota='由博主添加'>思维导图</span></li></ol></div></div></div>              </div>            </details><div class="tabs" id="配置方案"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#配置方案-1">npm插件安装方案（推荐）</button></li><li class="tab"><button type="button" data-href="#配置方案-2">源码修改配置方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="配置方案-1"><ol><li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-plugins --save</span><br></pre></td></tr></table></figure><p>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ol start="2"><li>添加配置信息，以下为写法示例</li></ol><p>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://cdn.jsdelivr.net/npm/hexo-butterfly-tag-plugins-plus@latest/lib/carousel-touch.min.js</span> <span class="comment">#旋转相册鼠标动作依赖</span></span><br></pre></td></tr></table></figure><ol start="3"><li>参数释义</li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">issues</td><td style="text-align:left">true/false</td><td style="text-align:left">【可选】issues标签控制开关，默认为false</td></tr><tr><td style="text-align:left">CDN.anima</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】动画标签anima的依赖</td></tr><tr><td style="text-align:left">CDN.jquery</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.issues</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.iconfont</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】iconfont标签symbol样式引入</td></tr><tr><td style="text-align:left">CDN.carousel</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】carousel旋转相册标签鼠标拖动依赖</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="配置方案-2"><ol><li>下载资源文件<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Akilarlxh/Tag_Plugins"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=Akilarlxh&repo=Tag_Plugins&theme=vue&show_owner=true"/></a></li><li>将下载的<code>Tag_Plugins.zip</code>解压得到<code>butterfly</code>文件夹。</li><li>将<code>butterfly</code>文件夹复制到<code>[Blogroot]\themes\</code>目录下，覆盖当前的<code>butterfly</code>主题文件夹，提示重复则选择替换。(如果担心覆盖自己的其他魔改内容，可以根据静态文件内容自主比对修改)</li><li>修改<code>[Blogroot]\_config.butterfly.yml</code>的<code>inject</code>配置项，添加<code>CDN</code>依赖项。由于<code>issues</code>写入<code>timeline</code>和<code>site-card</code>标签要用到<code>jquery</code>，请务必根据注释指示的版本决定是否添加。</li></ol>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css&quot;</span>  <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span>  <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/hexo-butterfly-tag-plugins-plus@latest/lib/carousel-touch.min.js&quot;&gt;&lt;/script&gt;</span> <span class="comment">#carousel相册鼠标动作的依赖</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># 自butterfly_v3.4.0+开始，主题基本实现去jquery化，需要自己添加引用，请读者根据版本自行决定是否添加这行引用。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment">#数据集合标签issues的依赖</span></span><br></pre></td></tr></table></figure><ol start="5"><li>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ol start="6"><li>外挂标签使用方案请参阅下文。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内文本样式-text">行内文本样式 <code>text</code></h2><div class="tabs" id="text"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#text-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#text-2">样式预览</button></li><li class="tab"><button type="button" data-href="#text-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="text-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="text-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内文本-span">行内文本 <code>span</code></h2><div class="tabs" id="span"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#span-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#span-3">样式预览</button></li><li class="tab"><button type="button" data-href="#span-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="span-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="段落文本-p">段落文本 p</h2><div class="tabs" id="p"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#p-1">标签语法</button></li><li class="tab"><button type="button" data-href="#p-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#p-3">样式预览</button></li><li class="tab"><button type="button" data-href="#p-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="p-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="p-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用-note">引用 <code>note</code></h2><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>以下是<code>butterfly</code>主题的note写法。</p></div><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#note-1">通用配置</button></li><li class="tab"><button type="button" data-href="#note-2">语法格式</button></li><li class="tab"><button type="button" data-href="#note-3">配置参数</button></li><li class="tab active"><button type="button" data-href="#note-4">样式预览</button></li><li class="tab"><button type="button" data-href="#note-5">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="note-1"><p>修改主题配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>Note</code>标签外挂有两种用法。<code>icons</code>和<code>light_bg_offset</code>只对方法一生效。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><details cyan><summary> 方法一 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><details cyan><summary> 方法一 </summary>              <div class='content'>              <table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色<br>（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】不显示 icon</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">color</td><td style="text-align:left">(default / blue / pink / purple / orange / green)</td></tr><tr><td style="text-align:left">icon</td><td style="text-align:left">【可选】标识，可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="note-4"><details cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><code>simple</code>样式</li></ol>  <div class="note simple"><p>默认 提示块标签</p></div>  <div class="note default simple"><p>default 提示块标签</p></div>  <div class="note primary simple"><p>primary 提示块标签</p></div>  <div class="note success simple"><p>success 提示块标签</p></div>  <div class="note info simple"><p>info 提示块标签</p></div>  <div class="note warning simple"><p>warning 提示块标签</p></div>  <div class="note danger simple"><p>danger 提示块标签</p></div><ol start="2"><li><code>modern</code>样式</li></ol>  <div class="note modern"><p>默认 提示块标签</p></div>  <div class="note default modern"><p>default 提示块标签</p></div>  <div class="note primary modern"><p>primary 提示块标签</p></div>  <div class="note success modern"><p>success 提示块标签</p></div>  <div class="note info modern"><p>info 提示块标签</p></div>  <div class="note warning modern"><p>warning 提示块标签</p></div>  <div class="note danger modern"><p>danger 提示块标签</p></div><ol start="3"><li><code>flat</code>样式</li></ol>  <div class="note flat"><p>默认 提示块标签</p></div>  <div class="note default flat"><p>default 提示块标签</p></div>  <div class="note primary flat"><p>primary 提示块标签</p></div>  <div class="note success flat"><p>success 提示块标签</p></div>  <div class="note info flat"><p>info 提示块标签</p></div>  <div class="note warning flat"><p>warning 提示块标签</p></div>  <div class="note danger flat"><p>danger 提示块标签</p></div><ol start="4"><li><code>disabled</code>样式</li></ol>  <div class="note disabled"><p>默认 提示块标签</p></div>  <div class="note default disabled"><p>default 提示块标签</p></div>  <div class="note primary disabled"><p>primary 提示块标签</p></div>  <div class="note success disabled"><p>success 提示块标签</p></div>  <div class="note info disabled"><p>info 提示块标签</p></div>  <div class="note warning disabled"><p>warning 提示块标签</p></div>  <div class="note danger disabled"><p>danger 提示块标签</p></div><ol start="5"><li><code>no-icon</code>样式</li></ol>  <div class="note no-icon simple"><p>默认 提示块标签</p></div>  <div class="note default no-icon simple"><p>default 提示块标签</p></div>  <div class="note primary no-icon simple"><p>primary 提示块标签</p></div>  <div class="note success no-icon simple"><p>success 提示块标签</p></div>  <div class="note info no-icon simple"><p>info 提示块标签</p></div>  <div class="note warning no-icon simple"><p>warning 提示块标签</p></div>  <div class="note danger no-icon simple"><p>danger 提示块标签</p></div>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <ol><li>simple样式</li></ol>  <div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div>  <div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div>  <div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div>  <div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div>  <div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="2"><li>modern样式</li></ol>  <div class="note icon modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div>  <div class="note pink icon modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div>  <div class="note red icon modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div>  <div class="note orange icon modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple icon modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div>  <div class="note green icon modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="3"><li>flat样式</li></ol>  <div class="note icon flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div>  <div class="note pink icon flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div>  <div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div>  <div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div>  <div class="note green icon flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="4"><li>disabled样式</li></ol>  <div class="note icon disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div>  <div class="note pink icon disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div>  <div class="note red icon disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div>  <div class="note orange icon disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple icon disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div>  <div class="note green icon disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="5"><li>no-icon样式</li></ol>  <div class="note no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue no-icon simple"><p>2021年快到了…</p></div>  <div class="note pink no-icon simple"><p>小心开车 安全至上</p></div>  <div class="note red no-icon simple"><p>这是三片呢？还是四片？</p></div>  <div class="note orange no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple no-icon simple"><p>剪刀石头布</p></div>  <div class="note green no-icon simple"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><details cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><code>simple</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>modern</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>flat</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>disabled</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>no-icon</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><code>simple</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>modern</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>flat</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>disabled</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>no-icon</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="上标标签-tip">上标标签 tip</h2><div class="tip cogs"><p>主要样式参考自<a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly渐变背景标签</a>,自己写了个<code>tip.js</code>来渲染标签，精简了一下代码。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="动态标签-anima">动态标签 anima</h2><div class="tip faa-horizontal animated"><p>动态标签的实质是引用了<a href="https://github.com/l-lin/font-awesome-animation">font-awesome-animation</a>的css样式，不一定局限于tip标签，也可以是其他标签。<br>只不过这里<code>tip.js</code>是我自己写的，所以我清楚它会怎么被渲染成html，才用的这个写法。<br>可以熟读文档，使用html语言来编写其他标签类型。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>更多详情请参看<a href="http://l-lin.github.io/font-awesome-animation/">font-awesome-animation文档</a></p><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><table><thead><tr><th style="text-align:left">On DOM load<br>当页面加载时<br>显示动画</th><th style="text-align:left">On hover<br>当鼠标悬停时<br>显示动画</th><th style="text-align:left">On parent hover<br>当鼠标悬停<br>在父级元素时<br>显示动画</th></tr></thead><tbody><tr><td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated"></i> faa-wrench animated</span></td><td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated-hover"></i> faa-wrench animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-wrench faa-wrench"></i> faa-wrench</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-bell faa-ring animated"></i> faa-ring animated</span></td><td style="text-align:left"><span><i class="fas fa-bell faa-ring animated-hover"></i> faa-ring animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-bell faa-ring"></i> faa-ring</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated"></i> faa-horizontal animated</span></td><td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated-hover"></i> faa-horizontal animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-horizontal"></i> faa-horizontal</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated"></i> faa-vertical animated</span></td><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated-hover"></i> faa-vertical animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-vertical"></i> faa-vertical</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated"></i> faa-flash animated</span></td><td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated-hover"></i> faa-flash animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-exclamation-triangle faa-flash"></i> faa-flash</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated"></i> faa-bounce animated</span></td><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated-hover"></i> faa-bounce animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-bounce"></i> faa-bounce</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated"></i> faa-spin animated</span></td><td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated-hover"></i> faa-spin animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-spinner faa-spin"></i> faa-spin</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-plane faa-tada animated"></i> faa-tada animated</span></td><td style="text-align:left"><span><i class="fas fa-plane faa-tada animated-hover"></i> faa-tada animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-plane faa-tada"></i> faa-tada</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated"></i> faa-pulse animated</span></td><td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated-hover"></i> faa-pulse animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-heart faa-pulse"></i> faa-pulse</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated"></i> faa-shake animated</span></td><td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated-hover"></i> faa-shake animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-shake"></i> faa-shake</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated"></i> faa-tada animated</span></td><td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated-hover"></i> faa-tada animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-trophy faa-tada"></i> faa-tada</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated"></i> faa-passing animated</span></td><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated-hover"></i> faa-passing animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing"></i> faa-passing</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated"></i> faa-passing-reverse animated</span></td><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated-hover"></i> faa-passing-reverse animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing-reverse"></i> faa-passing-reverse</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-circle faa-burst animated"></i> faa-burst animated</span></td><td style="text-align:left"><span><i class="fas fa-circle faa-burst animated-hover"></i> faa-burst animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-circle faa-burst"></i> faa-burst</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-star faa-falling animated"></i> faa-falling animated</span></td><td style="text-align:left"><span><i class="fas fa-star faa-falling animated-hover"></i> faa-falling animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-star faa-falling"></i> faa-falling</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated"></i> faa-rising animated</span></td><td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated-hover"></i> faa-rising animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-rocket faa-rising"></i> faa-rising</span></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><ol><li>On DOM load（当页面加载时显示动画）</li></ol>  <div class="tip warning faa-horizontal animated"><p>warning</p></div>  <div class="tip ban faa-flash animated"><p>ban</p></div><ol start="2"><li>调整动画速度。</li></ol>  <div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div>  <div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><ol start="3"><li>On hover（当鼠标悬停时显示动画）</li></ol>  <div class="tip warning faa-horizontal animated-hover"><p>warning</p></div>  <div class="tip ban faa-flash animated-hover"><p>ban</p></div><ol start="4"><li>On parent hover（当鼠标悬停在父级元素时显示动画）</li></ol>  <div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div>  <div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><ol><li>On DOM load（当页面加载时显示动画）</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>调整动画速度</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>On hover（当鼠标悬停时显示动画）</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>On parent hover（当鼠标悬停在父级元素时显示动画）</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="复选列表-checkbox">复选列表 checkbox</h2><div class="tabs" id="checkbox"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#checkbox-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#checkbox-3">样式预览</button></li><li class="tab"><button type="button" data-href="#checkbox-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-2"><ol><li>样式: plus, minus, times</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="checkbox-3"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="单选列表-radio">单选列表 radio</h2><div class="tabs" id="radio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#radio-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#radio-3">样式预览</button></li><li class="tab"><button type="button" data-href="#radio-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-2"><ol><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="radio-3"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="时间轴-timeline">时间轴 timeline</h2><div class="tabs" id="timeline"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#timeline-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#timeline-2">样式预览</button></li><li class="tab"><button type="button" data-href="#timeline-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选） %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="timeline-2"><div class="timeline"><div class="timenode"><div class="meta"><p><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></p></div><div class="body"><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></p></div><div class="body"><p>不需要额外处理。</p></div></div><div class="timenode"><div class="meta"><p><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></p></div><div class="body"><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) %&#125;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="链接卡片-link">链接卡片 link</h2><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#link-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#link-2">样式预览</button></li><li class="tab"><button type="button" data-href="#link-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="link-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="link-2"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="按钮-btns">按钮 btns</h2><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><code>Volantis</code>的按钮使用的是<code>btn</code>和<code>btns</code>标签。<code>btns</code>和<code>butterfly</code>的<code>button</code>不冲突，但是<code>btn</code>会被强制渲染，导致部分参数失效,而且<code>btn</code>的效果还是<code>butterfly</code>的<code>button</code>更好看些。所以就只适配了<code>btns</code>。</p></div><div class="tabs" id="btn"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#btn-1">标签语法</button></li><li class="tab"><button type="button" data-href="#btn-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#btn-3">样式预览</button></li><li class="tab"><button type="button" data-href="#btn-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt; </code>和<code> &lt;p&gt;描述文字&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">wide</td><td style="text-align:left">宽一点的按钮</td></tr><tr><td style="text-align:left">fill</td><td style="text-align:left">填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td style="text-align:left">center</td><td style="text-align:left">居中，按钮之间是固定间距</td></tr><tr><td style="text-align:left">around</td><td style="text-align:left">居中分散</td></tr><tr><td style="text-align:left">grid2</td><td style="text-align:left">等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid3</td><td style="text-align:left">等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid4</td><td style="text-align:left">等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid5</td><td style="text-align:left">等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="btn-3"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：</li></ol>  <div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div><ol start="2"><li>或者含有图标的按钮：</li></ol>  <div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><ol start="3"><li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</li></ol>  <div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-4"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>或者含有图标的按钮：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="github卡片-ghcard">github卡片 ghcard</h2><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>ghcard使用了<code>github-readme-stats</code>的API，支持直接使用markdown语法来写。</p></div><div class="tabs" id="ghcard"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghcard-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghcard-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghcard-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghcard-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghcard-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-2"><p>更多参数可以参考：<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/anuraghazra/github-readme-stats"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=anuraghazra&repo=github-readme-stats&show_owner=true"/></a><br>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">取值</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">hide</td><td style="text-align:left">stars,commits,prs,issues,contribs</td><td style="text-align:left">隐藏指定统计</td></tr><tr><td style="text-align:left">count_private</td><td style="text-align:left">true</td><td style="text-align:left">将私人项目贡献添加到总提交计数中</td></tr><tr><td style="text-align:left">show_icons</td><td style="text-align:left">true</td><td style="text-align:left">显示图标</td></tr><tr><td style="text-align:left">theme</td><td style="text-align:left">请查阅<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td style="text-align:left">主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghcard-3"><ol><li>用户信息卡片</li></ol><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a></td></tr></tbody></table><ol start="2"><li>仓库信息卡片</li></ol><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-4"><ol><li>用户信息卡片</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><ol start="2"><li>仓库信息卡片</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="github徽标-ghbdage">github徽标 ghbdage</h2><div class="tip cogs"><p>关于ghbdage参数的更多具体用法可以参看相关教程：<a href="https://akilar.top/posts/e87ad7f8">添加github徽标</a></p></div><div class="tabs" id="ghbdage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghbdage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghbdage-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghbdage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghbdage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghbdage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghbdage-3"><div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div>1. 基本参数<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object>2. 信息参数<br><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object>3. 拓展参数<br><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=40"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=40&logoColor=violet"></object><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-4"><div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div>1. 基本参数,定义徽标左右文字和图标<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure>2. 信息参数，定义徽标右侧内容背景色，指向链接<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure>3. 拓展参数，支持shields的API的全部参数内容<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="网站卡片-sites">网站卡片 sites</h2><div class="tabs" id="site"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#site-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#site-2">样式预览</button></li><li class="tab"><button type="button" data-href="#site-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="site-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="site-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="site-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内图片-inlineimage">行内图片 inlineimage</h2><div class="tabs" id="inlineimage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#inlineimage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#inlineimage-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#inlineimage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#inlineimage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-2"><ol><li>高度：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="inlineimage-3"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="单张图片-image">单张图片 image</h2><div class="tabs" id="image"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#image-1">标签语法</button></li><li class="tab"><button type="button" data-href="#image-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#image-3">样式预览</button></li><li class="tab"><button type="button" data-href="#image-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="image-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="image-3"><ol><li>添加描述：</li></ol>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><ol start="2"><li>指定宽度：</li></ol>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div><ol start="3"><li>指定宽度并添加描述：</li></ol>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><ol start="4"><li>设置占位背景色：</li></ol>  <div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-4"><ol><li>添加描述：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>指定宽度：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>指定宽度并添加描述：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设置占位背景色：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="音频-audio">音频 audio</h2><div class="tabs" id="audio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#audio-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#audio-2">样式预览</button></li><li class="tab"><button type="button" data-href="#audio-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="audio-2"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="audio-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="视频-video">视频 video</h2><div class="tabs" id="video"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#video-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#video-3">样式预览</button></li><li class="tab"><button type="button" data-href="#video-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="video-3"><ol><li>100%宽度</li></ol>  <div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><ol start="2"><li>50%宽度</li></ol>  <div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><ol start="3"><li>25%宽度</li></ol>  <div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-4"><ol><li>100%宽度</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>50%宽度</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>25%宽度</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="相册-gallery">相册 gallery</h2><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>自带<code>gallery</code>相册，而且会根据图片大小自动调整排版，效果比<code>Volantis</code>的<code>gallery</code>更好，故不再收录<code>Volantis</code>的<code>gallery</code>标签。</p></div><div class="note simple"><p>以下为<code>Butterfly</code>自带的<code>gallery</code>标签写法。相册图库和相册配合使用。</p></div><div class="tabs" id="gallery"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#gallery-1">标签语法</button></li><li class="tab"><button type="button" data-href="#gallery-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#gallery-3">样式预览</button></li><li class="tab"><button type="button" data-href="#gallery-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="gallery-1"><ol><li>gallerygroup 相册图库</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>gallery 相册</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">name</td><td style="text-align:left">图库名字</td></tr><tr><td style="text-align:left">description</td><td style="text-align:left">图库描述</td></tr><tr><td style="text-align:left">link</td><td style="text-align:left">链接到对应相册的地址</td></tr><tr><td style="text-align:left">img-url</td><td style="text-align:left">图库封面</td></tr></tbody></table><div class="note info simple"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p></div><ul><li>gallery 相册<br>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="gallery-3"><ul><li>gallerygroup 相册图库</li></ul><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div><ul><li>gallery 相册</li></ul><div class="justified-gallery"><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-4"><div class="note info simple"><p>对于很多同学提问的<code>gallerygroup</code>和<code>gallery</code>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个gallery的page(<strong>使用指令<code>hexo new page gallery</code>添加</strong>)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/MC/</code>路径访问MC相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容。</p></div><ol><li>gallerygroup 相册图库</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>gallery 相册</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="折叠框-folding">折叠框 folding</h2><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>虽然也有内置折叠框<code>hideToggle</code>标签，但是<code>Volantis</code>的<code>folding</code>折叠框更好看一些。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：状态填写 open 代表默认打开。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><details ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> 查看代码测试 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分栏-tab">分栏 tab</h2><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>的<code>tab</code>标签和<code>Volantis</code>的<code>tab</code>标签都是移值自<code>NexT</code>主题，所以写法和效果一模一样。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>Unique name :<ul><li>选项卡块标签的唯一名称，不带逗号。</li><li>将在#id中用作每个标签及其索引号的前缀。</li><li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li><li>仅当前帖子/页面的URL必须是唯一的！</li></ul></li><li>[index]:<ul><li>活动选项卡的索引号。</li><li>如果未指定，将选择第一个标签（1）。</li><li>如果index为-1，则不会选择任何选项卡。</li><li>可选参数。</li></ul></li><li>[Tab caption]:<ul><li>当前选项卡的标题。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li><li>如果未指定标题，但指定了图标，则标题将为空。</li><li>可选参数。</li></ul></li><li>[@icon]:<ul><li>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</li><li>可以指定带空格或不带空格；</li><li>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</li><li>可选参数。</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><div class="note primary simple"><p>Demo 1 - 预设选择第一个【默认】</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary simple"><p>Demo 2 - 预设选择tabs</p></div><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary simple"><p>Demo 3 - 没有预设值</p></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary simple"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><div class="note primary simple"><p>Demo 1 - 预设选择第一个【默认】</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>Demo 2 - 预设选择tabs</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>Demo 3 - 没有预设值</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="数据集合-issues">数据集合 issues</h2><script defer src="https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js"></script><div class="tabs" id="issues"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#issues-1">标签语法</button></li><li class="tab"><button type="button" data-href="#issues-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#issues-3">样式预览</button></li><li class="tab"><button type="button" data-href="#issues-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="issues-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues type | api=url | group=key:value1,value2（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-2"><p><span class='p center logo large'>type(类型)：</span><br>根据需求不同，会将 issues 内容解析成不同的 HTML 标签，目前支持的类型有：</p><ol><li>时间轴<code>timeline</code>: 解析成<code>timeline</code>标签，<code>issue</code>的标题对应<code>timeline</code>的时间，<code>issue</code>的内容对应<code>timeline</code>的内容。</li><li>网站卡片<code>sites</code>: 解析成<code>sites</code>标签，需要有<code>JSON</code>代码块,各参数对应<code>sites</code>标签参数:</li></ol>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;screenshot&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;「keywords」&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">网站名称</td></tr><tr><td style="text-align:left">screenshot</td><td style="text-align:left">网站预览图</td></tr><tr><td style="text-align:left">url</td><td style="text-align:left">网站链接，需要添加<br><code>https://</code>协议组成完整域名。<br>否则可能被识别成站点相对路径。</td></tr><tr><td style="text-align:left">avatar</td><td style="text-align:left">站长头像</td></tr><tr><td style="text-align:left">「keywords」</td><td style="text-align:left">分组依据，<br>未必要叫「keywords」，<br>详见下文group(分组)</td></tr></tbody></table><p><span class='p center logo large'>api(接口)：</span><br>url为可以调的通的API，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">api&#x3D;https:&#x2F;&#x2F;gitee.com&#x2F;api&#x2F;v5&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active</span><br><span class="line">api&#x3D;https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://gitee.com/api/v5/">https://gitee.com/api/v5/</a></td><td style="text-align:left">gitee仓库的api</td></tr><tr><td style="text-align:left"><a href="https://api.github.com/">https://api.github.com/</a></td><td style="text-align:left">github仓库的api</td></tr><tr><td style="text-align:left">repos/xaoxuu/friends/issues</td><td style="text-align:left">repos/用户名/仓库名/issues</td></tr><tr><td style="text-align:left">sort=updated&amp;state=open</td><td style="text-align:left">界定哪些类型的<code>issues</code>会<br>被读取过来渲染成相应的标签</td></tr><tr><td style="text-align:left">page=1&amp;per_page=100</td><td style="text-align:left">读取前100条issues</td></tr><tr><td style="text-align:left">labels=active</td><td style="text-align:left">控制默认的issue不显示，<br>只有自己审核通过<br>添加了active标签之后才会显示</td></tr></tbody></table><p><span class='p center logo large'>group(分组)：</span><br><code>sites</code>类型的<code>issues</code>默认不分组，如果需要分组，可指定分组依据<code>「keywords」</code>，和分组白名单<code>「value1」</code>、<code>「value2」</code>等，例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">group=version:v4,v3,v2</span></span><br><span class="line"><span class="comment"># 此处的version就是上文中的「keywords」</span></span><br></pre></td></tr></table></figure><p>这个参数的作用就是，筛选出<code>JSON</code>中包含<code>&quot;version&quot;: &quot;v4&quot;</code>或者<code>&quot;version&quot;:&quot;v3&quot;</code>或者<code>&quot;version&quot;: &quot;v2&quot;</code>的数据，并分组显示。</p><p><span class='p center logo large'>仓库ISSUES模板配置</span></p><details green><summary> Github仓库配置方案 </summary>              <div class='content'>              <ol><li>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.github\ISSUE_TEMPLATE.md</code>,<br>并在其中输入以下内容作为<code>issues</code>模板。</li></ol>  <div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line">about: 请根据指示规范填写友链格式。</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://akilar.top/img/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>新建active label</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/d63b5c0c.png" alt="新建label用于控制审核结果"></p><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/6311f960.png" alt="配置名称描述颜色"></p><ol start="3"><li>提交示例</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/f87ebfd3.png" alt="填写规范"><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/efdfc67d.png" alt="审核通过"></p><ol start="4"><li>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</li></ol>              </div>            </details><details yellow><summary> Gitee仓库配置方案 </summary>              <div class='content'>              <ol><li>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.gitee\ISSUE_TEMPLATE.md</code>,<br>并在其中输入以下内容作为<code>issues</code>模板。</li></ol>  <div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line">about: 请根据指示规范填写友链格式。</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://akilar.top/img/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>新建active标签</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/7522911b.png" alt="新建标签用于控制审核结果"></p><ol start="3"><li>提交示例</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/dd334eea.png" alt="填写规范"><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/72d06ae1.png" alt="审核通过"></p><ol start="4"><li>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="issues-3"><ol><li>时间轴标签<code>timeline</code>渲染<br>对应的仓库<code>issues</code>链接:</li></ol>  <div class="tag link"><a class="link-card" title="xaoxuu/timeline" href="https://gitee.com/xaoxuu/timeline/issues"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/timeline</p><p class="url">https://gitee.com/xaoxuu/timeline/issues</p></div></a></div>  <div class="issues-api timeline"api="https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&creator=xaoxuu&sort=created&direction=desc&page=1&per_page=100"></div><ol start="2"><li>网站卡片标签<code>sites</code>渲染</li></ol><ul><li><p>gitee仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://gitee.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://gitee.com/xaoxuu/friends/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li><li><p>github仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://github.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://github.com/xaoxuu/friends/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li></ul><ol start="3"><li>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：<br>对应的仓库<code>issues</code>链接:</li></ol>  <div class="tag link"><a class="link-card" title="如何参与项目" href="https://github.com/volantis-x/examples/issues"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">如何参与项目</p><p class="url">https://github.com/volantis-x/examples/issues</p></div></a></div><p>渲染后的标签：</p>  <div class="issues-api sites"api="https://api.github.com/repos/volantis-x/examples/issues?sort=updated&state=open&page=1&per_page=100"group="version:版本：^4.0,版本：^3.0,版本：^2.0"></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-4"><ol><li>时间轴标签<code>timeline</code>渲染</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&amp;creator=xaoxuu&amp;sort=created&amp;direction=desc&amp;page=1&amp;per<span class="emphasis">_page=100 %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>网站卡片标签<code>sites</code>渲染</li></ol><ul><li><p>gitee仓库示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>github仓库示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/volantis-x/examples/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100 | group=version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="诗词标签-poem">诗词标签 poem</h2><div class="tabs" id="poem"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#poem-1">标签语法</button></li><li class="tab"><button type="button" data-href="#poem-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#poem-3">样式预览</button></li><li class="tab"><button type="button" data-href="#poem-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="poem-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem [title],[author] %&#125;</span><br><span class="line">诗词内容</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-2"><ol><li>title：诗词标题</li><li>author：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="poem-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？<br>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="阿里图标-icon">阿里图标 icon</h2><div class="tip cogs"><p>本标签的图标需要自己额外引入阿里矢量图标库的样式，具体引入方案请移步：<a href="https://akilar.top/posts/d2ebecef/">Hexo引入阿里矢量图标库</a></p></div><div class="tabs" id="icon示例"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#icon示例-1">标签语法</button></li><li class="tab"><button type="button" data-href="#icon示例-2">参数释义</button></li><li class="tab active"><button type="button" data-href="#icon示例-3">样式预览</button></li><li class="tab"><button type="button" data-href="#icon示例-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="icon示例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="icon示例-3"><table><thead><tr><th style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></th></tr></thead><tbody><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></td></tr><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></td></tr><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="特效标签wow">特效标签wow</h2><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>特效标签的静态资源未添加在本帖的配置内容中（因为多为cdn配置），请移步相关教程完成相关配置：</p><div class="tag link"><a class="link-card" title="使用wowjs给博客添加动画效果" href="https://akilar.top/posts/abab51cf/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Akilarlxh/Akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">使用wowjs给博客添加动画效果</p><p class="url">https://akilar.top/posts/abab51cf/</p></div></a></div></div><div class="tabs" id="animate"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#animate-1">标签语法</button></li><li class="tab"><button type="button" data-href="#animate-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#animate-3">样式预览</button></li><li class="tab"><button type="button" data-href="#animate-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="animate-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><div class="note warning simple"><p>注意，后面四个虽然是选填项，但是当有跨位选填时，次序不能乱。详见示例。<br>支持嵌套其他外挂标签。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="animate-3"><ol><li><code>flip</code>动画效果。</li></ol>  <div class='wow animate__flip' data-wow-duration='' data-wow-delay='' data-wow-offset=''  data-wow-iteration='' >  <div class="note green icon modern"><i class="note-icon fas fa-fan"></i><p><code>flip</code>动画效果。</p></div></div>2. `zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次。  <div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' >  <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div>3. `slideInRight`动画效果，持续`5s`，延时`5s`。  <div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' >  <div class="note orange icon modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div>4. `heartBeat`动画效果，延时`5s`，重复`10`次。  <div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' >  <div class="note red icon modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-4"><ol><li><code>flip</code>动画效果。</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__flip %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note green &#x27;fas fa-fan&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`flip`动画效果。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次。</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。此处注意不用的参数位置要留空，用逗号间隔。</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="进度条-progress">进度条 progress</h2><div class="note info morden simple"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="progress"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#progress-1">标签语法</button></li><li class="tab"><button type="button" data-href="#progress-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#progress-3">样式预览</button></li><li class="tab"><button type="button" data-href="#progress-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="progress-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-2"><p><code>width</code>: 0到100的阿拉伯数字<br><code>color</code>: 颜色，取值有<span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span><br><code>text</code>:进度条上的文字内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="progress-3"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="注释-notation">注释 notation</h2><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>label</code>: 注释词汇<br><code>text</code>: 悬停显示的注解内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="旋转相册-carousel">旋转相册 carousel</h2><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% carousel [Id] , [name] %&#125;</span><br><span class="line">![](/img/1.jpg)</span><br><span class="line">![](/img/2.jpg)</span><br><span class="line">![](/img/3,jpg)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>Id</code>: 相册唯一ID，用于监测相册鼠标动作。禁止使用中文。同一页内不得出现相同ID的carousel相册。<br><code>name</code>: 相册中间显示的内容，建议用英文单引号包裹</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><div id='gundam' class='carousel'><div id="gundam-drag-container" class="drag-container"><div id="gundam-spin-container" class="spin-container"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110444226.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110525753.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110600751.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110621554.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110637459.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110654150.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110707916.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110719787.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110731118.png" alt=""><p>gaoda</p></div><div id="gundam-carousel-ground" class="carousel-ground"></div></div></div><script type="text/javascript">carouselinit('gundam');</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% carousel gundam,gaoda %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110444226.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110525753.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110600751.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110621554.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110637459.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110654150.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110707916.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110719787.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110731118.png)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="思维导图-mindmap">思维导图 mindmap</h2><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mindmap [height]%&#125;</span><br><span class="line"><span class="bullet">-</span> [<span class="string">思维导图</span>](<span class="link">https://www.keyiqingxin.cn/</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">前言</span>](<span class="link">https://www.keyiqingxin.cn</span>)</span><br><span class="line"><span class="bullet">  -</span> 使用方法</span><br><span class="line"><span class="bullet">    -</span> 一</span><br><span class="line"><span class="bullet">    -</span> 二</span><br><span class="line"><span class="bullet">    -</span> 三</span><br><span class="line"><span class="bullet">  -</span> 参考资料</span><br><span class="line"><span class="bullet">  -</span> 参数配置</span><br><span class="line"><span class="bullet">  -</span> 样式预览</span><br><span class="line"><span class="bullet">  -</span> 内容</span><br><span class="line">&#123;% endmindmap %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>height</code>: 思维导图高度，默认300</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><blockquote class="mindmap" style="height: 500px;contenteditable: true;"><ul><li><a href="https://www.keyiqingxin.cn/">思维导图</a><ul><li><a href="https://www.keyiqingxin.cn">前言</a></li><li>使用方法<ul><li>一</li><li>二</li><li>三</li></ul></li><li>参考资料</li><li>参数配置</li><li>样式预览</li><li>内容</li></ul></li></ul></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mindmap %&#125;</span><br><span class="line"><span class="bullet">-</span> [<span class="string">思维导图</span>](<span class="link">https://www.keyiqingxin.cn/</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">前言</span>](<span class="link">https://www.keyiqingxin.cn</span>)</span><br><span class="line"><span class="bullet">  -</span> 使用方法</span><br><span class="line"><span class="bullet">    -</span> 一</span><br><span class="line"><span class="bullet">    -</span> 二</span><br><span class="line"><span class="bullet">    -</span> 三</span><br><span class="line"><span class="bullet">  -</span> 参考资料</span><br><span class="line"><span class="bullet">  -</span> 参数配置</span><br><span class="line"><span class="bullet">  -</span> 样式预览</span><br><span class="line"><span class="bullet">  -</span> 内容</span><br><span class="line">&#123;% endmindmap %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于observable的状态管理插件</title>
      <link href="73002bc7/"/>
      <url>73002bc7/</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>突然之间看到 <code>vue2.x</code> 文档中的<span class='nota' data-nota='Vue.observable(object) 和 Vue.set(target'>两个 api</span>，<code>Vue.observable(object)</code> 可以让一个对象可响应，并且返回的对象可以直接用于渲染函数和计算属性中，并且会在发生变更时触发相应的更新，也可以作为最小化的跨组件状态存储器</p><p>于是心血来潮决定尝试写一个 <code>vue</code> 的状态管理插件</p></div><p>关于上方提到的两个 <code>api</code> 可以在下方文档中找到，这里不多作介绍</p><div class="btns rounded center grid5">            <a class="button" href='https://cn.vuejs.org/v2/api/#Vue-observable' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="使用脚手架创建一个-vue-项目">使用脚手架创建一个 <code>vue</code> 项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create app</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-info-circle"></i><p>因为 <code>Vue.observable</code> 在 <code>2.6.0</code> 版本之后新增的，请确保 <code>vue</code> 和 <code>vue-template-compiler</code> 的版本高于 <code>2.6.0</code> 且二者版本一致</p></div><h2 id="插件源码">插件源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性私有化</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="built_in">Symbol</span>(<span class="string">&#x27;store&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果使用 lodash  _.cloneDeep(value)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(object === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> object !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> object;</span><br><span class="line">    <span class="keyword">if</span>(object.constructor === <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(object);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保持原型链不变</span></span><br><span class="line">    <span class="keyword">let</span> temp = <span class="keyword">new</span> object.constructor();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> object)&#123;</span><br><span class="line">        <span class="comment">// 只要自身的属性 object.hasOwnProperty(key)</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key))&#123;</span><br><span class="line">            <span class="keyword">let</span> value = object[key];</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// arguments.callee 为了解除和函数名的耦合 实际上 arguments.callee也指向函数 deepClone 严格模式下不允许使用arguments</span></span><br><span class="line">                temp[key] = <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> ? <span class="built_in">arguments</span>.callee(value) : value;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">                temp[key] = <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> ? deepClone(value) : value;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    [store] = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>[store] = Vue.observable(options);</span><br><span class="line">        <span class="comment">// this[store] = options;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只能通过dispatch来修改状态</span></span><br><span class="line">    <span class="function"><span class="title">dispatch</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(action <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">            action.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                Vue.set(<span class="built_in">this</span>[store], item.type, item.data);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;type, data&#125; = action;</span><br><span class="line">            Vue.set(<span class="built_in">this</span>[store], type, data);</span><br><span class="line">            <span class="comment">// this[store][type] = data;</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getState</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deepClone(<span class="built_in">this</span>[store]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">    <span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span>&#123;</span><br><span class="line">        Vue.mixin(&#123;</span><br><span class="line">            <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// 获取当前实例的自定义属性 store</span></span><br><span class="line">                <span class="keyword">let</span> store = <span class="built_in">this</span>.$options.store;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不存在，当前实例没有store属性 需要取到父组件的store</span></span><br><span class="line">                <span class="keyword">if</span>(!store)&#123;</span><br><span class="line">                    store = <span class="built_in">this</span>.$parent.$store</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.$store = store;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 下面的内容 混入以后就不能和组件的重复了</span></span><br><span class="line">            computed: &#123;</span><br><span class="line">                $$state()&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.$store.getState();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                $$dispatch(action)&#123;</span><br><span class="line">                    <span class="comment">// action可以是数组或对象</span></span><br><span class="line">                    <span class="comment">// 对象形式 interface Action &#123;type: string; data: unknown&#125;</span></span><br><span class="line">                    <span class="comment">// 数组  Action[]</span></span><br><span class="line">                    <span class="built_in">this</span>.$store.dispatch(action)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    State</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br></pre></td></tr></table></figure><h2 id="使用">使用</h2><div class="tip faa-horizontal animated"><p>此插件已发布至 <code>npm</code> 如需使用可参考以下链接<br>另外，请忽略版本的问题，之前的版本不可用，很多 <code>bug</code></p></div><div class="tabs" id="obs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#obs-1">npm</button></li><li class="tab"><button type="button" data-href="#obs-2">script</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="obs-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-observable-plus@1.1.0 --save</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="obs-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue-observable-plus@1.1.0/obs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="举个栗子">举个栗子</h2><div class="tabs" id="exm"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#exm-1">模块化</button></li><li class="tab"><button type="button" data-href="#exm-2">浏览器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="exm-1"><div class="note blue icon flat"><i class="note-icon fa fa-info"></i><p>下方的栗子中，会看到 <code>$store.getState()</code> 实际上全局混入之后，计算属性中的 <code>$$state</code> 就表示 <code>this.$store.getState()</code>，同时 <code>$$dispatch</code> 和 <code>$store.dispatch</code> 效果相同，请忽略下方栗子中的 <code>getState</code> 这是因为分享的 <code>codesanbox</code> 和本地的 <code>codesanbox</code> <span class='nota' data-nota='在codesanbox中使用$$state不会报错，分享iframe就会报错，可能是抽风了~'>预览效果不一致</span>，读者测试时完全可以使用 <code>$$state</code> 而不是 <code>getState()</code>，这里仅仅是为了预览效果，浏览器直接使用 <code>$$state</code> 不会报错</p></div><iframe src="https://codesandbox.io/embed/still-resonance-nv7vr?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:700px; border:0; border-radius: 4px; overflow:hidden;"    title="still-resonance-nv7vr"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="exm-2"><iframe id="cp_embed_rNmZrRQ" src="//codepen.io/milkdue/embed/rNmZrRQ?height=800&theme-id=dark&slug-hash=rNmZrRQ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="800" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="end"><code>end</code></h2><p>第一次写 <code>vue</code> 插件，如果有任何问题，欢迎读者留言指正~</p>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x的api</title>
      <link href="9b2de178/"/>
      <url>9b2de178/</url>
      
        <content type="html"><![CDATA[<h2 id="全局配置">全局配置</h2><p><code>Vue.config</code> 是一个对象，包含 <code>Vue</code> 的全局配置，可以在启动应用之前修改下列属性</p><h3 id="silent"><code>silent</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>false</code></li><li>作用：取消 <code>vue</code> 所有的日志和警告</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.silent = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="optionMergeStrategies"><code>optionMergeStrategies</code></h3><ul><li>类型：<code>&#123;[key: string]: Function&#125;</code></li><li>默认值：<code>&#123;&#125;</code></li><li>作用：自定义混入时的合并策略，合并策略选项分别在接收父实例和子实例上定义的该选项的值作为第一个和第二个参数，<code>vue</code> 实例上下文被定义为第三个参数传入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.optionMergeStrategies._my_option = <span class="function"><span class="keyword">function</span>(<span class="params">parent, child, vm</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> child + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="devtools"><code>devtools</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code> (生产版本为 <code>false</code>)</li><li>作用：配置是否允许 <code>vue-devtools</code> 检查代码，开发版本默认是 <code>true</code>，生产版本默认是 <code>false</code>，生产版本设为 <code>true</code> 可以启动检查</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 务必在加载vue后，立即同步设置以下内容</span></span><br><span class="line">Vue.config.devtools = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="errorHandler"><code>errorHandler</code></h3><ul><li>类型：<code>Function</code></li><li>默认值：<code>undefined</code></li><li>作用：处理发生错误的逻辑</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="function"><span class="keyword">function</span>(<span class="params">err, vm, info</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// err 错误信息</span></span><br><span class="line">  <span class="comment">// vm 发生错误的实例</span></span><br><span class="line">  <span class="comment">// info 是 vue 特定的错误信息，比如错误所发生的生命钩子 例如 mounted hook</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="warnHandler"><code>warnHandler</code></h3><ul><li>类型：<code>Function</code></li><li>默认值：<code>undefined</code></li><li>作用：运行时警告赋予一个自定义处理函数，注意这只会在开发者环境下生效，在生产环境下它会被忽略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.warnHandler = <span class="function"><span class="keyword">function</span>(<span class="params">msg, vm, trace</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// trace 是组件继承关系的追踪</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 Vue 的运行时警告赋予一个自定义处理函数。注意这只会在开发者环境下生效，在生产环境下它会被忽略</span></span><br></pre></td></tr></table></figure><h3 id="ignoredElements"><code>ignoredElements</code></h3><ul><li>类型：<code>Array&lt;String | RegExp&gt;</code></li><li>默认值：[]</li><li>作用：须使 <code>Vue</code> 忽略在 <code>Vue</code> 之外的自定义元素 (e.g. 使用了 <code>Web Components APIs</code>)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 <code>Unknown custom element</code> 的警告w</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.ignoredElements = [<span class="string">&#x27;ant-a&#x27;</span>, <span class="regexp">/^ion-/</span>];</span><br></pre></td></tr></table></figure><h3 id="keyCodes"><code>keyCodes</code></h3><ul><li>类型：<code>&#123;[key: string]: number | Array&lt;number&gt;&#125;</code></li><li>默认值：<code>&#123;&#125;</code></li><li>作用：给 <code>v-on</code> 自定义键位别名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes = &#123;</span><br><span class="line">  v: <span class="number">86</span>,</span><br><span class="line">  f1: <span class="number">112</span>,</span><br><span class="line">  mediaPlayPause: <span class="number">179</span>,</span><br><span class="line">  <span class="comment">// 如果是使用 kebab-case(下划线形式)，用双引号括起来</span></span><br><span class="line">  <span class="string">&quot;media-play-pause&quot;</span>: <span class="number">179</span>,</span><br><span class="line">  up: [<span class="number">38</span>, <span class="number">87</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.media-play-pause</span>=<span class="string">&quot;method&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="performance"><code>performance</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>false</code></li><li>作用：设置为 <code>true</code> 以在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。只适用于开发模式和支持 <code>performance.mark API</code> 的浏览器上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.performance = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="productionTip"><code>productionTip</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li><li>作用：设置为true以阻止vue在启动时生产提示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.productionTip = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="全局-api">全局 <code>api</code></h2><h3 id="Vue-extend-options"><code>Vue.extend(options)</code></h3><ul><li>参数：<code>&#123;Object&#125; options</code></li><li>作用：使用基础 <code>vue</code> 构造器，创建一个子类，参数是一个包含组件选项的对象，<code>data</code> 选项是特例，需要注意 <code>Vue.extend()</code> 中它必须是函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Component = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">`&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;&lt;/p&gt;`</span></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName: <span class="string">&#x27;Walter&#x27;</span>,</span><br><span class="line">      lastName: <span class="string">&#x27;White&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Component().$mount(<span class="string">&#x27;#div&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Vue-nextTick-callback-context"><code>Vue.nextTick([callback, context])</code></h3><ul><li>参数：<code>&#123;Function&#125; [callback]  &#123;Object&#125; [context]</code></li><li>作用：在下次 <code>dom</code> 更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，获取最新后的 <code>dom</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line">vm.msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dom 还没有更新</span></span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// dom 更新了</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为一个promise使用</span></span><br><span class="line">Vue.nextTick()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// dom 更新了</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue-set-target-propertyName-index-value"><code>Vue.set(target, propertyName / index, value)</code></h3><ul><li>参数：<code>&#123;Object | Array&#125; target  &#123;string | number&#125; propertyName / index  &#123;any&#125; value</code></li><li>作用：向响应式对象中添加一个 <code>property</code>，并确保这个新 <code>property</code> 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 <code>property</code>，因为 <code>Vue</code> 无法探测普通的新增 <code>property</code> (比如 <code>this.myObject.newProperty = 'hi'</code>)，返回设置的值，注意不能是 <code>vue</code> 实例，或者 <code>vue</code> 实例的根数据对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">obj</span>: &#123;&#125;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">this</span>.$set(<span class="built_in">this</span>.obj, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;suxi&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-delete-target-propertyName-index"><code>Vue.delete(target, propertyName / index)</code></h3><ul><li>参数：<code>&#123;Object | Array&#125; target  &#123;string | number&#125; propertyName / index</code></li><li>作用：删除对象的 <code>property</code>。如果对象是响应式的，确保删除能触发更新视图。注意目标对象不能是一个 <code>Vue</code> 实例或 <code>Vue</code> 实例的根数据对象，这个方法主要用于避开 Vue 不能检测到 property 被删除的限制，但是你应该很少会使用它</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">obj</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;peiqi&#x27;</span>&#125;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">this</span>.$delete(<span class="built_in">this</span>.obj, <span class="string">&#x27;name&#x27;</span>), <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-directive-id-definition"><code>Vue.directive(id, [definition])</code></h3><ul><li>参数：<code>&#123;string&#125; id  &#123;Function | Object&#125; [definition]</code></li><li>作用：注册或获取<a href="/262ac49e/#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6%E7%AD%96%E7%95%A5">全局指令</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  componentUpdated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  unbind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 (指令函数)</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里将会被 `bind` 和 `update` 调用</span></span><br><span class="line">  <span class="comment">// bind 和 update是一样的行为</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter，返回已注册的指令</span></span><br><span class="line"><span class="keyword">var</span> myDirective = Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Vue-filter-id-definition"><code>Vue.filter(id, [definition])</code></h3><ul><li>参数：<code>&#123;string&#125; id  &#123;Function&#125; [definition]</code></li><li>作用：注册或获取全局过滤器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;my-filter&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回处理后的值</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter，返回已注册的过滤器</span></span><br><span class="line"><span class="keyword">var</span> myFilter = Vue.filter(<span class="string">&#x27;my-filter&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Vue-component-id-definition"><code>Vue.component(id, [definition])</code></h3><ul><li>参数：<code>&#123;string&#125; id  &#123;Function | Object&#125; [definition]</code></li><li>作用：注册或获取全局组件，组件还会自动使用给定的 <code>id</code> 设置组件的名称</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册组件，传入一个扩展过的构造器</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, Vue.extend(&#123; <span class="comment">/* ... */</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取注册的组件 (始终返回构造器)</span></span><br><span class="line"><span class="keyword">var</span> MyComponent = Vue.component(<span class="string">&#x27;my-component&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Vue-use-plugin"><code>Vue.use(plugin)</code></h3><ul><li>参数：<code>&#123;Object | Function&#125; plugin</code></li><li>作用：安装 <code>Vue.js</code> 插件。如果插件是一个对象，必须提供 <code>install</code> 方法。如果插件是一个函数，它会被作为 <code>install</code> 方法。<code>install</code> 方法调用时，会将 <code>Vue</code> 作为参数传入，该方法需要在调用 <code>new Vue()</code> 之前被调用，当 <code>install</code> 方法被同一个插件多次调用，插件将只会被安装一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(vuex)</span><br></pre></td></tr></table></figure><h3 id="Vue-mixin-mixin"><code>Vue.mixin(mixin)</code></h3><ul><li>参数：<code>&#123;Object&#125; mixin</code></li><li>作用：全局注册一个混入，影响注册之后所有创建的每个 <code>Vue</code> 实例。插件作者可以使用混入，向组件注入自定义的行为。不推荐在应用代码中使用</li></ul><h3 id="Vue-compile-template"><code>Vue.compile(template)</code></h3><ul><li>参数：<code>&#123;string&#125; template</code></li><li>作用：将一个模板编译成 <code>render</code> 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = Vue.compile(<span class="string">&#x27;&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: res.render,</span><br><span class="line">  staticRenderFns: res.staticRenderFns</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue-observable-object"><code>Vue.observable(object)</code></h3><ul><li>参数：<code>&#123;Object&#125; object</code></li><li>作用：让一个对象可响应。<code>Vue</code> 内部会用它来处理 <code>data</code> 函数返回的对象，返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器，用于简单的场景</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = Vue.observable(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Demo = &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;button&#x27;</span>, &#123;</span><br><span class="line">      on: &#123; <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123; state.count++ &#125;&#125;</span><br><span class="line">    &#125;, <span class="string">`count is: <span class="subst">$&#123;state.count&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-version"><code>Vue.version</code></h3><ul><li>作用：提供字符串形式的 <code>vue</code> 安装版本号，这对社区的插件和组件来说是非常有用的，可以根据不同的版本号采取不同的策略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (version === <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">// Vue v2.x.x</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (version === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Vue v1.x.x</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Unsupported versions of Vue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据-选项">数据 / 选项</h2><h3 id="data"><code>data</code></h3><ul><li>类型：<code>Object | Function</code></li><li>作用：<code>vue</code> 实例的数据对象，<code>vue</code> 会递归地把 <code>data</code> 的 <code>property</code> 转换为 <code>getter/setter</code>，从而让 <code>data</code> 的 <code>property</code> 能够响应数据变化。对象必须是纯粹的对象 (含有零个或多个的 <code>key/value</code> 对)：浏览器 <code>API</code> 创建的原生对象，原型上的 <code>property</code> 会被忽略。大概来说，<code>data</code> 应该只能是数据 - 不推荐观察拥有状态行为的对象，一旦观察过，你就无法在根数据对象上添加响应式 <code>property</code>。因此推荐在创建实例之前，就声明所有的根级响应式 <code>property</code></li><li>注意：<ul><li>实例创建之后，可以通过 <code>vm.$data</code> 访问原始数据对象。<code>Vue</code> 实例也代理了 <code>data</code> 对象上所有的 <code>property</code>，因此访问 <code>vm.a</code>等价于访问 <code>vm.$data.a</code></li><li>以 <code>_</code> 或 <code>$</code> 开头的 <code>property</code> 不会被 <code>Vue</code> 实例代理，因为它们可能和 <code>Vue</code> 内置的 <code>property</code>、<code>API</code> 方法冲突。你可以使用例如 <code>vm.$data._property</code> 的方式访问这些 <code>property</code></li><li>当一个组件被定义，<code>data</code> 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 <code>data</code> 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 <code>data</code> 函数，每次创建一个新实例后，我们能够调用 <code>data</code> 函数，从而返回初始数据的一个全新副本数据对象</li><li>如果需要，可以通过将 vm.$data 传入 JSON.parse(JSON.stringify(…)) 得到深拷贝的原始数据对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接创建一个实例</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line">vm.a <span class="comment">// =&gt; 1</span></span><br><span class="line">vm.$data === data <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue.extend() 中 data 必须是函数</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，如果你为 data property 使用了箭头函数，则 this 不会指向这个组件的实例，不过你仍然可以将其实例作为函数的第一个参数来访问</span></span><br><span class="line">data: <span class="function"><span class="params">vm</span> =&gt;</span> (&#123;<span class="attr">a</span>: vm.myProp&#125;)</span><br></pre></td></tr></table></figure><h3 id="props"><code>props</code></h3><ul><li>类型：<code>Array&lt;string&gt; | Object</code></li><li>作用：组件间数据传递，<code>props</code> 可以是数组或对象，用于接收来自父组件的数据。<code>props</code> 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值</li><li>语法<ul><li><code>type</code>：可以是下列原生构造函数中的一种：<code>String、Number、Boolean、Array、Object、Date、Function、Symbol</code>、任何自定义构造函数、或上述内容组成的数组。会检查一个 <code>prop</code> 是否是给定的类型，否则抛出警告</li><li><code>default</code>：<code>any</code>，为该 <code>prop</code> 指定一个默认值。如果该 <code>prop</code> 没有被传入，则换做用这个值。对象或数组的默认值必须从一个工厂函数返回</li><li><code>required</code>：<code>Boolean</code>，定义该 <code>prop</code> 是否是必填项。在非生产环境中，如果这个值为 <code>truthy</code> 且该 <code>prop</code> 没有被传入的，则一个控制台警告将会被抛出</li><li><code>validator</code>：<code>Function</code>，自定义验证函数会将该 <code>prop</code> 的值作为唯一的参数代入。在非生产环境下，如果该函数返回一个 <code>falsy</code> 的值 (也就是验证失败)，一个控制台警告将会被抛出</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单语法</span></span><br><span class="line">Vue.component(<span class="string">&#x27;props-demo-simple&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;myMessage&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象语法，提供验证</span></span><br><span class="line">Vue.component(<span class="string">&#x27;props-demo-advanced&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 检测类型</span></span><br><span class="line">    height: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 检测类型 + 其他验证</span></span><br><span class="line">    age: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt;= <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="propsData"><code>propsData</code></h3><ul><li>类型：<code>&#123;[key: string]: any&#125;</code></li><li>作用：创建实例时传递 <code>props</code> 主要作用是方便测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Comp = Vue.extend(&#123;</span><br><span class="line">  props: [<span class="string">&#x27;msg&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Comp(&#123;</span><br><span class="line">  propsData: &#123;</span><br><span class="line">    msg: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="computed"><code>computed</code></h3><ul><li>类型：<code>&#123;[key: string]: Function | &#123;get: Function, set: Function&#125;&#125;</code></li><li>作用：计算属性将被混入到 <code>Vue</code> 实例中。所有 <code>getter</code> 和 <code>setter</code> 的 <code>this</code> 上下文自动地绑定为 <code>Vue</code>实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意如果你为一个计算属性使用了箭头函数，则 this 不会指向这个组件的实例，不过你仍然可以将其实例作为函数的第一个参数来访问。</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  aDouble: <span class="function"><span class="params">vm</span> =&gt;</span> vm.a * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性的结果会被缓存，除非依赖的响应式 property 变化才会重新计算。注意，如果某个依赖 (比如非响应式 property) 在该实例范畴之外，则计算属性是不会被更新的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 仅读取</span></span><br><span class="line">    aDouble: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.a * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 读取和设置</span></span><br><span class="line">    aPlus: &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = v - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.aPlus   <span class="comment">// =&gt; 2</span></span><br><span class="line">vm.aPlus = <span class="number">3</span></span><br><span class="line">vm.a       <span class="comment">// =&gt; 2</span></span><br><span class="line">vm.aDouble <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure><h3 id="methods"><code>methods</code></h3><ul><li>类型：<code>&#123;[key: string]: Function&#125;</code></li><li>作用：<code>methods</code> 将被混入到 <code>Vue</code> 实例中。可以直接通过 <code>VM</code> 实例访问这些方法，或者在指令表达式中使用。方法中的 <code>this</code> 自动绑定为 <code>Vue</code> 实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    plus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.a++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.plus()</span><br><span class="line">vm.a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="watch"><code>watch</code></h3><ul><li>类型：<code>&#123;[key: string]: string | Function | Object | Array&#125;</code></li><li>作用：<code>watch</code> 一个对象，键是需要观察的表单式，值是回调函数，值也可以是方法名，或者包含选项的对象。<code>Vue</code> 实例将会在实例化时调用 <code>$watch()</code>，遍历 <code>watch</code> 对象的每一个 <code>property</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    d: <span class="number">4</span>,</span><br><span class="line">    e: &#123;</span><br><span class="line">      f: &#123;</span><br><span class="line">        g: <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 没有设置immediate，被侦听的变量在页面初次加载时第一次绑定值的时候，并不会执行监听操作</span></span><br><span class="line">    a: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;new: %s, old: %s&#x27;</span>, val, oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    b: <span class="string">&#x27;someMethod&#x27;</span>,</span><br><span class="line">    <span class="comment">// 设置了深度监听，回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深，数组的变化不需要深度监听，对象数组中的属性变化则需要深度监听</span></span><br><span class="line">    c: &#123;</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">      deep: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置了immediate为true 该回调将会在侦听开始之后被立即调用</span></span><br><span class="line">    d: &#123;</span><br><span class="line">      handler: <span class="string">&#x27;someMethod&#x27;</span>,</span><br><span class="line">      immediate: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 你可以传入回调数组，它们会被逐一调用</span></span><br><span class="line">    e: [</span><br><span class="line">      <span class="string">&#x27;handle1&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">handle2</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        handler: <span class="function"><span class="keyword">function</span> <span class="title">handle3</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// watch vm.e.f&#x27;s value: &#123;g: 5&#125;</span></span><br><span class="line">    <span class="string">&#x27;e.f&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.a = <span class="number">2</span> <span class="comment">// =&gt; new: 2, old: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue =&gt; this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例</span></span><br></pre></td></tr></table></figure><h2 id="选项-DOM">选项 / <code>DOM</code></h2><h3 id="el"><code>el</code></h3><ul><li>类型：<code>string | Element</code></li><li>详细：<ul><li>提供一个在页面上已存在的 <code>DOM</code> 元素作为 <code>Vue</code> 实例的挂载目标。可以是 <code>CSS</code> 选择器，也可以是一个 <code>HTMLElement</code> 实例</li><li>在实例挂载之后，元素可以用 <code>vm.$el</code> 访问</li><li>如果在实例化时存在这个选项，实例将立即进入编译过程，否则，需要显式调用 <code>vm.$mount()</code> 手动开启编译</li><li>提供的元素只能作为挂载点。不同于 <code>Vue 1.x</code>，所有的挂载元素会被 <code>Vue</code> 生成的 <code>DOM</code> 替换。因此不推荐挂载 <code>root</code> 实例到 <code>&lt;html&gt;</code> 或者 <code>&lt;body&gt;</code> 上</li><li>如果 <code>render</code> 函数和 <code>template property</code> 都不存在，挂载 <code>DOM</code> 元素的 <code>HTML</code> 会被提取出来用作模板，此时，必须使用 <code>Runtime + Compiler</code> 构建的 <code>Vue</code> 库</li></ul></li></ul><h3 id="template"><code>template</code></h3><ul><li>类型：<code>string</code></li><li>详细：<ul><li>一个字符串模板作为 <code>Vue</code> 实例的标识使用。模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽</li><li>如果值以 <code>#</code> 开始，则它将被用作选择符，并使用匹配元素的 <code>innerHTML</code> 作为模板。常用的技巧是用 <code>&lt;script type=&quot;x-template&quot;&gt;</code> 包含模板</li><li>出于安全考虑，你应该只使用你信任的 <code>Vue</code> 模板。避免使用其他人生成的内容作为你的模板</li><li>如果 <code>Vue</code> 选项中包含渲染函数，该模板将被忽略</li></ul></li></ul><h3 id="render"><code>render</code></h3><ul><li>类型：<code>(createElement: () =&gt; VNode) =&gt; VNode</code></li><li>详细：<ul><li>字符串模板的代替方案，允许你发挥 <code>JavaScript</code> 最大的编程能力。该渲染函数接收一个 <code>createElement</code> 方法作为第一个参数用来创建 <code>VNode</code></li><li>如果组件是一个函数组件，渲染函数还会接收一个额外的 <code>context</code> 参数，为没有实例的函数组件提供上下文信息</li><li><code>Vue</code> 选项中的 <code>render</code> 函数若存在，则 <code>Vue</code> 构造函数不会从 <code>template</code> 选项或通过 <code>el</code> 选项指定的挂载元素中提取出的 <code>HTML</code> 模板编译渲染函数</li></ul></li></ul><h3 id="renderError"><code>renderError</code></h3><ul><li>类型：<code>(createElement: () =&gt; VNode, error: Error) =&gt; VNode</code></li><li>详细：<ul><li>只能在开发者环境下工作</li><li>当 <code>render</code> 函数遭遇错误时，提供另一种渲染输出，其错误将会作为第二个参数传递到 <code>renderError</code>，这个功能配合 <code>hot-reload</code> 非常实用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;oops&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  renderError (h, err) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;pre&#x27;</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;&#125;, err.stack)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="选项-生命周期钩子">选项 / 生命周期钩子</h2><div class="note purple icon flat"><i class="note-icon fa fa-thermometer-full"></i><p>所有的生命周期钩子自动绑定 <code>this</code> 上下文到实例中，因此你可以访问数据，对 <code>property</code> 和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 <code>created: () =&gt; this.fetchTodos()</code>)。这是因为箭头函数绑定了父上下文，因此 <code>this</code> 与你期待的 <code>Vue</code> 实例不同，<code>this.fetchTodos</code> 的行为未定义</p></div><h3 id="beforeCreate"><code>beforeCreate</code></h3><ul><li>类型：<code>Function</code></li><li>作用：在实例初始化之后，数据观测 (<code>data observer</code>) 和 <code>event/watcher</code> 事件配置之前被调用</li></ul><h3 id="created"><code>created</code></h3><ul><li>类型：<code>Function</code></li><li>作用：在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (<code>data observer</code>)，<code>property</code> 和方法的运算，<code>watch/event</code> 事件回调。然而，挂载阶段还没开始，<code>$el property</code> 目前尚不可用</li></ul><h3 id="beforeMount"><code>beforeMount</code></h3><ul><li>类型：<code>Function</code></li><li>作用：在挂载开始之前被调用，相关的 <code>render</code> 函数首次被调用，该钩子在服务端渲染期间不被调用</li></ul><h3 id="mounted"><code>mounted</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>实例被挂载后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。如果根实例挂载到了一个文档内的元素上，当 <code>mounted</code> 被调用时 <code>vm.$el</code> 也在文档内</li><li>注意 <code>mounted</code> 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 <code>mounted</code> 内部使用 <code>vm.$nextTick</code></li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code that will run only after the</span></span><br><span class="line">    <span class="comment">// entire view has been rendered</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beforeUpdate"><code>beforeUpdate</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>数据更新时调用，发生在虚拟 <code>DOM</code> 打补丁之前。这里适合在更新之前访问现有的 <code>DOM</code>，比如手动移除已添加的事件监听器</li><li>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行</li></ul></li></ul><h3 id="updated"><code>updated</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>由于数据更改导致的虚拟 <code>DOM</code> 重新渲染和打补丁，在这之后会调用该钩子</li><li>当这个钩子被调用时，组件 <code>DOM</code> 已经更新，所以你现在可以执行依赖于 <code>DOM</code> 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之</li><li>注意 <code>updated</code> 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，<u>可以在 updated 里使用 vm.$nextTick</u></li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code that will run only after the</span></span><br><span class="line">    <span class="comment">// entire view has been re-rendered</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="activated"><code>activated</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>被 <code>keep-alive</code> 缓存的组件激活时调用</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><h3 id="deactivated"><code>deactivated</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>被 <code>keep-alive</code> 缓存的组件停用时调用</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><h3 id="beforeDestroy"><code>beforeDestroy</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>实例销毁之前调用。在这一步，实例仍然完全可用</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><h3 id="destroyed"><code>destroyed</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>实例销毁后调用。该钩子被调用后，对应 <code>Vue</code> 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><h3 id="errorCaptured"><code>errorCaptured</code></h3><ul><li>类型：<code>(err: Error, vm: Component, info: string) =&gt; ?boolean</code></li><li>详细：<ul><li>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。<wavy>此钩子可以返回 false 以阻止该错误继续向上传播</wavy></li><li>可以在此钩子中修改组件的状态。因此在捕获错误时，在模板或渲染函数中有一个条件判断来绕过其它内容就很重要；不然该组件可能会进入一个无限的渲染循环</li></ul></li><li>错误传播规则<ul><li>默认情况下，如果全局的 <code>config.errorHandler</code> 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报</li><li>如果一个组件的继承或父级从属链路中存在多个 <code>errorCaptured</code> 钩子，则它们将会被相同的错误逐个唤起</li><li>如果此 <code>errorCaptured</code> 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 <code>config.errorHandler</code></li><li>一个 <code>errorCaptured</code> 钩子能够返回 <code>false</code> 以<span class='nota' data-nota='本质上是说这个错误已经被搞定了且应该被忽略'>阻止错误继续向上传播</span>。它会阻止其它任何会被这个错误唤起的 <code>errorCaptured</code> 钩子和全局的 <code>config.errorHandler</code></li></ul></li></ul><h2 id="选项-资源">选项 / 资源</h2><h3 id="directives"><code>directives</code></h3><ul><li>类型：<code>Object</code></li><li>作用：包含 <code>Vue</code> 实例可用指令的哈希表</li></ul><h3 id="filters"><code>filters</code></h3><ul><li>类型：<code>Object</code></li><li>作用：包含 <code>Vue</code> 实例可用过滤器的哈希表</li></ul><h3 id="components"><code>components</code></h3><ul><li>类型：<code>Object</code></li><li>作用：包含 <code>Vue</code> 实例可用组件的哈希表</li></ul><h2 id="选项-组合">选项 / 组合</h2><h3 id="parent"><code>parent</code></h3><ul><li>类型：<code>vue instance</code></li><li>详细：<ul><li>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 <code>this.$parent</code> 访问父实例，子实例被推入父实例的 <code>$children</code> 数组中</li><li>节制地使用 <code>$parent</code> 和 <code>$children</code> - 它们的主要目的是作为访问组件的应急方法。更推荐用 <code>props</code> 和 <code>events</code> 实现父子组件通信</li></ul></li></ul><h3 id="mixins"><code>mixins</code></h3><ul><li>类型：<code>Array&lt;Object&gt;</code></li><li>详细：<ul><li><code>mixins</code> 选项接收一个混入对象的数组。这些混入对象可以像正常的实例对象一样包含实例选项，这些选项将会被合并到最终的选项中，使用的是和 <code>Vue.extend()</code> 一样的选项合并逻辑。也就是说，如果你的混入包含一个 <code>created</code> 钩子，而创建组件本身也有一个，那么两个函数都会被调用</li><li><code>mixin</code> 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;,</span><br><span class="line">  mixins: [mixin]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure><h3 id="extends"><code>extends</code></h3><ul><li>类型：<code>Object | Function</code></li><li>作用：允许声明扩展另一个组件 (可以是一个简单的选项对象或构造函数)，而无需使用 <code>Vue.extend</code>。这主要是为了便于扩展单文件组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CompA = &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在没有调用 `Vue.extend` 时候继承 CompA</span></span><br><span class="line"><span class="keyword">var</span> CompB = &#123;</span><br><span class="line">  <span class="keyword">extends</span>: CompA,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provide-inject"><code>provide / inject</code></h3><ul><li>类型：<ul><li><code>provide</code>：<code>Object | () =&gt; Object</code></li><li><code>inject</code>：<code>Array&lt;string&gt; | &#123;[key: string]: string | Symbol | Object&#125;</code></li></ul></li><li>详细：<ul><li>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效。如果你熟悉 <code>React</code>，这与 <code>React</code> 的上下文特性(<code>context</code>)很相似</li><li><code>provide</code> 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的 <code>property</code>。在该对象中你可以使用 <code>ES2015 Symbols</code> 作为 <code>key</code>，但是只在原生支持 <code>Symbol</code> 和 <code>Reflect.ownKeys</code> 的环境下可工作</li><li><code>inject</code> 选项应该是：一个字符串数组，或一个对象，对象的 <code>key</code> 是本地的绑定名，<code>value</code> 是在可用的注入内容中搜索用的 <code>key</code> (字符串或 <code>Symbol</code>)，或一个对象，该对象的 <code>from property</code> 是在可用的注入内容中搜索用的 <code>key</code> (字符串或 <code>Symbol</code>)，<code>default property</code> 是降级情况下使用的 <code>value</code></li><li><code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 <code>property</code> 还是可响应的</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件提供 &#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入 &#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.foo) <span class="comment">// =&gt; &quot;bar&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用symbol</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Provider = &#123;</span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      [s]: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123; s &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用注入的值作为一个 property 的默认值</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">  props: &#123;</span><br><span class="line">    bar: &#123;</span><br><span class="line">      <span class="keyword">default</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.foo</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用一个注入的值作为数据入口</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      bar: <span class="built_in">this</span>.foo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用默认值使其变成可选项</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123; <span class="attr">default</span>: <span class="string">&#x27;foo&#x27;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果它需要从一个不同名字的 property 注入，则使用 from 来表示其源 property</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 与 prop 的默认值类似，你需要对非原始值使用一个工厂方法</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选项-其它">选项 / 其它</h2><h3 id="name"><code>name</code></h3><ul><li>类型：<code>string</code></li><li>详细：<ul><li>只有作为组件选项时起作用</li><li>允许组件模板递归地调用自身。注意，组件在全局用 <code>Vue.component()</code> 注册时，全局 <code>ID</code> 自动作为组件的 <code>name</code></li><li>指定 <code>name</code> 选项的另一个好处是便于调试。有名字的组件有更友好的警告信息。另外，当在有 <code>vue-devtools</code>，未命名组件将显示成 <code>&lt;AnonymousComponent&gt;</code>，这很没有语义。通过提供 <code>name</code> 选项，可以获得更有语义信息的组件树</li></ul></li></ul><h3 id="delimiters"><code>delimiters</code></h3><ul><li>类型：<code>Array&lt;string&gt;</code></li><li>默认值：<code>[&quot;&#123;&#123;", "&#125;&#125;&quot;]</code></li><li>详细：<ul><li>这个选项只在完整构建版本中的浏览器内编译时可用</li><li>改变纯文本插入符号</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  delimiters: [<span class="string">&#x27;$&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值由 &#123;&#123;&#125;&#125; 变成了 $&#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="functional"><code>functional</code></h3><ul><li>类型：<code>boolean</code></li><li>作用：使组件无状态 (没有 <code>data</code>) 和无实例 (没有 <code>this</code> 上下文)。他们用一个简单的 <code>render</code> 函数返回虚拟节点使它们渲染的代价更小</li></ul><h3 id="model"><code>model</code></h3><ul><li>类型：<code>&#123; prop?: string, event?: string &#125;</code></li><li>作用：允许一个自定义组件在使用 <code>v-model</code> 时定制 <code>prop</code> 和 <code>event</code>。默认情况下，一个组件上的 <code>v-model</code> 会把 <code>value</code> 用作 <code>prop</code> 且把 <code>input</code> 用作 <code>event</code>，但是一些输入类型比如单选框和复选框按钮可能想使用 <code>value prop</code> 来达到不同的目的。使用 <code>model</code> 选项可以回避这些情况产生的冲突</li><li>简单来说就是将<kbd>自定义组件</kbd>实现数据双向绑定的效果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-model的语法糖</span></span><br><span class="line">&lt;input v-model=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">&lt;input v-bind=<span class="string">&quot;value&quot;</span> @input=<span class="string">&quot;value = $event.target.value&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块化 model 自定义</span></span><br><span class="line"></span><br><span class="line">&lt;my-component :value=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">&lt;my-component v-model=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">    event: <span class="string">&#x27;change&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  prop: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 自己触发事件</span></span><br><span class="line">    <span class="comment">// 传过来的值改变了</span></span><br><span class="line">    <span class="function"><span class="title">op</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;佩奇&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;my-component :value=<span class="string">&quot;value&quot;</span> @change=<span class="string">&quot;this.value = $event&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-checkbox&#x27;</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&#x27;checked&#x27;</span>,</span><br><span class="line">    event: <span class="string">&#x27;change&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// this allows using the `value` prop for a different purpose</span></span><br><span class="line">    value: <span class="built_in">String</span>,</span><br><span class="line">    <span class="comment">// use `checked` as the prop which take the place of `value`</span></span><br><span class="line">    checked: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;some value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-checkbox</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 相当于</span><br><span class="line"></span><br><span class="line">&lt;my-checkbox</span><br><span class="line">  :checked=&quot;foo&quot;</span><br><span class="line">  @change=&quot;val =&gt; &#123; foo = val &#125;&quot;</span><br><span class="line">  value=&quot;some value&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="inheritAttrs"><code>inheritAttrs</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li><li>作用：默认情况下，组件的根元素会继承组件的属性，如果不希望继承，设置为 <code>false</code>。取消默认继承后，可以通过 <code>$attrs</code> 属性显性的 <code>v-bind</code> 根元素上，注意：这个选项不影响 <code>class</code> 和 <code>style</code> 绑定</li></ul><h3 id="comments"><code>comments</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>false</code></li><li>作用：当设为 <code>true</code> 时，将会保留且渲染模板中的 <code>HTML</code> 注释。默认行为是舍弃它们，注意，这个选项只在完整构建版本中的浏览器内编译时可用</li></ul><h2 id="实例-property">实例 <code>property</code></h2><h3 id="vm-data"><code>vm.$data</code></h3><ul><li>类型：<code>Object</code></li><li>作用：<code>Vue</code> 实例观察的数据对象。<code>Vue</code> 实例代理了对其 <code>data</code> 对象 <code>property</code> 的访问</li></ul><h3 id="vm-props"><code>vm.$props</code></h3><ul><li>类型：<code>Object</code></li><li>作用：当前组件接收到的 <code>props</code> 对象。<code>Vue</code> 实例代理了对其 <code>props</code> 对象 <code>property</code> 的访问</li></ul><h3 id="vm-el"><code>vm.$el</code></h3><ul><li>类型：<code>Element</code></li><li>作用：<code>Vue</code> 实例使用的根 <code>DOM</code> 元素，只读属性</li></ul><h3 id="vm-options"><code>vm.$options</code></h3><ul><li>类型：<code>Object</code></li><li>作用：用于当前 <code>Vue</code> 实例的初始化选项。需要在选项中包含自定义 <code>property</code> 时会有用处，只读属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  customOption: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$options.customOption) <span class="comment">// =&gt; &#x27;foo&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vm-parent"><code>vm.$parent</code></h3><ul><li>类型：<code>Vue instance</code></li><li>作用：获取父实例对象，只读属性</li></ul><h3 id="vm-root"><code>vm.$root</code></h3><ul><li>类型：<code>Vue instance</code></li><li>作用：获取根实例对象，只读属性</li></ul><h3 id="vm-children"><code>vm.$children</code></h3><ul><li>类型：`Array<Vue instance></li><li>作用：当前实例的直接子组件。需要注意 <code>$children</code> 并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 <code>$children</code> 来进行数据绑定，考虑使用一个数组配合 <code>v-for</code> 来生成子组件，并且使用 <code>Array</code> 作为真正的来源</li></ul><h3 id="vm-slots"><code>vm.$slots</code></h3><ul><li>类型：<code>&#123; [name: string]: ?Array&lt;VNode&gt; &#125;</code></li><li>详细：<ul><li>无响应性</li><li>用来访问被插槽分发的内容。每个具名插槽有其相应的 <code>property</code> (例如：<code>v-slot:foo</code> 中的内容将会在 <code>vm.$slots.foo</code> 中被找到)。<code>default property</code> 包括了所有没有被包含在具名插槽中的节点，或 <code>v-slot:default</code> 的内容</li><li>请注意插槽不是响应性的。如果你需要一个组件可以在被传入的数据发生变化时重渲染，我们建议改变策略，依赖诸如 <code>props</code> 或 <code>data</code> 等响应性实例选项</li><li>在使用渲染函数书写一个组件时，访问 <code>vm.$slots</code> 最有帮助</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Me<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some page content, which will be included in vm.$slots.default, because it&#x27;s not inside a named slot.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Copyright 2016 Evan You<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>If I have some content down here, it will also be included in vm.$slots.default.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> header = <span class="built_in">this</span>.$slots.header</span><br><span class="line">    <span class="keyword">var</span> body   = <span class="built_in">this</span>.$slots.default</span><br><span class="line">    <span class="keyword">var</span> footer = <span class="built_in">this</span>.$slots.footer</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">      createElement(<span class="string">&#x27;header&#x27;</span>, header),</span><br><span class="line">      createElement(<span class="string">&#x27;main&#x27;</span>, body),</span><br><span class="line">      createElement(<span class="string">&#x27;footer&#x27;</span>, footer)</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vm-scopedSlots"><code>vm.$scopedSlots</code></h3><ul><li>类型：<code>&#123; [name: string]: props =&gt; Array&lt;VNode&gt; | undefined &#125;</code></li><li>详细：<ul><li>用来访问作用域插槽。对于包括 默认 <code>slot</code> 在内的每一个插槽，该对象都包含一个返回相应 <code>VNode</code> 的函数</li><li><code>vm.$scopedSlots</code> 在使用渲染函数开发一个组件时特别有用</li></ul></li><li>注意：<ul><li>作用域插槽函数现在保证返回一个 <code>VNode</code> 数组，除非在返回值无效的情况下返回 <code>undefined</code></li><li>所有的 <code>$slots</code> 现在都会作为函数暴露在 <code>$scopedSlots</code> 中。如果你在使用渲染函数，不论当前插槽是否带有作用域，我们都推荐始终通过 <code>$scopedSlots</code> 访问它们。这不仅仅使得在未来添加作用域变得简单，也可以让你最终轻松迁移到所有插槽都是函数的 <code>Vue 3</code></li></ul></li></ul><h3 id="vm-refs"><code>vm.$refs</code></h3><ul><li>类型：<code>Object</code></li><li>作用：一个对象，持有注册过 <code>ref attribute</code> 的所有 <code>DOM</code> 元素和组件实例，只读属性</li></ul><h3 id="vm-isServer"><code>vm.$isServer</code></h3><ul><li>类型：<code>boolean</code></li><li>作用：当前 <code>vue</code> 实例是否运行于服务器，只读属性</li></ul><h3 id="vm-attrs"><code>vm.$attrs</code></h3><ul><li>类型：<code>&#123; [key: string]: string &#125;</code></li><li>作用：包含了父作用域中不作为 <code>prop</code> 被识别 (且获取) 的 <code>attribute</code> 绑定 (<code>class</code> 和 <code>style</code> 除外)。当一个组件没有声明任何 <code>prop</code> 时，这里会包含所有父作用域的绑定 (<code>class</code> 和 <code>style</code> 除外)，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件——在创建高级别的组件时非常有用，只读属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">super</span>-component :value=<span class="string">&quot;&#123;1&#125;&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="vm-listeners"><code>vm.$listeners</code></h3><ul><li>类型：<code>&#123; [key: string]: Function | Array&lt;Function&gt; &#125;</code></li><li>作用：包含了父作用域中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件——在创建更高层次的组件时非常有用</li></ul><h2 id="实例方法-数据">实例方法 / 数据</h2><h3 id="vm-watch-expOrFn-callback-options"><code>vm.$watch( expOrFn, callback, [options] )</code></h3><ul><li>参数：<ul><li><code>&#123;string | Function&#125; expOrFn</code></li><li><code>&#123;Function | Object&#125; callback</code></li><li><code>&#123;Object&#125; [options]</code><ul><li><code>&#123;boolean&#125; deep</code></li><li><code>&#123;boolean&#125; immediate</code></li></ul></li></ul></li><li>返回值：<code>&#123;Function&#125; unwatch</code></li><li>作用：观察 <code>Vue</code> 实例上的一个表达式或者一个函数计算结果的变化。回调函数得到的参数为新值和旧值。表达式只接受简单的键路径。对于更复杂的表达式，用一个函数取代</li><li>注意：在变更 (不是替换) 对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象/数组。Vue 不会保留变更之前值的副本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键路径</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;a.b.c&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 做点什么</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line">vm.$watch(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 表达式 `this.a + this.b` 每次得出一个不同的结果时</span></span><br><span class="line">    <span class="comment">// 处理函数都会被调用。</span></span><br><span class="line">    <span class="comment">// 这就像监听一个未被定义的计算属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 做点什么</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vm.$watch 返回一个取消观察函数，用来停止触发回调：</span></span><br><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(<span class="string">&#x27;a&#x27;</span>, cb)</span><br><span class="line"><span class="comment">// 之后取消观察</span></span><br><span class="line">unwatch()</span><br></pre></td></tr></table></figure><ul><li>选项：<code>deep</code>，为了发现对象内部值的变化，可以在选项参数中指定 deep: true。注意监听数组的变更不需要这么做</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;someObject&#x27;</span>, callback, &#123;</span><br><span class="line">  deep: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.someObject.nestedValue = <span class="number">123</span></span><br><span class="line"><span class="comment">// callback is fired</span></span><br></pre></td></tr></table></figure><ul><li>选项：<code>immediate</code>，在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调，注意在带有 <code>immediate</code> 选项时，不能在第一次回调时取消侦听器侦听给定的 <code>property</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;a&#x27;</span>, callback, &#123;</span><br><span class="line">  immediate: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 立即以 `a` 的当前值触发回调</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这会导致报错</span></span><br><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    doSomething()</span><br><span class="line">    unwatch()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你仍然希望在回调内部调用一个取消侦听的函数，你应该先检查其函数的可用性</span></span><br><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    doSomething()</span><br><span class="line">    <span class="keyword">if</span> (unwatch) &#123;</span><br><span class="line">      unwatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="vm-set-target-propertyName-index-value"><code>vm.$set( target, propertyName/index, value )</code></h3><ul><li>参数：<ul><li><code>&#123;Object | Array&#125; target</code></li><li><code>&#123;string | number&#125; propertyName/index</code></li><li><code>&#123;any&#125; value</code></li></ul></li><li>作用：这是全局 <code>Vue.set</code> 的别名，返回设置的值</li></ul><h3 id="vm-delete-target-propertyName-index"><code>vm.delete(target, propertyName/index)</code></h3><ul><li>参数：<ul><li><code>&#123;Object | Array&#125; target</code></li><li><code>&#123;string | number&#125; propertyName/index</code></li></ul></li><li>作用：这是 <code>Vue.delete</code> 的别名</li></ul><h2 id="实例方法-事件">实例方法 / 事件</h2><h3 id="vm-on-event-callback"><code>vm.$on(event, callback)</code></h3><ul><li>参数：<ul><li><code>&#123;string | Array&lt;string&gt;&#125; event</code></li><li><code>&#123;Function&#125; callback</code></li></ul></li><li>作用：监听当前实例上的自定义事件。事件可以由 <code>vm.$emit</code> 触发。回调函数会接收所有传入事件触发函数的额外参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm.$on(<span class="string">&#x27;test&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line">vm.$emit(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;hi&quot;</span></span><br></pre></td></tr></table></figure><h3 id="vm-once-event-callback"><code>vm.$once(event, callback)</code></h3><ul><li>参数：<ul><li><code>&#123;string&#125; event</code></li><li><code>&#123;Function&#125; callback</code></li></ul></li><li>作用：监听一个自定义事件，但只触发一次，监听器就会被移除</li></ul><h3 id="vm-off-event-callback"><code>vm.$off([event, callback])</code></h3><ul><li>参数：<ul><li><code>&#123;string | Array&lt;string&gt;&#125; event</code></li><li><code>&#123;Function&#125; callback</code></li></ul></li><li>作用：<ul><li>移除自定义事件监听器</li><li>如果没有提供参数，则移除所有事件监听器</li><li>如果只提供了事件名，则移除该事件所有的监听器</li><li>如果同时提供了事件和回调，则只移除这个回调的监听器</li></ul></li></ul><h3 id="vm-emit-eventName-args"><code>vm.$emit(eventName, [...args])</code></h3><ul><li><p>参数：</p><ul><li><code>&#123;string&#125; eventName</code></li><li><code>[...args]</code></li></ul></li><li><p>作用：触发当前实例上的事件，附加参数都会传给监听器回调</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;welcome-button&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button v-on:click=&quot;$emit(&#x27;welcome&#x27;)&quot;&gt;</span></span><br><span class="line"><span class="string">      Click me to be welcomed</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;emit-example-simple&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-button</span> <span class="attr">v-on:welcome</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">welcome-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#emit-example-simple&#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;Hi!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实例方法-生命周期">实例方法 / 生命周期</h2><h3 id="vm-mount-elementOrSelector"><code>vm.$mount([elementOrSelector])</code></h3><ul><li>参数：<ul><li><code>&#123;Element | string&#125; [elementOrSelector]</code></li><li><code>&#123;boolean&#125; [hydrating]</code></li></ul></li><li>返回值：<code>vm</code> 实例自身</li><li>用法：<ul><li>如果 <code>Vue</code> 实例在实例化时没有收到 <code>el</code> 选项，则它处于未挂载状态，没有关联的 <code>DOM</code> 元素。可以使用 <code>vm.$mount()</code> 手动地挂载一个未挂载的实例</li><li>如果没有提供 <code>elementOrSelector</code> 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 <code>DOM API</code> 把它插入文档中</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;Hello!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并挂载到 #app (会替换 #app)</span></span><br><span class="line"><span class="keyword">new</span> MyComponent().$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line"><span class="keyword">new</span> MyComponent(&#123; <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者，在文档之外渲染并且随后挂载</span></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> MyComponent().$mount()</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).appendChild(component.$el)</span><br></pre></td></tr></table></figure><h3 id="vm-forceUpdate"><code>vm.$forceUpdate()</code></h3><ul><li>作用：迫使 <code>vue</code> 实例重新渲染，注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件</li></ul><h3 id="vm-nextTick-callback"><code>vm.$nextTick([callback])</code></h3><ul><li>参数：<code>&#123;Function&#125; [callback]</code></li><li>作用：将回调延迟到下次 <code>DOM</code> 更新循环之后执行。在修改数据之后立即使用它，然后等待 <code>DOM</code>更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    example: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 修改数据</span></span><br><span class="line">      <span class="built_in">this</span>.message = <span class="string">&#x27;changed&#x27;</span></span><br><span class="line">      <span class="comment">// DOM 还没有更新</span></span><br><span class="line">      <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// DOM 现在更新了</span></span><br><span class="line">        <span class="comment">// `this` 绑定到当前实例</span></span><br><span class="line">        <span class="built_in">this</span>.doSomethingElse()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vm-destroy"><code>vm.$destroy()</code></h3><ul><li>用法：完全销毁一个实例，清理它与其它实例的连接，解绑它的全部指令及事件监听器，触发 <code>beforeDestroy</code> 和 <code>destroyed</code> 钩子</li></ul><h2 id="指令">指令</h2><h3 id="v-text"><code>v-text</code></h3><ul><li>预期：<code>string</code></li><li>详细：更新元素的 <code>textContent</code>，如果要更新部分的 <code>textContent</code>，需要使用 <code>&#123;&#123;Mustache&#125;&#125;</code> 插值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 和下面的一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-html"><code>v-html</code></h3><ul><li>预期：<code>string</code></li><li>详细：更新元素的 <code>innerHTML</code>。注意：内容按普通 <code>HTML</code> 插入 - 不会作为 <code>Vue</code> 模板进行编译。如果试图使用 <code>v-html</code> 组合模板，可以重新考虑是否通过使用组件来替代</li><li>注意：<ul><li>在网站上<wavy>动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击</wavy>，只在可信内容上使用 <code>v-html</code>，永不用在用户提交的内容上</li><li>在单文件组件里，<code>scoped</code> 的样式不会应用在 <code>v-html</code> 内部，因为那部分 <code>HTML</code> 没有被 <code>Vue</code> 的模板编译器处理。如果你希望针对 <code>v-html</code> 的内容设置带作用域的 <code>CSS</code>，你可以替换为 <code>CSS Modules</code> 或用一个额外的全局 <code>&lt;style&gt;</code> 元素手动设置类似 <code>BEM</code> 的作用域策略</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><code>v-show</code></h3><ul><li>预期：<code>any</code></li><li>作用：根据表达式之真假值，切换元素的 <code>display CSS property</code>，当条件变化时该指令触发过渡效果</li></ul><h3 id="v-if"><code>v-if</code></h3><ul><li>预期：<code>any</code></li><li>作用：根据表达式的值的 <code>truthiness</code> 来有条件地渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 <code>&lt;template&gt;</code>，将提出它的内容作为条件块，当条件变化时该指令触发过渡效果</li><li>注意：当和 <code>v-if</code> 一起使用时，<code>v-for</code> 的优先级比 <code>v-if</code> 更高</li></ul><h3 id="v-else"><code>v-else</code></h3><ul><li>限制：前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code></li><li>作用：条件渲染</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span></span><br><span class="line">  Now you see me</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Now you don&#x27;t</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-else-if"><code>v-else-if</code></h3><ul><li>类型：<code>any</code></li><li>限制：前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code></li><li>作用：条件渲染</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><code>v-for</code></h3><ul><li>预期：<code>Array | Object | number | string | Iterable</code></li><li>用法：基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 <code>alias in expression</code>，为当前遍历的元素提供别名</li><li>新增：<code>v-for</code> 实现了部署了 <code>Interable</code> 接口的值，包括原生的 <code>Map</code> 和 <code>Set</code>，不过 <code>vue2.x</code> 目前不支持响应式的 <code>Map</code> 和 <code>Set</code>，所以无法自动探测到变更</li><li>注意：当和 <code>v-if</code> 一起使用时，<code>v-for</code> 的优先级比 <code>v-if</code> 更高</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, key) in object&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, name, index) in object&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><code>v-on</code></h3><ul><li>缩写：<code>@</code></li><li>预期：<code>Function | Inline Statement | Object</code></li><li>参数：<code>event</code></li><li>修饰符：<ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code></li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code></li><li><code>.capture</code> - 添加事件侦听器时使用 <code>capture</code> 模式</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调</li><li><code>.&#123;keyCode | keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调</li><li><code>.native</code> - 监听组件根元素的原生事件</li><li><code>.once</code> - 只触发一次回调</li><li><code>.left</code> - <code>(2.2.0)</code> 只当点击鼠标左键时触发</li><li><code>.right</code> - <code>(2.2.0)</code> 只当点击鼠标右键时触发</li><li><code>.middle</code> - <code>(2.2.0)</code> 只当点击鼠标中键时触发</li><li><code>.passive</code> - <code>(2.3.0)</code> 以 <code>&#123;passive: true&#125;</code> 模式添加侦听器</li></ul></li><li>用法：<ul><li>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略</li><li>用在普通元素上时，只能监听原生 <code>DOM</code> 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件</li><li>在监听原生 <code>DOM</code> 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event property：v-on:click=&quot;handle('ok', $event)&quot;</code></li><li>从 <code>2.4.0</code> 开始，<code>v-on</code> 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态事件 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:</span>[<span class="attr">event</span>]=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doThat(&#x27;hello&#x27;, $event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态事件缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @[<span class="attr">event</span>]=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 停止冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  串联修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;onEnter&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.13</span>=<span class="string">&quot;onEnter&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击回调只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象语法 (2.4.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">在子组件上监听自定义事件 (当子组件触发“my-event”时将调用事件处理器)：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleThis(123, $event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件中的原生事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">click.native</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><code>v-bind</code></h3><ul><li>缩写：<code>:</code></li><li>预期：<code>any (with argument) | Object (without argument)</code></li><li>参数：<code>attrOrProp (optional)</code></li><li>修饰符：<ul><li><code>.prop</code></li><li><code>.camel</code></li><li><code>.sync</code></li></ul></li><li>用法：<ul><li>动态地绑定一个或多个 <code>attribute</code>，或一个组件 <code>prop</code> 到表达式</li><li>在绑定 <code>class</code> 或 <code>style attribute</code> 时，支持其它类型的值，如数组或对象</li><li>在绑定 <code>prop</code> 时，<code>prop</code> 必须在子组件中声明。可以用修饰符指定不同的绑定类型</li><li>没有参数时，可以绑定到一个包含键值对的对象。注意此时 <code>class</code> 和 <code>style</code> 绑定不支持数组和对象</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个 attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联字符串拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;/path/to/images/&#x27; + fileName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- class 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;red: isRed&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, classB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, &#123;classB: isB, classC: isC&#125;]&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: size + &#x27;px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObjectA, styleObjectB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123;id: someProp, &#x27;other-attr&#x27;: otherProp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 prop 修饰符绑定 DOM attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:text-content.prop</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop</span>=<span class="string">&quot;someThing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-bind</span>=<span class="string">&quot;$props&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XLink --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:xlink:special</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.camel</code> 修饰符允许在使用 <code>DOM</code> 模板时将 <code>v-bind property</code> 名称驼峰化，例如 <code>SVG</code> 的 <code>viewBox property</code>，在使用字符串模板或通过 <code>vue-loader / vueify</code> 编译时，无需使用 <code>.camel</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">:view-box.camel</span>=<span class="string">&quot;viewBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model"><code>v-model</code></h3><ul><li>预期：随表单控件类型不同而不同</li><li>限制：<ul><li><code>input</code></li><li><code>select</code></li><li><code>textarea</code></li><li><code>components</code></li></ul></li><li>修饰符：<ul><li><code>.lazy</code> - 取代 <code>input</code> 监听 <code>change</code> 事件</li><li><code>.number</code> - 输入字符串转为有效的数字</li><li><code>.trim</code> - 输入首尾空格过滤</li></ul></li><li>用法：在表单控件或组件上创建双向绑定</li></ul><h3 id="v-slot"><code>v-slot</code></h3><ul><li>缩写：<code>#</code></li><li>预期：可放置在函数参数位置的 <code>javascript</code> 表达式，可选，只需要在为插槽传入 <code>prop</code> 的时候使用</li><li>参数：插槽名(可选，默认是 <code>default</code>)</li><li>限制：<ul><li><code>template</code></li><li>组件</li></ul></li><li>用法：提供具名插槽或需要接收 <code>prop</code> 的插槽</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 具名插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    Header content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  Default slot content</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    Footer content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 接收 prop 的具名插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">infinite-scroll</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:item</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; slotProps.item.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">infinite-scroll</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 接收 prop 的默认插槽，使用了解构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mouse-position</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; x, y &#125;&quot;</span>&gt;</span></span><br><span class="line">  Mouse position: &#123;&#123; x &#125;&#125;, &#123;&#123; y &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">mouse-position</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-pre"><code>v-pre</code></h3><ul><li>不需要参数</li><li>用法：跳过这个元素和它的子元素的编译过程。可以用来显示原始 <code>Mustache</code> 标签。跳过大量没有指令的节点会加快编译</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;me&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 原样 &lt;span&gt;&#123;&#123;me&#125;&#125;&lt;/span&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-cloak"><code>v-cloak</code></h3><ul><li>不需要表达式</li><li>用法：这个指令保持在元素上直到关联实例结束编译。和 <code>CSS</code> 规则如 <code>[v-cloak] &#123;display: none&#125;</code> 一起用时，这个指令可以隐藏未编译的 <code>Mustache</code> 标签直到实例准备完毕</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直到编译结束后显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-once"><code>v-once</code></h3><ul><li>不需要表达式</li><li>详细：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有子元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>comment<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-once</span> <span class="attr">:comment</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- `v-for` 指令--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;i in list&quot;</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="特殊的-attribute">特殊的 <code>attribute</code></h2><h3 id="key"><code>key</code></h3><ul><li>预期：<code>number | string | boolean (2.4.2 新增) | symbol (2.5.12 新增)</code></li><li><code>key</code> 的特殊 <code>attribute</code> 主要用在 <code>Vue</code> 的虚拟 <code>DOM</code> 算法，在新旧 <code>nodes</code> 对比时辨识 <code>VNodes</code>。如果不使用 <code>key</code>，<code>Vue</code> 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 <code>key</code> 时，它会基于 <code>key</code> 的变化重新排列元素顺序，并且会移除 <code>key</code> 不存在的元素</li><li>有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误</li><li>它可以用于强制替换元素 / 组件，而不是重复使用它<ul><li>完整地触发组件的生命周期钩子</li><li>触发过渡</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当 text 改变时，span总是被替换而不是修改 text的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">:key</span>=<span class="string">&quot;text&quot;</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ref"><code>ref</code></h3><ul><li>预期：<code>string</code></li></ul><p><code>ref</code>被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 <code>DOM</code> 元素上使用，引用指向的就是 <code>DOM</code> 元素；如果用在子组件上，引用就指向组件实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- `vm.$refs.p` will be the DOM node --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含 <code>DOM</code> 节点或组件实例的数组</p><p>关于 <code>ref</code> 注册时间的重要说明：因为 <code>ref</code> 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！<code>$refs</code> 也不是响应式的，因此你不应该试图用它在模板中做数据绑定</p><h3 id="is"><code>is</code></h3><ul><li>预期：<code>string | Object(组件的选项对象)</code></li></ul><p>用于动态组件且基于DOM内模板的限制来工作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当 `currentView` 改变时，组件也跟着改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这样做是有必要的，因为 `&lt;my-row&gt;` 放在一个 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- `&lt;table&gt;` 内可能无效且被放置到外面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;my-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="slot"><code>slot</code></h3><p>已经废弃，使用 <code>v-slot</code> 代替它，用于标记哪个具名插槽中插入子组件内容</p><h3 id="slot-scope"><code>slot-scope</code></h3><p>已经废弃，使用 <code>v-slot=&quot;property&quot;</code> 代替</p><h3 id="scope"><code>scope</code></h3><p>已经废弃，使用 <code>v-slot:attrbute</code> 或 <code>#attrbute</code> 代替</p><h2 id="内置的组件">内置的组件</h2><h3 id="component"><code>component</code></h3><ul><li><code>props</code>fsf<ul><li><code>is</code></li><li><code>inline-template</code></li></ul></li><li>用法<ul><li>渲染一个元组件为动态组件，根据 <code>is</code> 的值，来决定哪个组件被渲染</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态组件由 vm 实例的 `componentId` property 控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 也能够渲染注册过的组件或 prop 传入的组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;$options.components.child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="transition"><code>transition</code></h3><ul><li><code>props</code>：<ul><li><code>name</code> - <code>string</code>，用于自动生成 <code>CSS</code> 过渡类名。例如：<code>name: 'fade'</code> 将自动拓展为 <code>.fade-enter，.fade-enter-active</code> 等。默认类名为 <code>v</code></li><li><code>appear</code> - <code>boolean</code>，是否在初始渲染时使用过渡。默认为 <code>false</code>。</li><li><code>css</code> - <code>boolean</code>，是否使用 <code>CSS</code> 过渡类。默认为 <code>true</code>。如果设置为 <code>false</code>，将只通过组件事件触发注册的 <code>JavaScript</code> 钩子。</li><li><code>type</code> - <code>string</code>，指定过渡事件类型，侦听过渡何时结束。有效值为 <code>transition</code> 和 <code>animation</code>。默认 <code>Vue.js</code> 将自动检测出持续时间长的为过渡事件类型</li><li><code>mode</code> - <code>string</code>，控制离开/进入过渡的时间序列。有效的模式有 <code>out-in</code> 和 <code>in-out</code>；默认同时进行。</li><li><code>duration</code> - <code>number</code> | <code>&#123;enter: number, leave: number&#125;</code> 指定过渡的持续时间。默认情况下，<code>Vue</code> 会等待过渡所在根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。</li><li><code>enter-class</code> - <code>string</code></li><li><code>leave-class</code> - <code>string</code></li><li><code>appear-class</code> - <code>string</code></li><li><code>enter-to-class</code> - <code>string</code></li><li><code>leave-to-class</code> - <code>string</code></li><li><code>appear-to-class</code> - <code>string</code></li><li><code>enter-active-class</code> - <code>string</code></li><li><code>leave-active-class</code> - <code>string</code></li><li><code>appear-active-class</code> - <code>string</code></li></ul></li><li>事件<ul><li><code>before-enter</code></li><li><code>before-leave</code></li><li><code>before-appear</code></li><li><code>enter</code></li><li><code>leave</code></li><li><code>appear</code></li><li><code>after-enter</code></li><li><code>after-leave</code></li><li><code>after-appear</code></li><li><code>enter-cancelled</code></li><li><code>leave-cancelled (v-show only)</code></li><li><code>appear-cancelled</code></li></ul></li><li>用法：</li></ul><p><code>&lt;transition&gt;</code> 元素作为单个元素/组件的过渡效果。<code>&lt;transition&gt;</code> 只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在可被检查的组件层级中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简单元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件钩子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;transition-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">after-enter</span>=<span class="string">&quot;transitionComplete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    transitionComplete: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 传入 &#x27;el&#x27; 这个 DOM 元素作为参数。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#transition-demo&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="transition-group"><code>transition-group</code></h3><ul><li><code>props</code><ul><li><code>tag</code> - <code>string</code>，默认是 <code>span</code></li><li><code>move-class</code> - 覆盖移动过渡期间应用的 <code>css</code> 类</li><li>除了 <code>mode</code>，其他 <code>attribute</code> 和 <code>transition</code> 相同</li></ul></li><li>事件<ul><li>事件和 <code>transition</code> 相同</li></ul></li><li>用法<ul><li><code>&lt;transition-group&gt;</code> 元素作为多个元素/组件的过渡效果。<code>&lt;transition-group&gt;</code> 渲染一个真实的 <code>DOM</code> 元素。默认渲染 <code>&lt;span&gt;</code>，可以通过 <code>tag attribute</code> 配置哪个元素应该被渲染</li><li><code>&lt;transition-group&gt;</code> 支持通过 <code>CSS transform</code> 过渡移动。当一个子节点被更新，从屏幕上的位置发生变化，它会被应用一个移动中的 <code>CSS</code> 类 (通过 <code>name attribute</code> 或配置 <code>move-class attribute</code> 自动生成)。如果 <code>CSS transform property</code> 是可过渡<code>property</code>，当应用移动类时，将会使用 <code>FLIP</code> 技术使元素流畅地到达动画终点</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slide&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="keep-alive"><code>keep-alive</code></h3><ul><li><code>props</code><ul><li><code>include</code> - 字符串或正则表达式，只有名称匹配的组件会被缓存</li><li><code>exclude</code> - 字符串或正则表达式，任何名称匹配的组件都不会被缓存</li><li><code>max</code> - 最多可以缓存多少个组件实例</li></ul></li><li>用法<ul><li><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 <code>DOM</code> 元素，也不会出现在组件的父组件链中</li><li>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 &lt;keep-alive&gt; 树内的所有嵌套组件中触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主要用于保留组件状态或避免重新渲染 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多个条件判断的子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp-a</span> <span class="attr">v-if</span>=<span class="string">&quot;a &gt; 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp-b</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 和 `&lt;transition&gt;` 一起使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，<code>keep-alive</code> 是<u>用在其一个直属的子组件被开关的情形</u>，如果你在其中有 <code>v-for</code> 则不会工作。如果有上述的多个条件性的子元素，<code>&lt;keep-alive&gt;</code> 要求同时只有一个子元素被渲染</p><p><code>include</code> 和 <code>exclude</code> 允许组件有条件地缓存，二者都可以用逗号分割字符串、正则表达式或一个数字表示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;a,b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)。匿名组件不能被匹配</p><p><code>max</code> 表示最多可以缓存多少组件，一旦这个数字达到了，新实例创建之前，已缓存组件中最久没有被访问的实例会被销毁</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;keep-alive&gt; 不会在函数式组件中正常工作，因为它们没有缓存实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:max</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="slot-2"><code>slot</code></h3><ul><li><code>props</code>：<code>name</code> - <code>string</code> 用于命名插槽</li><li><code>usage</code>: <code>slot</code> 元素作为组件模板之中的内容分发插槽，<code>slot</code> 元素自身将会被替换</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x进阶用法</title>
      <link href="262ac49e/"/>
      <url>262ac49e/</url>
      
        <content type="html"><![CDATA[<h2 id="混入">混入</h2><span class='nota' data-nota='mixin'>混入</span>提供了一种非常灵活的方式，来分发 `vue` 组件中的可复用功能，一个混入对象可以包含任意组件选项，当组件使用混入对象时，所有混入对象的选项将被混入到组件本身的选项<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.hello()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123; <span class="comment">//使用Vue.extend方法创建一个组件构造器</span></span><br><span class="line">  mixins: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将组件构造器实例化</span></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// =&gt; &quot;hello from mixin!&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里介绍一下 Vue.extend(&#123;&#125;) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    Vue.extend(&#123;&#125;) 其实是一个vue的构造器，继承自vue</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用这个构造器可以创建一个组件子类，参数是一个包含组件选项的对象，注意data必须是一个函数才可以在extend中使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    当然也可以这样 new Vue.extend()(&#123;el: &#x27;#app&#x27;, data()&#123;&#125;&#125;)  但是不推荐这么写  new Vue(&#123;&#125;) 不香嘛~</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Component = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// data: &#123;name: &#x27;苏西&#x27;&#125;,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里一定要是函数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">&#x27;苏西&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;佩奇&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建一个vue组件实例 vm 挂载在app上</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Component().$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选项合并">选项合并</h3><p>当组件和混入对象含有同名选项时，这些选项将会以合适的方式进行合并，默认合并策略如下：</p><ol><li><span class='nota' data-nota='data'>数据对象</span>在内部进行递归合并，如果<span class='nota' data-nota='同名现象'>发生冲突</span>以组件数据优先</li><li>同名钩子函数合并为一个数组，都会被调用，但混入对象的钩子函数会在组件钩子函数<kbd>之前</kbd>调用</li><li>值为对象的选项，如 <code>methods</code>、<code>components</code> 和 <span class='nota' data-nota='自定义指令，后面介绍'>directives</span>，将会被合并为一个对象，如果键名发生冲突，取组件对象的键值对</li><li><code>Vue.extend()</code> 也<u>使用同样的策略进行合并</u></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个混入对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myMixin = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">&#x27;佩奇&#x27;</span> <span class="comment">// 不会覆盖组件中的name</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.hello(); <span class="comment">// 1. 先执行混入的钩子 methods中的hello被组件中的hello所覆盖</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;混入的钩子函数&#x27;</span>); <span class="comment">// 3. 执行混入的钩子方法</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">hi</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;hi mixin 混入&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        mixins: [myMixin],</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">&#x27;苏西&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.hi(); <span class="comment">// 2. 执行混入的hi</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;组件自身的钩子函数&#x27;</span>); <span class="comment">// 4. 执行组件中的钩子</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;hello from component&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局混入">全局混入</h3><p>混入可以进行全局注册，使用全局混入，它将影响每一个之后创建的 <code>vue</code> 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为自定义的选项 &#x27;myOption&#x27; 注入一个处理器。</span></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this.$options 获取当前实例配置项(配置对象，例如 el,data,methods等)</span></span><br><span class="line">    <span class="keyword">var</span> myOption = <span class="built_in">this</span>.$options.myOption</span><br><span class="line">    <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(myOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  myOption: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-info"></i><p>请谨慎使用全局混入，因为它会影响每个单独创建的 <code>vue</code> 实例 (包括第三方组件)。大多数情况下，只应当应用于自定义选项，推荐将其作为插件发布，以避免重复应用混入</p></div><h3 id="自定义选项合并策略">自定义选项合并策略</h3><p>自定义选项将使用<span class='nota' data-nota='就是上面的四条策略'>默认策略</span>，如果想让自定义选项以自定义逻辑合并，可以向 <code>Vue.config.optionMergeStrategies</code> 添加一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设组件中有一个属性 myOption 混入中也有一个属性 myOption 下面定义myOption的合并策略</span></span><br><span class="line">Vue.config.optionMergeStrategies.myOption = <span class="function"><span class="keyword">function</span>(<span class="params">toVal, fromVal</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回合并后的值 </span></span><br><span class="line">    <span class="built_in">console</span>.log(toVal, fromVal);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!toVal)&#123;</span><br><span class="line">        <span class="keyword">return</span> fromVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!fromVal)&#123;</span><br><span class="line">        <span class="keyword">return</span> toVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> toVal + fromVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于多数值为对象的选项，可以使用与 methods 相同的合并策略</span></span><br><span class="line"><span class="keyword">var</span> strategies = Vue.config.optionMergeStrategies</span><br><span class="line">strategies.myOption = strategies.methods</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义混入策略</span></span><br><span class="line">Vue.config.optionMergeStrategies.myOption = <span class="function"><span class="keyword">function</span>(<span class="params">toVal, fromVal</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回合并后的值 </span></span><br><span class="line">    <span class="built_in">console</span>.log(toVal, fromVal);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!toVal)&#123;</span><br><span class="line">        <span class="keyword">return</span> fromVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!fromVal)&#123;</span><br><span class="line">        <span class="keyword">return</span> toVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> toVal + fromVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">    myOption: <span class="string">&#x27;suxi&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    myOption: <span class="string">&#x27;peiqi&#x27;</span>,</span><br><span class="line">    mixins: [myMixin],</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$options.myOption); <span class="comment">// suxipeiqi</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义指令">自定义指令</h2><p>除了核心功能默认内置的指令(<code>v-model</code> 和 <code>v-show</code>)，<code>vue</code> 允许注册自定义指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举个栗子</span></span><br><span class="line"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时的回调</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册指令，组件也接受一个 directives 的选项</span></span><br><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候  &lt;input v-focus&gt;</span></span><br></pre></td></tr></table></figure><h3 id="钩子函数">钩子函数</h3><p>一个指令定义对象可以提供下面几个钩子函数(可选)</p><ol><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用，这里可以进行一次性的初始化设置</li><li><code>inserted</code>：被绑定元素插入父节点时调用(仅保证父节点存在，但不一定已被插入到文档中)</li><li><code>update</code>：所在组件的 <code>VNode</code> 更新时调用，但是可能发生在其子 <code>VNode</code> 更新之前，指令的值可能发生了改变，也可能没有，但是可以通过比较更新前后的值来忽略不必要的模板更新</li><li><code>componentUpdated</code>：指令所在组件的 <code>VNode</code> 及其子 <code>VNode</code> 全部更新后调用</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用</li></ol><h3 id="钩子函数的参数">钩子函数的参数</h3><p>指令钩子函数会被传入以下参数</p><ol><li><code>el</code>：指令所绑定的元素，可以直接操作 <code>dom</code></li><li><code>binding</code>：一个对象，格式如下<ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀</li><li><code>value</code>：指令的绑定值，例如 <code>v-my-directive=&quot;1 + 1&quot;</code>，绑定值为 <code>2</code></li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用，无论是否改变都可用</li><li><code>expression</code>：字符串形式的指令表达式，例如 <code>v-my-directive=&quot;1 + 1&quot;</code>，表达式为 <code>&quot;1 + 1&quot;</code></li><li><code>arg</code>：传给指令的参数，可选，例如 <code>v-my-directive:foo</code> 中，参数是 <code>foo</code></li><li><code>modifiers</code>：一个包含修饰符的对象，例如 <code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123;foo: true, bar: true&#125;</code></li></ul></li><li><code>vnode</code>：<code>vue</code> 编译生成的虚拟节点</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用</li></ol><div class="note red icon flat"><i class="note-icon fa fa-paper-plane"></i><p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-demo:foo.a.b</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;demo&#x27;</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">JSON</span>.stringify</span><br><span class="line">    el.innerHTML =</span><br><span class="line">      <span class="string">&#x27;name: &#x27;</span>       + s(binding.name) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// demo</span></span><br><span class="line">      <span class="string">&#x27;value: &#x27;</span>      + s(binding.value) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// hello</span></span><br><span class="line">      <span class="string">&#x27;expression: &#x27;</span> + s(binding.expression) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// message</span></span><br><span class="line">      <span class="string">&#x27;argument: &#x27;</span>   + s(binding.arg) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// foo</span></span><br><span class="line">      <span class="string">&#x27;modifiers: &#x27;</span>  + s(binding.modifiers) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// &#123;a: true, b: true&#125;</span></span><br><span class="line">      <span class="string">&#x27;vnode keys: &#x27;</span> + <span class="built_in">Object</span>.keys(vnode).join(<span class="string">&#x27;, &#x27;</span>) <span class="comment">// 虚拟dom的所有key</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态指令参数">动态指令参数</h3><p>指令的参数可以是动态的，例如，在 <code>v-mydirective:[argument] = &quot;value&quot;</code> 中，可以根据组件实例数据进行更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Scroll down inside this section ↓<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-pin:</span>[<span class="attr">direction</span>]=<span class="string">&quot;200&quot;</span>&gt;</span>I am pinned onto the page at 200px to the left.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;pin&#x27;</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    el.style.position = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> s = (binding.arg == <span class="string">&#x27;left&#x27;</span> ? <span class="string">&#x27;left&#x27;</span> : <span class="string">&#x27;top&#x27;</span>)</span><br><span class="line">    el.style[s] = binding.value + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      direction: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="函数简写">函数简写</h3><p>如果需要在 <span class='nota' data-nota='指令第一次绑定到元素时的钩子函数'>bind</span> 和 <span class='nota' data-nota='VNode 更新时的钩子函数'>update</span> 触发相同的行为，而不关心其他钩子，可以写成下面这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;color-swatch&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="对象字面量">对象字面量</h3><p>如果指令需要多个值，可以传入一个 <code>javascript</code> 对象字面量，指令函数可以接收合法的 <code>js</code> 表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-demo</span>=<span class="string">&quot;&#123; color: &#x27;white&#x27;, text: &#x27;hello!&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;demo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(binding.value.color) <span class="comment">// =&gt; &quot;white&quot;</span></span><br><span class="line">  <span class="built_in">console</span>.log(binding.value.text)  <span class="comment">// =&gt; &quot;hello!&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="渲染函数-JSX">渲染函数 &amp; <code>JSX</code></h2><p><code>vue</code> 推荐在绝大多数情况下使用模板来创建 <code>html</code>，然而在一些场景中，需要 <code>js</code> 的完全编程能力，可以使用渲染函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个组件模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 包含了大量的判断和插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;anchored-heading-template&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 1&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h2 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 2&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h3 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 3&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h4 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 4&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h5 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 5&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h6 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 6&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#anchored-heading-template&#x27;</span>,</span></span><br><span class="line">        props: &#123;</span><br><span class="line">            level: &#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                required: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 render函数来重写</span></span><br><span class="line">Vue.component(<span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 这里是默认的插槽</span></span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level, <span class="built_in">this</span>.$slots.default);</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        level: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="createElement-函数"><code>createElement</code> 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面介绍 render函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// render :() =&gt; VNode 接收一个函数 返回一个VNode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createElement函数 可以接收三个参数 其中两个参数可选</span></span><br><span class="line"><span class="comment">// @returns &#123;VNode&#125;</span></span><br><span class="line">createElement(</span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签字符串，组件选项对象，或者解析上述任何一种的一个 async 异步函数。必需参数。</span></span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;Object&#125; 数据对象</span></span><br><span class="line">  <span class="comment">// 一个包含模板相关属性的数据对象</span></span><br><span class="line">  <span class="comment">// 你可以在 template 中使用这些特性。可选参数。</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子虚拟节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 也可以使用字符串来生成“文本虚拟节点”。可选参数。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;先写一些文字&#x27;</span>,</span><br><span class="line">    createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;一则头条&#x27;</span>),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: <span class="string">&#x27;foobar&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数的数据对象，该参数可选，可不写</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">  class: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或对象组成的数组</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    fontSize: <span class="string">&#x27;14px&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 正常的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">&#x27;baz&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="built_in">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅对于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="built_in">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;my-custom-directive&#x27;</span>,</span><br><span class="line">      value: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">      expression: <span class="string">&#x27;1 + 1&#x27;</span>,</span><br><span class="line">      arg: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 作用域插槽格式</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">&#x27;span&#x27;</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">&#x27;name-of-slot&#x27;</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">&#x27;myKey&#x27;</span>,</span><br><span class="line">  <span class="comment">// 如果你在渲染函数中给多个元素都应用了相同的 ref 名，</span></span><br><span class="line">  <span class="comment">// 那么 `$refs.myRef` 会变成一个数组。</span></span><br><span class="line">  ref: <span class="string">&#x27;myRef&#x27;</span>,</span><br><span class="line">  <span class="comment">// 注意，如果需要使用相同的ref，必须带有下方这个属性，否则$refs不是一个数组，而是一个dom</span></span><br><span class="line">  refInFor: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个栗子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span> <span class="attr">:level</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:live</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> com = Vue.component(<span class="string">&#x27;MyComponent&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(com)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> createElement(<span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level, &#123;</span></span><br><span class="line">                class: &#123;</span><br><span class="line"><span class="javascript">                    foo: <span class="literal">true</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;,[<span class="string">&#x27;wode&#x27;</span>, createElement(<span class="string">&#x27;h2&#x27;</span>, &#123;<span class="attr">class</span>: &#123;<span class="attr">too</span>: <span class="literal">true</span>&#125;&#125;,<span class="string">&#x27;一个标题&#x27;</span>), createElement(com, &#123;<span class="attr">props</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;), ...this.$slots.live]);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        props: &#123;</span><br><span class="line">            level: &#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                required: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$slots.live)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点、树以及虚拟-dom">节点、树以及虚拟 <code>dom</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  Some text content</span><br><span class="line">  <span class="comment">&lt;!-- <span class="doctag">TODO:</span> Add tagline --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的 <code>html</code> 对应的 <code>dom</code> 节点树如下图</p><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/vue/20210728-183807-0251.png" alt=""></p><p>每个元素都是一个节点。每段文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，<span class='nota' data-nota='也就是说每个部分可以包含其它的一些部分'>每个节点都可以有孩子节点</span></p><p>高效地更新所有这些节点会是比较困难的，然而 <code>vue</code> 可以在模板中或渲染函数自动保持页面的更新，即便数据发生变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; blogTitle &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="built_in">this</span>.blogTitle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件树中的所有 <code>VNode</code> 必须是唯一的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不合法的操作</span></span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myParagraphVNode = createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    <span class="comment">// 错误 - 重复的 VNode</span></span><br><span class="line">    myParagraphVNode, myParagraphVNode</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要重复渲染，使用以下方式</span></span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123; <span class="attr">length</span>: <span class="number">20</span> &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.apply(this的指向, 一个数组或一个类数组对象)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array(size) 也可以创建一个长度为size的数组，但不能使用 map等函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//  [空 ×5] 可以看到和普通的undefined又不一样 和自己赋值的不太一样 并没有赋值只是有个length 当使用的时候才会赋值为 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [undefined, undefined, undefined, undefined, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log([...arr1]); <span class="comment">// [undefined, undefined, undefined, undefined, undefined]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><h3 id="使用-javascript-代替模板功能">使用 <code>javascript</code> 代替模板功能</h3><h4 id="v-if-和-v-for"><code>v-if</code> 和 <code>v-for</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在模板中使用 v-if 和 v-for --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;items.length&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No items found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果用渲染函数</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;items&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.items.length)&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;ul&#x27;</span>, <span class="built_in">this</span>.items.map(<span class="function">(<span class="params">item</span>) =&gt;</span> createElement(<span class="string">&#x27;li&#x27;</span>, item.name)))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;No items found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是不是回到了react的感觉</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整示例如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span> <span class="attr">:items</span>=<span class="string">&quot;items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;items&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">this</span>.items.length)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> h(<span class="string">&#x27;ul&#x27;</span>, <span class="built_in">this</span>.items.map(<span class="function"><span class="params">item</span> =&gt;</span> h(<span class="string">&#x27;li&#x27;</span>, item)));</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> h(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;为空&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [1, 2, 3, 4, 5]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-model"><code>v-model</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要自己手动实现 v-model的逻辑</span></span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">&#x27;input&#x27;</span>, &#123;</span><br><span class="line">    domProps:&#123;</span><br><span class="line">      <span class="comment">// input的value属性</span></span><br><span class="line">      value: self.value</span><br><span class="line">    &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">      <span class="comment">// 绑定input事件</span></span><br><span class="line">      <span class="function"><span class="title">input</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 触发input事件</span></span><br><span class="line">        self.value = event.target.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整示例如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 组件data必须是函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                value: <span class="string">&#x27;苏西&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [</span></span><br><span class="line"><span class="javascript">                h(<span class="string">&#x27;input&#x27;</span>, &#123;</span></span><br><span class="line">                    domProps: &#123;</span><br><span class="line">                        value: self.value</span><br><span class="line">                    &#125;,</span><br><span class="line">                    on: &#123;</span><br><span class="line"><span class="javascript">                        <span class="function"><span class="title">input</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line">                            self.value = e.target.value</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;),</span><br><span class="line"><span class="javascript">                h(<span class="string">&#x27;span&#x27;</span>, self.value)</span></span><br><span class="line">            ])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue().$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当然了 vue 基础已经告诉我们  v-model 等价于 v-bind:value 和 v-on:input=&quot;value = $event&quot; (type不同处理逻辑不同) 也可以使用下面的方式 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;value = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;value&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;input&#x27;</span>, &#123;</span></span><br><span class="line">                domProps: &#123;</span><br><span class="line">                    value: self.value</span><br><span class="line">                &#125;,</span><br><span class="line">                on: &#123;</span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">input</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        self.$emit(<span class="string">&#x27;input&#x27;</span>, e.target.value)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;<span class="attr">data</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件-按键修饰符">事件 &amp; 按键修饰符</h4><p>对于 <code>.passive</code>、<code>.capture</code> 和 <code>.once</code> 这些事件修饰符，<code>vue</code> 提供了相应的前缀可用于 <code>on</code></p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">前缀</th></tr></thead><tbody><tr><td style="text-align:center"><code>.passive</code></td><td style="text-align:center"><code>&amp;</code></td></tr><tr><td style="text-align:center"><code>.capture</code></td><td style="text-align:center"><code>!</code></td></tr><tr><td style="text-align:center"><code>.once</code></td><td style="text-align:center"><code>~</code></td></tr><tr><td style="text-align:center"><code>.capture.once</code> 或 <code>.once.capture</code></td><td style="text-align:center"><code>~!</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">on: &#123;</span><br><span class="line">  <span class="string">&#x27;!click&#x27;</span>: <span class="built_in">this</span>.doThisInCapturingMode,</span><br><span class="line">  <span class="string">&#x27;~keyup&#x27;</span>: <span class="built_in">this</span>.doThisOnce,</span><br><span class="line">  <span class="string">&#x27;~!mouseover&#x27;</span>: <span class="built_in">this</span>.doThisOnceInCapturingMode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于所有其他的修饰符，私有前缀不是必须的，需要在事件处理函数中进行处理</p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">前缀</th></tr></thead><tbody><tr><td style="text-align:center"><code>.stop</code></td><td style="text-align:center"><code>event.stopPropagation()</code></td></tr><tr><td style="text-align:center"><code>.prevent</code></td><td style="text-align:center"><code>event.preventDefault()</code></td></tr><tr><td style="text-align:center"><code>.self</code></td><td style="text-align:center"><code>if(event.target !== event.currentTarget) return</code></td></tr><tr><td style="text-align:center">按键 <code>.enter</code>、<code>.13</code></td><td style="text-align:center"><code>if(event.keyCode !== 13) return</code></td></tr><tr><td style="text-align:center">修饰键<code>.ctrl</code> <code>.alt</code> <code>.shift</code> <code>.meta</code></td><td style="text-align:center"><code>if(!event.ctrlKey)return</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">on: &#123;</span><br><span class="line">  keyup: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果触发的不是事件绑定的元素，不做任何处理</span></span><br><span class="line">    <span class="keyword">if</span>(event.target !== event.currentTarget) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!event.shiftKye || event.keyCode !== <span class="number">13</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    event.preventDefault();</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插槽">插槽</h4><p>通过 <code>this.$slots</code> 访问静态插槽的内容，每个插槽都是一个 <code>VNode</code> 数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// &lt;div&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">this</span>.$slots.default);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// &lt;div&gt;&lt;slot name=&quot;sh&quot;&gt;&lt;/slot&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">this</span>.$slots.sh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个栗子 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span></span><br><span class="line">                hello</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:sh</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: skyblue;&quot;</span>&gt;</span></span><br><span class="line">                world</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [...this.$slots.default, ...this.$slots.sh]);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// return h(&#x27;div&#x27;, [this.$slots.default, this.$slots.sh]); 允许这样写 暂时不知道为 ？</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;<span class="attr">data</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以通过 <code>this.$scopedSlots</code> 访问作用域插槽，每个作用域插槽都是返回若干 <code>VNode</code> 的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">&#x27;message&#x27;</span>],</span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;&lt;slot :text=&quot;message&quot;&gt;&lt;/slot&gt;&lt;/div&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    <span class="built_in">this</span>.$scopedSlots.default(&#123;</span><br><span class="line">      text: <span class="built_in">this</span>.message</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个栗子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123;text&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;text&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:sh</span>=<span class="string">&quot;&#123;sh&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: skyblue;&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;sh&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;suxi&#x27;</span>, <span class="attr">sh</span>: <span class="string">&#x27;peiqi&#x27;</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [<span class="built_in">this</span>.$scopedSlots.default(&#123;<span class="attr">text</span>: self.text&#125;), <span class="built_in">this</span>.$scopedSlots.sh(&#123;<span class="attr">sh</span>: self.sh&#125;)])</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;<span class="attr">data</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要用渲染函数向子组件中传递作用域插槽，可以利用 <code>VNode</code> 数据对象中的 <code>scopedSlots</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;&lt;child v-slot=&quot;props&quot;&gt;&lt;span&gt;&#123;&#123; props.text &#125;&#125;&lt;/span&gt;&lt;/child&gt;&lt;/div&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    createElement(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// 在数据对象中传递 `scopedSlots`</span></span><br><span class="line">      <span class="comment">// 格式为 &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">      scopedSlots: &#123;</span><br><span class="line">        <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> createElement(<span class="string">&#x27;span&#x27;</span>, props.text)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 举个栗子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [<span class="built_in">this</span>.$scopedSlots.default(&#123;</span></span><br><span class="line">                text: self.text</span><br><span class="line">            &#125;)])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;suxi&#x27;</span>, <span class="attr">sh</span>: <span class="string">&#x27;peiqi&#x27;</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [h(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line">                scopedSlots: &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>: <span class="function"><span class="params">prop</span> =&gt;</span> h(<span class="string">&#x27;span&#x27;</span>, prop.text)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;<span class="attr">data</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是不是看起来很绕 很麻烦 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSX"><code>JSX</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写太多的 createElement是一件很痛苦的事请，尤其当文档结构复杂的时候</span></span><br><span class="line"></span><br><span class="line">createElement(</span><br><span class="line">  <span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      level: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27; world!&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是不是更像模板语法了</span></span><br><span class="line"><span class="keyword">import</span> AnchoredHeading <span class="keyword">from</span> <span class="string">&#x27;./AnchoredHeading.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;AnchoredHeading level=&#123;<span class="number">1</span>&#125;&gt;</span><br><span class="line">        &lt;span&gt;Hello&lt;/span&gt; world!</span><br><span class="line">      &lt;/AnchoredHeading&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下面是一个 渲染函数 和 JSX 的对比 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意这里不再使用模板 #app 仅用作挂载元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [<span class="built_in">this</span>.$scopedSlots.default(&#123;</span></span><br><span class="line">                text: self.text</span><br><span class="line">            &#125;)])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [h(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line">                scopedSlots: &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>: <span class="function"><span class="params">prop</span> =&gt;</span> h(<span class="string">&#x27;span&#x27;</span>, prop.text)</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;), h(<span class="string">&#x27;span&#x27;</span>,&#123;<span class="attr">style</span>: &#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125; self.name)])</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;my-demo&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是 JSX 语法 </span></span><br><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="built_in">this</span>.$scopedSlots.default(&#123;<span class="attr">text</span>: <span class="built_in">this</span>.text&#125;)&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child</span><br><span class="line">                    scopedSlots=&#123;&#123;<span class="attr">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;span style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;&#123;<span class="built_in">this</span>.name&#125;&lt;/span&gt;  </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyDemo</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;佩奇&#x27;&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看起来是不是好多了（如果你熟悉react的话）</span></span><br></pre></td></tr></table></figure><p>当然浏览器是无法直接运行 <code>jsx</code> 的所以还需要使用 <code>babel</code> 和对应的插件进行编译之后运行，下面给出一个栗子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue create app 创建vue</span></span><br><span class="line">├── src</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── Child.jsx</span><br><span class="line">│   │   └── MyDemo.jsx</span><br><span class="line">│   ├── App.jsx</span><br><span class="line">└── └── main.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 创建vue2 的工程已经配置好了 vue jsx babel插件，无需修改 babel.config.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="built_in">this</span>.$scopedSlots.default(&#123;<span class="attr">text</span>: <span class="built_in">this</span>.text&#125;)&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MyDemo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child</span><br><span class="line">                    scopedSlots=&#123;&#123;</span><br><span class="line">                        <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;span style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;&#123;<span class="built_in">this</span>.name&#125;&lt;/span&gt;  </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyDemo <span class="keyword">from</span> <span class="string">&#x27;./components/MyDemo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyDemo</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;佩奇&#x27;&#125; /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 省去了组件注册的过程，引入即可使用</span></span><br></pre></td></tr></table></figure><h3 id="函数式组件">函数式组件</h3><p>使用函数组件，将组件标记为 <code>functional</code>，这也意味着<span class='nota' data-nota='没有响应式数据'>它是无状态的</span>，也<span class='nota' data-nota='this 上下文'>没有实例</span>，一个函数组件就像这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// props是可选的</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 为了弥补缺少的实例</span></span><br><span class="line">  <span class="comment">// 提供第二个参数作为上下文</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">createElement, context</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-flag"></i><p>在 <code>2.3.0</code> 之前的版本，如果一个函数式组件要接收 <code>prop</code>，则 <code>props</code> 选项是必须的，在 <code>2.3.0</code> 或以上的版本，可以省略 <code>props</code> 选项，所有组件上的 <code>attribute</code> 都会被自动隐式解析为 <code>prop</code>，当使用函数式组件时，该引用将会是 <code>HTMLElement</code> 因为它们是无状态的也是无实例的</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果使用单文件组件 基于模板的函数式组件这样声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">functional</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件需要的一切都是通过 <code>context</code> 参数传递，它是一个包括以下字段的对象</p><ol><li><code>props</code>：提供所有 <code>prop</code> 的对象</li><li><code>children</code>：<code>VNode</code> 子节点数组</li><li><code>slots</code>：一个函数，返回包含所有插槽的对象，</li><li><code>scopedSlots</code>：一个暴露传入的作用域插槽对象，也可以以函数形式暴露普通插槽</li><li><code>data</code>：传递给组件的整个数据对象，作为 <code>createElement</code> 的第二个参数传入组件</li><li><code>parent</code>：对父组件的引用</li><li><code>listeners</code>：包含所有父组件当前组件注册的事件监听器的对象，这是 <code>data.on</code> 的一个别名</li><li><code>injections</code>：如果使用 <code>inject</code> 选项，则该对象包含了应当被注入的 <code>property</code></li></ol><p>函数式组件只是函数，所以渲染开销也会低很多，在作为包装组件时它们也同样非常有用，比如</p><ol><li>程序化地在多个组件中选择一个来代为渲染</li><li>在将 <code>children</code>、<code>props</code>、<code>data</code> 传递给子组件之前操作它们</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EmptyList = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> TableList = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> OrderedList = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> UnorderedList = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;smart-list&#x27;</span>, &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    items: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    isOrdered: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement, context</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">appropriateListComponent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> items = context.props.items</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (items.length === <span class="number">0</span>)           <span class="keyword">return</span> EmptyList</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> items[<span class="number">0</span>] === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> TableList</span><br><span class="line">      <span class="keyword">if</span> (context.props.isOrdered)      <span class="keyword">return</span> OrderedList</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> UnorderedList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createElement(</span><br><span class="line">      appropriateListComponent(),</span><br><span class="line">      context.data,</span><br><span class="line">      context.children</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个简单的栗子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        functional: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h, context</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(context)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, context.data, context.children)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;child&#x27;</span>,&#123;<span class="attr">style</span>: &#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125; <span class="string">&#x27;苏西&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="向子组件或子元素传递属性和事件">向子组件或子元素传递属性和事件</h4><p>在普通组件中，没有被定义为 <code>prop</code> 的属性会自动添加到组件的根元素上，将已有的同名属性进行替换或与其进行智能合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-functional-button&#x27;</span>, &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement, context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 完全透传任何 attribute、事件监听器、子节点等。</span></span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;button&#x27;</span>, context.data, context.children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// context.data实际上就是使用组件时传入的 props class style on 等等属性封装的数据对象</span></span><br></pre></td></tr></table></figure><p>通过向 <code>createElement</code> 传入 <code>context.data</code> 作为第二个参数，我们就把 <code>my-functional-button</code> 上面所有的 <code>attribute</code> 和事件监听器都传递下去了。事实上这是非常透明的，以至于那些事件甚至并不要求 <code>.native</code> 修饰符</p><p>如果你使用基于模板的函数式组件，那么你还需要手动添加 <code>attribute</code> 和监听器。因为我们可以访问到其独立的上下文内容，所以我们可以使用 <code>data.attrs</code> 传递任何 <code>HTML attribute</code>，也可以使用 <code>listeners</code> (即 <code>data.on</code> 的别名) 传递任何事件监听器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">functional</span>&gt;</span></span><br><span class="line">  &lt;button</span><br><span class="line">    class=&quot;btn btn-primary&quot;</span><br><span class="line">    v-bind=&quot;data.attrs&quot;</span><br><span class="line">    v-on=&quot;listeners&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="slots-和-children-对比"><code>slots()</code> 和 <code>children</code> 对比</h4><p><code>slots</code> 是一个函数，返回所有插槽，<code>children</code> 只表示组件内部的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-functional-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-slot:foo</span>&gt;</span></span><br><span class="line">    first</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>second<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-functional-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于上面的组件，<code>children</code> 会给你两个段落标签，而 <code>slots().default</code> 只会传递第二个匿名段落标签，<code>slots().foo</code> 会传递第一个具名段落标签，可以选择性让组件感知某个插槽机制，也可以简单的传递 <code>children</code> 移交给其他组件进行处理</p><h2 id="插件">插件</h2><p>插件通常用来为 <code>vue</code> 添加全局功能，例如：</p><ol><li>添加全局方法或属性</li><li>添加全局资源</li><li>通过全局混入来添加一些组件选项</li><li>添加 <code>vue</code> 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现</li><li>一个库，提供自己的 <code>API</code> 同时提供上面的一个或几个功能</li></ol><h3 id="使用插件">使用插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过全局方法 Vue.use() 使用插件，它需要在你调用 new Vue()启动应用之前完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)`</span></span><br><span class="line">Vue.use(MyPlugin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...组件选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以传入一个可选的选项对象</span></span><br><span class="line">Vue.use(MyPlugin, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p><code>Vue.use</code> 会自动阻止多次注册相同插件，即使多次调用，也会只注册一次</p><h3 id="开发插件">开发插件</h3><p><code>vue</code> 的插件应该暴露一个 <code>install</code> 方法，这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源 自定义指令</span></span><br><span class="line">  Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项 全局混入</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methodOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器">过滤器</h2><p><code>vue</code> 允许自定义过滤器，可被用于一些常见的文本格式化，过滤器可以用在两个地方：<u>双花括号插值和 v-bind 表达式</u>，过滤器应该被添加在 <code>js</code> 表达式的尾部，有管道(<code>|</code>)符号指示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 `v-bind` 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件中定义本地过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  <span class="function"><span class="title">capitalize</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    value = value.toString();</span><br><span class="line">    <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在创建 <code>vue</code> 实例之前全局定义过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">&#x27;capitalize&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  value = value.toString();</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当全局过滤器和局部过滤器重名时，会采用局部过滤器，过滤器函数总接收<span class='nota' data-nota='之前操作链的结果'>表达式的值</span>作为第一个参数，在上例中，<code>capitalize</code> 会接收 <code>message</code> 的值作为第一个参数，并且过滤器可以串联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;message | filterA | filterB&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>filterA</code> 被定义为接收单个参数的过滤器函数，表达式 <code>message</code> 的值将作为参数传入到函数，然后继续调用同样被定义为接收单个参数的过滤器函数 <code>filterB</code>，将 <code>filterA</code> 的结果传递到 <code>filterB</code> 中。过滤器是 <code>JS</code> 函数，因此可以接收参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#x27;arg1&#x27;, arg2) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- message作为第一个参数，普通字符串 `arg1` 作为第二个参数，表达式 arg2 作为第三个参数 --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x基本用法</title>
      <link href="c0add594/"/>
      <url>c0add594/</url>
      
        <content type="html"><![CDATA[<h2 id="插值">插值</h2><h3 id="文本插值">文本插值</h3><ol><li>格式<code>&#123;&#123;expression&#125;&#125;</code></li><li>使用<code>v-once</code>指令执行一次插值，后续不再更新</li></ol><iframe id="cp_embed_yLbJKgJ" src="//codepen.io/milkdue/embed/yLbJKgJ?height=300&theme-id=dark&slug-hash=yLbJKgJ&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="html-插值"><code>html</code> 插值</h3><div class="note purple icon flat"><i class="note-icon fa fa-thermometer-full"></i><p>双大括号将数据解释为普通文本而不是html代码，如果需要渲染为html，则需要使用<code>v-html</code>指令</p></div><iframe id="cp_embed_JjNKvMq" src="//codepen.io/milkdue/embed/JjNKvMq?height=300&theme-id=dark&slug-hash=JjNKvMq&default-tab=html,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="指令">指令</h2><div class="note green icon flat"><i class="note-icon fa fa-bolt"></i><p>带有<code>v-</code>前缀的特殊的attribute</p></div><h3 id="参数">参数</h3><div class="note blue icon disabled"><i class="note-icon fa fa-tree"></i><p>一些指令能够接收一个参数，在指令名称之后以冒号表示</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;todo&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态参数">动态参数</h3><div class="note default icon flat"><i class="note-icon fa fa-bicycle"></i><p>用方括号括起来的js表达式作为指令的参数</p></div><ol><li>动态参数会转换为字符串，异常情况下为null，将会移除绑定</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;todo&quot;</span>&gt;</span>事件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            attributeName: <span class="string">&#x27;href&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            url: <span class="string">&#x27;www.baidu.com&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            eventName: <span class="string">&#x27;click&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器">计算属性和侦听器</h2><h3 id="计算属性">计算属性</h3><div class="note pink icon flat"><i class="note-icon fa fa-exclamation"></i><p>对于复杂的逻辑，使用计算属性比在插值逻辑或函数中效率更高</p></div><iframe id="cp_embed_dyWXKaV" src="//codepen.io/milkdue/embed/dyWXKaV?height=300&theme-id=dark&slug-hash=dyWXKaV&default-tab=html,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><div class="note purple icon flat"><i class="note-icon fa fa-flask"></i><p>计算属性默认只有getter，也可以在定义计算属性的同时指定setter</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侦听器">侦听器</h3><div class="note green icon flat"><i class="note-icon fa fa-cogs"></i><p><code>vue</code>通过<code>watch</code>来响应数据的变化，当侦听的数据发生变化时，执行相应的逻辑</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        oldMessage: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;message&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        <span class="comment">// 侦听oldMessage，发生变化改变message</span></span><br><span class="line">        oldMessage: <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newValue + <span class="string">&#x27;&#x27;</span> + oldValue);</span><br><span class="line">            <span class="built_in">this</span>.message = newValue + oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">this</span>.oldMessage = <span class="string">&#x27;suxi&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="class-和-style-绑定"><code>class</code> 和 <code>style</code> 绑定</h2><h3 id="绑定-class">绑定 <code>class</code></h3><ol><li><p>传入对象，动态切换<code>class</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- isActive为真值时active存在 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            isActive: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 渲染为下方dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>传入数组，动态应用数组中的<code>class</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#x27;static&#x27;, &#x27;active&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 渲染为下方dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义组件，在组件上绑定的类名，将会添加在组件的根元素上面，这个元素上存在的类名不会被覆盖</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;baz boo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 渲染为以下dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar baz boo&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="绑定-style">绑定 <code>style</code></h3><ol><li><p>传入对象，类型css的对象</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;color: &#x27;red&#x27;, fontSize: &#x27;14px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>传入对象数组，将多个样式对象应用于同一个元素上</p></li><li><p>一个样式声明允许提供多个值，这样只会渲染数组中最后一个被浏览器支持的值</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="条件渲染">条件渲染</h2><h3 id="v-if-v-else-if-v-else"><code>v-if / v-else-if / v-else</code></h3><div class="note orange icon modern"><i class="note-icon fa fa-battery-empty"></i><p><code>v-if</code> / <code>v-else-if</code>指令可以条件性的渲染一块内容，<code>v-else</code>当不满足条件时渲染某块</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;total &gt; 100&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;total &gt; 80&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip faa-horizontal animated"><p><code>vue</code>会高效的渲染元素，通常会复用已有的元素而不是从头渲染，如果在一个业务中，两个元素逻辑上是相互独立的，共用一个元素显然是不合理的。<code>vue</code>采用添加唯一的<code>key</code>来避免复用</p></div><iframe id="cp_embed_gOWMjjV" src="//codepen.io/milkdue/embed/gOWMjjV?height=300&theme-id=dark&slug-hash=gOWMjjV&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="v-show"><code>v-show</code></h3><div class="tip warning"><p><code>v-show</code>不支持<code>template</code>和<code>v-else</code>，<code>v-show</code>渲染的元素会被保留在dom中，只切换元素<code>css</code>中的<code>display</code>属性，所以<code>v-if</code>有更高的切换开销，而<code>v-show</code>有更高的初始化渲染开销，切换频次少使用<code>v-if</code>，反之使用<code>v-show</code></p></div><h2 id="列表渲染">列表渲染</h2><h3 id="数组">数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.message&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#example-1&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&#x27;foo&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&#x27;bar&#x27;</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对象">对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;value&#125;&#125; -- &#123;&#123;name&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#v-for-object&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            object: &#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                author: <span class="string">&#x27;Jane Doe&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="维护状态">维护状态</h3><div class="note red icon modern"><i class="note-icon fa fa-hashtag"></i><p><code>vue</code>根据每项提供的唯一的<code>key</code>来追踪每一个节点的身份，使用<code>v-for</code>时，建议为每一项提供唯一的<code>key</code>，在组件中使用<code>v-for</code>，<code>key</code>是必须的</p></div><h3 id="数组更新检测">数组更新检测</h3><ol><li><code>vue</code>重写了数组的一些方法，调用以下方法将会触发视图更新<ul><li><code>push</code></li><li><code>pop</code></li><li><code>shift</code></li><li><code>unshift</code></li><li><code>splice</code></li><li><code>sort</code></li><li><code>reverse</code></li></ul></li><li>数组的一些方法不改变原数组而是返回一个新数组，用新数组替换原数组也会触发视图更新<ul><li><code>filter</code></li><li><code>map</code></li><li><code>concat</code></li><li><code>slice</code></li></ul></li></ol><h3 id="数组过滤-排序-使用计算属性">数组过滤 / 排序(使用计算属性)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in filter&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;ul&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            nums: [1, 2, 3, 4, 5, 6],</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            filter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.nums.filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for-和-v-if-一起使用"><code>v-for</code> 和 <code>v-if</code> 一起使用</h3><div class="note red icon flat"><i class="note-icon fa fa-exclamation-triangle"></i><p>不推荐在同一个元素中同时使用 <code>v-for</code> 和 <code>v-if</code>，<code>v-for</code> 的优先级高于<code>v-if</code>，当只渲染部分节点时，可以同时使用~</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in todos&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.isShow&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.key&quot;</span>&gt;</span>&#123;&#123;item.todo&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;ul&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            todos: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">isShow</span>: <span class="literal">true</span>, <span class="attr">todo</span>: <span class="string">&#x27;起床&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;one&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">isShow</span>: <span class="literal">false</span>, <span class="attr">todo</span>: <span class="string">&#x27;早餐&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;two&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">isShow</span>: <span class="literal">true</span>, <span class="attr">todo</span>: <span class="string">&#x27;午饭&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;three&#x27;</span>&#125;</span></span><br><span class="line">            ],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script</span><br></pre></td></tr></table></figure><h2 id="事件绑定">事件绑定</h2><div class="note blue icon flat"><i class="note-icon fa fa-link"></i><p>使用 <code>v-on</code> 指令监听 <code>dom</code>事件，例如 <code>v-on:click=&quot;function&quot;</code>，可以使用简写 <code>@</code>，例如 <code>@click=&quot;function&quot;</code></p></div><h3 id="事件处理方法">事件处理方法</h3><ol><li><p>在 <code>v-on</code> 指令中直接书写 <code>js</code> 代码</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum += 2&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sum: &#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            sum: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>事件处理流程写入方法中(默认将event对象传入)</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sum: &#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            sum: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">add</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sum += <span class="number">2</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="内联处理器中的方法">内联处理器中的方法</h3><div class="note green icon flat"><i class="note-icon fa fa-at"></i><p>除了直接绑定方法，还可以在指令中直接调用方法，并将参数传入，如果需要在内联语句中访问dom事件，可以用<span class='nota' data-nota='与位置无关'>特殊变量</span> <code>$event</code> 传入</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(2, $event)&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sum: &#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            sum: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">add</span>(<span class="params">num, event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sum += num;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件修饰符">事件修饰符</h3><div class="note pink icon flat"><i class="note-icon fa fa-battery-quarter"></i><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求，<code>vue</code> 提供了事件修饰符来处理 <code>dom</code> 事件细节</p></div><ol><li><span class='nota' data-nota='阻止单击事件继续传播'>.stop</span></li><li><span class='nota' data-nota='阻止浏览器默认行为'>.prevent</span></li><li><span class='nota' data-nota='添加事件监听器时使用事件捕获模式，从 document 传播到点击元素，即内部元素触发的事件先在此处理，然后才交由内部元素进行处理'>.capture</span></li><li><span class='nota' data-nota='只有当 event.target 是当前元素时，才触发事件'>.self</span></li><li><span class='nota' data-nota='事件只触发一次'>.once</span></li><li><span class='nota' data-nota='告诉浏览器不想阻止事件的默认行为，提高移动端性能'>.passive</span></li></ol><div class="tip "><p><code>passive</code> 这个修饰符会执行默认的方法，但明明是默认执行为什么要设置这个修饰符呢？因为浏览器只有等内核线程执行到事件监听器对应的 <code>JavaScript</code> 代码时，才能知道内部是否会调用 <code>preventDefault</code> 函数来阻止事件的默认行为，所以浏览器本身是没有办法对这种场景进行优化的。这种场景下，用户的手势事件无法快速产生，会导致页面无法快速执行滑动逻辑，从而让用户感觉到页面卡顿。通俗点说就是每次事件产生，浏览器都会去查询一下是否有 <code>preventDefault</code> 阻止该次事件的默认动作。我们加上 <code>passive</code> 就是为了告诉浏览器，不用查询了，我们没用 <code>preventDefault</code> 阻止默认动作， 这里一般用在滚动监听，<code>@scoll，@touchmove</code>。因为滚动监听过程中，移动每个像素都会产生一次事件，每次都使用内核线程查询 <code>prevent</code> 会使滑动卡顿。我们通过 <code>passive</code> 将内核线程查询跳过，可以大大提升滑动的流畅度</p></div><div class="note red icon modern"><i class="note-icon fa fa-key"></i><p>使用修饰符时，顺序很重要，相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止所有的点击，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。<code>passive</code> 和 <code>prevent</code> 冲突，不能同时绑定在一个监听器上</p></div><iframe id="cp_embed_OJmbyvd" src="//codepen.io/milkdue/embed/OJmbyvd?height=300&theme-id=dark&slug-hash=OJmbyvd&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="按键修饰符">按键修饰符</h3><div class="note orange icon flat"><i class="note-icon fa fa-check"></i><p>监听键盘事件时，<code>v-on</code>在监听键盘事件时添加按键修饰符</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 key 是 Enter 时调用 vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="按键码">按键码</h4><div class="note red icon flat"><i class="note-icon fa fa-exclamation-circle"></i><p><code>keyCode</code> 的事件用法已经被废弃了并可能不会被最新的浏览器支持</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当event.keyCode = 13时触发 submit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note green icon flat"><i class="note-icon fa fa-bullhorn"></i><p><code>vue</code> 提供了绝大多数常用的按键码的别名，并且有一些按键 (<code>.esc</code> 以及所有的方向键) 在 <code>IE9</code> 中有不同的 <code>key</code> 值, 如果你想支持 <code>IE9</code>，这些内置的别名应该是首选</p></div><ol><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code></li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 还可以通过全局config.keyCodes对象自定义按键修饰符别名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用v-on:keyup.f1 --&gt;</span></span><br><span class="line">Vue.config.keyCodes.f1 = 112;</span><br></pre></td></tr></table></figure><h3 id="系统修饰符">系统修饰符</h3><ol><li>用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器<ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul></li><li><code>.exact</code>修饰符<ul><li><code>.exact</code> 修饰符允许控制由精确的系统修饰符组合触发的事件</li></ul></li></ol><div class="tip "><p>请注意修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode：keyup.17</code></p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="鼠标按钮修饰符">鼠标按钮修饰符</h3><ol><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ol><h2 id="表单输入绑定">表单输入绑定</h2><div class="note orange icon flat"><i class="note-icon fa fa-info-circle"></i><p><code>v-model</code> 指令在表单 <code>input、textarea、select</code> 元素上创建双向数据绑定。根据控件类型自动选取正确的方法来更新元素。<code>v-model</code> 会忽略所有表单元素的 <code>value、checked、selected</code> 属性的初始值而总是将<code>vue</code> 实例的数据作为数据来源</p></div><ol><li><code>v-model</code>在内部为不同的输入元素使用不同的<code>property</code>并抛出不同的事件<ul><li><code>text</code>和<code>textarea</code>元素使用<code>value</code>属性和<code>input</code>事件</li><li><code>checkbox</code>和<code>radio</code>使用<code>checked</code>属性和<code>change</code>事件</li><li><code>select</code>元素将<code>value</code>作为<code>prop</code>并将<code>change</code>作为事件</li></ul></li></ol><h3 id="修饰符">修饰符</h3><ol><li><code>.lazy</code>，在默认情况下 <code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步，添加 <code>.lazy</code> 修饰符，从而转为在 <code>change</code> 事件之后进行同步</li><li><code>.number</code>，自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符，如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值</li><li><code>.trim</code>，自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符</li></ol><h2 id="组件">组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;button-counter&gt;&lt;/button-counter&gt;</span><br></pre></td></tr></table></figure><h3 id="data"><code>data</code></h3><div class="note red icon flat"><i class="note-icon fa fa-cloud"></i><p>在组件中，data必须是一个函数，因为每一个实例需要维护被返回对象的独立的拷贝</p></div><h3 id="prop-传递数据"><code>prop</code> 传递数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听子组件事件">监听子组件事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blog-posts-events-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">    &lt;blog-post</span><br><span class="line">      v-for=&quot;post in posts&quot;</span><br><span class="line">      v-bind:key=&quot;post.id&quot;</span><br><span class="line">      v-bind:post=&quot;post&quot;</span><br><span class="line">      v-on:enlarge-text=&quot;postFontSize += 0.1&quot; </span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span><span class="comment">&lt;!-- 绑定事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;post&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 触发事件 $emit</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">post.title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span></span></span></span><br><span class="line">                Enlarge text</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;post.content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#blog-posts-events-demo&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            posts: [<span class="comment">/* ... */</span>],</span></span><br><span class="line">            postFontSize: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用事件抛出一个值">使用事件抛出一个值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;, 0.1)&quot;</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过$event获取这个值 --&gt;</span></span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-on:enlarge-text=&quot;postFontSize += $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果绑定的事件是一个函数 这个值通过参数获取 --&gt;</span></span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-on:enlarge-text=&quot;changeFontSize&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeFontSize</span>(<span class="params">size</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.postFontSize += size;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件中使用-v-model">组件中使用 <code>v-model</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当用到组件中等价于 --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;my-component</span><br><span class="line">    v-model=&quot;searchText&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;my-conponent</span><br><span class="line">    :value=&quot;searchText&quot;</span><br><span class="line">    @input=&quot;searchText = $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果需要组件正常工作，必须在 value 属性绑定在一个名字是value的prop上，并且input事件被触发时，将新的值通过自定义的ihput事件抛出 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;value&#x27;</span>],</span></span><br><span class="line">        template: `</span><br><span class="line">            &lt;input</span><br><span class="line"><span class="javascript">                :value=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="javascript">                @input=<span class="string">&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span></span><br><span class="line">            /&gt;</span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态组件">动态组件</h3><div class="note orange icon flat"><i class="note-icon fa fa-battery-empty"></i><p><code>vue</code> 的 <code>component</code> 元素加一个特殊的 <code>is</code> 属性来实现动态组件，<code>is</code>后面的值可以是一个组件的名字或者是一个组件的选项对象</p></div><iframe src="https://codesandbox.io/embed/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-dynamic-components?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-dynamic-components"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h3 id="组件名">组件名</h3><h4 id="使用-kebab-case">使用 <code>kebab-case</code></h4><div class="note red icon flat"><i class="note-icon fa fa-cloud"></i><p>当使用 <span class='nota' data-nota='短横线分隔命名'>kebab-case</span> 定义一个组件时，也必须在引用这个自定义元素时使用kebab-case</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component-name&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;my-component-name&gt;&lt;/my-component-name&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-PascalCase">使用 <code>PascalCase</code></h4><div class="note green icon flat"><i class="note-icon fa fa-camera"></i><p>当使用 <span class='nota' data-nota='首字母大写命名'>PascalCase</span> 定义一个组件时，引用这个自定义元素时两种命名法都可以使用</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;MyComponentName&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 两种都可以</span></span><br><span class="line">&lt;my-component-name&gt;&lt;/my-component-name&gt;</span><br><span class="line">&lt;MyComponentName&gt;&lt;/MyComponentName&gt;</span><br></pre></td></tr></table></figure><h3 id="解析-dom-模板时的注意事项">解析 <code>dom</code> 模板时的注意事项</h3><p>有些 <code>HTML</code> 元素，诸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，对于哪些元素可以出现在其内部是有严格限制的。而有些元素，诸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出现在其它某些特定的元素内部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上例子中，自定义组件会被提升到外部，并导致最终渲染失败，可以通过 <code>is</code> 属性来避免</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然如果使用单文件组件和 <code>x-template</code> 以及模板字符串定义的模板，那么这条限制是不存在的</p><h3 id="全局注册">全局注册</h3><div class="tip "><p>通过 <code>Vue.component</code> 来创建的组件都是全局注册的组件，注册以后就可以用在任何新创建的 <code>vue</code> 根实例</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;component-a&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;component-b&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;component-c&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="局部注册">局部注册</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentC = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>: ComponentA,</span><br><span class="line">    <span class="string">&#x27;component-b&#x27;</span>: ComponentB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于单文件组件</span></span><br><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册的组件在其子组件中不可用。例如，如果你希望 ComponentA 在 ComponentB 中可用，需要在组件B中声明A组件</span></span><br><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>: ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-exclamation-circle"></i><p>局部注册的组件在其子组件中不可用</p></div><h3 id="基础组件的自动化全局注册">基础组件的自动化全局注册</h3><div class="note green icon flat"><i class="note-icon fa fa-cogs"></i><p>使用 <code>webpack</code> 中的方法 <code>require.context</code> 自动化导入组件</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(directory: <span class="built_in">String</span>, <span class="attr">useSubdirectories</span>: <span class="built_in">Boolean</span>, <span class="attr">regExp</span>: <span class="built_in">RegExp</span>): <span class="built_in">Object</span></span><br><span class="line"><span class="comment">// directory -&gt; 文件路径</span></span><br><span class="line"><span class="comment">// useSubdirectories -&gt; 是否查找子目录</span></span><br><span class="line"><span class="comment">// regExp -&gt; 要匹配文件的正则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">// ├─components</span></span><br><span class="line"><span class="comment">//   ├─ A.js</span></span><br><span class="line"><span class="comment">//   ├─ B.js</span></span><br><span class="line"><span class="comment">//   ├─ C.js</span></span><br><span class="line"><span class="comment">//   └─ D.js</span></span><br><span class="line"><span class="comment">// └─ index.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.context(<span class="string">&#x27;./components&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回</span></span><br><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">&quot;./A.js&quot;</span>: <span class="string">&quot;./src/components/test/components/A.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./B.js&quot;</span>: <span class="string">&quot;./src/components/test/components/B.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./C.js&quot;</span>: <span class="string">&quot;./src/components/test/components/C.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./D.js&quot;</span>: <span class="string">&quot;./src/components/test/components/D.js&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webpackContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = webpackContextResolve(req);</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__(id); <span class="comment">// 返回__webpack_require__(id) 相当于require或者import</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webpackContextResolve</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接收一个参数，req 是test文件夹下面匹配文件的相对路径，返回这个文件相对整个工程的相对路径</span></span><br><span class="line">    <span class="keyword">var</span> id = map[req];</span><br><span class="line">    <span class="keyword">if</span>(!(id + <span class="number">1</span>)) &#123; <span class="comment">// check for number or string</span></span><br><span class="line">        <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Cannot find module &#x27;&quot;</span> + req + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        e.code = <span class="string">&#x27;MODULE_NOT_FOUND&#x27;</span>;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id; <span class="comment">// 执行环境的id，返回的是一个字符串，用于热加载 module.hot.accept</span></span><br><span class="line">&#125;</span><br><span class="line">webpackContext.keys = <span class="function"><span class="keyword">function</span> <span class="title">webpackContextKeys</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(map); <span class="comment">// 获取模型map内部的键名</span></span><br><span class="line">&#125;;</span><br><span class="line">webpackContext.resolve = webpackContextResolve;</span><br><span class="line"><span class="built_in">module</span>.exports = webpackContext; <span class="comment">// 返回一个函数 函数有两个方法 resolve 和 keys</span></span><br><span class="line">webpackContext.id = <span class="string">&quot;./src/components/test/components sync recursive \\.js$&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>.context(<span class="string">&#x27;./components&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line"><span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> webpack.keys())&#123;</span><br><span class="line">    map[key] = webpack(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// map中就是一个个module</span></span><br></pre></td></tr></table></figure><div class="tip "><p><code>require.context</code> 执行后，返回一个方法 <code>webpackContext</code>，这个方法又返回一个 <code>__webpack_require__</code> ，这个<code>__webpack_require__</code> 就相当于 <code>require</code> 或者 <code>import</code>。同时<code>webpackContext</code> 还有二个静态方法 <code>keys</code> 与 <code>resolve</code>，一个 <code>id</code> 属性</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue基础组件全局注册</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> upperFirst <span class="keyword">from</span> <span class="string">&#x27;lodash/upperFirst&#x27;</span></span><br><span class="line"><span class="keyword">import</span> camelCase <span class="keyword">from</span> <span class="string">&#x27;lodash/camelCase&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">  <span class="comment">// 其组件目录的相对路径</span></span><br><span class="line">  <span class="string">&#x27;./components&#x27;</span>,</span><br><span class="line">  <span class="comment">// 是否查询其子目录</span></span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 匹配基础组件文件名的正则表达式</span></span><br><span class="line">  /Base[A-Z]\w+\.(vue|js)$/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回执行require或import的结果</span></span><br><span class="line">  <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取组件的 PascalCase 命名</span></span><br><span class="line">  <span class="keyword">const</span> componentName = upperFirst(</span><br><span class="line">    camelCase(</span><br><span class="line">      <span class="comment">// 获取和目录深度无关的文件名</span></span><br><span class="line">      fileName</span><br><span class="line">        .split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        .pop()</span><br><span class="line">        .replace(<span class="regexp">/\.\w+$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局注册组件</span></span><br><span class="line">  Vue.component(</span><br><span class="line">    componentName,</span><br><span class="line">    <span class="comment">// 如果这个组件选项是通过 export default 导出的，</span></span><br><span class="line">    <span class="comment">// 那么就会优先使用 .default，</span></span><br><span class="line">    <span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">    componentConfig.default || componentConfig</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip ban faa-horizontal animated"><p>全局注册的行为必须在根 <code>Vue</code> 实例 (通过 <code>new Vue</code>) 创建之前发生</p></div><h2 id="prop"><code>prop</code></h2><h3 id="prop-的大小写"><code>prop</code> 的大小写</h3><p><code>HTML</code> 中的 <code>attribute</code> 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当使用 <code>DOM</code> 中的模板时，<span class='nota' data-nota='驼峰命名法'>camelCase</span> 的 <code>prop</code> 名需要使用其等价的 <span class='nota' data-nota='短横线分隔命名法'>kebab-case</span> 命名，如果使用字符串模板，那么这个限制就不存在了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 在 JavaScript 中是 camelCase 的</span></span><br><span class="line">  props: [<span class="string">&#x27;postTitle&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;h3&gt;&#123;&#123; postTitle &#125;&#125;&lt;/h3&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span></span><br><span class="line">&lt;blog-post post-title=<span class="string">&quot;hello!&quot;</span>&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="prop-类型"><code>prop</code> 类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以数组形式列出props</span></span><br><span class="line">props: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;likes&#x27;</span>, <span class="string">&#x27;isPublished&#x27;</span>, <span class="string">&#x27;commentIds&#x27;</span>, <span class="string">&#x27;author&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式列出props及其类型</span></span><br><span class="line">props: &#123;</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  likes: <span class="built_in">Number</span>,</span><br><span class="line">  isPublished: <span class="built_in">Boolean</span>,</span><br><span class="line">  commentIds: <span class="built_in">Array</span>,</span><br><span class="line">  author: <span class="built_in">Object</span>,</span><br><span class="line">  callback: <span class="built_in">Function</span>,</span><br><span class="line">  contactsPromise: <span class="built_in">Promise</span> <span class="comment">// 或者其他构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个静态值</span></span><br><span class="line">&lt;blog-post title=<span class="string">&quot;My journey with Vue&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个动态值 需要使用v-bind</span></span><br><span class="line">&lt;blog-post v-bind:title=<span class="string">&quot;post.title&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个数字 使用v-bind</span></span><br><span class="line">&lt;blog-post v-bind:likes=<span class="string">&quot;42&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含该 prop 没有值的情况在内，都意味着 true</span></span><br><span class="line">&lt;blog-post is-published&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即便 false 是静态的，我们仍然需要 v-bind 来告诉 Vue</span></span><br><span class="line"><span class="comment">// 这是一个 JavaScript 表达式而不是一个字符串</span></span><br><span class="line">&lt;blog-post v-bind:is-published=<span class="string">&quot;false&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用一个变量进行动态赋值</span></span><br><span class="line">&lt;blog-post v-bind:is-published=<span class="string">&quot;post.isPublished&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个数组</span></span><br><span class="line"><span class="comment">// 即便数组是静态的，我们仍然需要 v-bind 来告诉 Vue</span></span><br><span class="line"><span class="comment">// 这是一个 JavaScript 表达式而不是一个字符串</span></span><br><span class="line">&lt;blog-post v-bind:comment-ids=<span class="string">&quot;[234, 266, 273]&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用一个变量进行动态赋值</span></span><br><span class="line">&lt;blog-post v-bind:comment-ids=<span class="string">&quot;post.commentIds&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 即便对象是静态的，我们仍然需要 v-bind 来告诉 Vue</span></span><br><span class="line"><span class="comment">// 这是一个 JavaScript 表达式而不是一个字符串</span></span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-bind:author=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    name: &#x27;Veronica&#x27;,</span></span><br><span class="line"><span class="string">    company: &#x27;Veridian Dynamics&#x27;</span></span><br><span class="line"><span class="string">  &#125;&quot;</span></span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用一个变量进行动态赋值</span></span><br><span class="line">&lt;blog-post v-bind:author=<span class="string">&quot;post.author&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个对象的所有property</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你想要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 v-bind (取代 v-bind:prop-name)</span></span><br><span class="line">post: &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  title: <span class="string">&#x27;My Journey with Vue&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;blog-post v-bind=<span class="string">&quot;post&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-bind:id=<span class="string">&quot;post.id&quot;</span></span><br><span class="line">  v-bind:title=<span class="string">&quot;post.title&quot;</span></span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="单向数据流">单向数据流</h3><p>所有的 <code>prop</code> 都使得其父子 <code>prop</code> 之间形成了一个单向下行绑定：父级 <code>prop</code> 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，额外的，每次父级组件发生变更时，子组件中所有的 <kbd>prop</kbd> 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 <code>prop</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data property 并将这个 prop 用作其初始值</span></span><br><span class="line">props: [<span class="string">&#x27;initialCounter&#x27;</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="built_in">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性</span></span><br><span class="line"></span><br><span class="line">props: [<span class="string">&#x27;size&#x27;</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态</span></span><br></pre></td></tr></table></figure><h3 id="prop-验证"><code>prop</code> 验证</h3><div class="note purple icon modern"><i class="note-icon fa fa-tree"></i><p>可以为组件的 <code>prop</code> 指定验证要求，如果有一个需求没有被满足，则 <code>Vue</code> 会在浏览器控制台中发出警告</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (null 和 undefined 会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].indexOf(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip ban faa-horizontal animated-hover"><p>注意那些 <code>prop</code> 会在一个组件实例创建之前进行验证，所以实例的 <code>property</code> (如 <code>data、computed</code> 等) 在 <code>default</code> 或 <code>validator</code> 函数中是不可用的</p></div><ol><li><code>type</code> 可以是下面原生的构造函数或其他自定义构造函数，并且通过 <code>instanceof</code> 来进行检查确认<ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">  <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    author: Person,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="非-prop-的-Attribute">非 <code>prop</code> 的 <code>Attribute</code></h3><p>一个非 <code>prop</code> 的 <code>attribute</code> 是指传向一个组件，但是该组件并没有相应 <code>prop</code> 定义的 <code>attribute</code>，因为显式定义的 <code>prop</code> 适用于向一个子组件传入信息，然而组件库的作者并不总能预见组件会被用于怎样的场景。这也是为什么组件可以接受任意的 <code>attribute</code>，而这些 <code>attribute</code> 会被<wavy>添加到这个组件的根元素上</wavy>，例如组件的 <code>class</code> 属性会被添加到组件的根元素上</p><h4 id="替换-合并已有的-Attribute">替换 / 合并已有的 <code>Attribute</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;myInput&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;input type=&quot;date&quot; class=&quot;form-control&quot; /&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;my-input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;abc&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染为</span></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control abc&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated-hover"><p>对于绝大多数 <code>attribute</code> 来说，从外部提供给组件的值会替换掉组件内部设置好的值，所以如果传入 <code>type=&quot;text&quot;</code> 就会替换掉 <code>type=&quot;date&quot;</code> 并把它<emp>破坏</emp>！庆幸的是，class 和 style attribute 会稍微智能一些，即两边的值会被合并起来</p></div><h4 id="禁止-Attribute-继承">禁止 <code>Attribute</code> 继承</h4><p>如果不希望组件的<wavy>根元素</wavy>继承 <code>attribute</code>，在组件选项中设置 <code>inheritAttrs: false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>禁止组件根元素继承属性以后，依然可以使用 <code>$attrs</code> 手动决定这些属性将会赋予哪个元素，<code>$attrs</code> 会将没有声明的属性合并为一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将其他属性启用到input元素上</span></span><br><span class="line">Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind=&quot;$attrs&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅仅将placeholder属性应用</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  props: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind:placeholder=&quot;$attrs.placeholder&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;base-input label=<span class="string">&quot;姓名&quot;</span> value=<span class="string">&quot;苏西&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入姓名~&quot;</span>&gt;&lt;/base-input&gt;</span><br></pre></td></tr></table></figure><div class="note red icon modern"><i class="note-icon fa fa-hashtag"></i><p><code>inheritAttrs: false</code> <u>不会影响</u> <code>style</code> 和 <code>class</code> 的绑定</p></div><iframe src="https://codesandbox.io/embed/pensive-galileo-nqvby?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="pensive-galileo-nqvby"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h2 id="自定义事件">自定义事件</h2><h3 id="事件名">事件名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-on:my-event=<span class="string">&quot;doSomething&quot;</span>&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听my-event</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;myEvent&#x27;</span>); <span class="comment">// 不会触发事件 没有任何效果</span></span><br></pre></td></tr></table></figure><p>不同于组件和 <code>prop</code>，事件名不会被用作一个 <code>JavaScript</code> 变量名或 <code>property</code> 名，所以就没有理由使用 <code>camelCase</code> 或 <code>PascalCase</code> 了。并且 <code>v-on</code> 事件监听器在 <code>DOM</code> 模板中会被自动转换为全小写 (因为 <code>HTML</code> 是大小写不敏感的)，所以 <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>——导致 <code>myEvent</code> 不可能被监听到，因此，我们推荐<wavy>始终使用 kebab-case 的事件名</wavy></p><h3 id="自定义组件的-v-model">自定义组件的 <code>v-model</code></h3><p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 <code>prop</code> 和名为 <code>input</code> 的事件，但是像<u>单选框、复选框</u>等类型的输入控件可能会将 <code>value attribute</code> 用于不同的目的，<code>model</code> 选项可以用来避免这样的冲突</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model中填入 prop 和 event，表示组件的 v-model 利用 checked 的 prop 和 change 事件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;base-checkbox&#x27;</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&#x27;checked&#x27;</span>,</span><br><span class="line">    event: <span class="string">&#x27;change&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 最好在 props 中声明这个 prop 不声明这个 prop 会报警告：Property or method &quot;checked&quot; is not defined on the instance but referenced during render</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="string">      v-bind:checked=&quot;checked&quot;</span></span><br><span class="line"><span class="string">      v-on:change=&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line">&lt;base-checkbox v-model=<span class="string">&quot;lovingVue&quot;</span>&gt;&lt;/base-checkbox&gt;</span><br><span class="line"><span class="comment">// lovingVue作为checked的prop传入到组件，当触发change事件后，改变checked的值</span></span><br></pre></td></tr></table></figure><h3 id="将原生事件绑定到组件">将原生事件绑定到组件</h3><div class="note purple icon flat"><i class="note-icon fa fa-check-square"></i><p>如果需要在组件的<kbd>根元素</kbd>上直接监听一个<kbd>原生事件</kbd>，可以使用 <code>v-on</code> 的 <code>.native</code> 修饰符</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-on:focus.native</span>=<span class="string">&quot;onFocus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果尝试监听一个类似 <code>&lt;input&gt;</code> 的非常特定的元素时，这可能不是一个好主意，比如上方的 <code>base-input</code> 组件中如果 <code>&lt;input&gt;</code> 并<u>不是它的根元素</u>，那么组件中使用 <code>v-on:focus.native</code> 监听器将静默失败，虽然不会产生任何报错，但是也不会触发 <code>onFocus</code> 的事件，为了解决这个问题，<code>vue</code> 提供了 <code>$listeners</code> 属性，它是一个 <code>Object</code>，里面包含了作用在这个组件的所有监听器，<code>$listeners</code> 属性，可以配合 <code>v-on=&quot;$listeners&quot;</code> 将所有事件监听器值向这个组件的某个特定的子元素，当然也可以绑定特定的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $listeners的格式</span></span><br><span class="line">&#123;</span><br><span class="line">  focus: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;<span class="comment">/* ... */</span>&#125;,</span><br><span class="line">  input: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;label&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        type=&quot;text&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on=&quot;$listeners&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">onChange</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;change&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onFocus</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;focus&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 注意 当使用 $listeners 时，组件上就不可以使用 .native修饰符了，否则 $listeners 将是一个 空对象(不是 null 而是 &#123;&#125;)</span></span><br><span class="line">&lt;base-input @change=<span class="string">&quot;onChange&quot;</span> @focus=<span class="string">&quot;onFocus&quot;</span>&gt;&lt;/base-input&gt;</span><br></pre></td></tr></table></figure><div class="note orange icon modern"><i class="note-icon fa fa-at"></i><p>对于 <code>input</code> 类型的如果需要配合 <code>v-model</code> 工作的组件来说，为这些监听器创建一个计算属性通常是有用的</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  props: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    inputListeners: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="built_in">this</span></span><br><span class="line">      <span class="comment">// Object.assign 将所有的对象合并为一个新对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;,</span><br><span class="line">        <span class="comment">// 我们从父级添加所有的监听器</span></span><br><span class="line">        <span class="built_in">this</span>.$listeners,</span><br><span class="line">        <span class="comment">// 然后我们添加自定义监听器，</span></span><br><span class="line">        <span class="comment">// 或覆写一些监听器的行为</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 这里确保组件配合 v-model 的工作，如果组件绑定了 v-model 事件</span></span><br><span class="line">          input: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            vm.$emit(<span class="string">&#x27;input&#x27;</span>, event.target.value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind=&quot;$attrs&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on=&quot;inputListeners&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="sync-修饰符"><code>.sync</code> 修饰符</h3><p>在有些情况下，我们可能需要对一个 <code>prop</code> 进行<kbd>双向绑定</kbd>，不幸的是，真正的双向绑定会带来维护上的问题，因为<wavy>子组件可以变更父组件，且在父组件和子组件两侧都没有明显的变更来源</wavy>。<code>vue</code> 推荐以 <code>update:myPropName</code> 的模式触发事件取而代之</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;update:title&#x27;</span>, newTitle)</span><br></pre></td></tr></table></figure><u>父组件监听这个事件，并根据需要变更本地的而数据属性</u><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document</span><br><span class="line">  v-bind:title=&quot;doc.title&quot;</span><br><span class="line">  v-on:update:title=&quot;doc.title = $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure><wavy>vue 为了方便将这种模式提供了一个缩写，即 .sync 修饰符</wavy><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind:title.sync</span>=<span class="string">&quot;doc.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-exclamation-circle"></i><p>带有 <code>.sync</code> 修饰符的 <code>v-bind</code> 不能和表达式一起使用 (例如 <code>v-bind:title.sync=&quot;doc.title + '!'&quot;</code> 是无效的)。取而代之的是，你只能提供你想要绑定的 <code>property</code> 名，类似 <code>v-model</code>，所以将 <code>v-bind.sync</code> 用在一个字面量的对象上，例如 <code>v-bind.sync=&quot;{ title: doc.title }&quot;</code>，是无法正常工作的</p></div><p>当我们用一个对象同时设置多个 <code>prop</code> 的时候，也可以将这个 <code>.sync</code> 修饰符和 <code>v-bind</code> 配合使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doc: &#123;</span><br><span class="line">      id: <span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">      title: <span class="string">&#x27;yy&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind.sync</span>=<span class="string">&quot;doc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这样会把 doc 对象中的每一个 property (如 title) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 v-on 监听器。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind:title.sync</span>=<span class="string">&quot;doc.title&quot;</span> <span class="attr">v-bind:id.sync</span>=<span class="string">&quot;doc.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;text-document</span><br><span class="line">  v-bind:title=&quot;doc.title&quot;</span><br><span class="line">  v-bind:id=&quot;doc.id&quot;</span><br><span class="line">  v-on:update:title=&quot;doc.title = $event&quot;</span><br><span class="line">  v-on:update:id=&quot;doc.id = $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- .sync 意味这监听了一个 update:title 事件名的事件，当title改变时触发这个事件，实现双向绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-bind:title.sync</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        inheritAttrs: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="javascript">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text&quot;</span> @click=<span class="string">&quot;$emit(&#x27;update:title&#x27;, &#x27;居庙堂之高则忧其民，处江湖之远而忧其君&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">          title: <span class="string">&#x27;不以物喜，不以己悲&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_qBmrZqg" src="//codepen.io/milkdue/embed/qBmrZqg?height=300&theme-id=dark&slug-hash=qBmrZqg&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="插槽">插槽</h2><h3 id="插槽内容">插槽内容</h3><div class="note red icon flat"><i class="note-icon fa fa-check"></i><p><code>vue</code> 实现了一套内容分发的 <code>API</code>，将 <code>&lt;slot&gt;</code> 元素作为承载分发内容的出口</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件navigation-link --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation-link</span> <span class="attr">url</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件navigation-link的模板 --&gt;</span></span><br><span class="line">&lt;a</span><br><span class="line">  v-bind:href=&quot;url&quot;</span><br><span class="line">  class=&quot;nav-link&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件渲染时，会将 &lt;slot&gt;&lt;/slot&gt; 将会被替换为Your Profile --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插槽中可以包含任意的内容，包括html，甚至是一个组件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果组件中的模板中没有 slot 元素，则该组件起始标签和结束标签之间的内容都会被抛弃 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插槽作用域">插槽作用域</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插槽跟模板的其它地方一样可以访问相同的实例 property (也就是相同的“作用域”)，而不能访问 &lt;navigation-link&gt; 的作用域，例如url是无法访问的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigation-link</span> <span class="attr">url</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 无法获取 url 的内容 --&gt;</span></span><br><span class="line">    Your Profile &#123;&#123;title&#125;&#125; &#123;&#123;url&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;navigation-link&#x27;</span>, &#123;</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>插槽<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">          title: <span class="string">&#x27;不以物喜，不以己悲&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note blue icon flat"><i class="note-icon fa fa-bullhorn"></i><p><emp>父级模板里的所有内容都是在父级作用域中编译的，子模板里的所有内容都是在子作用域中编译的</emp></p></div><h3 id="后备内容">后备内容</h3><p>有时为一个插槽设置具体的<span class='nota' data-nota='也就是默认的'>后备</span>内容是很有用的，它<u>只会在没有提供内容的时候被渲染</u></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- submit-button组件的模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果希望按钮在大多数情况下都渲染文本 Submit 可以在slot中放入希望渲染的后备内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用时不使用插槽就会渲染默认内容，使用插槽就渲染插槽内容 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">submit-button</span>&gt;</span><span class="tag">&lt;/<span class="name">submit-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">submit-button</span>&gt;</span>save<span class="tag">&lt;/<span class="name">submit-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">submit-button</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 10px; height: 10px; background: red; border-radius: 50%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">submit-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽">具名插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当一个模板需要多个插槽时，需要使用到具名插槽 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- base-layout组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>slot</code> 的一个特殊的属性 <code>name</code>，这个属性就是<wavy>用来定义额外的插槽的</wavy>，其中一个不带 <code>name</code> 属性的 <code>slot</code> 带有隐含的名字 <kbd>default</kbd>，在向具名插槽提供内容时，在 <code>template</code> 元素上使用 <code>v-slot</code> 指令，并以 <code>v-slot</code> 的参数的形式提供其名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip "><p><code>v-slot</code> 一般只能添加在 <code>&lt;template&gt;</code> 上</p></div><h3 id="作用域插槽">作用域插槽</h3><p>有时候需要<span class='nota' data-nota='就是 template 中的内容'>插槽中的内容</span>能够访问到子组件的数据，那么就需要作用域插槽，将子组件 <code>slot</code> 元素中的数据通过 <code>v-bind</code> 暴露给插槽，插槽通过 <code>v-slot:[param]=&quot;slotProps&quot;</code> 获取到一个包含子组件的 <code>slot</code> 中 <code>v-bind</code> 参数的对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 插槽不起作用，无法访问到 user --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">        &#123;&#123;user.firstName&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 通过v-slot获取到 v-bind的参数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;slotProps.user.firstName&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;current-user&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            user: &#123;</span><br><span class="line"><span class="javascript">              firstName: <span class="string">&#x27;苏西&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              lastName: <span class="string">&#x27;佩奇&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">user.lastName</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="独占默认插槽的缩写语法">独占默认插槽的缩写语法</h4><p>在上面情况下，当被提供的内容只有默认插槽时，<wavy>组件的标签才可以被当作插槽的模板来使用</wavy>，这样我们就可以把 <code>v-slot</code> 直接用在组件上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当然还可以简单，不带参数的 v-slot 假定为默认插槽 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意默认插槽的缩写语法不能和具名插槽混用，因为它会导致作用域不明确 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 无效，会导致警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:other</span>=<span class="string">&quot;otherSlotProps&quot;</span>&gt;</span></span><br><span class="line">    slotProps is NOT available here</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只要出现多个插槽，请始终为所有的插槽使用完整的基于 &lt;template&gt; 的语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:other</span>=<span class="string">&quot;otherSlotProps&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 就像下面一样，当有多个插槽时必须要使用完整的template语法 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 通过v-slot获取到 v-bind的参数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;slotProps.user.firstOne&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:slotone</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;slotProps.brother.firstOne&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;current-user&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            user: &#123;</span><br><span class="line"><span class="javascript">              firstOne: <span class="string">&#x27;苏西&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              lastTwo: <span class="string">&#x27;佩奇&#x27;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            brother: &#123;</span><br><span class="line"><span class="javascript">              firstOne: <span class="string">&#x27;乔治1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              lastTwo: <span class="string">&#x27;乔治2&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">user.lastTwo</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:brother</span>=<span class="string">&quot;brother&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slotone&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">brother.lastTwo</span>&#125;&#125;</span><span class="xml">  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解构插槽-Prop">解构插槽 <code>Prop</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过v-slot获取到 v-bind的参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;user.firstName&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者解构赋值 重命名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; user: person &#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; person.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 解构赋值默认值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; user = &#123; firstName: &#x27;Guest&#x27; &#125; &#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态插槽名">动态插槽名</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">dynamicSlotName</span>]&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽的缩写">具名插槽的缩写</h3><div class="note pink icon modern"><i class="note-icon fa fa-hashtag"></i><p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code></p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相当于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-bug"></i><p>和其它指令一样，该缩写只在其有参数的时候才可用</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这样会触发一个警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> #=<span class="string">&quot;&#123; user &#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 明确插槽名才可以使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; user &#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽示例">作用域插槽示例</h3><div class="note green icon flat"><i class="note-icon fa fa-child"></i><p>当需要根据子组件的某些条件来确认是否需要渲染某些内容时，作用域插槽是可用的</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;&#123;todo&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          filteredTodos: [</span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">        &lt;li</span><br><span class="line"><span class="javascript">          v-<span class="keyword">for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span></span></span><br><span class="line"><span class="javascript">          v-bind:key=<span class="string">&quot;todo.id&quot;</span></span></span><br><span class="line">        &gt;</span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="comment">&lt;!-- 后备内容 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123; <span class="name">todo.text</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;.app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插槽废弃的语法">插槽废弃的语法</h3><p><code>v-slot</code> 指令自 <code>Vue 2.6.0</code> 起被引入，提供更好的支持 <del>slot</del> 和 <del>slot-scope</del> <code>attribute</code> 的 <code>API</code> 替代方案。虽然在所有的 <code>2.x</code> 版本中 <del>slot</del> 和 <del>slot-scope</del> <code>attribute</code> 仍会被支持，但已经被官方废弃且不会出现在 <code>Vue 3</code> 中</p><h4 id="带有-slot-属性的具名插槽">带有 <code>slot</code> 属性的具名插槽</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- base-layout模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新版是 v-slot:或# 旧版是 slot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者直接将slot作用于一个普通元素上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 未命名的插槽（默认插槽）会捕获未被匹配的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以上两个示例会被渲染为 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="带有-slot-scope-属性的具名插槽">带有 <code>slot-scope</code> 属性的具名插槽</h4><p>和 <code>v-slot:default=&quot;slotProp&quot;</code> 一样可以接收传递给插槽的 <code>slotProp</code>，这个 <code>slotProp</code> 声明了被接收的 <code>prop</code> 对象会作为 <code>slotProps</code> 变量存在于 <code>template</code> 作用域中，<code>slotProp</code> 可以随意命名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot-example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;default&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot-example</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果slot=&quot;default&quot; 可以省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot-example</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- slot-scope 可以直接用于非 template元素，包括组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot-example</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- slot-scope 的值可以接收任何有效的可以出现在函数定义的参数位置上的 JavaScript 表达式。这意味着在支持的环境下 (单文件组件或现代浏览器)，可以在表达式中使用 ES2015 解构 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; msg &#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot-example</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 之前的todo-list组件也可以这样使用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">todo-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; todo &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态组件-异步组件">动态组件 &amp; 异步组件</h2><h3 id="在动态组件上使用-keep-alive">在动态组件上使用 <code>keep-alive</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当在这些组件之间切换的时候，有时会想<u>保持这些组件的状态</u>，以避免反<wavy>复重渲染</wavy>导致的性能问题</p><iframe src="https://codesandbox.io/embed/shy-forest-xh3ml?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="shy-forest-xh3ml"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><p>可以看到，选择一篇文章，切换到 <code>archive</code> 之后再切回 <code>posts</code>，不会展示之前显示的文章，这是因为每次切换标签的时候，<code>vue</code> 都创建了一个<kbd>新的</kbd><code>currentTabComponent</code> 实例</p><div class="note orange icon flat"><i class="note-icon fa fa-info"></i><p>重新创建动态组件的行为通常是非常有用的，但是有时更希望那些标签的<u>组件实例能够被在它们第一次被创建的时候缓存下来</u>。为了解决这个问题，可以用一个 <code>&lt;keep-alive&gt;</code> 元素将其<emp>动态组件包裹起来</emp></p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 失活的组件将会被缓存！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-keep-alive-with-dynamic-components?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-keep-alive-with-dynamic-components"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><div class="tip cogs"><p>注意这个 <code>&lt;keep-alive&gt;</code> 要求被切换到的组件都有自己的名字，不论是通过组件的 <code>name</code> 选项还是局部/全局注册</p></div><h3 id="异步组件">异步组件</h3><p>在大型应用中，可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，<code>Vue</code> 允许你以一个工厂函数的方式定义组件，这个工厂函数会<kbd>异步解析</kbd>组件定义。<code>Vue</code> 只有在这个组件<wavy>需要被渲染的时候才会触发该工厂函数</wavy>，且会把结果<kbd>缓存</kbd>起来供未来渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;async-example&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定时器模拟异步</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 向 resolve 回调传递组件定义 也可以reject(reason)来表示加载失败</span></span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: <span class="string">&#x27;&lt;div&gt;I am async!&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在工厂函数中返回一个 promise</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;async-webpack-example&#x27;</span>, <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./my-async-componet&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册的时候，可以直接提供一个返回Promise的函数</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="处理加载状态">处理加载状态</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AsyncComponent = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span></span><br><span class="line">  component: <span class="keyword">import</span>(<span class="string">&#x27;./MyComponent.vue&#x27;</span>),</span><br><span class="line">  <span class="comment">// 异步组件加载时使用的组件</span></span><br><span class="line">  loading: LoadingComponent,</span><br><span class="line">  <span class="comment">// 加载失败时使用的组件</span></span><br><span class="line">  error: ErrorComponent,</span><br><span class="line">  <span class="comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span></span><br><span class="line">  delay: <span class="number">200</span>,</span><br><span class="line">  <span class="comment">// 如果提供了超时时间且组件加载也超时了，</span></span><br><span class="line">  <span class="comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span></span><br><span class="line">  timeout: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意如果你希望在 Vue Router 的路由组件中使用上述语法的话，你必须使用 Vue Router 2.4.0+ 版本</span></span><br></pre></td></tr></table></figure><h2 id="处理边界情况">处理边界情况</h2><h3 id="访问元素-组件">访问元素 &amp; 组件</h3><h4 id="访问根实例">访问根实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在每个 new Vue 实例的子组件中，其根实例可以通过 $root property 进行访问</span></span><br><span class="line"><span class="comment">// Vue 根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    baz: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的子组件都可以将这个实例作为一个全局 store 来访问或使用</span></span><br><span class="line"><span class="comment">// 获取根组件的数据</span></span><br><span class="line"><span class="built_in">this</span>.$root.foo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入根组件的数据</span></span><br><span class="line"><span class="built_in">this</span>.$root.foo = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问根组件的计算属性</span></span><br><span class="line"><span class="built_in">this</span>.$root.bar</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用根组件的方法</span></span><br><span class="line"><span class="built_in">this</span>.$root.baz()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        filteredTodos: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 子组件中获取根组件的数据</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root.foo);</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li</span></span><br><span class="line"><span class="string">        v-for=&quot;todo in filteredTodos&quot;</span></span><br><span class="line"><span class="string">        v-bind:key=&quot;todo.id&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">        &lt;slot name=&quot;todo&quot; v-bind:todo=&quot;todo&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;!-- 后备内容 --&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123; todo.text &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;.app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="访问父级组件实例">访问父级组件实例</h4><p>和 <code>$root</code> 类似，<code>$parent</code> 属性可以用来<wavy>从一个子组件访问父组件的实例</wavy>，它提供了一种机会，可以在后期随时触达父级组件，来替代将数据以 <code>prop</code> 的方式传入子组件的方式</p><div class="note red icon flat"><i class="note-icon fa fa-info-circle"></i><p>在绝大多数情况下，触达父级组件会使得你的应用更难调试和理解，尤其是当你变更了父级组件的数据的时候。当我们稍后回看那个组件的时候，很难找出那个变更是从哪里发起的</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        filteredTodos: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 子组件中获取根组件的数据</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.foo); <span class="comment">// 1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li</span></span><br><span class="line"><span class="string">        v-for=&quot;todo in filteredTodos&quot;</span></span><br><span class="line"><span class="string">        v-bind:key=&quot;todo.id&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">        &lt;slot name=&quot;todo&quot; v-bind:todo=&quot;todo&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;!-- 后备内容 --&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123; todo.text &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;.app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="访问子组件或子组件实例和方法">访问子组件或子组件实例和方法</h4><p>尽管存在 <code>prop</code> 和事件，有的时候你仍可能需要在 <code>JavaScript</code> 里<u>直接访问一个子组件</u>。为了达到这个目的，可以通过 <code>ref</code> 这个属性为子组件赋予一个 <code>ID</code> 引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">ref</span>=<span class="string">&quot;todolist&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;&#123;todo&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            filteredTodos: [</span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.foo);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.filteredTodos);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">          &lt;li</span><br><span class="line"><span class="javascript">            v-<span class="keyword">for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span></span></span><br><span class="line"><span class="javascript">            v-bind:key=<span class="string">&quot;todo.id&quot;</span></span></span><br><span class="line">          &gt;</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="comment">&lt;!-- 后备内容 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              </span><span class="template-variable">&#123;&#123; <span class="name">todo.text</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        foo: 1</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.todolist.test() <span class="comment">// 访问子组件方法</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 <code>ref</code> 和 <code>v-for</code> 一起使用的时候，得到的 <code>ref</code> 将会是一个包含了<emp>对应数据源的这些子组件的数组</emp></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">ref</span>=<span class="string">&quot;todolist&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;&#123;todo&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            filteredTodos: [</span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.foo);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.filteredTodos);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">          &lt;li</span><br><span class="line"><span class="javascript">            v-<span class="keyword">for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span></span></span><br><span class="line"><span class="javascript">            v-bind:key=<span class="string">&quot;todo.id&quot;</span></span></span><br><span class="line">          &gt;</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="comment">&lt;!-- 后备内容 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              </span><span class="template-variable">&#123;&#123; <span class="name">todo.text</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        foo: 1,</span><br><span class="line">        list: [</span><br><span class="line">          &#123;id: 1&#125;,</span><br><span class="line">          &#123;id: 2&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.todolist) <span class="comment">// 数组</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.$refs.todolist: VueComponet[]</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>$refs</code> 只会在组件<span class='nota' data-nota='mounted'>渲染完成</span>之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的<code>逃生舱</code>——<u>应该避免在模板或计算属性中访问 $refs</u></p><h4 id="依赖注入">依赖注入</h4><p>使用两个新的实例选项：<code>provide</code> 和 <code>inject</code>，<code>provide</code> 选项允许提供给<u>任意后代组件数据和方法</u>，在后代组件中使用 <code>inject</code> 选项来接收传给后代组件的数据和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        filteredTodos: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    inject: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>], <span class="comment">// 引入one foo</span></span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.one();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.foo);</span><br><span class="line">    &#125;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li</span></span><br><span class="line"><span class="string">        v-for=&quot;todo in filteredTodos&quot;</span></span><br><span class="line"><span class="string">        v-bind:key=&quot;todo.id&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">        &lt;slot name=&quot;todo&quot; v-bind:todo=&quot;todo&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;!-- 后备内容 --&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123; todo.text &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;.app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      one: <span class="built_in">this</span>.one,</span><br><span class="line">      foo: <span class="built_in">this</span>.foo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;one&#x27;</span> + <span class="built_in">this</span>.foo);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实际上，可以把依赖注入看作一部分大范围有效的 <code>prop</code>，<wavy>除了祖先组件不需要哪些后代组件使用了它提供的 property，后代组件不需要知道被注入的 property 来自哪里</wavy></p><div class="note red icon flat"><i class="note-icon fa fa-info"></i><p>然而，依赖注入还是有负面影响的。它将你应用程序中的组件与它们当前的组织方式耦合起来，使重构变得更加困难。同时所提供的 <code>property</code> 是非响应式的。这是出于设计的考虑，因为使用它们来创建一个中心化规模化的数据跟使用 <code>$root</code> 做这件事都是不够好的</p></div><h3 id="程序化的事件侦听器">程序化的事件侦听器</h3><ol><li>通过 <code>$on(eventName, eventHandler)</code> 侦听一个事件</li><li>通过 <code>$once(eventName, eventHandler)</code> 一次性侦听一个事件</li><li>通过 <code>$off(eventName, eventHandler)</code> 停止侦听一个事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一次性将这个日期选择器附加到一个输入框上</span></span><br><span class="line"><span class="comment">// 它会被挂载到 DOM 上。</span></span><br><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Pikaday 是一个第三方日期选择器的库</span></span><br><span class="line">  <span class="built_in">this</span>.picker = <span class="keyword">new</span> Pikaday(&#123;</span><br><span class="line">    field: <span class="built_in">this</span>.$refs.input,</span><br><span class="line">    format: <span class="string">&#x27;YYYY-MM-DD&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 在组件被销毁之前，</span></span><br><span class="line"><span class="comment">// 也销毁这个日期选择器。</span></span><br><span class="line">beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.picker.destroy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在了两个问题</p><ul><li>它需要在这个组件实例中保存这个 <code>picker</code>，如果可以的话最好<kbd>只有</kbd>生命周期钩子可以访问到它，这并不算严重的问题，但是它可以被视为<kbd>杂物</kbd></li><li>建立代码<kbd>独立</kbd>于我们的清理代码，这使得我们比较难于<span class='nota' data-nota='两块代码独立，难以维护'>难于程序化地清理我们建立的所有东西</span></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> picker = <span class="keyword">new</span> Pikaday(&#123;</span><br><span class="line">    field: <span class="built_in">this</span>.$refs.input,</span><br><span class="line">    format: <span class="string">&#x27;YYYY-MM-DD&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件内的生命周期函数在执行结束后会 $emit 一个hook + 生命周期名字的自定义事件</span></span><br><span class="line">  <span class="built_in">this</span>.$once(<span class="string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    picker.destroy()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个逻辑，甚至可以让多个输入框同时使用不同的 <code>pikaday</code>，<u>每个实例都程序化的在后期清理它们</u></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.attachDatepicker(<span class="string">&#x27;startDateInput&#x27;</span>)</span><br><span class="line">  <span class="built_in">this</span>.attachDatepicker(<span class="string">&#x27;endDateInput&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  attachDatepicker: <span class="function"><span class="keyword">function</span> (<span class="params">refName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> picker = <span class="keyword">new</span> Pikaday(&#123;</span><br><span class="line">      field: <span class="built_in">this</span>.$refs[refName],</span><br><span class="line">      format: <span class="string">&#x27;YYYY-MM-DD&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$once(<span class="string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      picker.destroy()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-cloud"></i><p>注意 <code>vue</code> 的事件系统不同于浏览器的 <code>EventTarget API</code>，尽管它们工作起来是相似的，但是 <code>$emit</code>、<code>$on</code>, 和 <code>$off</code> 并不是 <code>dispatchEvent</code>、<code>addEventListener</code> 和 <code>removeEventListener</code> 的别名</p></div><h3 id="循环引用">循环引用</h3><h4 id="递归组件">递归组件</h4><p>组件是可以在它们自己的模板中调用自身的，不过它们只能通过 <code>name</code> 选项来做这件事。<u>当全局注册一个组件时</u>，这个全局的 <code>ID</code> 会自动设置为该组件的 <code>name</code> 选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;unique-name-of-my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// name: &#x27;unique-name-of-my-component&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">list</span> <span class="attr">:list</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">&#x27;list&#x27;</span>],</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注意一定要有停止条件，否则栈溢出</span></span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.content</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">list</span> <span class="attr">:list</span>=<span class="string">&quot;item.children&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.children !== null&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">list</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [</span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list1&#x27;</span>, <span class="attr">children</span>: [&#123;<span class="attr">id</span>: <span class="string">&#x27;1-1&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list1-1&#x27;</span>&#125;, &#123;<span class="attr">id</span>: <span class="string">&#x27;1-2&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list1-2&#x27;</span>&#125;]&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list2&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list3&#x27;</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件之间的循环引用">组件之间的循环引用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件tree-folder模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; folder.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tree-folder-contents</span> <span class="attr">:children</span>=<span class="string">&quot;folder.children&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件tree-folder-contents模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;child in children&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tree-folder</span> <span class="attr">v-if</span>=<span class="string">&quot;child.children&quot;</span> <span class="attr">:folder</span>=<span class="string">&quot;child&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; child.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当你仔细观察的时候，你会发现这些组件在渲染树中互为对方的后代和祖先——一个悖论！当通过 Vue.component 全局注册组件的时候，这个悖论会被自动解开 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果你使用一个模块系统依赖/导入组件，例如通过 webpack 或 Browserify，你会遇到一个错误： Failed to mount component: template or render function not defined.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">模块系统发现它需要 A，但是首先 A 依赖 B，但是 B 又依赖 A，但是 A 又依赖 B，如此往复。这变成了一个循环，不知道如何不经过其中一个组件而完全解析出另一个组件。为了解决这个问题，我们需要给模块系统一个点，在那里“A 反正是需要 B 的，但是我们不需要先解析 B</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在我们的例子中，把 &lt;tree-folder&gt; 组件设为了那个点。我们知道那个产生悖论的子组件是 &lt;tree-folder-contents&gt; 组件，所以我们会等到生命周期钩子 beforeCreate 时去注册它</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// browserify</span></span></span><br><span class="line"><span class="javascript">  beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$options.components.TreeFolderContents = <span class="built_in">require</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>).default</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// webpack import</span></span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="javascript">    TreeFolderContents: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tree-folder</span> <span class="attr">:folder</span>=<span class="string">&quot;folder&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tree-folder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;tree-folder&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">&#x27;folder&#x27;</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">folder.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">tree-folder-contents</span> <span class="attr">:children</span>=<span class="string">&quot;folder.children&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;tree-folder-contents&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">&#x27;children&#x27;</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;child in children&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">tree-folder</span> <span class="attr">v-if</span>=<span class="string">&quot;child.children&quot;</span> <span class="attr">:folder</span>=<span class="string">&quot;child&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">child.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        folder: &#123;<span class="attr">name</span>: <span class="string">&#x27;我的电脑&#x27;</span>, <span class="attr">children</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;用户&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">children</span>: [&#123;<span class="attr">name</span>: <span class="string">&#x27;默认&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;defalut&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;公用&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;public&#x27;</span>&#125;]&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;System32&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;system32&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;System64&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;system64&#x27;</span>&#125;</span></span><br><span class="line">        ]&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板定义的替代品">模板定义的替代品</h3><h4 id="内联模板">内联模板</h4><p>当 <code>inline-template</code> 这个特殊的 <code>attribute</code> 出现在一个子组件上时，<u>这个组件将会使用其里面的内容作为模板</u>，<span class='nota' data-nota='slot插槽'>而不是将其作为被分发的内容</span>，这使得模板的撰写工作更加灵活</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inline-template中的内容直接作为模板渲染出来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>These are compiled as the component&#x27;s own template.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Not parent&#x27;s transclusion content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 即使写模板也不会生效</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">span</span>&gt;</span>111<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note green icon flat"><i class="note-icon fa fa-thermometer-full"></i><p><code>inline-template</code> 会让模板的作用域变得更加难以理解。所以作为最佳实践，请在组件内优先选择 <code>template</code> 选项或 <code>.vue</code> 文件里的一个 <code>&lt;template&gt;</code> 元素来定义模板</p></div><h4 id="X-Template"><code>X-Template</code></h4><p>另一个定义模板的方式是在一个 <code>&lt;script&gt;</code> 元素中，并为其带上 <code>text/x-template</code> 的类型，然后通过一个 <code>id</code> 将模板引用过去，但这些模板一般用于极小的应用，<emp>其他情况下避免使用，这会将模板和组件的其他定义分开来</emp></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hello-world-template&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello hello hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;hello-world&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    template: <span class="string">&#x27;#hello-world-template&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控制更新">控制更新</h3><h4 id="强制更新">强制更新</h4><p>通过 <code>$forceUpdate</code> 来强制更新，<del>对于数组和对象的变更检测，视图是无法及时更新的</del>，需要强制更新( <code>$forceUpdate</code> )</p><iframe id="cp_embed_VwbzejK" src="//codepen.io/milkdue/embed/VwbzejK?height=300&theme-id=dark&slug-hash=VwbzejK&default-tab=js&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h4 id="通过-v-once-创建低开销的静态组件">通过 <code>v-once</code> 创建低开销的静态组件</h4><p>渲染普通的 <code>HTML</code> 元素在 <code>vue</code> 中是非常快速的，但有的时候可能有一个组件，这个组件包含了大量静态内容，在这种情况下，可以在根元素上添加 <code>v-once</code> 属性以确保这些内容只计算一次然后缓存起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;terms-of-service&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div v-once&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Terms of Service&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      ... a lot of static content ...</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="进入-离开-列表过渡">进入 / 离开 &amp; 列表过渡</h2><div class="tip "><p><code>vue</code> 在插入、更新或移除 <code>dom</code> 时，提供多种不同方式的应用过渡效果</p><ol><li>在 <code>css</code> 过渡和动画中自动应用 <code>class</code></li><li>可以配合使用第三方 <code>css</code> 动画库，如 <code>animate.css</code></li><li>在过渡钩子函数中使用 <code>javascript</code> 直接操作 <code>dom</code></li><li>可以配合使用第三方 <code>javascript</code> 动画库，如 <code>velocity.js</code></li></ol></div><h3 id="单元素-组件的过渡">单元素 / 组件的过渡</h3><p><code>vue</code> 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素或组件添加进入 / 离开过渡</p><ol><li>条件渲染(<code>v-if</code> 或 <code>v-show</code>)</li><li>动态组件(<code>&lt;component :is=&quot;xx&quot;&gt;&lt;/component&gt;</code>)</li><li>组件根节点</li></ol><iframe id="cp_embed_NWjayzZ" src="//codepen.io/milkdue/embed/NWjayzZ?height=300&theme-id=dark&slug-hash=NWjayzZ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>当插入或删除包含在 <code>transition</code> 组件中的元素时，<code>vue</code> 将会做出以下处理</p><ol><li>自动嗅探目标元素是否应用了 <code>CSS</code> 过渡或动画，如果是，在恰当的时机添加/删除 <code>CSS</code> 类名</li><li>如果过渡组件提供了 <code>JavaScript 钩子函数</code>，这些钩子函数将在恰当的时机被调用</li><li>如果没有找到 <code>JavaScript</code> 钩子并且也没有检测到 <code>CSS</code> 过渡/动画，<code>DOM</code> 操作 (插入/删除) 在下一帧中立即执行</li></ol><h4 id="过渡的类名">过渡的类名</h4><p>在进入 / 离开的过渡中，会有 <code>6</code> 个 <code>class</code> 切换</p><ol><li><code>v-enter</code>：定义进入过渡的开始状态，在元素被插入之前生效，在元素被插入之后的下一帧移除</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态，在整个进入过渡阶段中应用，在元素被插入之前生效，在过渡 / 动画完成之后移除，这个类被用来定义进入<span class='nota' data-nota='过渡属性transition'>过渡的过程时间，延迟和曲线函数</span></li><li><code>v-enter-to</code>：定义进入过渡的结束状态，在元素被插入之后下一帧生效(与此同时 <code>v-enter</code> 被移除)，在过渡 / 动画完成之后移除</li><li><code>v-leave</code>：定义离开过渡的开始状态，在离开过渡被触发时立刻生效，下一帧被移除</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态，在整个离开过渡阶段中应用，在离开过渡被触发时立刻生效，在过渡 / 动画完成之后移除，这个类可以被用来定义离开<span class='nota' data-nota='过渡属性transition'>过渡的过程时间，延迟和曲线函数</span></li><li><code>v-leave-to</code>：定义离开过渡的结束状态，在离开过渡被触发之后下一帧生效(与此同时 <code>v-leave</code> 被删除)，在过渡 / 动画完成之后移除</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/vue/20210722-174402-0844.png" alt="过渡过程"/></div><span class="image-caption">过渡过程</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/milkdue/file/raw/master/vue/20210727-151531-0600.jpg" alt="过渡过程"/></div><span class="image-caption">过渡过程</span></div><p>对于这些在过渡中切换的类名来说，如果使用了一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀，如果使用了 <code>name</code> 属性 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，则 <code>v-enter</code> 会替换为 <code>my-transition</code>。其中 <code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入 / 离开过渡的不同的缓和曲线</p><h4 id="CSS-过渡"><code>CSS</code> 过渡</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    Toggle render</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 可以设置不同的进入和离开动画 */</span></span><br><span class="line"><span class="comment">/* 设置持续时间和动画函数 */</span></span><br><span class="line"><span class="selector-class">.slide-fade-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-enter</span>, <span class="selector-class">.slide-fade-leave-to</span></span><br><span class="line"><span class="comment">/* .slide-fade-leave-active for below version 2.1.8 */</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CSS-动画"><code>CSS</code> 动画</h4><p><code>css</code> 动画用法同 <code>css</code> 过渡，区别是在动画中 <code>v-enter</code> 类名在节点插入 <code>dom</code> 后不会立即删除，而是在 <code>animationend</code> 事件触发时删除</p><iframe id="cp_embed_bGWoWXG" src="//codepen.io/milkdue/embed/bGWoWXG?height=300&theme-id=dark&slug-hash=bGWoWXG&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h4 id="自定义过渡的类名">自定义过渡的类名</h4><ol><li>可以通过以下的属性来自定义过渡类名<ul><li><code>enter-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul></li><li>它们的优先级高于普通的类名</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  &lt;transition</span><br><span class="line">    name=&quot;custom-classes-transition&quot;</span><br><span class="line">    enter-active-class=&quot;animated tada&quot;</span><br><span class="line">    leave-active-class=&quot;animated bounceOutRight&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      show: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_eYWeNyN" src="//codepen.io/milkdue/embed/eYWeNyN?height=300&theme-id=dark&slug-hash=eYWeNyN&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h4 id="同时使用过渡和动画">同时使用过渡和动画</h4><p><code>vue</code> 为了知道过渡的完成，必须设置相应的事件监听器，它可以是 <code>transitionend</code> 或 <code>animationend</code>，这取决于给元素应用的 <code>css</code> 规则，如果使用其中任何一种，<code>vue</code> 能自动识别类型并设置监听，但是，假设需要给同一个元素设置两种过渡动效，如果 <code>animation</code> 很快的被触发完成了，而 <code>transition</code> 效果还没结束，在这种情况下，需要使用 <code>type</code> 属性并设置 <code>animation</code> 或 <code>transition</code> 来明确声明需要 <code>vue</code> 监听的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  &lt;transition</span><br><span class="line">    name=&quot;fade&quot;</span><br><span class="line">    enter-active-class=&quot;animated tada duration-1s&quot;</span><br><span class="line">    leave-active-class=&quot;animated bounceOutRight duration-1s&quot;</span><br><span class="line">    type=&quot;transition&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      show: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显性的过渡持续时间">显性的过渡持续时间</h4><p>在很多情况下，<code>vue</code> 可以自动得出过渡效果的完成时机。默认情况下，<code>vue</code> 会等待其在过渡效果的根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。然而也可以不这样设定——比如，我们可以拥有一个精心编排的一系列过渡效果，其中一些嵌套的内部元素相比于过渡效果的根元素有延迟的或更长的过渡效果，在这种情况下可以用 <code>&lt;transition&gt;</code> 组件上的 <code>duration prop</code> <wavy>定制一个显性的过渡持续时间</wavy></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置显性的过渡时间 单位为毫秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;1000&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定制进入和移除的过渡时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;&#123; enter: 500, leave: 800 &#125;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="javascript-钩子"><code>javascript</code> 钩子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">  v-on:enter=&quot;enter&quot;</span><br><span class="line">  v-on:after-enter=&quot;afterEnter&quot;</span><br><span class="line">  v-on:enter-cancelled=&quot;enterCancelled&quot;</span><br><span class="line"></span><br><span class="line">  v-on:before-leave=&quot;beforeLeave&quot;</span><br><span class="line">  v-on:leave=&quot;leave&quot;</span><br><span class="line">  v-on:after-leave=&quot;afterLeave&quot;</span><br><span class="line">  v-on:leave-cancelled=&quot;leaveCancelled&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="comment">// 进入中</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当与 CSS 结合使用时</span></span><br><span class="line">  <span class="comment">// 回调函数 done 是可选的</span></span><br><span class="line">  enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="comment">// 离开时</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  beforeLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当与 CSS 结合使用时</span></span><br><span class="line">  <span class="comment">// 回调函数 done 是可选的</span></span><br><span class="line">  leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// leaveCancelled 只用于 v-show 中</span></span><br><span class="line">  <span class="comment">// 离开过渡被打断时</span></span><br><span class="line">  leaveCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>可以在属性中声明 <code>javascript</code> 钩子<ul><li><code>before-enter</code>：进入过渡运行前</li><li><code>enter</code>：进入过渡运行时</li><li><code>after-enter</code>：进入过渡运行后</li><li><code>enter-cancelled</code>：进入过渡被打断时</li><li><code>before-leave</code>：离开过渡运行前</li><li><code>leave</code>：离开过渡运行时</li><li><code>after-leave</code>：离开过渡运行后</li><li><code>leave-cancelled</code>：离开过渡被打断时</li></ul></li><li>这些钩子函数可以结合 <code>transitions / animations</code> 使用，也可以单独使用</li><li>当只有 <code>javascript</code> 过渡的时候，在 <code>enter</code> 和 <code>leave</code> 中必须使用 <code>done</code> 进行回调，否则，<u>它们将被同步调用，过渡会立即完成</u></li><li>推荐对于使用 <code>javascript</code> 过渡的元素添加 <code>v-bind:css=&quot;false&quot;</code>，<code>vue</code> 会跳过 <code>css</code> 的检测，也可以避免过渡过程中 <code>css</code> 的影响</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    切换</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  &lt;transition</span><br><span class="line">    v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">    v-on:enter=&quot;enter&quot;</span><br><span class="line">    v-on:leave=&quot;leave&quot;</span><br><span class="line">    v-bind:css=&quot;false&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line">      Hello</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#example-4&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      show: <span class="literal">false</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line">        el.style.opacity = 0</span><br><span class="line"><span class="javascript">        el.style.transformOrigin = <span class="string">&#x27;left&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        Velocity(el, &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">fontSize</span>: <span class="string">&#x27;1.4em&#x27;</span> &#125;, &#123; <span class="attr">duration</span>: <span class="number">300</span> &#125;)</span></span><br><span class="line"><span class="javascript">        Velocity(el, &#123; <span class="attr">fontSize</span>: <span class="string">&#x27;1em&#x27;</span> &#125;, &#123; <span class="attr">complete</span>: done &#125;)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        Velocity(el, &#123; <span class="attr">translateX</span>: <span class="string">&#x27;15px&#x27;</span>, <span class="attr">rotateZ</span>: <span class="string">&#x27;50deg&#x27;</span> &#125;, &#123; <span class="attr">duration</span>: <span class="number">600</span> &#125;)</span></span><br><span class="line"><span class="javascript">        Velocity(el, &#123; <span class="attr">rotateZ</span>: <span class="string">&#x27;100deg&#x27;</span> &#125;, &#123; <span class="attr">loop</span>: <span class="number">2</span> &#125;)</span></span><br><span class="line">        Velocity(el, &#123;</span><br><span class="line"><span class="javascript">          rotateZ: <span class="string">&#x27;45deg&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          translateY: <span class="string">&#x27;30px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          translateX: <span class="string">&#x27;30px&#x27;</span>,</span></span><br><span class="line">          opacity: 0</span><br><span class="line">        &#125;, &#123; complete: done &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_NWjwqoZ" src="//codepen.io/milkdue/embed/NWjwqoZ?height=300&theme-id=dark&slug-hash=NWjwqoZ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="初始渲染的过渡">初始渲染的过渡</h3><p>通过 <code>appear</code> 属性来设置节点在<span class='nota' data-nota='组件第一次出现时的过渡'>初始渲染的过渡</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义 <code>css</code> 类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  appear-class=&quot;custom-appear-class&quot;</span><br><span class="line">  appear-to-class=&quot;custom-appear-to-class&quot;</span><br><span class="line">  appear-active-class=&quot;custom-appear-active-class&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_abWEyZj" src="//codepen.io/milkdue/embed/abWEyZj?height=300&theme-id=dark&slug-hash=abWEyZj&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>自定义 <code>javascript</code> 钩子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  v-on:before-appear=&quot;customBeforeAppearHook&quot;</span><br><span class="line">  v-on:appear=&quot;customAppearHook&quot;</span><br><span class="line">  v-on:after-appear=&quot;customAfterAppearHook&quot;</span><br><span class="line">  v-on:appear-cancelled=&quot;customAppearCancelledHook&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_LYyejjv" src="//codepen.io/milkdue/embed/LYyejjv?height=300&theme-id=dark&slug-hash=LYyejjv&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="多个元素的过渡">多个元素的过渡</h3><p>一个 <code>transition</code> 标签中含有多个过渡元素，但是当有多个<u>相同标签名</u>的元素切换时，需要通过 <code>key</code> 属性设置唯一的值来标记以让 <code>vue</code> 区分它们，否则 <code>vue</code> 为了效率<u>只会替换相同标签内部的内容</u></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;isEditing&quot;</span> <span class="attr">key</span>=<span class="string">&quot;save&quot;</span>&gt;</span></span><br><span class="line">    Save</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">&quot;edit&quot;</span>&gt;</span></span><br><span class="line">    Edit</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;isEditing&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; isEditing ? &#x27;Save&#x27; : &#x27;Edit&#x27; &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="过渡模式">过渡模式</h4><p>点击下面的按钮，在 <code>one</code> 和 <code>two</code> 按钮的过渡中，两个按钮都被重绘了，一个离开过渡的时候另一个开始进入过渡，这是 <code>&lt;transition&gt;</code>的<span class='nota' data-nota='进入和离开同时发生'>默认行为</span>。接下来点击切换定位为绝对定位在彼此的上面运行正常，然后滑动进度条运动变为滑动过渡</p><iframe id="cp_embed_dyWJJgb" src="//codepen.io/milkdue/embed/dyWJJgb?height=300&theme-id=dark&slug-hash=dyWJJgb&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>同时生效的进入和离开的过渡不能满足所有要求，所以 <code>vue</code> 提供了过渡模式</p><ol><li><code>in-out</code>：新元素先过渡，完成之后当前元素过渡离开</li><li><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入(点击切换模式查看效果)</li></ol><h3 id="多个组件的过渡">多个组件的过渡</h3><p>多个组件的过渡需要使用动态组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">fade</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表过渡">列表过渡</h3><p>对于列表过渡，我们采用 <code>transition-group</code> 组件，该组件的特点如下：</p><ol><li>不同于 <code>transition</code>，它会以一个真实元素呈现：默认为一个 <code>span</code>，可以通过 <code>tag</code> 属性更换为其他元素</li><li>过渡模式不可用，因为不需要相互切换特有的元素</li><li>内部元素总是需要提供唯一的 <code>key</code></li><li><code>css</code> 过渡的类将会应用在内部的元素中，而不是这个组 / 容器本身</li></ol><h4 id="列表的进入-离开过渡">列表的进入 / 离开过渡</h4><iframe id="cp_embed_XWRZJzq" src="//codepen.io/milkdue/embed/XWRZJzq?height=300&theme-id=dark&slug-hash=XWRZJzq&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>上面的过渡并不平滑，当<wavy>添加或移除元素时</wavy>，周围的元素会瞬间移动到它们的新布局的位置</p><h4 id="列表的排序过渡">列表的排序过渡</h4><p><code>transition-group</code> 组件还有一个特殊之处，不仅可以进入和离开动画，还可以<kbd>改变定位</kbd>，要使用这个功能需要 <code>v-move</code> 这个类，它会在元素的改变定位的过程中应用，像之前的类名一样，可以通过 <code>name</code> 属性来自定义前缀，也可以通过 <code>move-class</code> 属性手动设置，<code>v-move</code> 对于设置过渡的切换时机和过渡曲线非常有用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;flip-list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    shuffle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// _.shuffle() 返回一个打乱的集合</span></span><br><span class="line">      <span class="built_in">this</span>.items = _.shuffle(<span class="built_in">this</span>.items)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flip-list-move</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_XWRZJLy" src="//codepen.io/milkdue/embed/XWRZJLy?height=300&theme-id=dark&slug-hash=XWRZJLy&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>使用 <code>v-move</code>时，<code>vue</code> 内部使用了一个 <code>FLIP</code> 简单的动画队列，使用 <code>transforms</code> 将元素从之前的位置平滑过渡到新的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list-complete&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">    &lt;span</span><br><span class="line">      v-for=&quot;item in items&quot;</span><br><span class="line">      v-bind:key=&quot;item&quot;</span><br><span class="line">      class=&quot;list-complete-item&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        items: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">        nextNum: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        randomIndex: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="built_in">this</span>.items.length)</span><br><span class="line">        &#125;,</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.items.splice(<span class="built_in">this</span>.randomIndex(), <span class="number">0</span>, <span class="built_in">this</span>.nextNum++)</span><br><span class="line">        &#125;,</span><br><span class="line">        remove: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.items.splice(<span class="built_in">this</span>.randomIndex(), <span class="number">1</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        shuffle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.items = _.shuffle(<span class="built_in">this</span>.items)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-complete-item</span> &#123;</span><br><span class="line">  <span class="comment">/* 也可以在move-class和list-complete-enter/leave-active中分别加transition，注意一定要是all才可以，可能过渡效果不止一种，这里在item中加transition相当于在move和active中分别加transition */</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-complete-enter</span>, <span class="selector-class">.list-complete-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-complete-leave-active</span> &#123;</span><br><span class="line">  <span class="comment">/* 即将删除的dom需要脱离文档流后面的元素才可以过渡过来 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 另一种css写法 */</span></span><br><span class="line"><span class="selector-class">.list-complete-item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-complete-enter</span>, <span class="selector-class">.list-complete-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-complete-enter-active</span>,<span class="selector-class">.list-complete-leave-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-complete-move</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-complete-leave-active</span> &#123;</span><br><span class="line">  <span class="comment">/* 即将删除的dom需要脱离文档流后面的元素才可以过渡过来 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-info"></i><p>需要注意的是使用 <code>FLIP</code> 过渡的元素不能设置为 <code>display: inline</code> 。作为替代方案，可以设置为 <code>display: inline-block</code> 或者放置于 <code>flex</code> 中</p></div><iframe id="cp_embed_BaRYNgP" src="//codepen.io/milkdue/embed/BaRYNgP?height=300&theme-id=dark&slug-hash=BaRYNgP&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p><code>flip</code> 动画不仅可以实现单列过渡，多维网格也可以过渡</p><iframe src="https://codesandbox.io/embed/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h4 id="列表的交错过渡">列表的交错过渡</h4><p>传统的交错过渡需要使用到大量的 <code>css</code>，<code>vue</code> 提供了钩子函数配合 <code>setTimeout</code>来实现<span class='nota' data-nota='延迟过渡'>交错过渡</span></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用 css 来实现交错过渡 */</span></span><br><span class="line"><span class="comment">/* 可以发现 需要写大量的css */</span></span><br><span class="line"><span class="selector-class">.list-enter-active</span>, <span class="selector-class">.list-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-enter</span>, <span class="selector-class">.list-leave-to</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span>, <span class="selector-class">.list-css-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter</span>, <span class="selector-class">.list-css-leave-to</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">9s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-leave-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-leave-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">9s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-leave-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-leave-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过钩子函数进行过渡</span></span><br><span class="line">Vue.component(<span class="string">&#x27;tab-c&#x27;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;num&#x27;</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;transition-group</span></span><br><span class="line"><span class="string">        :css=&quot;false&quot;</span></span><br><span class="line"><span class="string">        @before-enter=&quot;beforeEnter&quot;</span></span><br><span class="line"><span class="string">        @enter=&quot;enter&quot;</span></span><br><span class="line"><span class="string">        @after-enter=&quot;afterEnter&quot;</span></span><br><span class="line"><span class="string">        @before-leave=&quot;beforeLeave&quot;</span></span><br><span class="line"><span class="string">        @leave=&quot;leave&quot;</span></span><br><span class="line"><span class="string">        @after-leave=&quot;afterLeave&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">        &lt;item v-for=&quot;item in num&quot; :key=&quot;item&quot; :data-enter=&quot;item * 300&quot; :data-leave=&quot;(num - item) * 300&quot;&gt;&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;/transition-group&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">beforeEnter</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 为过渡元素添加类</span></span><br><span class="line">            el.classList.add(<span class="string">&#x27;list-enter&#x27;</span>, <span class="string">&#x27;list-enter-active&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">enter</span>(<span class="params">el, done</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> delay = el.dataset.enter;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                el.classList.remove(<span class="string">&#x27;list-enter&#x27;</span>);</span><br><span class="line">                el.classList.add(<span class="string">&#x27;list-enter-to&#x27;</span>);</span><br><span class="line">                <span class="comment">// 监听 transitionend 事件完成后调用 done 执行after-enter钩子</span></span><br><span class="line">                el.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">onEnd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    el.removeEventListener(<span class="string">&#x27;transitionend&#x27;</span>, onEnd);</span><br><span class="line">                    done(); <span class="comment">// 告诉vue 动画已经完成，触发afterEnter钩子</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">afterEnter</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            el.classList.remove(<span class="string">&#x27;list-enter-to&#x27;</span>, <span class="string">&#x27;list-enter-active&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeLeave</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            el.classList.add(<span class="string">&#x27;list-leave&#x27;</span>, <span class="string">&#x27;list-leave-active&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">leave</span>(<span class="params">el, done</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> delay = el.dataset.leave;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                el.classList.remove(<span class="string">&#x27;list-leave&#x27;</span>);</span><br><span class="line">                el.classList.add(<span class="string">&#x27;list-leave-to&#x27;</span>);</span><br><span class="line">                <span class="comment">// 监听transitionend事件</span></span><br><span class="line">                el.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">onEnd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    el.removeEventListener(<span class="string">&#x27;transitionend&#x27;</span>, onEnd);</span><br><span class="line">                    done();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">afterLeave</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            el.classList.remove(<span class="string">&#x27;list-leave-active&#x27;</span>, <span class="string">&#x27;list-leave-to&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/elegant-varahamihira-n5esr?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:800px; border:0; border-radius: 4px; overflow:hidden;"    title="elegant-varahamihira-n5esr"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h3 id="可复用的过渡">可复用的过渡</h3><p>过渡可以通过 <code>vue</code> 的组件系统来实现复用，创建一个可复用的组件，需要将 <code>transition</code> 或 <code>transition-group</code> 作为<span class='nota' data-nota='上例中transition-group作为根组件'>根组件</span>，然后将任何子组件放置在其中就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-special-transition&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;\</span></span><br><span class="line"><span class="string">    &lt;transition\</span></span><br><span class="line"><span class="string">      name=&quot;very-special-transition&quot;\</span></span><br><span class="line"><span class="string">      mode=&quot;out-in&quot;\</span></span><br><span class="line"><span class="string">      v-on:before-enter=&quot;beforeEnter&quot;\</span></span><br><span class="line"><span class="string">      v-on:after-enter=&quot;afterEnter&quot;\</span></span><br><span class="line"><span class="string">    &gt;\</span></span><br><span class="line"><span class="string">      &lt;slot&gt;&lt;/slot&gt;\</span></span><br><span class="line"><span class="string">    &lt;/transition&gt;\</span></span><br><span class="line"><span class="string">  &#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数式组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-special-transition&#x27;</span>, &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        name: <span class="string">&#x27;very-special-transition&#x27;</span>,</span><br><span class="line">        mode: <span class="string">&#x27;out-in&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      on: &#123;</span><br><span class="line">        beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">        afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;transition&#x27;</span>, data, context.children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态过渡">动态过渡</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态绑定过渡类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">v-bind:name</span>=<span class="string">&quot;transitionName&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="状态过渡">状态过渡</h2><h3 id="状态动画和侦听器">状态动画和侦听器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.2.4/gsap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;animated-number-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;number&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; animatedNumber &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#animated-number-demo&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      number: 0,</span><br><span class="line">      tweenedNumber: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">      animatedNumber: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.tweenedNumber.toFixed(<span class="number">0</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">      number: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        gsap.to(<span class="built_in">this</span>.$data, &#123; <span class="attr">duration</span>: <span class="number">0.5</span>, <span class="attr">tweenedNumber</span>: newValue &#125;);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="把过渡放在组件里">把过渡放在组件里</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/tween.js@16.3.4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;firstNumber&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;20&quot;</span>&gt;</span> +</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;secondNumber&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;20&quot;</span>&gt;</span> =</span><br><span class="line">  &#123;&#123; result &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animated-integer</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;firstNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animated-integer</span>&gt;</span> +</span><br><span class="line">    <span class="tag">&lt;<span class="name">animated-integer</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;secondNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animated-integer</span>&gt;</span> =</span><br><span class="line">    <span class="tag">&lt;<span class="name">animated-integer</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animated-integer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种复杂的补间动画逻辑可以被复用</span></span><br><span class="line"><span class="comment">// 任何整数都可以执行动画</span></span><br><span class="line"><span class="comment">// 组件化使我们的界面十分清晰</span></span><br><span class="line"><span class="comment">// 可以支持更多更复杂的动态过渡</span></span><br><span class="line"><span class="comment">// 策略。</span></span><br><span class="line">Vue.component(<span class="string">&#x27;animated-integer&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;span&gt;&#123;&#123; tweeningValue &#125;&#125;&lt;/span&gt;&#x27;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      tweeningValue: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.tween(oldValue, newValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.tween(<span class="number">0</span>, <span class="built_in">this</span>.value)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    tween: <span class="function"><span class="keyword">function</span> (<span class="params">startValue, endValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="built_in">this</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">animate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TWEEN.update()) &#123;</span><br><span class="line">          requestAnimationFrame(animate)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> TWEEN.Tween(&#123; <span class="attr">tweeningValue</span>: startValue &#125;)</span><br><span class="line">        .to(&#123; <span class="attr">tweeningValue</span>: endValue &#125;, <span class="number">500</span>)</span><br><span class="line">        .onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          vm.tweeningValue = <span class="built_in">this</span>.tweeningValue.toFixed(<span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .start()</span><br><span class="line"></span><br><span class="line">      animate()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的复杂度都已经从 Vue 的主实例中移除！</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-8&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstNumber: <span class="number">20</span>,</span><br><span class="line">    secondNumber: <span class="number">40</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    result: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstNumber + <span class="built_in">this</span>.secondNumber</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个不常见的html、css属性</title>
      <link href="c314f6ea/"/>
      <url>c314f6ea/</url>
      
        <content type="html"><![CDATA[<div class="tip warning faa-horizontal animated"><p>以下内容提到的标签和属性均不考虑浏览器的兼容性，使用时根据实际场景选择是否可以使用和代替</p></div><h2 id="line-clamp-属性"><code>line-clamp</code> 属性</h2><div class="tip "><p>line-clamp 是一个不规范的属性，使用它时可以视情况组合-webkit或-moz进行使用</p></div><p><code>line-clamp</code> 用于限制块元素显示文本的行数，并且只有当 <code>display</code> 属性设置为 <code>-webkit-box</code> 或 <code>-webkit-inline-box</code> 并且<span class='nota' data-nota='指定一个box子元素是否按照水平或垂直排列'>-webkit-box-orient</span>属性设置为 <code>vertical</code> 之后才会生效，通常需要搭配 <code>overflow: hidden</code> 实现指定显示行数的内容。<code>-webkit-line-clamp: 1</code> 配合其他属性和以下样式实现的效果一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_XWRmmBQ" src="//codepen.io/milkdue/embed/preview/XWRmmBQ?height=300&theme-id=dark&slug-hash=XWRmmBQ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vercel托管node.js的api服务</title>
      <link href="5650e2f5/"/>
      <url>5650e2f5/</url>
      
        <content type="html"><![CDATA[<h2 id="vercel"><code>vercel</code></h2><div class="note red icon flat"><i class="note-icon fa fa-exclamation-triangle"></i><p>vercel提供免费的网站托管服务，类似于<code>github page</code>，但它远比<code>page</code>更加强大，速度也快很多。同时vercel支持部署serverless接口，支持py、node等</p></div><h2 id="托管服务">托管服务</h2><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">github托管服务</button></li><li class="tab"><button type="button" data-href="#test4-2">vercel cli托管服务</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><div class="timeline"><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip "><ol><li><code>npm init</code>初始化一个工程</li><li>创建远程仓库之后<code>clone</code>下来</li><li>创建api目录</li><li>在api目录中创建index.js</li><li>代码推入远程仓库</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;<span class="attr">number</span>: <span class="number">1</span>, <span class="attr">name</span>: req.query.name || <span class="string">&#x27;peiqi&#x27;</span>&#125;;</span><br><span class="line">    res.json(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip success"><ol><li>登录<a href="https://vercel.com/">vercel</a>官网</li><li>授权github登入vercel</li><li><code>new project</code></li><li>导入github中对应的仓库</li><li>deploy部署</li></ol></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip bolt"><ol><li>首页visit(会出现404)</li><li>在浏览器地址栏追加/api?name=suxi</li></ol></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip home"><details ><summary> 避免404 </summary>              <div class='content'>              <ol><li>根目录添加vercel.json的配置</li><li>根目录添加index.html</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;routes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;handle&quot;</span>: <span class="string">&quot;filesystem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;src&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>: <span class="number">404</span>,</span><br><span class="line">            <span class="attr">&quot;dest&quot;</span>: <span class="string">&quot;/index.html&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></div></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><div class="timeline"><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip "><ol><li><code>npm init</code>初始化一个工程</li><li>全局安装vercel <code>npm i vercel -g</code></li><li>登录vercel <code>vercel login</code> 或 <code>vc login</code></li><li>授权登录完毕后输入 <code>vercel</code> 初始化vercel项目</li><li>添加vercel.json配置和404页面</li><li>添加api目录并定义index.js</li></ol></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip success"><ol><li><code>vercel</code> 或 <code>vc</code> 命令本地预览接口</li><li><code>vercel --prod</code> 或 <code>vc --prod</code> 命令部署到远程vercel中</li></ol></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip bolt"><ol><li>访问预览</li><li>在浏览器地址栏追加/api?name=suxi</li></ol></div></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="node-配合-ts"><code>node</code> 配合 <code>ts</code></h2><div class="tip animated"><p>推荐使用ts托管api服务</p></div><ol><li><p>全局安装typescript</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure></li><li><p>安装其他依赖</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i @vercel/node -D</span><br><span class="line">npm i babel-register -D</span><br><span class="line">npm i babel-plugin-transform-es2015-modules-commonjs -D</span><br></pre></td></tr></table></figure></li><li><p>根目录新建typescript的配置文件tsconfig.json</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;emitDecoratorMetadata&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;noEmitHelpers&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typings/main&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typings/main.d.ts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typings/browser&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typings/browser.d.ts&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;compileOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建<code>.env</code>文件设置时区</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TZ&#x3D;&#39;asia&#x2F;beijing&#39;</span><br></pre></td></tr></table></figure></li><li><p>api目录中添加index.ts</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req: <span class="built_in">any</span>, <span class="attr">res</span>: <span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;<span class="attr">number</span>: <span class="number">1</span>, <span class="attr">name</span>: req.query.name || <span class="string">&#x27;suxi&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    res.status(<span class="number">200</span>).json(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>预览访问</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bufferfly主题的一些美化</title>
      <link href="bf0e4745/"/>
      <url>bf0e4745/</url>
      
        <content type="html"><![CDATA[<h2 id="哔哔点啥首页轮播">哔哔点啥首页轮播</h2><div class="tip cogs"><p>首页轮播需要转存json文件，如果没有设置请参照下方木木的教程进行配置</p></div><div class="tag link"><a class="link-card" title="熟悉的味道，不一样配方" href="https://immmmm.com/bb-talks-json/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gravatar.loli.net/avatar/ba83fa02fc4b2ba621514941307e21be"/></div><div class="right"><p class="text">熟悉的味道，不一样配方</p><p class="url">https://immmmm.com/bb-talks-json/</p></div></a></div><h3 id="介绍">介绍</h3><div class="note blue icon modern"><i class="note-icon fa fa-info-circle"></i><p>首页轮播参照小冰老师叨叨点啥进行修改，使用bber的可以参照本教程，使用叨叨请移步以下链接</p></div><div class="tag link"><a class="link-card" title="Hexo Buffterfly主题增加叨叨点啥" href="https://www.heyiki.top/posts/c66dcdf5.html"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/Heyiki/image/raw/master/image/1.jpg"/></div><div class="right"><p class="text">Hexo Buffterfly主题增加叨叨点啥</p><p class="url">https://www.heyiki.top/posts/c66dcdf5.html</p></div></a></div><h3 id="安装-hexo-bbds">安装 <code>hexo-bbds</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-bbds --save</span><br></pre></td></tr></table></figure><p>安装完成以后修改 <code>config.yml</code> 文件，添加以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">daodao_swiper:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://xxxx.tcb.qcloud.la/json/bber.json</span> <span class="comment"># 这里是你的转存的json地址</span></span><br><span class="line">  <span class="attr">fliter:</span> <span class="string">&quot;[&#x27;img&#x27;,&#x27;iframe&#x27;, &#x27;png&#x27;, &#x27;jpg&#x27;]&quot;</span> <span class="comment"># 将png jpg img等链接过滤</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 仅在首页显示</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;bbTimeList container&quot; style=&quot;height: auto;width: 100%&quot; id=&quot;bbTimeList&quot;&gt;&lt;i class=&quot;bber-gotobb fas fa-bullhorn&quot; onclick=&quot;location=&amp;#39;/life/&amp;#39;&quot; title=&quot;哔哔点啥&quot;&gt;&lt;/i&gt;&lt;div class=&quot;swiper-container&quot; id=&quot;bbtalk&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;bber-talk&quot; onclick=&quot;location=&amp;#39;/life/&amp;#39;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;i class=&quot;bber-gotobb fas fa-arrow-circle-right&quot; onclick=&quot;location=&amp;quot;/life/&amp;quot;&quot; title=&quot;查看全文&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure><div class="note pink icon flat"><i class="note-icon fa fa-at"></i><p>如果想要githubcalendar在首页轮播下方，请确保你的插件 <code>hexo-githubcalendar</code>的版本是 <code>1.2.3</code> 低于该版本请升级之后，修改priority的数值比daodao_swiper的小即可</p></div><h2 id="历史上的今天">历史上的今天</h2><h3 id="npm-部署历史上的今天插件"><code>npm</code> 部署历史上的今天插件</h3><u>此处使用小冰老师的插件包，更多详细内容请移步小冰老师的插件包</u><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-history-calendar --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">yarn add hexo-history-calendar --save</span><br></pre></td></tr></table></figure><h3 id="新增根目录-config-history-calendar-配置项">新增根目录 <code>_config</code> <code>history_calendar</code> 配置项</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">history_calendar:</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">4</span> <span class="comment"># 插件的叠放顺序，数字越大，叠放越靠前</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 启用插件</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 路由地址，all代表全局开启，/ 代表首页 此处逻辑由location.pathname 所判断</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载在何处</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span> <span class="comment"># class 或 id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span> <span class="comment"># class name 或 id name</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span> <span class="comment"># 如果是id 此处省略，如果是 class 表示挂载哪个类标签下</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;card-widget card-history&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div class=&quot;item-headline&quot;&gt;&lt;i class=&quot;fas fa-clock fa-spin&quot;&gt;&lt;/i&gt;&lt;span&gt;那年今日&lt;/span&gt;&lt;/div&gt;&lt;div id=&quot;history-baidu&quot; style=&quot;height: 100px;overflow: hidden&quot;&gt;&lt;div class=&quot;history_swiper-container&quot; id=&quot;history-container&quot; style=&quot;width: 100%;height: 100%&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;history_container_wrapper&quot; style=&quot;height:20px&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span> <span class="comment"># html 模板字段，包括挂载容器</span></span><br></pre></td></tr></table></figure><h3 id="那年今日模板">那年今日模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-widget card-history&quot;</span>&gt;</span> <span class="comment">&lt;!-- 挂载容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-headline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-clock fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>那年今日<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;history-baidu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;overflow: hidden&quot;</span>&gt;</span> <span class="comment">&lt;!-- 挂载器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;history_swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;history-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 100%&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;history_container_wrapper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:20px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文章置顶">文章置顶</h2><h3 id="npm-部署文章置顶插件"><code>npm</code> 部署文章置顶插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-swiper-bar-plus --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">yarn add hexo-swiper-bar-plus --save</span><br></pre></td></tr></table></figure><h3 id="新增根目录-config-swiper-配置项">新增根目录 <code>_config</code> <code>swiper</code> 配置项</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot; id=&quot;swiper_container&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="文章置顶模板">文章置顶模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: auto;width: 100%&quot;</span>&gt;</span><span class="comment">&lt;!--文章容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper_container&quot;</span>&gt;</span><span class="comment">&lt;!-- swiper容器 --&gt;</span></span><br><span class="line">    $&#123;temple_html_item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="挂载方法">挂载方法</h3><p>在 <code>Front-matter</code> 添加以下参数，<code>index</code> 数字越大越靠前显示，默认是拿描述和封面作为置顶的封面</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swiper<span class="emphasis">_index: 1</span></span><br><span class="line"><span class="emphasis">description: <span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">cover: <span class="strong">**<span class="emphasis">*</span></span></span></span></span></span><br></pre></td></tr></table></figure><h2 id="github-活跃度"><code>github</code> 活跃度</h2><h3 id="npm-部署插件"><code>npm</code> 部署插件</h3><u>此处使用小冰老师的插件包，更多详细内容请移步小冰老师的插件包</u><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-githubcalendar --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">yarn add hexo-githubcalendar --save</span><br></pre></td></tr></table></figure><h3 id="新增根目录-config-githubcalendar-配置项">新增根目录 <code>_config</code> <code>githubcalendar</code> 配置项</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">milkdue</span> <span class="comment"># github 用户名</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">githubcalendar_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height:auto;padding:10px;&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span> <span class="comment"># 模板页面</span></span><br><span class="line">  <span class="attr">pc_minheight:</span> <span class="string">280px</span> <span class="comment"># 电脑端插件的最小高度，减少加载带来的视觉偏移</span></span><br><span class="line">  <span class="attr">mobile_minheight:</span> <span class="string">0px</span> <span class="comment"># 手机端插件的最小高度，减少加载带来的视觉偏移</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot;</span> <span class="comment"># 活跃度主题色，具体见下方</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://python-github-calendar-api.vercel.app/api</span> <span class="comment"># 如果是gitee使用下方api，也可自建api，如何自建请移步小冰原帖</span></span><br><span class="line">  <span class="comment"># api: https://python-gitee-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="attr">calendar_js:</span> <span class="string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span> <span class="comment"># 将 github calendar 挂载入容器中的脚本 </span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">&quot;&quot;</span> <span class="comment"># 提供自定义的style </span></span><br></pre></td></tr></table></figure><h3 id="github-活跃度模板"><code>github</code> 活跃度模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height:auto;padding:10px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这个是画框，顾名思义就是借用文章样式给加个框--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是loading的样式，可自行调整--&gt;</span></span><br><span class="line">  &lt;div</span><br><span class="line">    id=&quot;github_loading&quot;</span><br><span class="line">    style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;svg</span><br><span class="line">      xmlns=&quot;http://www.w3.org/2000/svg&quot;</span><br><span class="line">      xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;</span><br><span class="line">      viewBox=&quot;0 0 50 50&quot;</span><br><span class="line">      style=&quot;enable-background:new 0 0 50 50&quot;</span><br><span class="line">      xml:space=&quot;preserve&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;path</span><br><span class="line">        fill=&quot;#d0d0d0&quot;</span><br><span class="line">        d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot;</span><br><span class="line">        transform=&quot;rotate(275.098 25 25)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;animateTransform</span><br><span class="line">          attributeType=&quot;xml&quot;</span><br><span class="line">          attributeName=&quot;transform&quot;</span><br><span class="line">          type=&quot;rotate&quot;</span><br><span class="line">          from=&quot;0 25 25&quot;</span><br><span class="line">          to=&quot;360 25 25&quot;</span><br><span class="line">          dur=&quot;0.6s&quot;</span><br><span class="line">          repeatCount=&quot;indefinite&quot;</span><br><span class="line">        &gt;<span class="tag">&lt;/<span class="name">animateTransform</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是github_containner容器，也就是纸--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;github_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="主题色">主题色</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下色调选择喜欢的一行保留即可</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">&quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot;</span> <span class="comment">#橘黄色调</span></span><br><span class="line"><span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; #浅紫色调</span></span><br><span class="line"><span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot; #翠绿色调</span></span><br><span class="line"><span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot; #天青色调</span></span><br></pre></td></tr></table></figure><h2 id="旋转的小人">旋转的小人</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在主题配置文件搜索 card_announcement</span></span><br><span class="line"></span><br><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎来到可以清心的小站...</span></span><br><span class="line">  <span class="attr">twopeople:</span> <span class="string">&#x27;&lt;div class=&quot;twopeople&quot;&gt;&lt;div class=&quot;container&quot;style=&quot;height:200px;&quot;&gt;&lt;canvas class=&quot;illo&quot;width=&quot;800&quot;height=&quot;800&quot;style=&quot;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&quot;&gt;&lt;/canvas&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/combine/npm/hexo-beautiful-page@latest/lib/onepeople.min.js,npm/hexo-beautiful-page@latest/lib/zdog.min.js,npm/hexo-beautiful-page@latest/lib/twopeople.min.js&quot;&gt;&lt;/script&gt;&lt;style&gt;.twopeople&#123;margin:0;align-items:center;justify-content:center;text-align:center&#125;.illo&#123;display:block;margin:0 auto;cursor:url(&quot;https://cdn.jsdelivr.net/gh/milkdue/cursors@latest/ori/move.cur&quot;), auto !important;&#125;&lt;/style&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;twopeople&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span><span class="attr">style</span>=<span class="string">&quot;height:200px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;illo&quot;</span><span class="attr">width</span>=<span class="string">&quot;800&quot;</span><span class="attr">height</span>=<span class="string">&quot;800&quot;</span><span class="attr">style</span>=<span class="string">&quot;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/combine/npm/hexo-beautiful-page@latest/lib/onepeople.min.js,npm/hexo-beautiful-page@latest/lib/zdog.min.js,npm/hexo-beautiful-page@latest/lib/twopeople.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .twopeople&#123;</span><br><span class="line"><span class="css">      <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">align-items</span>:center;</span></span><br><span class="line"><span class="css">      <span class="attribute">justify-content</span>:center;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>:center</span></span><br><span class="line">    &#125;</span><br><span class="line">    .illo&#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">cursor</span>:<span class="built_in">url</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/milkdue/cursors@latest/ori/move.cur&quot;</span>), auto <span class="meta">!important</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="首页樱花">首页樱花</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建js文件在inject中的buttom中引入</span></span><br><span class="line"><span class="keyword">var</span> stop, staticx;</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;.....png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sakura</span>(<span class="params">x, y, s, r, fn</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">    <span class="built_in">this</span>.s = s;</span><br><span class="line">    <span class="built_in">this</span>.r = r;</span><br><span class="line">    <span class="built_in">this</span>.fn = fn;</span><br><span class="line">&#125;</span><br><span class="line">Sakura.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params">cxt</span>) </span>&#123;</span><br><span class="line">    cxt.save();</span><br><span class="line">    <span class="keyword">var</span> xc = <span class="number">40</span> * <span class="built_in">this</span>.s / <span class="number">4</span>;</span><br><span class="line">    cxt.translate(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">    cxt.rotate(<span class="built_in">this</span>.r);</span><br><span class="line">    cxt.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span> * <span class="built_in">this</span>.s, <span class="number">40</span> * <span class="built_in">this</span>.s)</span><br><span class="line">    cxt.restore();</span><br><span class="line">&#125;</span><br><span class="line">Sakura.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">this</span>.fn.x(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="built_in">this</span>.fn.y(<span class="built_in">this</span>.y, <span class="built_in">this</span>.y);</span><br><span class="line">    <span class="built_in">this</span>.r = <span class="built_in">this</span>.fn.r(<span class="built_in">this</span>.r);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.x &gt; <span class="built_in">window</span>.innerWidth || <span class="built_in">this</span>.x &lt; <span class="number">0</span> || <span class="built_in">this</span>.y &gt; <span class="built_in">window</span>.innerHeight || <span class="built_in">this</span>.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.r = getRandom(<span class="string">&#x27;fnr&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.4</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = getRandom(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">this</span>.s = getRandom(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.r = getRandom(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">            <span class="built_in">this</span>.y = getRandom(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.s = getRandom(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.r = getRandom(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SakuraList = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.list = [];</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">sakura</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(sakura);</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">this</span>.list.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list[i].update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params">cxt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">this</span>.list.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list[i].draw(cxt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list[i];</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret, random;</span><br><span class="line">    <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            ret = <span class="built_in">Math</span>.random() * <span class="built_in">window</span>.innerWidth;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            ret = <span class="built_in">Math</span>.random() * <span class="built_in">window</span>.innerHeight;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            ret = <span class="built_in">Math</span>.random();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            ret = <span class="built_in">Math</span>.random() * <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;fnx&#x27;</span>:</span><br><span class="line">            random = -<span class="number">0.5</span> + <span class="built_in">Math</span>.random() * <span class="number">1</span>;</span><br><span class="line">            ret = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x + <span class="number">0.5</span> * random - <span class="number">1.7</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;fny&#x27;</span>:</span><br><span class="line">            random = <span class="number">1.5</span> + <span class="built_in">Math</span>.random() * <span class="number">0.7</span></span><br><span class="line">            ret = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> y + random;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;fnr&#x27;</span>:</span><br><span class="line">            random = <span class="built_in">Math</span>.random() * <span class="number">0.03</span>;</span><br><span class="line">            ret = <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> r + random;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startSakura</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame || <span class="built_in">window</span>.oRequestAnimationFrame;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>),</span><br><span class="line">        cxt;</span><br><span class="line">    staticx = <span class="literal">true</span>;</span><br><span class="line">    canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    canvas.setAttribute(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;position: fixed;left: 0;top: 0;pointer-events: none;&#x27;</span>);</span><br><span class="line">    canvas.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;canvas_sakura&#x27;</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>].appendChild(canvas);</span><br><span class="line">    cxt = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> sakuraList = <span class="keyword">new</span> SakuraList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny;</span><br><span class="line">        randomX = getRandom(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        randomY = getRandom(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">        randomR = getRandom(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        randomS = getRandom(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">        randomFnx = getRandom(<span class="string">&#x27;fnx&#x27;</span>);</span><br><span class="line">        randomFny = getRandom(<span class="string">&#x27;fny&#x27;</span>);</span><br><span class="line">        randomFnR = getRandom(<span class="string">&#x27;fnr&#x27;</span>);</span><br><span class="line">        sakura = <span class="keyword">new</span> Sakura(randomX, randomY, randomS, randomR, &#123;</span><br><span class="line">            x: randomFnx,</span><br><span class="line">            y: randomFny,</span><br><span class="line">            r: randomFnR</span><br><span class="line">        &#125;);</span><br><span class="line">        sakura.draw(cxt);</span><br><span class="line">        sakuraList.push(sakura);</span><br><span class="line">    &#125;</span><br><span class="line">    stop = requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        cxt.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">        sakuraList.update();</span><br><span class="line">        sakuraList.draw(cxt);</span><br><span class="line">        stop = requestAnimationFrame(<span class="built_in">arguments</span>.callee);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(location.pathname === <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">      startSakura();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="picX-图床"><code>picX</code> 图床</h2><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>一个简单的图床工具，进入点击使用教程~</p></div><div class="tag link"><a class="link-card" title="picX图床" href="https://picx.xpoet.cn/#/upload"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://picx.xpoet.cn/assets/logo.206d082d.png"/></div><div class="right"><p class="text">picX图床</p><p class="url">https://picx.xpoet.cn/#/upload</p></div></a></div><h2 id="Lorem-Picsum"><code>Lorem Picsum</code></h2><div class="tag link"><a class="link-card" title="Lorem Picsum" href="https://picsum.photos/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://picsum.photos/seed/picsum/200/300"/></div><div class="right"><p class="text">Lorem Picsum</p><p class="url">https://picsum.photos/</p></div></a></div><h2 id="utool-插件图床-fileBed"><code>utool</code> 插件图床(<code>fileBed</code>)</h2><div class="tip key"><p>请安装utools后，插件中心中搜索图床，安装fileBed图床，按照相应配置文件进行配置</p></div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布一个npm包</title>
      <link href="f5fee1ca/"/>
      <url>f5fee1ca/</url>
      
        <content type="html"><![CDATA[<div class="tip faa-horizontal animated"><p>我们每天都要安装各种npm依赖，那npm是怎么发布到远程仓库中的?<br>下面展示一个包发布到npm中的方法。</p></div><h2 id="构建一个-npm-包">构建一个 <code>npm</code> 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h3 id="初始化参数">初始化参数</h3><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>name: 项目的名称，确保在npm包里是独一无二的</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>version: 版本号默认1.0.0</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>description: 包描述</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>entry point: 包主入口文件，默认index.js</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>test command: 测试命令</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>git repository: git远程地址</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>keywords: 关键词</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>author: 作者</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>license: MIT</p>            </div><h2 id="添加-README-md">添加 <code>README.md</code></h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxx</span><br></pre></td></tr></table></figure><h2 id="注册-npm-账号">注册 <code>npm</code> 账号</h2><ul><li><a href="https://www.npmjs.com">npm官网</a></li><li>记住自己的账号和密码(之后需要)</li></ul><div class="tip ban faa-horizontal animated"><p>下面的操作请确保你的node没有配置淘宝或其他镜像地址，否则执行 <code>npm config set registry https://registry.npmjs.org/</code> 将源调整回来</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">添加npm账户</button></li><li class="tab"><button type="button" data-href="#test1-2">填入参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username:</span><br><span class="line">password:</span><br><span class="line">email:</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="发布-npm">发布 <code>npm</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm publish --access=public</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><ul><li>进入<a href="https://www.npmjs.com">官网</a>查找你的包</li></ul><h2 id="引入-npm-包">引入 <code>npm</code> 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通的安装方法(commonjs规范)</span></span><br><span class="line">npm i packageName --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举个栗子</span></span><br><span class="line"></span><br><span class="line">npm i jquery --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你的包中有可以直接在浏览器端使用(umd规范)，那么可以通过script标签进行引入</span></span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/npm/package@version/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举个栗子 加上min npm默认压缩文件</span></span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不要版本号 默认以最后发布的版本为准</span></span><br><span class="line">https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js</span><br></pre></td></tr></table></figure><h2 id="使用-unpkg-引用-npm-中的包">使用 <code>unpkg</code> 引用 <code>npm</code> 中的包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unpkg.com/:package@:version/:file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蜡烛吹灭动画</title>
      <link href="33c03019/"/>
      <url>33c03019/</url>
      
        <content type="html"><![CDATA[<div class="tip faa-horizontal animated"><p>一个来自gitee上的项目，<emp><a href="https://gitee.com/ji-xia-xiaozhen/html-demo">仓库地址</a></emp></p></div><iframe id="cp_embed_NWpXgvM" src="//codepen.io/milkdue/embed/NWpXgvM?height=300&theme-id=dark&slug-hash=NWpXgvM&default-tab=html,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><iframe src="https://codesandbox.io/embed/holy-smoke-u192q?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="holy-smoke-u192q"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe>]]></content>
      
      
      <categories>
          
          <category> 作品集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bufferfly主题的应用和即时推送</title>
      <link href="317ea436/"/>
      <url>317ea436/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-bufferfly-的安装">关于 <code>bufferfly</code> 的安装</h2><ul><li>请查看以下官方文档</li></ul><div class="btns rounded center grid5">            <a class="button" href='https://butterfly.js.org/posts/21cfbf15/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="valine-的应用"><code>valine</code> 的应用</h2><h3 id="遵循-valine-的指示配置你的-LeanCloud">遵循 <code>valine</code> 的指示配置你的 <code>LeanCloud</code></h3><ul><li><code>bufferfly</code> 中使用 <code>valine</code> 在上方文档中，有所提及，下方文档是关于如果配置 <code>leanCloud</code> 的文档</li></ul><div class="btns rounded center grid5">            <a class="button" href='https://valine.js.org/quickstart.html' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h3 id="评论的邮件提醒">评论的邮件提醒</h3><ul><li><code>bufferfly</code> 应用 <code>valine</code> 的评论系统上方官方文档有所提及，关于开启邮件提醒</li></ul><div class="btns rounded center grid5">            <a class="button" href='https://github.com/zhaojun1998/Valine-Admin' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="twikoo-的应用"><code>twikoo</code> 的应用</h2><ul><li><code>bufferfly</code> 支持双评论系统，只需要按照文档中的指示去配置自己的评论系统即可</li><li><code>Twikoo</code> 是一个简洁、安全、无后端的静态网站评论系统，基于<a href="https://cloud.tencent.com/act/pro/cloudbase01?fromSource=gwzcw.3814800.3814800.3814800&amp;utm_medium=cps&amp;utm_id=gwzcw.3814800.3814800.3814800&amp;cps_key=44b3b34da3e3b77bae971b11ed4b2639">腾讯云开发</a></li><li>关于如何配置twikoo评论系统，请参考官方文档，并按照bufferfly的指示配置自己的环境id</li></ul><div class="btns rounded center grid5">            <a class="button" href='https://twikoo.js.org/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="server-酱和邮件的推送服务"><code>server</code> 酱和邮件的推送服务</h2><ol><li>点击twikoo设置按钮</li><li>微信提醒需要设置SC_SENDKEY(请在server酱中获取，只支持博主提醒)</li><li>邮件(QQ邮箱)提醒按照下方配置设置</li></ol><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>邮件提醒</span></div>    <div class="hide-content"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x27;SENDER_EMAIL&#x27;: &#x27;xxxx.@qq.com&#x27;,</span><br><span class="line">    &#x27;SMTP_SERVICE&#x27;: &#x27;QQ&#x27;,</span><br><span class="line">    &#x27;SMTP_HOST&#x27;: &#x27;smtp.qq.com&#x27;,</span><br><span class="line">    &#x27;SMTP_SECURE&#x27;: true,</span><br><span class="line">    &#x27;SMTP_USER&#x27;: &#x27;xxxx.@qq.com&#x27;,</span><br><span class="line">    &#x27;SMTP_PASS&#x27;: &#x27;QQ邮箱授权码，开启smtp&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="btns rounded center grid5">            <a class="button" href='http://sc.ftqq.com/9.version' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="关于哔哔点啥">关于哔哔点啥</h2><ol><li>对于哔哔点啥可参考<a href="https://immmmm.com/">木木</a>的文档自行配置，更多样式配置请参考</li></ol><div class="tag link"><a class="link-card" title="给bber换个皮肤" href="https://www.antmoe.com/posts/7ec820ee/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://7.dusays.com/2021/03/24/8a39889ea730e.png"/></div><div class="right"><p class="text">给bber换个皮肤</p><p class="url">https://www.antmoe.com/posts/7ec820ee/</p></div></a></div><div class="btns rounded center grid5">            <a class="button" href='https://immmmm.com/bb-by-wechat-pro/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github-jsdelivr搭建自己的免费cdn</title>
      <link href="c7f33302/"/>
      <url>c7f33302/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2><ul><li>新建一个github仓库，命名为cdn(或者其他名字)</li><li>关联仓库，将文件push上去</li></ul><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/milkdue/cdn@1.1/blog/cdn/1.png" alt="release"></p><ul><li>填写tag version版本号</li><li>jsDeliver的引用</li></ul><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span>jsDeliver的引用</span></div>    <div class="hide-content"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;user&#x2F;repo@version&#x2F;file</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;你的用户名&#x2F;你的仓库名@发布的版本号&#x2F;文件路径</span><br><span class="line"></span><br><span class="line"># 例如</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;milkdue&#x2F;cdn@1.1&#x2F;img&#x2F;avatar.jpg</span><br></pre></td></tr></table></figure></div></div><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">小提示  </button><span class="hide-content">新上传文件后需要发布新版本Draft a new release</span></span><h2 id="合并多个文件">合并多个文件</h2><p><code>jsdelivr</code> 的组合端点允许在一个请求中从 <code>npm</code> 和 <code>github</code> 端点加载多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/combine/url1,url2,url3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举个栗子</span></span><br><span class="line">https://cdn.jsdelivr.net/combine/gh/jquery/jquery@3.2/dist/jquery.min.js,gh/twbs/bootstrap@3.3/dist/js/bootstrap.min.js</span><br><span class="line">https://cdn.jsdelivr.net/combine/npm/bootstrap@3.3/dist/css/bootstrap.min.css,npm/bootstrap@3.3/dist/css/bootstrap-theme.min.css</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词速听</title>
      <link href="4fd0a8fb/"/>
      <url>4fd0a8fb/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="58a10521e63dc82ec76a56c84c104bbffe1c5b3fa87367f71388ca739e2d1149"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码后阅读</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 听力练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
