<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用谷歌提供的免费大模型获取文章摘要</title>
      <link href="639199ab/"/>
      <url>639199ab/</url>
      
        <content type="html"><![CDATA[<h2 id="基于谷歌提供的免费大模型获取文章摘要">基于谷歌提供的免费大模型获取文章摘要</h2><h3 id="准备工作">准备工作</h3><ol><li>注册谷歌账号获取 <code>API_KEY</code>，使用手机号即可(国内也是可以) <a href="https://platform.openai.com/api-keys">apikey获取地址</a></li><li>创建一个 <code>API_KEY</code> ，注意这个 <code>KEY</code> 只会出现一次，要保存一下，后面会用到</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/google_ai/1.jpg" alt="创建API_KEY"><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/google_ai/2.jpg" alt="创建API_KEY"></p><h3 id="部署-API">部署 <code>API</code></h3><ol><li><p><code>fork</code> <a href="https://github.com/milkdue/py-ai.git">仓库</a></p></li><li><p>修改 <code>vercel.json</code> 中的跨域配置 为自己的域名</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;https://blog.keyiqingxin.cn&quot;</span> <span class="comment">// 修改为自己的域名</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;content-type&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>vercel</code> 导入你的 <code>github</code> 项目</p></li><li><p>设置你的环境变量 <code>GOOGLE_API_KEY</code> 为你获取到的 <code>openai</code> 的 <code>API_KEY</code><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/google_ai/3.jpg" alt="设置环境变量"></p></li></ol><h3 id="部署到博客">部署到博客</h3><ol><li><p>该摘要AI前端完全使用 <code>tianli_gpt</code> 项目</p></li><li><p>在 <code>themes/butterfly/source/js/</code> 目录下创建 <code>tianli-gpt.js</code></p></li><li><p>在 <code>themes/butterfly/source/css/</code> 目录下创建 <code>tianli-gpt.css</code></p></li><li><p>在 <code>butterfly</code> 主题的配置文件 <code>_config.butterfly.yml.yml</code> 中添加以下代码</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">    <span class="attr">head:</span> </span><br><span class="line">        <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/tianli-gpt.css&quot;</span> <span class="string">/&gt;</span></span><br><span class="line">    <span class="attr">bottom:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;/js/tianli-gpt.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tianli-gpt.js</span></span><br><span class="line"><span class="keyword">var</span> tianliGPTIsRunning = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAIDiv</span>(<span class="params">selector</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 首先移除现有的 &quot;post-TianliGPT&quot; 类元素（如果有的话）</span></span><br><span class="line">  removeExistingAIDiv();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取目标元素</span></span><br><span class="line">  <span class="keyword">const</span> targetElement = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果没有找到目标元素，不执行任何操作</span></span><br><span class="line">  <span class="keyword">if</span> (!targetElement) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建要插入的HTML元素</span></span><br><span class="line">  <span class="keyword">const</span> aiDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  aiDiv.className = <span class="string">&#x27;post-TianliGPT&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> aiTitleDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  aiTitleDiv.className = <span class="string">&#x27;tianliGPT-title&#x27;</span>;</span><br><span class="line">  aiDiv.appendChild(aiTitleDiv);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> aiIcon = <span class="built_in">document</span>.createElement(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line">  aiIcon.className = <span class="string">&#x27;tianliGPT-title-icon&#x27;</span>;</span><br><span class="line">  aiTitleDiv.appendChild(aiIcon);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 插入 SVG 图标</span></span><br><span class="line">  aiIcon.innerHTML = <span class="string">`&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;48px&quot; height=&quot;48px&quot; viewBox=&quot;0 0 48 48&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;title&gt;机器人&lt;/title&gt;</span></span><br><span class="line"><span class="string">  &lt;g id=&quot;&amp;#x673A;&amp;#x5668;&amp;#x4EBA;&quot; stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;path d=&quot;M34.717885,5.03561087 C36.12744,5.27055371 37.079755,6.60373651 36.84481,8.0132786 L35.7944,14.3153359 L38.375,14.3153359 C43.138415,14.3153359 47,18.1768855 47,22.9402569 L47,34.4401516 C47,39.203523 43.138415,43.0650727 38.375,43.0650727 L9.625,43.0650727 C4.861585,43.0650727 1,39.203523 1,34.4401516 L1,22.9402569 C1,18.1768855 4.861585,14.3153359 9.625,14.3153359 L12.2056,14.3153359 L11.15519,8.0132786 C10.920245,6.60373651 11.87256,5.27055371 13.282115,5.03561087 C14.69167,4.80066802 16.024865,5.7529743 16.25981,7.16251639 L17.40981,14.0624532 C17.423955,14.1470924 17.43373,14.2315017 17.43948,14.3153359 L30.56052,14.3153359 C30.56627,14.2313867 30.576045,14.1470924 30.59019,14.0624532 L31.74019,7.16251639 C31.975135,5.7529743 33.30833,4.80066802 34.717885,5.03561087 Z M38.375,19.4902885 L9.625,19.4902885 C7.719565,19.4902885 6.175,21.0348394 6.175,22.9402569 L6.175,34.4401516 C6.175,36.3455692 7.719565,37.89012 9.625,37.89012 L38.375,37.89012 C40.280435,37.89012 41.825,36.3455692 41.825,34.4401516 L41.825,22.9402569 C41.825,21.0348394 40.280435,19.4902885 38.375,19.4902885 Z M14.8575,23.802749 C16.28649,23.802749 17.445,24.9612484 17.445,26.3902253 L17.445,28.6902043 C17.445,30.1191812 16.28649,31.2776806 14.8575,31.2776806 C13.42851,31.2776806 12.27,30.1191812 12.27,28.6902043 L12.27,26.3902253 C12.27,24.9612484 13.42851,23.802749 14.8575,23.802749 Z M33.1425,23.802749 C34.57149,23.802749 35.73,24.9612484 35.73,26.3902253 L35.73,28.6902043 C35.73,30.1191812 34.57149,31.2776806 33.1425,31.2776806 C31.71351,31.2776806 30.555,30.1191812 30.555,28.6902043 L30.555,26.3902253 C30.555,24.9612484 31.71351,23.802749 33.1425,23.802749 Z&quot; id=&quot;&amp;#x5F62;&amp;#x72B6;&amp;#x7ED3;&amp;#x5408;&quot; fill=&quot;#444444&quot; fill-rule=&quot;nonzero&quot;&gt;&lt;/path&gt;</span></span><br><span class="line"><span class="string">  &lt;/g&gt;</span></span><br><span class="line"><span class="string">  &lt;/svg&gt;`</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> aiTitleTextDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  aiTitleTextDiv.className = <span class="string">&#x27;tianliGPT-title-text&#x27;</span>;</span><br><span class="line">  aiTitleTextDiv.textContent = <span class="string">&#x27;AI摘要&#x27;</span>;</span><br><span class="line">  aiTitleDiv.appendChild(aiTitleTextDiv);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> aiTagDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  aiTagDiv.className = <span class="string">&#x27;tianliGPT-tag&#x27;</span>;</span><br><span class="line">  aiTagDiv.id = <span class="string">&#x27;tianliGPT-tag&#x27;</span>;</span><br><span class="line">  aiTagDiv.textContent = <span class="string">&#x27;AIGPT&#x27;</span>;</span><br><span class="line">  aiTitleDiv.appendChild(aiTagDiv);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> aiExplanationDiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">  aiExplanationDiv.className = <span class="string">&#x27;tianliGPT-explanation&#x27;</span>;</span><br><span class="line">  aiExplanationDiv.innerHTML = <span class="string">&#x27;生成中...&#x27;</span> + <span class="string">&#x27;&lt;span class=&quot;blinking-cursor&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">  aiDiv.appendChild(aiExplanationDiv); <span class="comment">// 将 tianliGPT-explanation 插入到 aiDiv，而不是 aiTitleDiv</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将创建的元素插入到目标元素的顶部</span></span><br><span class="line">  targetElement.insertBefore(aiDiv, targetElement.firstChild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeExistingAIDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 查找具有 &quot;post-TianliGPT&quot; 类的元素</span></span><br><span class="line">  <span class="keyword">const</span> existingAIDiv = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.post-TianliGPT&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果找到了这个元素，就从其父元素中删除它</span></span><br><span class="line">  <span class="keyword">if</span> (existingAIDiv) &#123;</span><br><span class="line">    existingAIDiv.parentElement.removeChild(existingAIDiv);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tianliGPT = &#123;</span><br><span class="line">  <span class="comment">//读取文章中的所有文本</span></span><br><span class="line">  getTitleAndContent: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> title = <span class="built_in">document</span>.title;</span><br><span class="line">      <span class="keyword">const</span> container = <span class="built_in">document</span>.querySelector(tianliGPT_postSelector);</span><br><span class="line">      <span class="keyword">if</span> (!container) &#123;</span><br><span class="line">        <span class="built_in">console</span>.warn(<span class="string">&#x27;TianliGPT：找不到文章容器。请尝试将引入的代码放入到文章容器之后。如果本身没有打算使用摘要功能可以忽略此提示。&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> paragraphs = container.getElementsByTagName(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> headings = container.querySelectorAll(<span class="string">&#x27;h1, h2, h3, h4, h5&#x27;</span>);</span><br><span class="line">      <span class="keyword">let</span> content = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> h <span class="keyword">of</span> headings) &#123;</span><br><span class="line">        content += h.innerText + <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> p <span class="keyword">of</span> paragraphs) &#123;</span><br><span class="line">        <span class="comment">// 移除包含&#x27;http&#x27;的链接</span></span><br><span class="line">        <span class="keyword">const</span> filteredText = p.innerText.replace(<span class="regexp">/https?:\/\/[^\s]+/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        content += filteredText;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">const</span> combinedText = title + <span class="string">&#x27; &#x27;</span> + content;</span><br><span class="line">      <span class="keyword">let</span> wordLimit = <span class="number">1000</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> tianliGPT_wordLimit !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        wordLimit = tianliGPT_wordLimit;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> truncatedText = combinedText.slice(<span class="number">0</span>, wordLimit);</span><br><span class="line">      <span class="keyword">return</span> truncatedText;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">&#x27;TianliGPT错误：可能由于一个或多个错误导致没有正常运行，原因出在获取文章容器中的内容失败，或者可能是在文章转换过程中失败。&#x27;</span>, e);</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  fetchTianliGPT: <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// if (!tianliGPT_key) &#123;</span></span><br><span class="line">    <span class="comment">//   return &quot;没有获取到key，代码可能没有安装正确。如果你需要在tianli_gpt文件引用前定义tianliGPT_key变量。详细请查看文档。&quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// if (tianliGPT_key === &quot;5Q5mpqRK5DkwT1X9Gi5e&quot;) &#123;</span></span><br><span class="line">    <span class="comment">//   return &quot;请购买 key 使用，如果你能看到此条内容，则说明代码安装正确。&quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">window</span>.location.href;</span><br><span class="line">    <span class="keyword">const</span> apiUrl = <span class="string">`https://ai.keyiqingxin.cn/api?url=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(url)&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">const</span> timeout = <span class="number">20000</span>; <span class="comment">// 设置超时时间（毫秒）</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> controller = <span class="keyword">new</span> AbortController();</span><br><span class="line">        <span class="keyword">const</span> timeoutId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> controller.abort(), timeout);</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> fetch(apiUrl, &#123; <span class="attr">signal</span>: controller.signal &#125;);</span><br><span class="line">        <span class="keyword">if</span> (response.ok) &#123;</span><br><span class="line">            <span class="keyword">const</span> data = <span class="keyword">await</span> response.json();</span><br><span class="line">            <span class="keyword">return</span> data.summary;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.status === <span class="number">402</span>) &#123;</span><br><span class="line">                <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.post-TianliGPT&#x27;</span>).forEach(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">                    el.style.display = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;TianliGPT：余额不足，请充值后请求新的文章&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.name === <span class="string">&#x27;AbortError&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">window</span>.location.hostname === <span class="string">&#x27;localhost&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.warn(<span class="string">&#x27;警告：请勿在本地主机上测试 API 密钥。&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;获取文章摘要超时。请勿在本地主机上测试 API 密钥。&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.error(<span class="string">&#x27;请求超时&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;获取文章摘要超时。当你出现这个问题时，可能是key或者绑定的域名不正确。也可能是因为文章过长导致的 AI 运算量过大，您可以稍等一下然后刷新页面重试。&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;请求失败：&#x27;</span>, error);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;获取文章摘要失败，请稍后再试。&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  aiShowAnimation: <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.tianliGPT-explanation&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!element) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tianliGPTIsRunning) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tianliGPTIsRunning = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> typingDelay = <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">const</span> waitingTime = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">const</span> punctuationDelayMultiplier = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    element.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    element.innerHTML = <span class="string">&quot;生成中...&quot;</span> + <span class="string">&#x27;&lt;span class=&quot;blinking-cursor&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> animationRunning = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> initialAnimation = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> lastUpdateTime = performance.now();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> animate = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentIndex &lt; text.length &amp;&amp; animationRunning) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentTime = performance.now();</span><br><span class="line">        <span class="keyword">const</span> timeDiff = currentTime - lastUpdateTime;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> letter = text.slice(currentIndex, currentIndex + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">const</span> isPunctuation = <span class="regexp">/[，。！、？,.!?]/</span>.test(letter);</span><br><span class="line">        <span class="keyword">const</span> delay = isPunctuation ? typingDelay * punctuationDelayMultiplier : typingDelay;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (timeDiff &gt;= delay) &#123;</span><br><span class="line">          element.innerText = text.slice(<span class="number">0</span>, currentIndex + <span class="number">1</span>);</span><br><span class="line">          lastUpdateTime = currentTime;</span><br><span class="line">          currentIndex++;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (currentIndex &lt; text.length) &#123;</span><br><span class="line">            element.innerHTML =</span><br><span class="line">              text.slice(<span class="number">0</span>, currentIndex) +</span><br><span class="line">              <span class="string">&#x27;&lt;span class=&quot;blinking-cursor&quot;&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            element.innerHTML = text;</span><br><span class="line">            element.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">            tianliGPTIsRunning = <span class="literal">false</span>;</span><br><span class="line">            observer.disconnect();<span class="comment">// 暂停监听</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        requestAnimationFrame(animate);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用IntersectionObserver对象优化ai离开视口后暂停的业务逻辑，提高性能</span></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> isVisible = entries[<span class="number">0</span>].isIntersecting;</span><br><span class="line">      animationRunning = isVisible; <span class="comment">// 标志变量更新</span></span><br><span class="line">      <span class="keyword">if</span> (animationRunning &amp;&amp; initialAnimation) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          requestAnimationFrame(animate);</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123; <span class="attr">threshold</span>: <span class="number">0</span> &#125;);</span><br><span class="line">    <span class="keyword">let</span> post_ai = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.post-TianliGPT&#x27;</span>);</span><br><span class="line">    observer.observe(post_ai);<span class="comment">//启动新监听</span></span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runTianliGPT</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  insertAIDiv(tianliGPT_postSelector);</span><br><span class="line">  tianliGPT.fetchTianliGPT().then(<span class="function"><span class="params">summary</span> =&gt;</span> &#123;</span><br><span class="line">    tianliGPT.aiShowAnimation(summary);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkURLAndRun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> tianliGPT_postURL === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    runTianliGPT(); <span class="comment">// 如果没有设置自定义 URL，则直接执行 runTianliGPT() 函数</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wildcardToRegExp = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;^&#x27;</span> + s.split(<span class="regexp">/\*+/</span>).map(regExpEscape).join(<span class="string">&#x27;.*&#x27;</span>) + <span class="string">&#x27;$&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> regExpEscape = <span class="function">(<span class="params">s</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> s.replace(<span class="regexp">/[|\\&#123;&#125;()[\]^$+*?.]/g</span>, <span class="string">&#x27;\\$&amp;&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> urlPattern = wildcardToRegExp(tianliGPT_postURL);</span><br><span class="line">    <span class="keyword">const</span> currentURL = <span class="built_in">window</span>.location.href;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (urlPattern.test(currentURL)) &#123;</span><br><span class="line">      runTianliGPT(); <span class="comment">// 如果当前 URL 符合用户设置的 URL，则执行 runTianliGPT() 函数</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;TianliGPT：因为不符合自定义的链接规则，我决定不执行摘要功能。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&quot;TianliGPT：我没有看懂你编写的自定义链接规则，所以我决定不执行摘要功能&quot;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkURLAndRun();</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --heo-white: <span class="number">#fff</span>;</span><br><span class="line">  --heo-white-op: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span><br><span class="line">  --heo-black: <span class="number">#000</span>;</span><br><span class="line">  --heo-black-op: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">  --heo-<span class="attribute">none</span>: <span class="number">#000000</span>00;</span><br><span class="line">  --heo-gray: <span class="number">#999999</span>;</span><br><span class="line">  --heo-gray-op: <span class="number">#999999</span>2b;</span><br><span class="line">  --heo-vip: <span class="number">#e5a80d</span>;</span><br><span class="line">  --heo-<span class="selector-tag">main</span>: <span class="built_in">var</span>(--heo-theme);</span><br><span class="line">  --heo-<span class="selector-tag">main</span>-op: <span class="built_in">var</span>(--heo-theme-op);</span><br><span class="line">  --heo-<span class="selector-tag">main</span>-op-deep: <span class="built_in">var</span>(--heo-theme-op-deep);</span><br><span class="line">  --heo-<span class="selector-tag">main</span>-<span class="attribute">none</span>: <span class="built_in">var</span>(--heo-theme-none);</span><br><span class="line">  --heo-shadow-theme: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">var</span>(--heo-theme-op);</span><br><span class="line">  --heo-shadow-blackdeep: <span class="number">0</span> <span class="number">2px</span> <span class="number">16px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">15</span>);</span><br><span class="line">  --heo-shadow-<span class="selector-tag">main</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">var</span>(--heo-main-op);</span><br><span class="line">  --heo-shadow-blue: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">40</span>, <span class="number">109</span>, <span class="number">234</span>, .<span class="number">20</span>);</span><br><span class="line">  --heo-shadow-white: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">20</span>);</span><br><span class="line">  --heo-shadow-black: <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span> <span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">05</span>);</span><br><span class="line">  --heo-shadow-yellow: <span class="number">0px</span> <span class="number">38px</span> <span class="number">77px</span> -<span class="number">26px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">201</span>, <span class="number">62</span>, .<span class="number">12</span>);</span><br><span class="line">  --heo-shadow-red: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="number">#ee7d79</span>36;</span><br><span class="line">  --heo-shadow-green: <span class="number">0</span> <span class="number">8px</span> <span class="number">12px</span> -<span class="number">3px</span> <span class="number">#87ee79</span>36;</span><br><span class="line">  --heo-logo-<span class="attribute">color</span>: <span class="built_in">linear-gradient</span>(<span class="number">215deg</span>, <span class="number">#4584ff</span> <span class="number">0%</span>, <span class="number">#cf0db9</span> <span class="number">100%</span>);</span><br><span class="line">  --heo-snackbar-<span class="selector-tag">time</span>: <span class="number">5s</span>;</span><br><span class="line">  --heo-theme: <span class="number">#425AEF</span>;</span><br><span class="line">  --heo-theme-op: <span class="number">#4259ef</span>23;</span><br><span class="line">  --heo-theme-op-deep: <span class="number">#4259ef</span>dd;</span><br><span class="line">  --heo-theme-<span class="attribute">none</span>: <span class="number">#4259ef</span>01;</span><br><span class="line">  --heo-blue: <span class="number">#425AEF</span>;</span><br><span class="line">  --heo-red: <span class="number">#f04a63</span>;</span><br><span class="line">  --heo-pink: <span class="number">#FF7C7C</span>;</span><br><span class="line">  --heo-green: <span class="number">#57bd6a</span>;</span><br><span class="line">  --heo-yellow: <span class="number">#c28b00</span>;</span><br><span class="line">  --heo-yellow-op: <span class="number">#d99c00</span>1a;</span><br><span class="line">  --heo-orange: <span class="number">#e38100</span>;</span><br><span class="line">  --heo-fontcolor: <span class="number">#363636</span>;</span><br><span class="line">  --heo-<span class="attribute">background</span>: <span class="number">#f7f9fe</span>;</span><br><span class="line">  --heo-reverse: <span class="number">#000</span>;</span><br><span class="line">  --heo-maskbg: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.6</span>);</span><br><span class="line">  --heo-maskbgdeep: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>);</span><br><span class="line">  --heo-hovertext: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  --heo-ahoverbg: <span class="number">#F7F7FA</span>;</span><br><span class="line">  --heo-lighttext: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  --heo-secondtext: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.8</span>);</span><br><span class="line">  --heo-scrollbar: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.4</span>);</span><br><span class="line">  --heo-card-btn-bg: <span class="number">#edf0f7</span>;</span><br><span class="line">  --heo-post-<span class="selector-tag">blockquote</span>-bg: <span class="number">#fafcff</span>;</span><br><span class="line">  --heo-post-tabs-bg: <span class="number">#f2f5f8</span>;</span><br><span class="line">  --heo-secondbg: <span class="number">#f1f3f8</span>;</span><br><span class="line">  --heo-shadow-<span class="selector-tag">nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.05</span>);</span><br><span class="line">  --heo-card-bg: <span class="number">#fff</span>;</span><br><span class="line">  --heo-card-bg-op: <span class="built_in">var</span>(--heo-black-op);</span><br><span class="line">  --heo-card-bg-<span class="attribute">none</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">  --heo-shadow-lightblack: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line">  --heo-shadow-light2black: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line">  --heo-card-<span class="attribute">border</span>: <span class="number">#e3e8f7</span>;</span><br><span class="line">  --heo-shadow-<span class="attribute">border</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d30</span>0c;</span><br><span class="line">  --style-<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-card-border);</span><br><span class="line">  --style-<span class="attribute">border</span>-always: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-card-border);</span><br><span class="line">  --style-<span class="attribute">border</span>-hover: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  --style-<span class="attribute">border</span>-hover-always: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  --style-<span class="attribute">border</span>-dashed: <span class="number">1px</span> dashed <span class="built_in">var</span>(--heo-theme-op);</span><br><span class="line">  --style-<span class="attribute">border</span>-forever: <span class="number">2px</span> solid <span class="built_in">var</span>(--heo-main);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=light]</span> &#123;</span><br><span class="line">  --heo-theme: <span class="number">#425AEF</span>;</span><br><span class="line">  --heo-theme-op: <span class="number">#4259ef</span>23;</span><br><span class="line">  --heo-theme-op-deep: <span class="number">#4259ef</span>dd;</span><br><span class="line">  --heo-theme-<span class="attribute">none</span>: <span class="number">#4259ef</span>01;</span><br><span class="line">  --heo-blue: <span class="number">#425AEF</span>;</span><br><span class="line">  --heo-red: <span class="number">#f04a63</span>;</span><br><span class="line">  --heo-pink: <span class="number">#FF7C7C</span>;</span><br><span class="line">  --heo-green: <span class="number">#57bd6a</span>;</span><br><span class="line">  --heo-yellow: <span class="number">#c28b00</span>;</span><br><span class="line">  --heo-yellow-op: <span class="number">#d99c00</span>1a;</span><br><span class="line">  --heo-orange: <span class="number">#e38100</span>;</span><br><span class="line">  --heo-fontcolor: <span class="number">#363636</span>;</span><br><span class="line">  --heo-<span class="attribute">background</span>: <span class="number">#f7f9fe</span>;</span><br><span class="line">  --heo-reverse: <span class="number">#000</span>;</span><br><span class="line">  --heo-maskbg: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.6</span>);</span><br><span class="line">  --heo-maskbgdeep: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.85</span>);</span><br><span class="line">  --heo-hovertext: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  --heo-ahoverbg: <span class="number">#F7F7FA</span>;</span><br><span class="line">  --heo-lighttext: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  --heo-secondtext: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.8</span>);</span><br><span class="line">  --heo-scrollbar: <span class="built_in">rgba</span>(<span class="number">60</span>, <span class="number">60</span>, <span class="number">67</span>, <span class="number">0.4</span>);</span><br><span class="line">  --heo-card-btn-bg: <span class="number">#edf0f7</span>;</span><br><span class="line">  --heo-post-<span class="selector-tag">blockquote</span>-bg: <span class="number">#fafcff</span>;</span><br><span class="line">  --heo-post-tabs-bg: <span class="number">#f2f5f8</span>;</span><br><span class="line">  --heo-secondbg: <span class="number">#f1f3f8</span>;</span><br><span class="line">  --heo-shadow-<span class="selector-tag">nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.05</span>);</span><br><span class="line">  --heo-card-bg: <span class="number">#fff</span>;</span><br><span class="line">  --heo-card-bg-op: <span class="built_in">var</span>(--heo-black-op);</span><br><span class="line">  --heo-card-bg-<span class="attribute">none</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">  --heo-shadow-lightblack: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line">  --heo-shadow-light2black: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.00</span>);</span><br><span class="line">  --heo-card-<span class="attribute">border</span>: <span class="number">#e3e8f7</span>;</span><br><span class="line">  --heo-shadow-<span class="attribute">border</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#2c2d30</span>0c;</span><br><span class="line">  --style-<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-card-border);</span><br><span class="line">  --style-<span class="attribute">border</span>-always: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-card-border);</span><br><span class="line">  --style-<span class="attribute">border</span>-hover: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  --style-<span class="attribute">border</span>-hover-always: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  --style-<span class="attribute">border</span>-dashed: <span class="number">1px</span> dashed <span class="built_in">var</span>(--heo-theme-op);</span><br><span class="line">  --style-<span class="attribute">border</span>-forever: <span class="number">2px</span> solid <span class="built_in">var</span>(--heo-main);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=dark]</span> &#123;</span><br><span class="line">  --heo-theme: <span class="number">#f2b94b</span>;</span><br><span class="line">  --heo-theme-op: <span class="number">#f2b94b</span>23;</span><br><span class="line">  --heo-theme-op-deep: <span class="number">#f2b94b</span>dd;</span><br><span class="line">  --heo-theme-<span class="attribute">none</span>: <span class="number">#f2b94b</span>00;</span><br><span class="line">  --heo-blue: <span class="number">#0084FF</span>;</span><br><span class="line">  --heo-red: <span class="number">#FF3842</span>;</span><br><span class="line">  --heo-pink: <span class="number">#d44040</span>;</span><br><span class="line">  --heo-green: <span class="number">#3e9f50</span>;</span><br><span class="line">  --heo-yellow: <span class="number">#ffc93e</span>;</span><br><span class="line">  --heo-yellow-op: <span class="number">#ffc93e</span>30;</span><br><span class="line">  --heo-orange: <span class="number">#ff953e</span>;</span><br><span class="line">  --heo-fontcolor: <span class="number">#F7F7FA</span>;</span><br><span class="line">  --heo-<span class="attribute">background</span>: <span class="number">#18171d</span>;</span><br><span class="line">  --heo-reverse: <span class="number">#fff</span>;</span><br><span class="line">  --heo-maskbg: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.6</span>);</span><br><span class="line">  --heo-maskbgdeep: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>);</span><br><span class="line">  --heo-hovertext: <span class="number">#0A84FF</span>;</span><br><span class="line">  --heo-ahoverbg: <span class="number">#fff</span>;</span><br><span class="line">  --heo-lighttext: <span class="built_in">var</span>(--heo-theme);</span><br><span class="line">  --heo-secondtext: <span class="number">#a1a2b8</span>;</span><br><span class="line">  --heo-scrollbar: <span class="built_in">rgba</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">223</span>, <span class="number">0.4</span>);</span><br><span class="line">  --heo-card-btn-bg: <span class="number">#30343f</span>;</span><br><span class="line">  --heo-post-<span class="selector-tag">blockquote</span>-bg: <span class="number">#000</span>;</span><br><span class="line">  --heo-post-tabs-bg: <span class="number">#121212</span>;</span><br><span class="line">  --heo-secondbg: <span class="number">#30343f</span>;</span><br><span class="line">  --heo-shadow-<span class="selector-tag">nav</span>: <span class="number">0</span> <span class="number">5px</span> <span class="number">20px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">0.4</span>);</span><br><span class="line">  --heo-card-bg: <span class="number">#1d1e22</span>;</span><br><span class="line">  --heo-card-bg-op: <span class="built_in">var</span>(--heo-white-op);</span><br><span class="line">  --heo-card-bg-<span class="attribute">none</span>: <span class="number">#1d1b26</span>00;</span><br><span class="line">  --heo-shadow-lightblack: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.0</span>);</span><br><span class="line">  --heo-shadow-light2black: <span class="number">0</span> <span class="number">5px</span> <span class="number">12px</span> -<span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">102</span>, <span class="number">68</span>, <span class="number">68</span>, <span class="number">0.0</span>);</span><br><span class="line">  --heo-card-<span class="attribute">border</span>: <span class="number">#3d3d3f</span>;</span><br><span class="line">  --heo-shadow-<span class="attribute">border</span>: <span class="number">0</span> <span class="number">8px</span> <span class="number">16px</span> -<span class="number">4px</span> <span class="number">#000000</span>50;</span><br><span class="line">  --style-<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-card-border);</span><br><span class="line">  --style-<span class="attribute">border</span>-always: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-card-border);</span><br><span class="line">  --style-<span class="attribute">border</span>-hover: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-theme);</span><br><span class="line">  --style-<span class="attribute">border</span>-hover-always: <span class="number">1px</span> solid <span class="built_in">var</span>(--heo-theme);</span><br><span class="line">  --style-<span class="attribute">border</span>-dashed: <span class="number">1px</span> dashed <span class="built_in">var</span>(--heo-theme-op);</span><br><span class="line">  --style-<span class="attribute">border</span>-forever: <span class="number">2px</span> solid <span class="built_in">var</span>(--heo-lighttext);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* AI */</span></span><br><span class="line"><span class="selector-class">.post-TianliGPT</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-secondbg);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.3</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border-always);</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.post-TianliGPT</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">22px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-title</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-lighttext);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: default;</span><br><span class="line">  user-select: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-title-text</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-explanation</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border-always);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-suggestions</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-suggestions</span> <span class="selector-class">.tianliGPT-suggestions-item</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border-always);</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.4</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">width</span>: fit-content;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-suggestions</span> <span class="selector-class">.tianliGPT-suggestions-item</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-white);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blinking-cursor</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">animation</span>: blinking-cursor <span class="number">0.5s</span> infinite;</span><br><span class="line">  -webkit-<span class="attribute">animation</span>: blinking-cursor <span class="number">0.5s</span> infinite;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">4px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> blinking-cursor &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">40%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">90%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-tag</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--heo-lighttext);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-tag</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-fontcolor);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ins</span><span class="selector-class">.adsbygoogle</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border</span>: <span class="built_in">var</span>(--style-border-always);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tianliGPT-Toggle</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-lighttext);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>);</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tianliGPT-Toggle</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--heo-fontcolor);</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--heo-card-bg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-title-icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-title-icon</span> svg &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  fill: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tianliGPT-title-icon</span> svg path &#123;</span><br><span class="line">  fill: <span class="built_in">var</span>(--heo-main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ag-grid</title>
      <link href="93694a53/"/>
      <url>93694a53/</url>
      
        <content type="html"><![CDATA[<h2 id="AG-GRID">AG-GRID</h2><p>一个高性能表格组件</p><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue2</span></span><br><span class="line">npm install --save ag-grid-community ag-grid-vue vue-property-decorator@^8.0.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># vue3</span></span><br><span class="line">npm install --save ag-grid-community</span><br><span class="line">npm install --save ag-grid-vue3</span><br></pre></td></tr></table></figure><h2 id="引入">引入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2</span></span><br><span class="line"><span class="keyword">import</span> &#123; AgGridVue &#125; <span class="keyword">from</span> <span class="string">&quot;ag-grid-vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 样式</span></span><br><span class="line"><span class="comment">// 基本样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;ag-grid-community/styles/ag-grid.css&quot;</span>;</span><br><span class="line"><span class="comment">// 主题样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;ag-grid-community/styles/ag-theme-alpine.css&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="网格配置">网格配置</h2><h3 id="列配置">列配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;ag-grid-vue</span><br><span class="line">    style&#x3D;&quot;width: 100%; height: 100%&quot;</span><br><span class="line">    class&#x3D;&quot;ag-theme-quartz&quot;</span><br><span class="line">    :columnDefs&#x3D;&quot;colDefs&quot;</span><br><span class="line">    :rowData&#x3D;&quot;rowData&quot;</span><br><span class="line">&gt;&lt;&#x2F;ag-grid-vue&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">rowData: [</span><br><span class="line">  &#123; make: &quot;Tesla&quot;, model: &quot;Model Y&quot;, price: 64950, electric: true &#125;,</span><br><span class="line">  &#123; make: &quot;Toyota&quot;, model: &quot;Corolla&quot;, price: 29600, electric: false &#125;,</span><br><span class="line">  &#123; make: &quot;Ford&quot;, model: &quot;F-Series&quot;, price: 33850, electric: false &#125;,</span><br><span class="line">],</span><br><span class="line">colDefs: [</span><br><span class="line">  &#123;</span><br><span class="line">    field: &quot;make&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    field: &quot;model&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    field: &quot;price&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    field: &quot;electric&quot;</span><br><span class="line">  &#125;</span><br><span class="line">],</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="默认所有列都会生效的配置">默认所有列都会生效的配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ag-grid-vue</span><br><span class="line">    style&#x3D;&quot;width: 100%; height: 100%&quot;</span><br><span class="line">    class&#x3D;&quot;ag-theme-quartz&quot;</span><br><span class="line">    :columnDefs&#x3D;&quot;colDefs&quot;</span><br><span class="line">    :rowData&#x3D;&quot;rowData&quot;</span><br><span class="line">    :defaultColDef&#x3D;&quot;defaultColDef&quot;</span><br><span class="line">&gt;&lt;&#x2F;ag-grid-vue&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">const defaultColDef &#x3D; &#123;</span><br><span class="line">  filter: true, &#x2F;&#x2F; 这样所有列都可以过滤了</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h3 id="分页">分页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ag-grid-vue</span><br><span class="line">    style&#x3D;&quot;width: 100%; height: 100%&quot;</span><br><span class="line">    class&#x3D;&quot;ag-theme-quartz&quot;</span><br><span class="line">    :columnDefs&#x3D;&quot;colDefs&quot;</span><br><span class="line">    :rowData&#x3D;&quot;rowData&quot;</span><br><span class="line">    :defaultColDef&#x3D;&quot;defaultColDef&quot;</span><br><span class="line">    :pagination&#x3D;&quot;true&quot;</span><br><span class="line">&gt;&lt;&#x2F;ag-grid-vue&gt;</span><br></pre></td></tr></table></figure><h2 id="AG-GRID-自定义主题"><code>AG-GRID</code> 自定义主题</h2><ol><li>自定义主题必须以 <code>ag-theme-</code> 开头</li><li>可以使用少量的 <code>css</code> 变量来扩展现有主题</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ag-theme-mytheme</span> &#123;</span><br><span class="line">  --ag-grid-size: <span class="number">8px</span>;</span><br><span class="line">  --ag-<span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ag-theme-mytheme</span> <span class="selector-class">.ag-header</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用ag-grid提供的主题 quartz 并且自定义主题 --&gt;</span><br><span class="line">&lt;ag-grid-vue</span><br><span class="line">    style&#x3D;&quot;width: 100%; height: 100%&quot;</span><br><span class="line">    class&#x3D;&quot;ag-theme-quartz ag-theme-mytheme&quot;</span><br><span class="line">    :columnDefs&#x3D;&quot;colDefs&quot;</span><br><span class="line">    :rowData&#x3D;&quot;rowData&quot;</span><br><span class="line">    :defaultColDef&#x3D;&quot;defaultColDef&quot;</span><br><span class="line">    :pagination&#x3D;&quot;true&quot;</span><br><span class="line">&gt;&lt;&#x2F;ag-grid-vue&gt;</span><br></pre></td></tr></table></figure><h2 id="ag-grid-变量引用">ag-grid 变量引用</h2><ol><li><code>--ag-active-color</code><ul><li>仅仅用于 <code>quartz</code> 主题</li><li>选中行的重点样式，或范围选中，输入框外边框颜色</li></ul></li><li><code>--ag-foreground-color</code><ul><li>字体颜色 icon 颜色</li></ul></li><li><code>--ag-background-color</code><ul><li>背景颜色</li></ul></li><li><code>--ag-secondary-foreground-color</code><ul><li>表头颜色</li></ul></li><li><code>--ag-data-color</code><ul><li>网格单元格字体颜色</li></ul></li><li><code>--ag-header-foreground-color</code><ul><li>表头字体颜色</li></ul></li><li><code>--ag-header-background-color</code><ul><li>表头背景颜色</li></ul></li></ol><h2 id="Columns">Columns</h2><h3 id="Columns-定义">Columns 定义</h3><h4 id="默认所有列都会生效的配置-2">默认所有列都会生效的配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ag-grid-vue</span><br><span class="line">    style&#x3D;&quot;width: 100%; height: 100%&quot;</span><br><span class="line">    class&#x3D;&quot;ag-theme-quartz&quot;</span><br><span class="line">    :columnDefs&#x3D;&quot;colDefs&quot;</span><br><span class="line">    :rowData&#x3D;&quot;rowData&quot;</span><br><span class="line">    :defaultColDef&#x3D;&quot;defaultColDef&quot;</span><br><span class="line">&gt;&lt;&#x2F;ag-grid-vue&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">const defaultColDef &#x3D; &#123;</span><br><span class="line">  filter: true, &#x2F;&#x2F; 这样所有列都可以过滤了</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="Column-Types">Column Types</h4><p>使用 <code>ColumnTypes</code> 定义一组一起应用的列属性。列类型中的属性可通过设置列的 <code>type</code> 属性应用于列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;ag-grid-vue</span><br><span class="line">    style&#x3D;&quot;width: 100%; height: 100%&quot;</span><br><span class="line">    class&#x3D;&quot;ag-theme-quartz ag-theme-arc&quot;</span><br><span class="line">    pagination</span><br><span class="line">    rowSelection&#x3D;&quot;multiple&quot;</span><br><span class="line">    :columnDefs&#x3D;&quot;colDefs&quot;</span><br><span class="line">    :rowData&#x3D;&quot;rowData&quot;</span><br><span class="line">    :defaultColDef&#x3D;&quot;defaultColDef&quot;</span><br><span class="line">    :columnTypes&#x3D;&quot;columnTypes&quot;</span><br><span class="line">    @cell-value-changed&#x3D;&quot;onCellValueChanged&quot;</span><br><span class="line">&gt;&lt;&#x2F;ag-grid-vue&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">colDefs: [</span><br><span class="line">&#123;</span><br><span class="line">field: &quot;mission&quot;,</span><br><span class="line">label: &quot;任务&quot;,</span><br><span class="line">checkboxSelection: true,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">field: &quot;company&quot;,</span><br><span class="line">name: &quot;公司&quot;,</span><br><span class="line">cellRenderer: &quot;CompanyLogoRender&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">field: &quot;location&quot;,</span><br><span class="line">name: &quot;地址&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">field: &quot;date&quot;,</span><br><span class="line">name: &quot;日期&quot;,</span><br><span class="line">type: &quot;rightAligned&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">field: &quot;price&quot;,</span><br><span class="line">name: &quot;价格&quot;,</span><br><span class="line">&#x2F;&#x2F; valueFormatter: (params) &#x3D;&gt; &#123;</span><br><span class="line">&#x2F;&#x2F;   return &quot;¥&quot; + params.value.toLocaleString();</span><br><span class="line">&#x2F;&#x2F; &#125;,</span><br><span class="line">type: &quot;currency&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">field: &quot;successful&quot;,</span><br><span class="line">name: &quot;有效&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">field: &quot;rocket&quot;,</span><br><span class="line">name: &quot;有效&quot;,</span><br><span class="line">type: [&quot;currency&quot;, &quot;shaded&quot;],</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">defaultColDef: &#123;</span><br><span class="line">filter: true,</span><br><span class="line">&#x2F;&#x2F; editable: true,</span><br><span class="line">&#125;,</span><br><span class="line">columnTypes: &#123;</span><br><span class="line">currency: &#123;</span><br><span class="line">width: 150,</span><br><span class="line">valueFormatter: (params) &#x3D;&gt; &quot;$&quot; + params.value,</span><br><span class="line">&#125;,</span><br><span class="line">shaded: &#123;</span><br><span class="line">cellClass: &quot;shaded-class&quot;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><p>grid 默认提供的 ColumnTypes 有两个 <code>rightAligned</code> 和 <code>numericColumn</code> 他们的作用是相同的。都相当于表头单元格设置了类名 <code>ag-right-aligned-header</code>，和数据单元格添加了 <code>ag-right-aligned-cell</code> 类名</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ColDef &#123;</span><br><span class="line">field: <span class="built_in">string</span>; <span class="comment">// 字段名</span></span><br><span class="line">headerName?: <span class="built_in">string</span>; <span class="comment">// 表头名称</span></span><br><span class="line">colId?: <span class="built_in">string</span>; <span class="comment">// 如果有就必须保持唯一 如果不唯一他回自动生成 _n 后缀 来维持唯一</span></span><br><span class="line"><span class="keyword">type</span>?: <span class="built_in">string</span>[] | <span class="built_in">string</span>; <span class="comment">// 应用的 columnTypes</span></span><br><span class="line">filter?: <span class="built_in">boolean</span>; <span class="comment">// 是否可过滤</span></span><br><span class="line">editable?: <span class="built_in">boolean</span>; <span class="comment">// 是否可编辑</span></span><br><span class="line">valueFormatter?: <span class="function">(<span class="params">params</span>) =&gt;</span> <span class="built_in">string</span>; <span class="comment">// 格式化内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3.x基本用法</title>
      <link href="bf20fb0a/"/>
      <url>bf20fb0a/</url>
      
        <content type="html"><![CDATA[<h2 id="应用">应用</h2><h3 id="应用实例">应用实例</h3><p>应用通过 <code>createApp</code> 函数创建<u>应用实例</u></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">  <span class="comment">// 根组件选项</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="根组件">根组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&quot;./app.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br></pre></td></tr></table></figure><h3 id="挂载应用">挂载应用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.mount(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p><code>.mount</code> <wavy>方法返回根组件实例而非应用实例</wavy></p><h3 id="dom-中的根组件模版"><code>dom</code> 中的根组件模版</h3><p>根组件的模版也是组件本身的一部分，但也可以直接通过在挂载容器内编写模板来单独提供</p><p>当根组件没有设置 <code>template</code> 选项时，<code>vue</code> 将自动使用容器的 <code>innerHTML</code> 作为模版</p><div class="tip "><p><code>dom</code> 内模版通常用于无构建步骤的 <code>vue</code> 应用，其根模版可由服务端生成</p></div><h3 id="应用配置">应用配置</h3><p>应用实例暴露一个 <code>.config</code> 对象，允许配置一些应用级的选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义错误处理器，捕获子组件上的错误</span></span><br><span class="line">app.config.errorHandler = <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 处理错误</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册应用范围内的组件</span></span><br><span class="line">app.component(<span class="string">&quot;TodoDeleteButton&quot;</span>, TodoDeleteButton);</span><br></pre></td></tr></table></figure><h3 id="多个应用实例">多个应用实例</h3><p>应用实例不限制个数。可以在同一个页面创建多个 <code>vue</code> 应用，每个应用拥有自己的作用域</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app1 = createApp(&#123;</span><br><span class="line">  <span class="comment">// 配置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app1.mount(<span class="string">&quot;#container-1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app2 = createApp(&#123;</span><br><span class="line">  <span class="comment">// 配置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app2.mount(<span class="string">&quot;#container-2&quot;</span>);</span><br></pre></td></tr></table></figure><iframe id="cp_embed_LYKwvMx" src="//codepen.io/milkdue/embed/LYKwvMx?height=300&theme-id=dark&slug-hash=LYKwvMx&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="模版语法">模版语法</h2><h3 id="文本插件">文本插件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- message 被替换为实例中的 message 的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="原始-html">原始 <code>html</code></h3><p>指令 <code>&#123;&#123; &#125;&#125;</code> 会被解释为纯文本，而不是 <code>html</code>.<code>v-html</code> 指令将解析 <code>html</code></p><div class="tip warning"><p>渲染 <code>html</code> 容易造成 <code>XSS</code> 漏洞</p></div><h3 id="Attribute-绑定"><code>Attribute</code> 绑定</h3><p><code>v-bind</code> 指令可以响应式地绑定一个 <code>attribute</code>，如果绑定的值是 <code>null</code> 或 <code>undefined</code>，那么 <code>attribute</code> 将会从渲染的元素上移除</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-bind的简写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- v-bind 同名简写 vue3.4版本及其以上版本适用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布尔型-Attribute">布尔型 <code>Attribute</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 取决于 disabled的值，如果是真值 则为真 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这种也是 disabled态 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>=<span class="string">&quot;&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">disabled</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态绑定多个值">动态绑定多个值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind=<span class="string">&quot;attribute&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">&lt;div</span><br><span class="line">  :id=<span class="string">&quot;attribute.id&quot;</span></span><br><span class="line">  :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;attribute.class&quot;</span></span><br><span class="line">  :style=<span class="string">&quot;attribute.style&quot;</span></span><br><span class="line">&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> attribute = &#123;</span><br><span class="line">  id: <span class="string">&quot;container&quot;</span>,</span><br><span class="line">  class: &quot;wrapper&quot;,</span><br><span class="line">  style: <span class="string">&quot;background-color: red&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="表达式">表达式</h3><ol><li>用于插值中</li><li>用于指令中</li><li>只支持表达式，代码片段是无效的</li><li>可绑定函数</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &quot;yes&quot; : &quot;no&quot; &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;`list-$&#123;id&#125;`&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span> <span class="attr">:title</span>=<span class="string">&quot;formatTitle(date)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- error --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="受限制的全局访问">受限制的全局访问</h4><ol><li>模版中的表达式会被沙盒化，仅能访问到<wavy>有限的全局对象列表</wavy></li><li>没有显式包含在列表中的全局对象将不能在模板内表达式中访问，例如用户附加在 <code>window</code> 上的属性</li><li>可自行在 <code>app.config.globalProperties</code> 上显式的添加它们，以便于在组件中使用<ul><li>注意这个过程是在执行 <code>mount</code> 之前进行</li></ul></li></ol><h3 id="指令-Directives">指令 <code>Directives</code></h3><p>指令是带有 <code>v-</code> 前缀的特殊 <code>attribute</code> 例如 <code>v-bind</code> <code>v-html</code> <code>v-for</code> <code>v-if</code> <code>v-on</code> <code>v-slot</code> <code>v-show</code></p><h4 id="参数-Arguments">参数 <code>Arguments</code></h4><p>某些指令需要一个 <emp>参数</emp> 在指令后通过冒号隔开作为标识</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;clickEvent&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;clickEvent&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动态参数">动态参数</h4><p>指令需要的参数也可以使用表达式 需要包含到 <code>[]</code> 中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- js --&gt;</span></span><br><span class="line">const attributeName = &quot;href&quot;;</span><br></pre></td></tr></table></figure><ol><li><p>动态参数值的限制</p><ul><li>动态参数中的表达式应该是一个字符串或者 <code>null</code></li><li><code>null</code> 意为显式移除该绑定</li><li>其他非字符串的值会触发警告</li></ul></li><li><p>动态参数语法的限制</p><ul><li>动态参数表达式因为某些字符的缘故有一些语法限制，比如空格和引号，在 <code>HTML attribute</code> 名称中都是不合法的</li><li>使用 <span class='nota' data-nota='直接写在 html 文件中的模版'>dom 内嵌模版</span>，避免在名称中使用大写字母，因为浏览器会强制将它转化为小写</li></ul> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发一个编译警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[&#x27;<span class="attr">foo</span>&#x27; + <span class="attr">bar</span>]=<span class="string">&quot;value&quot;</span>&gt;</span>jump<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在内嵌模版中 somAttr 会转为 someattr --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">someAttr</span>]=<span class="string">&quot;value&quot;</span>&gt;</span>jump<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="修饰符">修饰符</h4><p>修饰符是以 <code>.</code> 开头的特殊后缀，表明指令需要以一些特殊的方式绑定。例如 <code>v-on</code> 指令对触发的事件调用 <code>event.preventDefault</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_QWeLOEK" src="//codepen.io/milkdue/embed/QWeLOEK?height=300&theme-id=dark&slug-hash=QWeLOEK&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="响应式原理">响应式原理</h2><h3 id="proxy"><code>proxy</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure><ol><li><p><code>target</code> 要包装的对象，可以是任何东西，包括函数</p></li><li><p><code>handler</code> 代理配置：带有 <span class='nota' data-nota='拦截操作的方法'>捕捉器</span></p><ul><li><code>get</code> 捕捉器用于读取 <code>target</code> 属性，<code>set</code> 捕捉器用于写入 <code>target</code> 的属性</li><li>没有捕捉器时，所有 <code>proxy</code> 的操作都直接转发给 <code>target</code></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;&#125;);</span><br><span class="line">proxy.test = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(target.test); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(proxy.test); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> proxy) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key); <span class="comment">// test</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>proxy</code> 是一种特殊的奇异对象，它没有自己的属性，如果 <code>handler</code> 为空，则透明地将操作转发为 <code>target</code></p></li><li><p>对于大多数操作 <code>js</code> 规范中有一个所谓的内部方法，它描述最底层的工作方式。例如 <code>[[Get]]</code>，用于读取属性的内部方法，<code>[[Set]]</code> 用于写入属性的内部方法。这些方法仅在规范中使用，不能直接通过方法名调用它们。<code>proxy</code> 捕捉器会拦截这些方法的调用</p></li></ol><table><thead><tr><th style="text-align:center">内部方法</th><th style="text-align:center"><code>Handler</code> 方法</th><th style="text-align:center">何时触发</th></tr></thead><tbody><tr><td style="text-align:center"><code>[[Get]]</code></td><td style="text-align:center"><code>get</code></td><td style="text-align:center">读取属性</td></tr><tr><td style="text-align:center"><code>[[Set]]</code></td><td style="text-align:center"><code>set</code></td><td style="text-align:center">写入属性</td></tr><tr><td style="text-align:center"><code>[[HasProperty]]</code></td><td style="text-align:center"><code>has</code></td><td style="text-align:center"><code>in</code>操作符</td></tr><tr><td style="text-align:center"><code>[[Delete]]</code></td><td style="text-align:center"><code>deleteProperty</code></td><td style="text-align:center"><code>delete</code>操作符</td></tr><tr><td style="text-align:center"><code>[[Call]]</code></td><td style="text-align:center"><code>apply</code></td><td style="text-align:center">函数调用</td></tr><tr><td style="text-align:center"><code>[[Construct]]</code></td><td style="text-align:center"><code>construct</code></td><td style="text-align:center"><code>new</code>操作符</td></tr><tr><td style="text-align:center"><code>[[GetPrototypeOf]]</code></td><td style="text-align:center"><code>getPrototypeOf</code></td><td style="text-align:center"><code>Object.getPrototypeOf</code></td></tr><tr><td style="text-align:center"><code>[[SetPrototypeOf]]</code></td><td style="text-align:center"><code>setPrototypeOf</code></td><td style="text-align:center"><code>Object.setPrototypeOf</code></td></tr><tr><td style="text-align:center"><code>[[IsExtensible]]</code></td><td style="text-align:center"><code>isExtensible</code></td><td style="text-align:center"><code>Object.isExtensible</code></td></tr><tr><td style="text-align:center"><code>[[PreventExtensions]]</code></td><td style="text-align:center"><code>preventExtensions</code></td><td style="text-align:center"><code>Object.preventExtensions</code></td></tr><tr><td style="text-align:center"><code>[[DefineOwnProperty]]</code></td><td style="text-align:center"><code>defineProperty</code></td><td style="text-align:center"><code>Object.defineProperty</code> <code>Object.defineProperties</code></td></tr><tr><td style="text-align:center"><code>[[GetOwnProperty]]</code></td><td style="text-align:center"><code>getOwnPropertyDescriptor</code></td><td style="text-align:center"><code>Object.getOwnPropertyDescriptor</code> <code>for...in</code> <code>Object.keys/values/entries</code></td></tr><tr><td style="text-align:center"><code>[[OwnPropertyKeys]]</code></td><td style="text-align:center"><code>ownKeys</code></td><td style="text-align:center"><code>Object.getOwnPropertyNames</code> <code>Object.getOwnPropertySymbols</code> <code>for..in</code> <code>Object.keys/values/enties</code></td></tr></tbody></table><div class="tip "><p><b>不变量</b></p><p><code>js</code> 强制 <span class='nota' data-nota='内部方法和捕捉器必须满足的条件'>执行某些不变量</span></p><ol><li>其中大多数用于返回值<ul><li><code>[[Set]]</code> 如果值已成功写入，则返回 <code>true</code> 否则返回 <code>false</code></li><li><code>[[Delete]]</code> 如果已完成删除该值，则返回 <code>true</code> 否则返回 <code>false</code></li><li><code>...</code></li></ul></li><li>对于一些不变量<ul><li>应用代理 <code>proxy</code> 对象的 <code>[[GetPrototypeOf]]</code> 必须返回与应用于被代理对象的 <code>[[GetPrototypeOf]]</code> 相同的值。读取代理对象的原型必须返回始终返回被代理对象的原型</li></ul></li></ol><p>捕捉器可以拦截这些操作，但是也必须遵循上面的规则</p></div><h4 id="get-捕捉器"><code>get</code> 捕捉器</h4><ol><li><code>handler</code> 必须有 <code>get(target, property, receiver)</code> 方法<ul><li><code>target</code> 目标对象，该对象被作为第一个参数传递给 <code>new Proxy</code></li><li><code>property</code> 目标属性名</li><li><code>receiver</code> 如果目标属性是一个 <code>getter</code> 访问器属性，则 <code>receiver</code> 就是本次读取属性所在的 <code>this</code> 对象。通常就是 <code>proxy</code> 对象本身</li></ul></li><li><wavy>代理应该在所有地方都完全代替目标对象，目标对象被代理后，不应该在引用目标对象</wavy></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">numbers = <span class="keyword">new</span> <span class="built_in">Proxy</span>(numbers, &#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (prop <span class="keyword">in</span> target) &#123;</span><br><span class="line"><span class="keyword">return</span> target[prop];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers[<span class="number">2</span>]); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(numbers[<span class="number">3</span>]); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dict = &#123;</span><br><span class="line"><span class="string">&quot;Hello&quot;</span>: <span class="string">&quot;Hola&quot;</span>,</span><br><span class="line"><span class="string">&quot;Bye&quot;</span>: <span class="string">&quot;Adiós&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">dict = <span class="keyword">new</span> <span class="built_in">Proxy</span>(dict, &#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (prop <span class="keyword">in</span> target) &#123;</span><br><span class="line"><span class="keyword">return</span> target[prop];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> prop;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dict[<span class="string">&quot;Hello&quot;</span>]); <span class="comment">// Hola</span></span><br><span class="line"><span class="built_in">console</span>.log(dict[<span class="string">&quot;welcome&quot;</span>]); <span class="comment">// welcome</span></span><br></pre></td></tr></table></figure><h4 id="set-捕捉器"><code>set</code> 捕捉器</h4><ol><li><code>handler</code> 必须有一个 <code>set(target, property, value, receiver)</code> 函数<ul><li><code>target</code> 目标对象 该对象被作为第一个参数传递给 <code>new Proxy</code></li><li><code>property</code> 目标属性名称</li><li><code>value</code> 目标属性值</li><li><code>receiver</code> 与 <code>get</code> 捕捉器类型，仅与 <code>setter</code> 访问器属性相关</li></ul></li><li>如果写入操作成功，<code>set</code> 捕捉器应该返回 <code>true</code>，否则返回 <code>false</code> (触发 <code>TypeError</code>)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [];</span><br><span class="line">numbers = <span class="keyword">new</span> <span class="built_in">Proxy</span>(numbers, &#123;</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target, prop, value</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">target[prop] = value;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组的内建方法依然有效，值被使用 `push` 方法添加到数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">不必重写 `push` `unshift` 等添加元素的数组方法 在内部它们使用代理所拦截的 [[Set]] 操作。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">numbers.push(<span class="number">1</span>);</span><br><span class="line">numbers.push(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers.length, <span class="string">&quot;length&quot;</span>);</span><br><span class="line"></span><br><span class="line">numbers.push(<span class="string">&quot;test&quot;</span>); <span class="comment">// TypeError 返回 false;</span></span><br></pre></td></tr></table></figure><h4 id="ownkeys-和-getOwnPropertyDescriptor-进行迭代"><code>ownkeys</code> 和 <code>getOwnPropertyDescriptor</code> 进行迭代</h4><ol><li><code>Object.keys</code> <code>for...in</code> 循环和大多数其他遍历对象属性的方法都使用内部方法 <code>[[OwnPropertyKeys]]</code> 由 <code>ownKeys</code> 捕捉器拦截来获取属性列表</li><li>下面方法在细节上有所不同<ul><li><code>Object.getOwnPropertyNames(obj)</code> 返回非 <code>symbol</code> 键</li><li><code>Object.getOwnPropertySymbols(obj)</code> 返回 <code>symbol</code> 键</li><li><code>Object.keys/values()</code> 返回带有 <code>enumerable</code> 标志的非 <code>symbol</code> 键/值</li><li><code>for...in</code> 循环遍历所有带有 <code>enumerable</code> 标志的非 <code>symbol</code> 键，以及原型对象的键</li></ul></li><li>带有 <code>enumerable</code> 标志的键，如果返回一个对象不存在的键，那么为了检查它，方法会对每个属性调用内部方法 <code>[[GetOwnProperty]]</code> 来获取它的描述符，通过拦截 <code>getOwnPropertyDescriptor</code> 来返回 <code>enumerable: true</code> 的描述符来保证可以获取到对象不存在的键</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">name: <span class="string">&quot;suxi&quot;</span>,</span><br><span class="line">age: <span class="number">30</span>,</span><br><span class="line">_password: <span class="string">&quot;***&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">user = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user, &#123;</span><br><span class="line"><span class="function"><span class="title">ownKeys</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(target).filter(<span class="function"><span class="params">key</span> =&gt;</span> !key.startsWith(<span class="string">&quot;_&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> user) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key); <span class="comment">// name age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(user)); <span class="comment">// name age</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(user)); <span class="comment">// suxi 30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pig = &#123;</span><br><span class="line">name: <span class="string">&quot;peiqi&quot;</span>,</span><br><span class="line">age: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pig = <span class="keyword">new</span> <span class="built_in">Proxy</span>(pig, &#123;</span><br><span class="line"><span class="function"><span class="title">ownKeys</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line"><span class="comment">// 返回一个对象不存在的键</span></span><br><span class="line"><span class="keyword">return</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(pig)); <span class="comment">// empty</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">name: <span class="string">&quot;Mark&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line"><span class="function"><span class="title">ownKeys</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">getOwnPropertyDescriptor</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">enumerable: <span class="literal">true</span>,</span><br><span class="line">configurable: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)); <span class="comment">// a b</span></span><br></pre></td></tr></table></figure><h4 id="deleteProperty-和其他捕捉器的受保护属性"><code>deleteProperty</code> 和其他捕捉器的受保护属性</h4><ol><li>一个普遍的约定，以下划线 <code>_</code> 开头的属性和方法是内部的，不应从对象外部访问它们<ul><li><code>get</code> 读取属性时抛出异常</li><li><code>set</code> 写入属性时抛出异常</li><li><code>deleteProperty</code> 删除属性时抛出异常</li><li><code>ownKeys</code> 在使用 <code>for...in</code> 和像 <code>Object.keys</code> 这样的方法时排除以 <code>_</code> 开头的属性</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student = &#123;</span><br><span class="line">name: <span class="string">&quot;Aki&quot;</span>,</span><br><span class="line">_password: <span class="string">&quot;secret&quot;</span>,</span><br><span class="line"><span class="function"><span class="title">checkPassword</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> value === <span class="built_in">this</span>._password;</span><br><span class="line">&#125; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(student._password);</span><br><span class="line"></span><br><span class="line">student = <span class="keyword">new</span> proxy(student, &#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (prop.startsWith(<span class="string">&quot;_&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Access denied&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> value = target[prop];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果读取的是一个函数，需要修正它的this，下面是一个简单方案</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span> ? value.bind(target) : value);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target, prop, value</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (prop.startsWith(<span class="string">&quot;_&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Access denied&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">target[prop] = value;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">deleteProperty</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (prop.startsWith(<span class="string">&quot;_&quot;</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Access denied&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> target[prop];</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">ownKeys</span>(<span class="params">target</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(target).filter(<span class="function"><span class="params">key</span> =&gt;</span> !key.startsWith(<span class="string">&quot;_&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(student._password);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">student._password = <span class="string">&quot;abs&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">delete</span> student._password;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(student)); <span class="comment">// name checkPassword</span></span><br></pre></td></tr></table></figure><div class="tip warning"><p><b>类的私有属性</b></p><p>类的私有属性以 <code>#</code> 为前缀，它们无需代理，并且它们有其自身的问题，特别是，它们是不可继承的</p></div><h4 id="带有-has-捕捉器的-in-range">带有 <code>has</code> 捕捉器的 <code>in range</code></h4><ol><li>使用 <code>in</code> 操作符来检查一个数字是否在 <code>range</code> 范围内</li><li><code>has</code> 捕捉器会拦截 <code>in</code> 调用</li><li><code>has(target, property)</code><ul><li><code>target</code> 目标对象</li><li><code>property</code> 属性</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> range = &#123;</span><br><span class="line">start: <span class="number">1</span>,</span><br><span class="line">end: <span class="number">10</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">range = <span class="keyword">new</span> <span class="built_in">Proxy</span>(range, &#123;</span><br><span class="line"><span class="function"><span class="title">has</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> prop &gt;= target.start &amp;&amp; prop &lt;= target.end;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> <span class="keyword">in</span> range); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">33</span> <span class="keyword">in</span> range); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="包装函数-apply">包装函数 <code>apply</code></h4><ol><li>也可以将代理包装在函数周围</li><li><code>apply(target, thisArg, args)</code> 捕捉器能使代理以函数的方式被调用<ul><li><code>target</code> 是目标对象</li><li><code>thisArg</code> 是 <code>this</code> 的值</li><li><code>args</code> 是参数列表</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">f, ms</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> f.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>), ms);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayHiF = delay(sayHi, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">sayHiF(<span class="string">&quot;suxi&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面这种方式，大多数情况下是可行的，但是包装函数不会转发属性读取/写入操作或者任何其他操作。进行包装后，就失去了对原始函数属性的访问，例如 `name` `length` 和其他属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sayHi.length); <span class="comment">// 1 函数的length标识函数声明时的参数的个数</span></span><br><span class="line"><span class="built_in">console</span>.log(sayHiF.length); <span class="comment">// 0 丢失了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是 proxy 的功能要强大的多，它可以将所有东西都转发到目标对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay1</span>(<span class="params">f, ms</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(f, &#123;</span><br><span class="line"><span class="function"><span class="title">apply</span>(<span class="params">target, thisArg, args</span>)</span> &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> target.apply(thisArg, args), ms);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi1</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Hello， <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sayHi2 = delay(sayHi1, <span class="number">3000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sayHi2.length); <span class="comment">// 1</span></span><br><span class="line">sayHi2(<span class="string">&quot;suxi&quot;</span>);</span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/hdsgnw?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="hdsgnw"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h3 id="Reflect"><code>Reflect</code></h3><p><code>Reflect</code> 是一个内建对象，可简化 <code>Proxy</code> 的创建，对象的内部方法 <code>[[Get]]</code> <code>[[Set]]</code> 等，都只是规范性的，不能直接调用，<code>Reflect</code> 对象使调用这些内部方法成为了可能。</p><table><thead><tr><th style="text-align:center">操作</th><th style="text-align:center"><code>Reflect</code>调用</th><th style="text-align:center">内部方法</th></tr></thead><tbody><tr><td style="text-align:center"><code>obj[prop]</code></td><td style="text-align:center"><code>Reflect.get(obj, prop)</code></td><td style="text-align:center"><code>[[Get]]</code></td></tr><tr><td style="text-align:center"><code>obj[prop] = value</code></td><td style="text-align:center"><code>Reflect.set(obj, prop, value)</code></td><td style="text-align:center"><code>[[Set]]</code></td></tr><tr><td style="text-align:center"><code>delete obj[prop]</code></td><td style="text-align:center"><code>Reflect.deleteProperty(obj, prop)</code></td><td style="text-align:center"><code>[[Delete]]</code></td></tr><tr><td style="text-align:center"><code>new F(value)</code></td><td style="text-align:center"><code>Reflect.construct(F, value)</code></td><td style="text-align:center"><code>[[Construct]]</code></td></tr><tr><td style="text-align:center"><code>...</code></td><td style="text-align:center"><code>...</code></td><td style="text-align:center"><code>...</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line"><span class="built_in">Reflect</span>.set(user, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;suxi&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(user); <span class="comment">// &#123;&quot;name&quot;: &quot;suxi&quot;&#125;</span></span><br></pre></td></tr></table></figure><p><code>Reflect</code> 允许将操作符 <code>new</code> <code>delete</code> <code>...</code> 作为函数 (<code>Reflect.construct</code> <code>Reflect.deleteProperty</code> <code>...</code>) 执行调用。</p><wavy>对于每个可被 Proxy 捕获的内部方法，在 Reflect 中都有对应的方法，其名称和参数与 Proxy 捕获器相同</wavy><p><code>Reflect.get</code> 读取一个对象属性<br><code>Reflect.set</code> 写入一个对象属性，如果写入成功则返回 <code>true</code> 否则返回 <code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">name: <span class="string">&quot;aki&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person, &#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop, receiver</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Get <span class="subst">$&#123;prop&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop, receiver);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">target, prop, value, receiver</span>)</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Set <span class="subst">$&#123;prop&#125;</span> = <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value, receiver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = person.name;</span><br><span class="line">person.name = <span class="string">&quot;peiqi&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为什么Reflect更好</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pig1 = &#123;</span><br><span class="line">_name: <span class="string">&quot;peiqi&quot;</span>,</span><br><span class="line"><span class="keyword">get</span> <span class="title">name</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>._name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pig1Proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(pig1, &#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> target[prop];</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pig2 = &#123;</span><br><span class="line">__proto__: pig1Proxy,</span><br><span class="line">_name: <span class="string">&quot;suxi&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pig2.name); <span class="comment">// 期待是 suxi 可是是 peiqi 原因在于 pig1Proxy get使用的 target是 pig1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Reflect</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pig2Proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(pig1, &#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop, recevier</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop, recevier);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pig3 = &#123;</span><br><span class="line">__proto__: pig2Proxy,</span><br><span class="line">_name: <span class="string">&quot;suxi&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(pig3.name);</span><br></pre></td></tr></table></figure><h3 id="Proxy-的局限性"><code>Proxy</code> 的局限性</h3><p>代理提供了一种独特的方法，可以在最底层更改或调整现有对象的行为。但是并不完美，有局限性</p><h4 id="内建对象-内部插槽-Internal-slot">内建对象: 内部插槽(<code>Internal slot</code>)</h4><p>许多内建对象 <code>Map</code> <code>Set</code> <code>Date</code> <code>Promise</code> 等都使用了内部插槽。例如 <code>Map</code> 对象将项目 <code>item</code> 存储在 <code>[[MapData]]</code> 中。内建方法可以直接访问它们，而不通过 <code>[[Get]]/[[Set]]</code> 内部方法。所以 <code>Proxy</code> 无法拦截它们</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">let</span> proxy1 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(map1, &#123;&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 在内部，一个 Map 将所有数据存储在其 [[MapData]] 内部插槽中。代理对象没有这样的插槽。内建方法 Map.prototype.set 方法试图访问内部属性 this.[[MapData]]，但由于 this=proxy，在 proxy 中无法找到它，只能失败</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">proxy1.set(<span class="string">&quot;test&quot;</span>, <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还有一种解决方法</span></span><br><span class="line"><span class="keyword">let</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy2 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(map2, &#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop, recevier</span>)</span> &#123;</span><br><span class="line"><span class="comment">// 这是一种简写方式</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span> ? value.bind(target) : value</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy2.set(<span class="string">&quot;test&quot;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(proxy2.get(<span class="string">&quot;test&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 这样就正常工作了</span></span><br></pre></td></tr></table></figure><div class="tip "><p><code>Array</code> 没有内部插槽</p><p>内建 <code>Array</code> 没有使用内部插槽。由于历史原因，它出现很久以前，所以代理数组没有这种问题</p></div><h4 id="私有字段">私有字段</h4><p>类的私有字段也会发生类似的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">#name = <span class="string">&quot;suxi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.#name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user3 = <span class="keyword">new</span> User();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyUser3 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user3, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(proxyUser3.getName());</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxyUser4 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(user3, &#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params">target, prop, receiver</span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> value = <span class="built_in">Reflect</span>.get(...arguments);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;function&quot;</span> ? value.bind(target) : value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxyUser4.getName()); <span class="comment">// suxi</span></span><br></pre></td></tr></table></figure><h4 id="proxy-target"><code>proxy</code> !== <code>target</code></h4><p>代理和原始对象是不同的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> allUsers = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">allUsers.add(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(allUsers.has(person2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">person2 = <span class="keyword">new</span> <span class="built_in">Proxy</span>(person2, &#123;&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(allUsers.has(person2)); <span class="comment">// false 找不到了</span></span><br></pre></td></tr></table></figure><div class="tip "><p><code>Proxy</code> 可以拦截许多操作符，例如 <code>new</code> <code>in</code> <code>delete</code> 但是没有办法拦截 <code>===</code> 一个对象只严格等于其自身，没有其他值</p></div><h4 id="可撤销的-Proxy">可撤销的 <code>Proxy</code></h4><p>一个可撤销的代理可以被禁用的代理。假设我们有一个资源，并且想随时关闭对资源的访问。可以包装成一个可撤销的代理 <code>let &#123;proxy, revoke&#125; = Proxy.revocable(target, handler)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> object = &#123;</span><br><span class="line">data: <span class="string">&quot;value data&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; proxy, revoke &#125; = <span class="built_in">Proxy</span>.revocable(object, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proxy.data);</span><br><span class="line"></span><br><span class="line">revoke();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(proxy.data); <span class="comment">// error</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 <code>revoke()</code> 的调用会从代理中删除对目标对象的所有内部引用，因此它们之间再无链接</p><p><code>revoke</code> 和 <code>proxy</code> 是分开的，因此我们可以传递 <code>proxy</code> 同时 <code>revoke</code> 留在当前范围内</p><p>我们可以通过设置 <code>proxy.revoke = revoke</code> 来将 <code>revoke</code> 绑定 <code>proxy</code></p><p>另一种选择是创建一个 <code>WeakMap</code> 其中 <code>proxy</code> 作为键，相应的 <code>revoke</code> 作为值，这样可以轻松的找到 <code>proxy</code> 对应的 <code>revoke</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> revokes = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">data: <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; proxy, revoke &#125; = <span class="built_in">Proxy</span>.revocable(obj, &#123;&#125;);</span><br><span class="line"></span><br><span class="line">revokes.set(proxy, revoke);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> revoke = revokes.get(proxy);</span><br><span class="line"></span><br><span class="line">revoke();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(proxy.data); <span class="comment">// Error</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"><span class="built_in">console</span>.error(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 此处我们使用 WeakMap 而不是 Map，因为它不会阻止垃圾回收。如果一个代理对象变得“不可访问”（例如，没有变量再引用它），则 WeakMap 允许将其与它的 revoke 一起从内存中清除</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/26wcm3?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="26wcm3"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h2 id="响应式基础">响应式基础</h2><h3 id="声明响应式状态">声明响应式状态</h3><h4 id="ref"><code>ref</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> type &#123; Ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(count) <span class="comment">// &#123; value: 0 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">count.value++</span><br><span class="line"><span class="built_in">console</span>.log(count.value) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为Ref 标注类型</span></span><br><span class="line"><span class="comment">// 1. 使用 Ref</span></span><br><span class="line"><span class="keyword">const</span> day: Ref&lt;number&gt; = ref(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 2. 使用泛型</span></span><br><span class="line"><span class="keyword">const</span> year = ref&lt;number&gt;(<span class="number">2024</span>)</span><br><span class="line"><span class="keyword">const</span> month = ref&lt;number&gt;() <span class="comment">// 此处 ref 推导出来是一个联合类型 number | undefined</span></span><br></pre></td></tr></table></figure><p>在组件中访问 <code>ref</code>，需要在 <code>setup()</code> 函数中声明并返回它们，在模版中使用它们是不需要 <code>.value</code> 的，它会自动解包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">count</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;count++&quot;</span>&gt;&#123;&#123; count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;script setup&gt;</code> 中的顶层的导入、声明的变量和函数可在同一组件的模板中直接使用</p><h3 id="深层响应式">深层响应式</h3><p><code>ref</code> 的值具有深层响应式，即便改变深层对象的属性，变化也会被检测到</p><h3 id="DOM-更新时机"><code>DOM</code> 更新时机</h3><p>修改响应式状态时，<code>dom</code> 会自动更新，但是更新不是同步的，<code>vue</code> 在更新周期中缓存所有状态的修改，确保不论进行多少次状态修改，每个组件只更新一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等待 dom 更新完之后再执行的操作 使用全局 API nextTick</span></span><br><span class="line"><span class="keyword">import</span> &#123; nextTick, ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">doSometing</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">count.value++;</span><br><span class="line"><span class="keyword">await</span> nextTick()</span><br><span class="line"><span class="comment">// dom更新后的 操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reactive"><code>reactive</code></h3><p><code>reactive</code> 用来创建响应式对象，使对象本身具有响应式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;);</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;state.count++&quot;</span>&gt;&#123;&#123; state.count &#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive 标注类型</span></span><br><span class="line">interface State &#123;</span><br><span class="line">count: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state: State = reactive(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;);</span><br></pre></td></tr></table></figure><p>代理对象和原对象是不相等的，修改原对象不会触发更新，对于同一对象的 <code>reactive</code> 返回相同的代理对象，这个规则对于深层对象也同样适用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> state = &#123; <span class="attr">count</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">let</span> proxyState = reactive(state);</span><br><span class="line"></span><br><span class="line">proxyState === state <span class="comment">// false</span></span><br><span class="line">reactive(state) === proxyState <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">state.b === proxyState.b <span class="comment">// false</span></span><br><span class="line">reactive(state.b) === proxyState.b <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> row = &#123;&#125;;</span><br><span class="line">proxyState.row = row;</span><br><span class="line"></span><br><span class="line">proxyState.row === row <span class="comment">// false</span></span><br><span class="line">proxyState.row === reactive(row) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="reactive-局限性"><code>reactive</code> 局限性</h4><ol><li>只能用于对象、数据 <code>Map</code> <code>Set</code> 等类型</li><li>不能轻易替换整个响应式对象，这样会导致失去响应式</li><li>将数据解构或传递属性时会失去响应式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = reactive(&#123; <span class="attr">count</span>: <span class="number">1</span> &#125;);</span><br><span class="line">state = reactive(&#123; <span class="attr">count</span>: <span class="number">2</span> &#125;); <span class="comment">// 失去第一个响应式的链接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; count &#125; = state;</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法影响到 state.count</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(state.count) <span class="comment">// 操作无法影响到 state.count</span></span><br></pre></td></tr></table></figure><h3 id="ref-解包"><code>ref</code> 解包</h3><h4 id="作为-reactive-对象的属性">作为 <code>reactive</code> 对象的属性</h4><ol><li>一个 <code>ref</code> 会在作为响应式对象的属性被访问或修改时自动解包</li><li>只有当嵌套在一个深层响应式对象内时，才会发生 <code>ref</code> 解包。当其作为浅层响应式对象的属性被访问时不会解包</li><li>如果将一个新的 <code>ref</code> 赋值给一个关联了已有 <code>ref</code> 的属性，那么它会替换掉旧的 <code>ref</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">count</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(state.count); <span class="comment">// 0</span></span><br><span class="line">count.value++;</span><br><span class="line"><span class="built_in">console</span>.info(state.count); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> count2 = ref(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">state.count = count2;</span><br><span class="line"></span><br><span class="line">count.value++;</span><br><span class="line"><span class="built_in">console</span>.info(count.value); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.info(state.count); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m1 = shallowReactive(&#123; count &#125;);</span><br><span class="line"><span class="built_in">console</span>.info(m1.count.value); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h4 id="数组和集合">数组和集合</h4><p>和 <code>reactive</code> 对象不同的是，当 <code>ref</code> 作为响应式数组或原生集合类型 (如 <code>Map</code>) 中的元素被访问时，它不会被解包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = reactive([ref(<span class="number">0</span>)]);</span><br><span class="line"><span class="built_in">console</span>.info(b[<span class="number">0</span>].value); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = reactive(<span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">[<span class="string">&quot;c&quot;</span>, ref(<span class="number">1</span>)]</span><br><span class="line">]));</span><br><span class="line"><span class="built_in">console</span>.info(c.get(<span class="string">&quot;c&quot;</span>).value); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="在模板中解包">在模板中解包</h4><ol><li>在模板渲染上下文中，只有顶级的 <code>ref</code> 属性才会被解包</li><li>如果 <code>ref</code> 是文本插值的最终计算值 (即 <code>&#123;&#123; &#125;&#125;</code> 标签)，那么它将被解包</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn1 = ref(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">const</span> fn2 = &#123; <span class="attr">a</span>: ref(<span class="number">2</span>) &#125;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; fn1 &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; fn2.a &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; fn2.a + <span class="number">1</span> &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&#123;&#123; fn2.a.value + <span class="number">1</span> &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_azooYzr" src="//codepen.io/milkdue/embed/azooYzr?height=300&theme-id=dark&slug-hash=azooYzr&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="计算属性">计算属性</h2><ol><li><code>computed</code> 返回一个计算属性 <code>ref</code>，模版中直接解包。<code>vue</code> 计算属性自动追踪响应式依赖，并缓存计算值</li><li><code>computed</code> 在首次访问时才会计算，后续仅会在其响应式依赖更新时才重新计算</li><li><code>computed</code> 相对方法来说，方法会在每次 <code>render</code> 的时候重复执行，而 <code>computed</code> 只会在依赖更新时重新执行</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> author = reactive(&#123;</span><br><span class="line">name: <span class="string">&quot;suxi&quot;</span>,</span><br><span class="line">books: [</span><br><span class="line"><span class="string">&quot;111&quot;</span>,</span><br><span class="line"><span class="string">&quot;222&quot;</span></span><br><span class="line">]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publish = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> author.books.length;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行顺序</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed, reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = reactive(&#123;</span><br><span class="line">count: <span class="number">0</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publish = computed(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;computed&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> state.count;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.info(publish.value); <span class="comment">// computed 0</span></span><br><span class="line"><span class="built_in">console</span>.info(publish.value); <span class="comment">// 0</span></span><br><span class="line">state.count++; <span class="comment">// computed</span></span><br><span class="line"><span class="built_in">console</span>.info(publish.value); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">&quot;222222&quot;</span>) <span class="comment">// 2222</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型指定 computed 类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> publish2 = computed&lt;number&gt;(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> state.count;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="可写的计算属性">可写的计算属性</h3><ol><li>计算属性默认是只读的</li><li>计算属性不应该有副作用，副作用应由监听器根据响应式状态的变更来创建副作用<ul><li>不应改变其他状态</li><li>不应做异步请求</li><li>不应更改dom</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> firstName = ref(<span class="string">&quot;Pei&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> lastName = ref(<span class="string">&quot;Qi&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fullName = computed(&#123;</span><br><span class="line"><span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> firstName + <span class="string">&quot;-&quot;</span> + lastName;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line"><span class="keyword">let</span> [first, last] = value.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">firstName.value = first;</span><br><span class="line">lastName.value = last;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><iframe id="cp_embed_NPKKQBQ" src="//codepen.io/milkdue/embed/NPKKQBQ?height=300&theme-id=dark&slug-hash=NPKKQBQ&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="类和样式绑定">类和样式绑定</h2><h3 id="绑定对象、数组、字符串">绑定对象、数组、字符串</h3><ol><li>对 <code>class</code> 绑定对象，如果对象 <code>key</code> 对应的 <code>value</code> 为真值，则添加值为 <code>key</code> 的类</li><li>对 <code>style</code> 绑定对象，则对象的 <code>key</code> 需要是 <code>cssProperty</code> 形式的字符串，否则会被忽略</li><li>对 <code>class</code> 绑定数组，则是数组或者对象数组则是对应值或对应 <code>key</code> 作为类名添加</li><li>对 <code>style</code> 绑定一个包含多个样式对象的数组，这些对象会合并后渲染到元素上</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> errorClass = ref(<span class="string">&quot;validate-error&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> activeClass = ref(<span class="string">&quot;active&quot;</span>);</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;&#123; active: true &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;[&#123; active: true &#125;, errorClass]&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :style=<span class="string">&quot;&#123; fontSize: &#x27;12px&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="组件中的-class">组件中的 <code>class</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Component组件</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fn1 fn2&quot;</span>&gt;ffff&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;Component <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fn3 fn4&quot;</span>&gt;&lt;/Component&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果</span></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fn1 fn2 fn3 fn4&quot;</span>&gt;ffff&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果组件中有多个根元素，则需要指定哪个根元素接受这个 class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Component组件</span></span><br><span class="line">&lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;$attrs.class&quot;</span>&gt;fff&lt;/div&gt;</span><br><span class="line">&lt;span&gt;<span class="number">11111</span>&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;Component <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fn3 fn4&quot;</span>&gt;&lt;/Component&gt;</span><br><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;fn3 fn4&quot;</span>&gt;fff&lt;/div&gt;</span><br><span class="line">&lt;span&gt;<span class="number">11111</span>&lt;/span&gt;</span><br></pre></td></tr></table></figure><h3 id="绑定内联样式">绑定内联样式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div :style=<span class="string">&quot;&#123; fontSize: &#x27;12px&#x27; &#125;&quot;</span>&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line">&lt;div :style=<span class="string">&quot;&#123; &#x27;font-size&#x27;: &#x27;22px&#x27; &#125;&quot;</span>&gt;<span class="number">2</span>&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div :style=<span class="string">&quot;[ &#123;&#x27;font-size&#x27;: &#x27;12px&#x27; &#125;, &#123; color: &#x27;red&#x27; &#125; ]&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>自动前缀，当 <code>style</code> 中使用了需要浏览器特殊前缀的 <code>css</code> 属性时，<code>vue</code> 会自动添加</p><p>样式多值，可以对一个属性提供多个(不同前缀的)值，数组会渲染浏览器支持的最后一个值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_OPLJjdq" src="//codepen.io/milkdue/embed/OPLJjdq?height=300&theme-id=dark&slug-hash=OPLJjdq&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="条件渲染">条件渲染</h2><h3 id="v-if-v-else"><code>v-if</code> <code>v-else</code></h3><ol><li>有条件的渲染一块内容</li><li>如果有多个块同时需要限制，可以将 <code>v-if</code> 使用在 <code>template</code> 上</li><li><code>v-else</code> 只能配合 <code>v-if</code> <code>v-else-if</code> 使用，不能单独出现</li></ol><h3 id="v-show"><code>v-show</code></h3><ol><li>有条件的显示一块内容</li><li>只是切换了 <code>css</code> 的 <code>display</code> 属性</li><li><code>v-show</code> 不可使用在 <code>template</code> 上，也不可以和 <code>v-else</code> 配合使用</li></ol><h3 id="区别">区别</h3><ol><li><code>v-if</code> 是按条件渲染，如果是 <code>false</code> 不会做任何事，切换时，条件区块中的监听器和子组件都会销毁和重建</li><li><code>v-show</code> 是一开始就渲染，切换时，只是切换了 <code>css</code> 的 <code>display</code> 属性</li><li><code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销，频繁切换使用 <code>v-show</code> 较好，反之使用 <code>v-if</code> 较好</li></ol><h3 id="注意">注意</h3><ol><li><code>v-if</code> 不推荐和 <code>v-for</code> 同时使用</li><li>如果同时存在，<code>v-if</code> 优先级更高</li></ol><iframe id="cp_embed_XJrWeKe" src="//codepen.io/milkdue/embed/XJrWeKe?height=300&theme-id=dark&slug-hash=XJrWeKe&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="列表渲染">列表渲染</h2><h3 id="v-for"><code>v-for</code></h3><ol><li><code>v-for=&quot;item in items&quot;</code> <code>v-for=&quot;(item, index) in items&quot;</code> 迭代渲染</li><li>也可以使用 <code>of</code> 替代 <code>in</code></li><li><code>v-for</code> 遍历对象时，第一个参数时是 <code>value</code> 第二个参数是 <code>key</code> 第三个参数是 <code>index</code> <code>v-for=&quot;(value, key, index) in obj&quot;</code> 遍历的顺序是基于 <code>Object.values(obj)</code> 的顺序决定的</li><li><code>v-for</code> 中使用范围值是从 <code>1-n</code> 的 <code>v-for=&quot;item in 10&quot;</code> 1 - 10 初值是 1 而非 0</li><li>当有多个块需要循环渲染时，可以在 <code>template</code> 上使用 <code>v-for</code></li><li><code>v-if</code> 和 <code>v-for</code> 同时使用是不推荐的，如果同时使用 <code>v-if</code> 的优先级会更高，这意味着 <code>v-if</code> 中无法使用 <code>v-for</code> 中的变量 <code>v-for=&quot;item in items&quot; v-if=&quot;item.show&quot;</code></li><li>使用 <code>v-for</code> 时推荐使用 <code>key</code> 属性，<code>template</code> 上使用 <code>v-for</code> 时，<code>key</code> 应该被放置在这个 <code>template</code> 容器上，<code>key</code> 绑定的应该是基础类型的值 <code>number</code> 或 <code>string</code></li></ol><h2 id="事件处理">事件处理</h2><ol><li>内联事件处理器是在模版中直接使用表达式</li><li>方法事件处理器 <code>v-on</code> 一个方法</li><li><code>v-on=&quot;fo()&quot;</code> 是一个内联事件处理器</li><li>在内联处理器中调用方法可以向方法传入自定义参数来代替原生事件对象</li><li>在内联事件中访问原生的 dom 事件，可以向处理器传入 <code>$event</code></li><li>事件修饰符<ul><li><code>.stop</code> 阻止事件冒泡 <code>event.stopPropagation()</code></li><li><code>.prevent</code> 阻止默认行为 <code>event.preventDefault()</code></li><li><code>.self</code> 仅当 <code>event.target</code> 是元素本身时才会触发事件处理器</li><li><code>.capture</code> 指向内部元素的事件，在被内部元素处理前，先被外部处理</li><li><code>.once</code> 事件处理器只触发一次</li><li><code>.passive</code> 首先触发默认行为，然后再触发事件处理器 所以和 <code>.prevent</code> 不能同时使用</li></ul></li><li>按键修饰符<ul><li><code>@keyup.enter=&quot;enterEvent&quot;</code></li><li><code>.enter</code> 回车事件</li><li><code>.tab</code> <code>tab</code> 键事件</li><li><code>.delete</code> 捕获 delete 和 backspace 按键</li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ul></li><li>系统按键修饰符<ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code> <code>mac</code> 中是 <code>command</code> <code>window</code> 中是 <code>win</code></li></ul></li><li><code>.exact</code> 修饰符<ul><li>允许精确控制触发事件所需要的系统修饰符组合</li></ul></li><li>鼠标按钮修饰符 限定为特定鼠标按键触发的事件<ul><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> count = ref(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&lt;button @click=<span class="string">&quot;count++&quot;</span>&gt;Add&lt;/button&gt;</span><br><span class="line">&lt;p&gt;Count -&gt; &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">count.value++;</span><br><span class="line"><span class="built_in">console</span>.info(event.target.tagName);</span><br><span class="line">&#125;</span><br><span class="line">&lt;button @click=<span class="string">&quot;add&quot;</span>&gt;Add&lt;/button&gt;</span><br><span class="line">&lt;p&gt;Count -&gt; &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;button @click=<span class="string">&quot;count++&quot;</span>&gt;Add +&lt;/button&gt;</span><br><span class="line">&lt;p&gt;Count -&gt; &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;button @click=<span class="string">&quot;add&quot;</span>&gt;Add -&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单击事件将停止传递 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件将不再重新加载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰语可以使用链式书写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 也可以只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当 event.target 是元素本身时才会触发事件处理器 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如：事件处理器不来自子元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.self</span>=<span class="string">&quot;doThat&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件监听器时，使用 `capture` 捕获模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 例如：指向内部元素的事件，在被内部元素处理前，先被外部处理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.capture</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击事件最多被触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 滚动事件的默认行为 (scrolling) 将立即发生而非等待 `onScroll` 完成 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 以防其中包含 `event.preventDefault()` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">scroll.passive</span>=<span class="string">&quot;onScroll&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅在 `key` 为 `Enter` 时调用 `submit` --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Alt + Enter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.alt.enter</span>=<span class="string">&quot;clear&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Alt + 点击 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> @<span class="attr">click.alt</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>Do something<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当按下 Alt 时，即使同时按下 Ctrl 或 Shift 也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.alt</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当按下 Alt 且未按任何其他键时才会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.alt.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 仅当没有按下任何系统按键时触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_ogvXaep" src="//codepen.io/milkdue/embed/ogvXaep?height=300&theme-id=dark&slug-hash=ogvXaep&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="表单输入绑定">表单输入绑定</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">:value=<span class="string">&quot;text&quot;</span></span><br><span class="line">@input=<span class="string">&quot;text = $event.target.value&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; 简写</span></span><br><span class="line">&lt;input</span><br><span class="line">v-model=<span class="string">&quot;text&quot;</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ol><li><code>v-model</code> 用于不同类型的输入，<code>textarea</code> <code>select</code> 等元素<ul><li><code>text</code> <code>textarea</code> 元素会绑定 <code>value</code> 并监听 <code>input</code> 事件</li><li><code>checkbox</code> <code>radio</code> 元素会绑定 <code>checked</code> 并监听 <code>change</code> 事件</li><li><code>select</code> 会绑定 <code>value</code> 并监听 <code>change</code> 事件</li></ul></li><li><code>v-model</code> 会忽略表单元素上初始化的 <code>value</code> 等属性，它将始终将当前绑定的值作为数据的正确来源</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;input v-model=<span class="string">&quot;message&quot;</span> placeholder=<span class="string">&quot;edit me&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;span&gt;Multiline message is:&lt;/span&gt;</span><br><span class="line">&lt;p style=<span class="string">&quot;white-space: pre-line;&quot;</span>&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;textarea v-model=<span class="string">&quot;message&quot;</span> placeholder=<span class="string">&quot;add multiple lines&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;checked&quot;</span> /&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;checkbox&quot;</span>&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定值 (value) 为数组</span></span><br><span class="line"><span class="keyword">const</span> checkedNames = ref([])</span><br><span class="line"></span><br><span class="line">&lt;div&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;jack&quot;</span> value=<span class="string">&quot;Jack&quot;</span> v-model=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;jack&quot;</span>&gt;Jack&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;john&quot;</span> value=<span class="string">&quot;John&quot;</span> v-model=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;john&quot;</span>&gt;John&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;checkbox&quot;</span> id=<span class="string">&quot;mike&quot;</span> value=<span class="string">&quot;Mike&quot;</span> v-model=<span class="string">&quot;checkedNames&quot;</span> /&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;mike&quot;</span>&gt;Mike&lt;/label&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;radio&quot;</span> id=<span class="string">&quot;one&quot;</span> value=<span class="string">&quot;One&quot;</span> v-model=<span class="string">&quot;picked&quot;</span> /&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;one&quot;</span>&gt;One&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;radio&quot;</span> id=<span class="string">&quot;two&quot;</span> value=<span class="string">&quot;Two&quot;</span> v-model=<span class="string">&quot;picked&quot;</span> /&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">&quot;two&quot;</span>&gt;Two&lt;/label&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 v-model 表达式的初始值不匹配任何一个选择项，&lt;select&gt; 元素会渲染成一个“未选择”的状态。在 iOS 上，这将导致用户无法选择第一项，因为 iOS 在这种情况下不会触发一个 change 事件，所以建议提供一个空值的禁用选项</span></span><br><span class="line">&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;select v-model=<span class="string">&quot;selected&quot;</span>&gt;</span><br><span class="line">  &lt;option disabled value=<span class="string">&quot;&quot;</span>&gt;Please select one&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;select v-model=<span class="string">&quot;selected&quot;</span> multiple&gt;</span><br><span class="line">  &lt;option&gt;A&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;B&lt;/option&gt;</span><br><span class="line">  &lt;option&gt;C&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- `picked` 在被选择时是字符串 &quot;a&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;picked&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `toggle` 只会为 true 或 false --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;toggle&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `selected` 在第一项被选中时为字符串 &quot;abc&quot; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;selected&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;abc&quot;</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修饰符-2">修饰符</h3><ol><li><code>.lazy</code><ul><li>默认情况下，<code>v-model</code> 在 <code>input</code> 事件触发后更新数据，<code>.lazy</code> 可以修改为 <code>change</code> 事件触发后更新数据</li></ul></li><li><code>.number</code><ul><li>自动转换为数字</li><li>如果值无法被 <code>parseFloat</code> 处理会返回原始值</li><li><code>number</code> 修饰符会在输入框有 <code>type=&quot;number&quot;</code> 时自动启用</li></ul></li><li><code>.trim</code><ul><li>自动去除首尾空格</li></ul></li></ol><iframe id="cp_embed_MYgeOOw" src="//codepen.io/milkdue/embed/MYgeOOw?height=300&theme-id=dark&slug-hash=MYgeOOw&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="生命周期">生命周期</h2><h3 id="注册生命周期钩子">注册生命周期钩子</h3>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端seo优化</title>
      <link href="b93230bc/"/>
      <url>b93230bc/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>SEO 即搜索引擎优化，比较重要的地方，网页 title 标题，description 网站说明以及 keywords 关键字。良好的 seo 利于搜索引擎更快识别页面内容，对页面进行收录，对于网站运营者来说，可以提升点击和分发的效率，提升网站排名流量，进而带来转化。</p></div><h2 id="title-标签">title 标签</h2><ol><li>强调重点，重要关键字不要超过两次，并且要靠前</li><li>每个页面的 <code>title</code> 应该有所不同</li><li>简洁、准确突出品牌</li><li>权重最大</li></ol><h2 id="description-标签">description 标签</h2><ol><li>网页的摘要内容</li><li>填写与页面最相关的最重要的内容</li><li>每个网页都应有描述</li><li>权重次之</li></ol><h2 id="keyword-标签">keyword 标签</h2><ol><li>权重最小的标签</li><li>已不是搜索引擎排名的重要因素</li><li>仍然可以列举与页面内容相关的几个重要关键词</li></ol><h2 id="其他优化">其他优化</h2><ol><li>使用语义化标签，符合 <code>w3c</code> 规范，让搜索引擎更容易理解页面的结构和内容</li><li>重要的内容写在前面，搜索引擎是从上到小抓取，且长度有限制，将重要的内容放在前面，搜索引擎可以更准确的抓取</li><li>重要的内容不用 <code>js</code> 输出，爬虫不会执行 <code>JavaScript</code> 所以重要的内容不应该依赖 <code>js</code> 动态输出，而应该使用 <code>html</code> 静态输出</li><li>少用 <code>iframe</code>，搜索引擎通常不会抓取 <code>iframe</code> 中的内容，所以需要减少 <code>iframe</code> 标签的使用，重要内容不用 <code>iframe</code></li><li>非装饰性的图片必须加 <code>alt</code>，为非装饰性的图片添加 <code>alt</code> 属性，可以为搜索引擎提供关于图片内容的描述，有助于可访问性</li><li>提高网站速度，网站速度也是搜索引擎排序的一个重要指标</li></ol><h2 id="栗子">栗子</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;京东JD.COM-专业的综合网上购物商城，为您提供正品低价的购物选择、优质便捷的服务体验。商品来自全球数十万品牌商家，囊括家电、手机、电脑、服装、居家、母婴、美妆、个护、食品、生鲜等丰富品类，满足各种购物需求。&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网上购物,网上商城,家电,手机,电脑,服装,居家,母婴,美妆,个护,食品,生鲜,京东&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习</title>
      <link href="800507c2/"/>
      <url>800507c2/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构">数据结构</h2><ol><li>数据结构在物理上分为连续和分散结构，在逻辑上分为线性和非线性结构</li></ol><h2 id="数组">数组</h2><h3 id="初始化数组">初始化数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化长度为5的数组，并填充0</span></span><br><span class="line"><span class="keyword">let</span> array = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>).fill(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array);</span><br></pre></td></tr></table></figure><h3 id="访问数组元素">访问数组元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问随机元素</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">5</span>)]);</span><br></pre></td></tr></table></figure><h3 id="插入数组元素">插入数组元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元素后移动</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params">array, index, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; array.length) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = array[i];</span><br><span class="line">        array[i] = item;</span><br><span class="line">        item = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addItem</span>(<span class="params">array, index, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; array.length) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = array.length - <span class="number">1</span>; i &gt; index; i--) &#123;</span><br><span class="line">        array[i] = array[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    array[index] = item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除元素">删除元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="comment">// 删除元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeItem</span>(<span class="params">array, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= array.length) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        array[i] = array[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="遍历数组">遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组</span></span><br><span class="line">array.forEach(<span class="function"><span class="params">item</span> =&gt;</span> item);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> array) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找元素">查找元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找元素</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">array, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> array) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i === item) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findIndex</span>(<span class="params">array, item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i] === item) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="链表">链表</h2><h3 id="链表结构">链表结构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    val;</span><br><span class="line">    next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">val, next</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.val = val || <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.next = next || <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化链表">初始化链表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = <span class="keyword">new</span> ListNode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> temp = node;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    temp.next = <span class="keyword">new</span> ListNode(i);</span><br><span class="line">    temp = temp.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入节点">插入节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">p0, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> next = p0.next;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">    p0.next = node;</span><br><span class="line">    node.next = next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除节点">删除节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除no之后的首个节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">p0</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p0.next) &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = p0.next;</span><br><span class="line">        p0.next = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找节点">查找节点</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">head, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (head === target) &#123;</span><br><span class="line">            <span class="keyword">return</span> index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        index++;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈">栈</h2><h3 id="栈的特点及其简单实现">栈的特点及其简单实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先进先出</span></span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line">stack.push(<span class="number">1</span>);</span><br><span class="line">stack.push(<span class="number">2</span>);</span><br><span class="line">stack.push(<span class="number">3</span>);</span><br><span class="line">stack.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line">stack.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问栈顶元素</span></span><br><span class="line">stack[stack.length - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈的大小</span></span><br><span class="line">stack.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line">stack.length === <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="链表实现栈">链表实现栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListStack</span> </span>&#123;</span><br><span class="line">    #stackPeek; <span class="comment">// 栈顶元素</span></span><br><span class="line">    #stackSize; <span class="comment">// 栈大小</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#stackPeek = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.#stackSize = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#stackSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        node.next = <span class="built_in">this</span>.#stackPeek;</span><br><span class="line">        <span class="built_in">this</span>.#stackPeek = node;</span><br><span class="line">        <span class="built_in">this</span>.#stackSize++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.peek();</span><br><span class="line">        <span class="built_in">this</span>.#stackPeek = <span class="built_in">this</span>.#stackPeek.next;</span><br><span class="line">        <span class="built_in">this</span>.#stackSize--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.#stackPeek) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;栈为空&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#stackPeek.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#stackSize === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">toArray</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="built_in">this</span>.#stackPeek;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">this</span>.size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.size; i++) &#123;</span><br><span class="line">            result[i] = node.val;</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组实现栈">数组实现栈</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span> </span>&#123;</span><br><span class="line">    #stack;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#stack = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#stack.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#stack.push(val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;栈为空&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#stack.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;栈为空&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#stack[<span class="built_in">this</span>.size - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">toArray</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#stack;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列">队列</h2><ol><li>先进先出</li></ol><h3 id="初始化队列">初始化队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入队</span></span><br><span class="line">queue.push(<span class="number">1</span>);</span><br><span class="line">queue.push(<span class="number">3</span>);</span><br><span class="line">queue.push(<span class="number">5</span>);</span><br><span class="line">queue.push(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问队首元素</span></span><br><span class="line"><span class="built_in">console</span>.log(queue[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 出队</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.shift());</span><br><span class="line"><span class="comment">// 队列长度</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.length);</span><br><span class="line"><span class="comment">// 队列是否为空</span></span><br><span class="line"><span class="built_in">console</span>.log(queue.length === <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h3 id="链表实现队列">链表实现队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">    #front; <span class="comment">// 头节点</span></span><br><span class="line">    #rear; <span class="comment">// 尾节点</span></span><br><span class="line">    #size; <span class="comment">// 长度</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#front = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.#rear = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.#size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.#front === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.#front = node;</span><br><span class="line">            <span class="built_in">this</span>.#rear = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.#rear.next = node;</span><br><span class="line">            <span class="built_in">this</span>.#rear = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#size === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.peek();</span><br><span class="line">        <span class="built_in">this</span>.#front = <span class="built_in">this</span>.#front.next;</span><br><span class="line">        <span class="built_in">this</span>.#size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列为空&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#front.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">toArray</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="built_in">this</span>.#front;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(node !== <span class="literal">null</span>) &#123;</span><br><span class="line">            result.push(node.val);</span><br><span class="line">            node = node.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组实现队列">数组实现队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</span><br><span class="line">    #nums;</span><br><span class="line">    #front = <span class="number">0</span>; <span class="comment">// 队首</span></span><br><span class="line">    #rear = <span class="number">0</span>; <span class="comment">// 队尾</span></span><br><span class="line">    #size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">capacity</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#nums = <span class="keyword">new</span> <span class="built_in">Array</span>(capacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">capacity</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#nums.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#size === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">isFull</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size === <span class="built_in">this</span>.capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isFull()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列已满&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.#front === <span class="built_in">this</span>.#rear) &#123;</span><br><span class="line">            <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#front] = <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#rear] = val;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#rear] = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.#rear++;</span><br><span class="line">        <span class="built_in">this</span>.#rear %= <span class="built_in">this</span>.capacity;</span><br><span class="line">        <span class="built_in">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">peek</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列已满&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.peek();</span><br><span class="line">        <span class="built_in">this</span>.#front = (<span class="built_in">this</span>.#front + <span class="number">1</span>) % <span class="built_in">this</span>.capacity;</span><br><span class="line">        <span class="built_in">this</span>.#size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">toArray</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.#size; i++) &#123;</span><br><span class="line">            result.push(<span class="built_in">this</span>.#nums[(<span class="built_in">this</span>.#front + i) % <span class="built_in">this</span>.capacity]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双向队列">双向队列</h2><h3 id="初始化双向队列">初始化双向队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deque = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队尾元素入队</span></span><br><span class="line">deque.push(<span class="number">1</span>);</span><br><span class="line">deque.push(<span class="number">3</span>);</span><br><span class="line">deque.push(<span class="number">5</span>);</span><br><span class="line">deque.push(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队首元素入队</span></span><br><span class="line">deque.unshfit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队首元素</span></span><br><span class="line"><span class="built_in">console</span>.log(deque[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// 队尾元素</span></span><br><span class="line"><span class="built_in">console</span>.log(deque[deque.length - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队首元素出队</span></span><br><span class="line">deque.shfit();</span><br><span class="line"><span class="comment">// 队尾元素出队</span></span><br><span class="line">deque.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列长度</span></span><br><span class="line"><span class="built_in">console</span>.log(deque.lengths)</span><br></pre></td></tr></table></figure><h3 id="链表实现双向队列">链表实现双向队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    prev;</span><br><span class="line">    next;</span><br><span class="line">    val;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListDeque</span> </span>&#123;</span><br><span class="line">    #front;</span><br><span class="line">    #rear;</span><br><span class="line">    #size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#front = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.#rear = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.#size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get size () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加队首元素</span></span><br><span class="line">    <span class="function"><span class="title">pushFirst</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.#front = node;</span><br><span class="line">            <span class="built_in">this</span>.#rear = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.#front.prev = node;</span><br><span class="line">            node.next = <span class="built_in">this</span>.#front;</span><br><span class="line">            <span class="built_in">this</span>.#front = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加队尾元素</span></span><br><span class="line">    <span class="function"><span class="title">pushLast</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.#front = node;</span><br><span class="line">            <span class="built_in">this</span>.#rear = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.#rear.next = node;</span><br><span class="line">            node.prev = <span class="built_in">this</span>.#rear;</span><br><span class="line">            <span class="built_in">this</span>.#rear = node;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队首元素</span></span><br><span class="line">    <span class="function"><span class="title">peekFirst</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列为空&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#front.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队尾元素</span></span><br><span class="line">    <span class="function"><span class="title">peekLast</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列为空&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#rear.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队首出列</span></span><br><span class="line">    <span class="function"><span class="title">popFirst</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.peekFirst();</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="built_in">this</span>.#front.next;</span><br><span class="line">        <span class="keyword">if</span> (temp !== <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.prev = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.#front.next = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.#front = temp;</span><br><span class="line">        <span class="built_in">this</span>.#size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 队尾出列</span></span><br><span class="line">    <span class="function"><span class="title">popLast</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.peekLast();</span><br><span class="line">        <span class="keyword">const</span> temp = <span class="built_in">this</span>.#rear.prev;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (temp !== <span class="literal">null</span>) &#123;</span><br><span class="line">            temp.next = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.#rear.prev = <span class="literal">null</span>;</span><br><span class="line">        <span class="built_in">this</span>.#rear = temp;</span><br><span class="line">        <span class="built_in">this</span>.#size--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="function"><span class="title">toArray</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="built_in">this</span>.#front;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(temp !== <span class="literal">null</span>) &#123;</span><br><span class="line">            result.push(temp.val);</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组实现双向队列">数组实现双向队列</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayDeque</span> </span>&#123;</span><br><span class="line">    #nums;</span><br><span class="line">    #front;</span><br><span class="line">    #rear;</span><br><span class="line">    #size;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">capacity</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#nums = <span class="keyword">new</span> <span class="built_in">Array</span>(capacity);</span><br><span class="line">        <span class="built_in">this</span>.#front = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.#rear = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.#size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">capacity</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#nums.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">size</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#size;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">isEmpty</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size === <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">isFull</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.size === <span class="built_in">this</span>.capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">index</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (index + <span class="built_in">this</span>.capacity) % <span class="built_in">this</span>.capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">pushFirst</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isFull()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列已满&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#front] = val;</span><br><span class="line">            <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#rear] = val;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.#front = <span class="built_in">this</span>.index(<span class="built_in">this</span>.#front - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#front] = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">pushLast</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isFull()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列已满&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#front] = val;</span><br><span class="line">            <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#rear] = val;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.#rear = <span class="built_in">this</span>.index(<span class="built_in">this</span>.#rear + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#rear] = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">peekFirst</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列为空&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">peekLast</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;队列为空&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#nums[<span class="built_in">this</span>.#rear];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">popFirst</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.peekFirst();</span><br><span class="line">        <span class="built_in">this</span>.#front = <span class="built_in">this</span>.index(<span class="built_in">this</span>.#front + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.#size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">popLast</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = <span class="built_in">this</span>.peekLast();</span><br><span class="line">        <span class="built_in">this</span>.#rear = <span class="built_in">this</span>.index(<span class="built_in">this</span>.#rear - <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.#size--;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">toArray</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.size; i++) &#123;</span><br><span class="line">            result.push(<span class="built_in">this</span>.#nums[<span class="built_in">this</span>.index(<span class="built_in">this</span>.#front + i)]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="哈希表">哈希表</h2><h3 id="哈希表常用操作">哈希表常用操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map.set(<span class="number">1283</span>, <span class="number">10</span>);</span><br><span class="line">map.set(<span class="number">175</span>, <span class="number">18</span>);</span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">888</span>);</span><br><span class="line"></span><br><span class="line">map.get(<span class="number">1</span>);</span><br><span class="line">map.delete(<span class="number">1283</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k, <span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(v, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(k, <span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v, <span class="string">&#x27;value&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表简单实现">哈希表简单实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span> </span>&#123;</span><br><span class="line">    key;</span><br><span class="line">    value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = key;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashMap</span> </span>&#123;</span><br><span class="line">    #buckets;</span><br><span class="line"></span><br><span class="line">    <span class="title">constructor</span> (<span class="params">capacity</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.#buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(capacity).fill(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> MODULE = <span class="number">100</span>;</span><br><span class="line">    #<span class="function"><span class="title">hash</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key % HashMap.MODULE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.#hash(key);</span><br><span class="line">        <span class="keyword">let</span> pair = <span class="built_in">this</span>.#buckets[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> !== pair) &#123;</span><br><span class="line">            <span class="keyword">return</span> pair.value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.#hash(key);</span><br><span class="line">        <span class="built_in">this</span>.#buckets[index] = <span class="keyword">new</span> Pair(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">delete</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.#hash(key);</span><br><span class="line">        <span class="built_in">this</span>.#buckets[index] = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">entries</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> bucket <span class="keyword">of</span> <span class="built_in">this</span>.#buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucket) &#123;</span><br><span class="line">                result.push(bucket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">keys</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> bucket <span class="keyword">of</span> <span class="built_in">this</span>.#buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucket) &#123;</span><br><span class="line">                result.push(bucket.key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">values</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> bucket <span class="keyword">of</span> <span class="built_in">this</span>.#buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucket) &#123;</span><br><span class="line">                result.push(bucket.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> bucket <span class="keyword">of</span> <span class="built_in">this</span>.#buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bucket) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(bucket.key + <span class="string">&#x27;=&gt;&#x27;</span> + bucket.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈希冲突与扩容">哈希冲突与扩容</h3><ol><li>对于下面两个 <code>key</code> 来说，通过 <code>hash</code> 函数处理后的 <code>key</code> 值是相同的就出现了 <code>hash</code> 冲突</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1136 % 100</span><br><span class="line">1436 % 100</span><br></pre></td></tr></table></figure><ol start="2"><li>负载因子是哈希表的一个重要概念，其定义为哈希表的数量除以桶的数量，用于衡量哈希冲突的严重程度，也常被作为哈希表扩容的触发条件</li></ol><h3 id="哈希冲突的几种解决方案">哈希冲突的几种解决方案</h3><ol><li>链式寻址</li><li>开放寻址<ul><li>平方探测</li><li>多次哈希</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 链式寻址</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashMap</span> </span>&#123;</span><br><span class="line">    #size; <span class="comment">// 数量</span></span><br><span class="line">    #capacity; <span class="comment">// 容量</span></span><br><span class="line">    #loadThres; <span class="comment">// 负载因子阈值</span></span><br><span class="line">    #extendRatio; <span class="comment">// 扩容倍数</span></span><br><span class="line">    #buckets; <span class="comment">// 桶</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#size = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.#capacity = <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">this</span>.#loadThres = <span class="number">2.0</span> / <span class="number">3.0</span>;</span><br><span class="line">        <span class="built_in">this</span>.#extendRatio = <span class="number">2</span>;</span><br><span class="line">        <span class="built_in">this</span>.#buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">this</span>.#capacity).fill(<span class="literal">null</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> []);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="function"><span class="title">hash</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key % <span class="built_in">this</span>.#capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="function"><span class="title">loadFactor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.#size / <span class="built_in">this</span>.#capacity</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #<span class="function"><span class="title">extend</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.#capacity *= <span class="built_in">this</span>.#extendRatio;</span><br><span class="line">        <span class="keyword">let</span> tempBuckets = <span class="built_in">this</span>.#buckets;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.#buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">this</span>.#capacity).fill(<span class="literal">null</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> []);</span><br><span class="line">        <span class="built_in">this</span>.#size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> bucket <span class="keyword">of</span> tempBuckets) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">                <span class="built_in">this</span>.put(pair.key, pair.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.#hash(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> buckets = <span class="built_in">this</span>.#buckets[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key === key) &#123;</span><br><span class="line">                <span class="keyword">return</span> pair.value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">put</span>(<span class="params">key, value</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.#loadFactor() &gt; <span class="built_in">this</span>.#loadThres) &#123;</span><br><span class="line">            <span class="built_in">this</span>.#extend()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.#hash(key);</span><br><span class="line">        <span class="keyword">let</span> buckets = <span class="built_in">this</span>.#buckets[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> buckets) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pair.key === key) &#123;</span><br><span class="line">                pair.value = value;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> pair = <span class="keyword">new</span> Pair(key, value);</span><br><span class="line">        buckets.push(pair);</span><br><span class="line">        <span class="built_in">this</span>.#size++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">remove</span>(<span class="params">key</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.#hash(key);</span><br><span class="line">        <span class="keyword">let</span> buckets = <span class="built_in">this</span>.#buckets[index];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> pairIndex = buckets.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item.key === key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pairIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">            buckets.splice(pairIndex, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">this</span>.#size--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">print</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> bucket <span class="keyword">of</span> <span class="built_in">this</span>.#buckets) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> pair <span class="keyword">of</span> bucket) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(pair.key + <span class="string">&#x27; =&gt; &#x27;</span> + pair.value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>js操作dom</title>
      <link href="c9cc43d6/"/>
      <url>c9cc43d6/</url>
      
        <content type="html"><![CDATA[<h2 id="删除-dom">删除 <code>dom</code></h2><ol><li><code>el.remove()</code><ul><li>大部分浏览器都支持该用法 <code>full support</code></li></ul></li><li><code>el.parentNode.removeChild(el)</code><ul><li>大部分浏览器都支持该用法 <code>full support</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// remove polyfill</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    arr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.hasOwnProperty(<span class="string">&quot;remove&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Object</span>.defineProprety(item, <span class="string">&#x27;remove&#x27;</span>, &#123;</span><br><span class="line">            configurable: <span class="literal">true</span>,</span><br><span class="line">            enumerable: <span class="literal">true</span>,</span><br><span class="line">            writable: <span class="literal">true</span>,</span><br><span class="line">            value: <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.parentNode.removeChild(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)([Element.prototype, CharacterData.prototype, DocumentType.prototype]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript语言</title>
      <link href="a355793e/"/>
      <url>a355793e/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><h3 id="script标签">script标签</h3><ol><li>使用 <code>&lt;script&gt;</code> 标签将 <code>javascript</code> 程序插入到 <code>html</code> 文档的任何位置</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.info(<span class="number">11111</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="现代的标记-markup">现代的标记(<code>markup</code>)</h3><ol><li><code>&lt;script&gt;</code> 标签有一些现在很少用到的特性 (<code>attribute</code>)，但是我们可以在老代码中找到它们<ul><li><code>type</code> 特性: <code>&lt;script type=...&gt;&lt;/script&gt;</code>，在老的 <code>html4</code> 标准中，要求 <code>script</code> 标签有 <code>type</code> 属性，通常是 <code>type=&quot;text/javascript&quot;</code>。这样的特性声明现在已经不再需要。而且，现代 <code>HTML</code> 标准已经完全改变了此特性的含义。现在，它可以用于 <code>JavaScript</code> 模块</li><li><code>language</code> 特性: <code>&lt;script language=...&gt;&lt;/script&gt;</code>，这个特性是为了显示脚本使用的语言。这个特性现在已经没有任何意义，因为语言默认就是 <code>JavaScript</code>。不再需要使用它了</li><li>脚本前后的注释，在非常古老的书籍和指南中，你可能会在 <code>script</code> 标签里面找到注释，现代 <code>JavaScript</code> 中已经不这样使用了。这些注释是用于不支持 <code>&lt;script&gt;</code> 标签的古老的浏览器隐藏 <code>JavaScript</code> 代码的。由于最近 15 年内发布的浏览器都没有这样的问题，因此这种注释能帮你辨认出一些老掉牙的代码  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;!--</span><br><span class="line">...</span><br><span class="line"><span class="comment">// --&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="外部脚本">外部脚本</h3><ol><li>如果有大量的 <code>JavaScript</code> 代码，可以将它放入一个单独的文件，通过 <code>src</code> 特性添加到 <code>html</code> 文件中 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">scr</span>=<span class="string">&quot;/path/to/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><div class="tip "><p>一般来说，只有最简单的脚本才嵌入到 HTML 中。更复杂的脚本存放在单独的文件中。<br>使用独立文件的好处是浏览器会下载它，然后将它保存到浏览器的 缓存 中。<br>之后，其他页面想要相同的脚本就会从缓存中获取，而不是下载它。所以文件实际上只会下载一次。<br>这可以节省流量，并使得页面（加载）更快。</p></div><div class="tip warning"><p>如果设置了 <code>src</code> 属性，<code>script</code> 标签内容将会被忽略<br>一个单独的 <code>script</code> 标签不能同时有 <code>src</code> 特性和内部包裹的代码，这将不会工作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;file.js&quot;</span>&gt;</span></span><br><span class="line"><span class="javascript">    alert(<span class="number">1</span>); <span class="comment">// 此内容会被忽略，因为设定了 src</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们必须进行选择，要么使用外部的 <code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>，要么使用正常包裹代码的 <code>script</code> 标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;file.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    alert(1);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="代码结构">代码结构</h2><h3 id="语句">语句</h3><ol><li>语句是执行行为的语法结构和命令，通常每条语句独占一行，以提高代码的可读性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">11</span>);</span><br><span class="line">alert(<span class="number">22</span>);</span><br></pre></td></tr></table></figure><h3 id="分号">分号</h3><ol><li>当存在换行符时，在大多数情况下可以省略分号，下面这个例子中 <code>js</code> 将换行符理解成隐式的分号(自动分号插入) <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">alert(<span class="string">&#x27;world&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><u>在大多数情况下，换行意味着一个分号，但是大多数情况并不意味着总是</u> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">3</span></span><br><span class="line">+ <span class="number">1</span></span><br><span class="line">+ <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 代码正确输出了，因为 JavaScript 并没有在这里插入分号。显而易见的是，如果一行以加号 &quot;+&quot; 结尾，那么这是一个“不完整的表达式”，不需要分号。所以，这个例子得到了预期的结果</span></span><br></pre></td></tr></table></figure></li><li><wavy>存在JavaScript无法确定是否真的需要自动插入分号的情况</wavy></li></ol><div class="tip "><p>一个错误的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].forEach(alert);</span><br></pre></td></tr></table></figure><p>上面的例子会正确输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>].forEach(alert);</span><br></pre></td></tr></table></figure><p>上面的例子会发生报错，这是因为 <code>JavaScript</code> 引擎并没有假设在方括号 <code>[...]</code> 前有一个分号，因此这段代码被视为了一个语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&#x27;hello&#x27;</span>)[<span class="number">1</span>, <span class="number">2</span>].forEach(alert);</span><br></pre></td></tr></table></figure><p>即使语句被换行符分隔了，我们依然建议在它们之间加分号</p></div><h3 id="注释">注释</h3><ol><li>随着时间推移，程序变得越来越复杂。为代码添加 注释 来描述它做了什么和为什么要这样做，变得非常有必要了。可以在脚本的任何地方添加注释，它们并不会影响代码的执行，因为引擎会直接忽略它们</li><li>单行注释以两个正斜杠字符 <code>//</code> 开始 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 独占一行的注释</span></span><br><span class="line">alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"></span><br><span class="line">alert(<span class="string">&#x27;world&#x27;</span>); <span class="comment">// 注释跟随语句的后面</span></span><br></pre></td></tr></table></figure></li><li>多行注释以一个正斜杠和星号开始 <code>“/*” 并以一个星号和正斜杠结束 “*/”</code> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 多行</span></span><br><span class="line"><span class="comment">注释 */</span></span><br><span class="line">alert(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">alert(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注释的内容被忽略了，所以如果我们在 /* … */ 中放入代码，并不会执行</span></span><br></pre></td></tr></table></figure></li></ol><div class="tip warning"><p>不支持注释嵌套，不要在 <code>/*...*/</code> 内嵌另一个 <code>/*...*/</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  /* 嵌套注释 ??? */</span></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">alert(<span class="string">&#x27;world&#x27;</span>); <span class="comment">// 无法执行</span></span><br></pre></td></tr></table></figure><p>注释会增加代码总量，但这一点也不是什么问题。有很多工具可以帮你在把代码部署到服务器之前缩减代码。这些工具会移除注释，这样注释就不会出现在发布的脚本中。所以，注释对我们的生产没有任何负面影响。</p></div><h2 id="现代模式">现代模式</h2><p>长久以来，<code>JavaScript</code> 不断向前发展且并未带来任何兼容性问题。新的特性被加入，旧的功能也没有改变。这么做有利于兼容旧代码，但缺点是 <code>JavaScript</code> 创造者的任何错误或不完善的决定也将永远被保留在 <code>JavaScript</code> 语言中。这种情况一直持续到 <code>2009</code> 年 <code>ECMAScript 5 (ES5)</code> 的出现。<code>ES5</code> 规范增加了新的语言特性并且修改了一些已经存在的特性。为了保证旧的功能能够使用，大部分的修改是默认不生效的。你需要一个特殊的指令 —— <code>&quot;use strict&quot;</code> 来明确地激活这些特性</p><h3 id="use-strict"><code>use strict</code></h3><ol><li>这个指令看上去像一个字符串 <code>&quot;use strict&quot;</code> 或者 <code>'use strict'</code>。当它处于脚本文件的顶部时，则整个脚本文件都将以“现代”模式进行工作</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码以现代模式工作</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>&quot;use strict&quot;</code> 可以被放在函数体的开头。这样则可以只在该函数中启用严格模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sky</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>确保 <code>use strict</code> 出现在最顶部，否则严格模式可能无法启用</li><li>没有办法取消 <code>use strict</code>，一旦进入了严格模式，就没有回头路</li><li>现代浏览器支持 <code>class</code> 和 <code>module</code> 一旦使用了它们就默认开启了严格模式</li></ol><h2 id="变量">变量</h2><ol><li>变量是数据的命名存储，使用 <code>let</code> 关键字进行定义变量 <code>let message</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的语句创建（也可以称为 声明 或者 定义）了一个名称为 “message” 的变量</span></span><br><span class="line"><span class="keyword">let</span> message;</span><br><span class="line"><span class="comment">// 可以通过赋值运算符 = 为变量添加一些数据</span></span><br><span class="line">message = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并为一行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以一行声明多个变量</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">&#x27;John&#x27;</span>, age = <span class="number">25</span>, message = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 不易阅读 推荐一行声明一个变量</span></span><br></pre></td></tr></table></figure><ol start="2"><li>变量声明两次会触发 <code>error</code>，一个变量应该只被声明一次，对同一变量进行重复声明会触发 <code>error</code>。因此我们对同一个变量应该只声明一次，之后在不使用 <code>let</code> 的情况下对其引用</li></ol><h3 id="变量命名">变量命名</h3><ol><li>变量名称必须仅包含字母、数字、符号<code>$</code>和<code>_</code></li><li>首字符必须非数字</li><li>推荐驼峰命名法</li><li>变量区分大小写，<code>apple</code> 和 <code>APPLE</code> 是两个不同的变量</li><li>允许非英文字符，但不推荐</li><li>保留字无法作为变量名使用</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> userName;</span><br><span class="line"><span class="keyword">let</span> test123;</span><br></pre></td></tr></table></figure><h3 id="常量">常量</h3><ol><li>声明一个不变的变量，可以使用 <code>const</code> 而非 <code>let</code></li><li>使用 <code>const</code> 声明的变量称为常量，它们不能被修改</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myBBB = <span class="string">&#x27;18.2423&#x27;</span>;</span><br><span class="line">myBBB = <span class="number">1234</span>; <span class="comment">// ERROR</span></span><br></pre></td></tr></table></figure><h3 id="大写形式的常数">大写形式的常数</h3><p>一个普遍的做法是将常量用作别名，以便记住那些在执行之前就已知的难以记住的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> COLOR_RED = <span class="string">&quot;#F00&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> COLOR_GREEN = <span class="string">&quot;#0F0&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> COLOR_BLUE = <span class="string">&quot;#00F&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> COLOR_ORANGE = <span class="string">&quot;#FF7F00&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ……当我们需要选择一个颜色</span></span><br><span class="line"><span class="keyword">let</span> color = COLOR_ORANGE;</span><br><span class="line">alert(color); <span class="comment">// #FF7F00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">COLOR_ORANGE 比 &quot;#FF7F00&quot; 更容易记忆。</span></span><br><span class="line"><span class="comment">比起 COLOR_ORANGE 而言，&quot;#FF7F00&quot; 更容易输错。</span></span><br><span class="line"><span class="comment">阅读代码时，COLOR_ORANGE 比 #FF7F00 更易懂。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li>什么时候该为常量使用大写命名，什么时候进行常规命名？<ul><li>作为一个“常数”，意味着值永远不变。但是有些常量在执行之前就已知了（比如红色的十六进制值），还有些在执行期间被“计算”出来，但初始赋值之后就不会改变</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pageLoadTime = <span class="comment">/* 网页加载所需的时间 */</span>;</span><br></pre></td></tr></table></figure><p><code>pageLoadTime</code> 的值在页面加载之前是未知的，所以采用常规命名。但是它仍然是个常量，因为赋值之后不会改变，换句话说，大写命名的常量仅用作“硬编码（<code>hard-coded</code>）”值的别名</p><h2 id="数据类型">数据类型</h2><ol><li>在 <code>JavaScript</code> 中有 <code>8</code> 种基本的数据类型（译注：<code>7</code> 种原始类型和 <code>1</code> 种引用类型）</li><li>我们可以将任何类型的值存入变量。例如，一个变量可以在前一刻是个字符串，下一刻就存储一个数字。允许这种操作的编程语言，例如 <code>JavaScript</code>，被称为“动态类型”（<code>dynamically typed</code>）的编程语言，意思是虽然编程语言中有不同的数据类型，但是你定义的变量并不会在定义后，被限制为某一数据类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">message = <span class="number">1234</span>;</span><br></pre></td></tr></table></figure><h3 id="Number-类型"><code>Number</code> 类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">123</span>;</span><br><span class="line">n = <span class="number">12.345</span>;</span><br></pre></td></tr></table></figure><ol><li><code>number</code> 类型代表整数和浮点数，数值运算 <code>* / + -</code></li><li>除了常规的数字，还包括特殊数值，也属于 <code>number</code> 类型：<code>Infinity</code>、<code>-Infinity</code>、<code>NaN</code><ul><li><code>Infinity</code> 表示正无穷 <code>console.log(1 / 0)</code></li><li><code>NaN</code> 代表计算错误，它是一个不正确的或者一个未定义的数学操作所得到的结果 <code>alert('not' / 2)</code></li><li><code>NaN</code> 是粘性的，任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code></li><li>所以，如果在数学表达式中有一个 <code>NaN</code>，会被传播到最终结果（只有一个例外：<code>NaN ** 0</code> 结果为 <code>1</code>）</li></ul></li><li>数学运算是安全的<ul><li>在 <code>JavaScript</code> 中做数学运算是安全的。我们可以做任何事：除以 <code>0</code>，将非数字字符串视为数字，等等。脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 <code>NaN</code> 的结果</li></ul></li><li>特殊的数值属于 <code>number</code> 类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="literal">NaN</span> + <span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line">alert(<span class="number">3</span> * <span class="literal">NaN</span>); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h3 id="BigInt-类型">BigInt 类型</h3><ol><li>在 <code>JavaScript</code> 中 <code>number</code> 类型无法安全地表示大于 <code>2^53 - 1</code> 即 <code>9007199254740991</code>，或小于 <code>-(2^53 - 1)</code> 的整数</li><li>更准确的说 <code>number</code> 类型可以存储更大的整数(最多 <code>1.7976931348623157 * 10^308</code>)，但超过安全整数范围 <code>±(2^53 - 1)</code> 会出现精度问题，因为并非所有数字都适合固定的 <code>64</code> 位存储。因此，可能存储的是近似值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这两个数字（正好超出了安全整数范围）但是它们的输出结果是相同的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740991</span> + <span class="number">1</span>); <span class="comment">// 9007199254740992</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">9007199254740991</span> + <span class="number">2</span>); <span class="comment">// 9007199254740992</span></span><br></pre></td></tr></table></figure><ol start="3"><li>也就是说，所有大于 <code>2^53 - 1</code> 的奇数都不能用 <code>number</code> 类型存储。在大多数情况下，<code>±(2^53 - 1)</code> 范围就足够了，但有时候需要整个范围非常大的整数，例如用于密码学或微秒精度的事件戳</li><li><code>BigInt</code> 类型用来表示任意长度的整数，可以将 <code>n</code> 附加到整数字段的末尾来创建 <code>BigInt</code> 值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尾部的 &quot;n&quot; 表示这是一个 BigInt 类型</span></span><br><span class="line"><span class="keyword">const</span> bigInt = <span class="number">1234567890123456789012345678901234567890n</span>;</span><br></pre></td></tr></table></figure><h3 id="String-类型"><code>String</code> 类型</h3><ol><li><code>JavaScript</code> 中的字符串都必须被括在引号中</li><li>三种书写字符串的方式<ul><li>双引号: <code>&quot;hello&quot;</code></li><li>单引号: <code>'hello'</code></li><li>反引号: <code>hello</code></li></ul></li><li>双引号和单引号都是简单的引用，没有什么区别，反引号是功能拓展引号，它允许通过变量和表达式包装在 <code>$&#123;...&#125;</code> 中，来将它们嵌入到字符串中</li><li><code>JavaScript</code> 中没有 <code>character</code> 类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;John&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3 id="Boolean-类型-逻辑类型"><code>Boolean</code> 类型(逻辑类型)</h3><ol><li><code>boolean</code> 类型仅包含两个值 <code>true</code> 和 <code>false</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isGreate = <span class="number">4</span> &gt; <span class="number">1</span>; <span class="comment">// 比较的结果是一个布尔值</span></span><br></pre></td></tr></table></figure><h3 id="null-值"><code>null</code> 值</h3><ol><li>特殊的 <code>null</code> 值不属于上述任何一个类型，它构成了一个独立的类型，只包含 <code>null</code> 值</li><li><code>JavaScript</code> 中的 <code>null</code> 仅仅是一个代表“无”、“空”或“值未知”的特殊值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="undefined-值"><code>undefined</code> 值</h3><ol><li>特殊值 <code>undefined</code> 和 <code>null</code> 一样自成类型，<code>undefined</code> 的含义是 <code>未被赋值</code>，如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age;</span><br><span class="line"><span class="built_in">console</span>.log(age); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">age = <span class="literal">undefined</span>; <span class="comment">// 从技术上讲，可以显式地将 undefined 赋值给变量 但是不建议这样做。通常，使用 null 将一个“空”或者“未知”的值写入变量中，而 undefined 则保留作为未进行初始化的事物的默认初始值</span></span><br></pre></td></tr></table></figure><h3 id="Object-类型和-Symbol-类型"><code>Object</code> 类型和 <code>Symbol</code> 类型</h3><ol><li><code>object</code> 类型是一个特殊的类型</li><li>其他所有的数据类型都被称为“原始类型”，因为它们的值只包含一个单独的内容（字符串、数字或者其他）。相反，<code>object</code> 则用于储存数据集合和更复杂的实体</li><li><code>symbol</code> 类型用于创建对象的唯一标识符</li></ol><h3 id="typeof-运算符"><code>typeof</code> 运算符</h3><ol><li><code>typeof</code> 运算符返回参数的类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span> <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">0</span> <span class="comment">// &quot;number&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">10n</span> <span class="comment">// &quot;bigint&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">// &quot;boolean&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;foo&quot;</span> <span class="comment">// &quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>(<span class="string">&quot;id&quot;</span>) <span class="comment">// &quot;symbol&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span> <span class="comment">// &quot;object&quot;  (1)</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// &quot;object&quot;  (2)</span></span><br><span class="line"><span class="keyword">typeof</span> alert <span class="comment">// &quot;function&quot;  (3)</span></span><br></pre></td></tr></table></figure><ol start="2"><li>最后三行额外说明<ul><li><code>Math</code> 是一个提供数学运算的内建 <code>object</code></li><li><code>typeof null</code> 的结果为 <code>&quot;object&quot;</code>。这是官方承认的 <code>typeof</code> 的错误，这个问题来自于 <code>JavaScript</code> 语言的早期阶段，并为了兼容性而保留了下来。<code>null</code> 绝对不是一个 <code>object</code>。<code>null</code> 有自己的类型，它是一个特殊值。<code>typeof</code> 的行为在这里是错误的</li><li><code>typeof alert</code> 的结果是 <code>&quot;function&quot;</code> 在 <code>JavaScript</code> 语言中没有一个特别的 <code>“function”</code> 类型。函数隶属于 <code>object</code> 类型。但是 <code>typeof</code> 会对函数区分对待，并返回 <code>&quot;function&quot;</code>。这也是来自于 <code>JavaScript</code> 语言早期的问题。从技术上讲，这种行为是不正确的，但在实际编程中却非常方便</li></ul></li><li><code>typeof(x)</code> 语法<ul><li><code>typeof(x)</code> 和 <code>typeof x</code> 相同</li><li>简单点说：<code>typeof</code> 是一个操作符，不是一个函数。这里的括号不是 <code>typeof</code> 的一部分。它是数学运算分组的括号</li><li>通常，这样的括号里包含的是一个数学表达式，例如 <code>(2 + 2)</code>，但这里它只包含一个参数 <code>(x)</code>。从语法上讲，它们允许在 <code>typeof</code> 运算符和其参数之间不打空格</li></ul></li></ol><h2 id="交互：alert、prompt和confirm">交互：<code>alert、prompt和confirm</code></h2><h3 id="alert"><code>alert</code></h3><ol><li>弹出带有信息的小窗口，<code>“modal”</code> 意味着用户不能与页面的其他部分（例如点击其他按钮等）进行交互，直到他们处理完窗口</li></ol><h3 id="prompt"><code>prompt</code></h3><ol><li><code>prompt</code> 函数接收两个参数 <code>prompt(title [, default])</code>;<ul><li><code>title</code> 显示给用户的文本</li><li><code>default</code> 可选的第二个参数，指定 <code>input</code> 框的初始值</li></ul></li><li>浏览器显示一个带有文本消息的模态窗口，还有 <code>input</code> 框和确定/取消按钮</li><li>返回用户输入的文本，如果用户取消了输入，则返回 <code>null</code></li></ol><h3 id="confirm"><code>confirm</code></h3><ol><li><code>confirm</code> 函数显示带有 <code>question</code> 以及确定和取消两个按钮的模态窗口，语法 <code>confirm(question)</code></li><li>点击确认返回 <code>true</code> 点击取消返回 <code>false</code></li></ol><h2 id="类型转换">类型转换</h2><ol><li>大多数情况下，运算符和函数会自动将赋予它们的值转换为正确的类型</li><li>在某些情况下，我们需要将值显式地转换为我们期望的类型</li></ol><h3 id="字符串转换">字符串转换</h3><ol><li>当我们需要一个字符串形式的值时，就会进行字符串转换</li><li>显式调用 <code>String(value)</code> 将 <code>value</code> 转换为字符串类型</li></ol><h3 id="数字型转换">数字型转换</h3><ol><li>在算术函数和表达式中，会自动进行 <code>number</code> 类型转换 <code>&quot;6&quot; / &quot;2&quot;</code></li><li>显式调用 <code>Number(value)</code> 将 <code>value</code> 转换为 <code>number</code> 类型</li><li>如果不是一个有效的数字，转换的结果会是 <code>NaN</code></li></ol><table><thead><tr><th>值</th><th>结果</th></tr></thead><tbody><tr><td><code>undefined</code></td><td><code>NaN</code></td></tr><tr><td><code>null</code></td><td><code>0</code></td></tr><tr><td><code>true</code> 和 <code>false</code></td><td><code>1</code> 和 <code>0</code></td></tr><tr><td><code>string</code></td><td>去掉首尾空白字符（空格、换行符 <code>\n</code>、制表符 <code>\t</code> 等）后的纯数字字符串中含有的数字。如果剩余字符串为空，则转换结果为 <code>0</code>。否则，将会从剩余字符串中“读取”数字。当类型转换出现 <code>error</code> 时返回 <code>NaN</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert( <span class="built_in">Number</span>(<span class="string">&quot;   123   &quot;</span>) ); <span class="comment">// 123</span></span><br><span class="line">alert( <span class="built_in">Number</span>(<span class="string">&quot;123z&quot;</span>) );      <span class="comment">// NaN（从字符串“读取”数字，读到 &quot;z&quot; 时出现错误）</span></span><br><span class="line">alert( <span class="built_in">Number</span>(<span class="literal">true</span>) );        <span class="comment">// 1</span></span><br><span class="line">alert( <span class="built_in">Number</span>(<span class="literal">false</span>) );       <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ol start="4"><li>注意 <code>null</code> 和 <code>undefined</code> 是不同的，<code>null</code> 转换为 <code>0</code> 而 <code>undefined</code> 转为为 <code>NaN</code></li></ol><h3 id="布尔类型转换">布尔类型转换</h3><ol><li>直观上为空的值(如 <code>0</code>、空字符串、<code>null</code>、<code>undefined</code> 和 <code>NaN</code>)将变为 <code>false</code>，其他值变成 <code>true</code></li><li>包含 <code>0</code> 的字符串 <code>&quot;0&quot;</code> 是 <code>true</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert( <span class="built_in">Boolean</span>(<span class="number">1</span>) ); <span class="comment">// true</span></span><br><span class="line">alert( <span class="built_in">Boolean</span>(<span class="number">0</span>) ); <span class="comment">// false</span></span><br><span class="line">alert( <span class="built_in">Boolean</span>(<span class="string">&quot;hello&quot;</span>) ); <span class="comment">// true</span></span><br><span class="line">alert( <span class="built_in">Boolean</span>(<span class="string">&quot;&quot;</span>) ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="基础运算符">基础运算符</h2><h3 id="术语">术语</h3><ol><li>运算元 — 运算符应用的对象。比如说乘法运算 <code>5 * 2</code>，有两个运算元：左运算元 <code>5</code> 和右运算元 <code>2</code>。有时候人们也称其为<code>“参数”</code>而不是<code>“运算元”</code></li><li>一元运算符 — 如果一个运算符对应的只有一个运算元，那么它是 一元运算符。比如说一元负号运算符（<code>unary negation</code>）-，它的作用是对数字进行正负转换</li><li>二元运算符 — 如果一个运算符拥有两个运算元，那么它是 二元运算符。减号还存在二元运算符形式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">x = -x;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x - y);</span><br></pre></td></tr></table></figure><h3 id="数据运算">数据运算</h3><ol><li>加法 <code>+</code></li><li>减法 <code>-</code></li><li>乘法 <code>*</code></li><li>除法 <code>/</code></li><li>取余 <code>%</code> <code>a % b</code> =&gt; <code>a</code> 整除 <code>b</code> 的余数</li><li>求幂 <code>**</code>  <code>a ** b</code> =&gt; <code>a^b</code> =&gt; <code>Math.pow(a, b)</code></li></ol><h3 id="用二元运算符-连接字符串">用二元运算符 <code>+</code> 连接字符串</h3><ol><li>通常 <code>+</code> 号用于求和，但是如果 <code>+</code> 被用于字符串，它将合并(连接)各个字符串</li><li>二元 <code>+</code> 是唯一一个以这种方式支持字符串的运算符。其他算术运算符只对数字起作用，并且总是将其运算元转换为数字</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;my&quot;</span> + <span class="string">&quot;string&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意： 只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;1&quot;</span> + <span class="number">2</span>); <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> + <span class="string">&#x27;1&#x27;</span>); <span class="comment">// 21</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> + <span class="number">2</span> + <span class="string">&#x27;1&#x27;</span>); <span class="comment">// 41</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">6</span> - <span class="string">&#x27;2&#x27;</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span> / <span class="string">&#x27;2&#x27;</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="数字转化，一元运算符">数字转化，一元运算符 <code>+</code></h3><ol><li>加号 <code>+</code> 有两种形式。一种是二元运算符，一种是一元运算符</li><li>加号 <code>+</code> 可以将其他类型转换为数字类型，它的效果和 <code>Number(...)</code> 相同，但是更加简短</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+x); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = -<span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+y); <span class="comment">// -2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="literal">true</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(+<span class="string">&quot;&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> xpp = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(+app + +xpp); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="运算符优先级">运算符优先级</h3><p>|优先级|名称|符号|<br>|…|…|…|<br>|<code>...</code>|<code>...</code>|<code>...</code>|<br>|<code>15</code>|一元加号|<code>+</code>|<br>|<code>15</code>|一元负号|<code>-</code>|<br>|<code>14</code>|求幂|<code>**</code>|<br>|<code>13</code>|乘号|<code>*</code>|<br>|<code>13</code>|除号|<code>/</code>|<br>|<code>12</code>|加号|<code>+</code>|<br>|<code>12</code>|减号|<code>-</code>|<br>|<code>...</code>|<code>...</code>|<code>...</code>|<br>|<code>2</code>|赋值符|<code>=</code>|<br>|<code>...</code>|<code>...</code>|<code>...</code>|</p><h3 id="赋值运算符">赋值运算符</h3><ol><li>赋值运算符的优先级只有 <code>2</code></li></ol><h3 id="赋值-返回一个值">赋值 <code>=</code> 返回一个值</h3><ol><li><code>=</code> 是一个运算符，而不是一个有着魔法作用的语言结构</li><li>在 <code>JavaScript</code> 中，所有运算符都会返回一个值，这对于 <code>+</code> <code>-</code> 来说是显而易见的，但对于 <code>=</code>来说也是如此</li><li>语句 <code>x = value</code> 将值 <code>value</code> 写入 <code>x</code> 然后返回 <code>value</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个复杂的例子</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span> - (a = b + <span class="number">1</span>); <span class="comment">// b + 1 写入 a 并返回 b + 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h3 id="链式赋值">链式赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a, b, c;</span><br><span class="line"></span><br><span class="line">a = b = c = <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">// 4 4 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式赋值从右到左进行计算。首先，对最右边的表达式 2 + 2 求值，然后将其赋给左边的变量：c、b 和 a。最后，所有的变量共享一个值</span></span><br></pre></td></tr></table></figure><h3 id="原地修改">原地修改</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">2</span>;</span><br><span class="line">n = n + <span class="number">5</span>;</span><br><span class="line">n = n * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ol><li>上面的写法可以使用运算符 <code>+=</code> 和 <code>*=</code> 缩写来表示</li><li>所有算数和位运算都有简单的 修改并赋值 的运算符 <code>/=</code> 和 <code>-=</code>，这类运算符的优先级和普通的赋值运算符的优先级相同，所以它们在大多数其他运算之后执行</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">n *= <span class="number">3</span> + <span class="number">5</span>; <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h3 id="自增-自减">自增/自减</h3><ol><li>对一个数进行加一、减一是最常见的数学运算符之一</li><li>自增 <code>++</code> 将变量和 <code>1</code> 相加，自减 <code>--</code> 将变量与一相减</li><li><wavy>自增/自减只能用于变量</wavy>，`5++` 常量是不可以这样使用的</li><li><code>++</code> <code>--</code> 是可以置于变量前也可以放在变量后，它们都做同一件事，将变量 <code>+1</code><ul><li>放在变量前，被称为前置形式 <code>++count</code></li><li>放在变量后，被称为后置形式 <code>count++</code></li></ul></li><li>前置和后置的区别在于返回值，上面我们说所有的运算符都有返回值，自增/自减也不例外。前置形式返回一个新的值，但后置返回原来的值(做加法/减法之前的值)<ul><li>如果自增/自减的值不会被使用，那么两者形式没有区别</li><li>如果我们想要对变量进行自增操作，并且 需要立刻使用自增后的值，那么我们需要使用前置形式</li><li>如果我们想要将一个数加一，但是我们想使用其自增之前的值，那么我们需要使用后置形式</li></ul></li><li>运算符同样可以在表达式内部使用，它的优先级比绝大部份的算数运算符要高</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = ++count;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a1 = count1++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count2 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> * ++count2); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> count3 = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">2</span> * count3++); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="位运算符">位运算符</h3><ol><li>位运算符把运算元当作 <code>32</code> 位整数，并在它们的二进制表现形式上操作</li><li>位运算符<ul><li>按位与 <code>&amp;</code></li><li>按位或 <code>|</code></li><li>按位异或 <code>^</code></li><li>按位非 <code>~</code></li><li>左移 <code>&lt;&lt;</code></li><li>右移 <code>&gt;&gt;</code></li><li>无符号右移 <code>&gt;&gt;&gt;</code></li></ul></li></ol><h3 id="逗号运算符">逗号运算符</h3><ol><li>逗号运算符 <code>,</code> 是最少见最不常用的运算符之一</li><li>逗号运算符能让我们处理多个表达式，使用 <code>,</code> 将它们分开，每个表达式都运行了，但是只有最后一个结果会被返回</li><li><u>逗号运算符的优先级非常低</u>，请注意逗号的优先级非常低，比 `=` 还要低，因此下面的例子中圆括号非常重要</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="number">1</span> + <span class="number">2</span>, <span class="number">3</span> + <span class="number">4</span>); <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 这里，第一个表达式 1 + 2 运行了，但是它的结果被丢弃了。随后计算 3 + 4，并且该计算结果被返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (a = <span class="number">1</span>, b = <span class="number">3</span>, c = a * b; a &lt; <span class="number">10</span>; a++) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="值的比较">值的比较</h2><ol><li>大于 / 小于: <code>a &gt; b</code> <code>a &lt; b</code></li><li>大于等于 / 小于等于 <code>a &gt;= b</code> <code>a &lt;= b</code></li><li>检查两个值的相等 <code>a == b</code></li><li>检查两个值的不相等 <code>a != b</code></li></ol><h3 id="比较结果为布尔类型">比较结果为布尔类型</h3><ol><li>所有的运算符均返回布尔值<ul><li><code>true</code> 表示真</li><li><code>false</code> 表示假</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">2</span> &gt; <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">alert(<span class="number">2</span> == <span class="number">1</span>); <span class="comment">// false</span></span><br><span class="line">alert(<span class="number">2</span> != <span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>比较的值可以赋值给任意值</li></ol><h3 id="字符串比较">字符串比较</h3><ol><li>比较字符串的大小时，<code>JavaScript</code> 会使用字典(<code>unicode</code> 编码)顺序进行判定，换言之，字符串是按字符逐个进行比较的<ul><li>首先比较两个字符的首位字符大小</li><li>如果一方字符较大(或较小)，则该字符串大于(或小于)另一个字符串，算法结束</li><li>否则，如果两个字符串的首位字符相等，则继续取出两个字符串各自的后一位字符进行比较</li><li>重复上述步骤进行比较，直到比较完成某个字符串的所有字符为止</li><li>如果两个字符串的字符同时用完，那么判定他们相等，否则未结束(还有未比较的字符)的字符串更大</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">&#x27;Z&#x27;</span> &gt; <span class="string">&#x27;A&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Glow&#x27;</span> &gt; <span class="string">&#x27;Glee&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Bee&#x27;</span> &gt; <span class="string">&#x27;Be&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="不同类型间的比较">不同类型间的比较</h3><ol><li>当不同类型的值进行比较时，<code>JavaScript</code> 会首先将其转化为数字(<code>number</code>)再判定大小</li><li>对于布尔类型值，<code>true</code> 会转化为 <code>1</code> <code>false</code> 转化为 <code>0</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;2&#x27;</span> &gt; <span class="number">1</span>); <span class="comment">// true &#x27;2&#x27; =&gt; 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;01&#x27;</span> == <span class="number">1</span>); <span class="comment">// true 01 =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> == <span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> == <span class="number">0</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>一个有趣的现象<ul><li>若直接比较两个值，其结果是相等的</li><li>若把两个值转为布尔值，它们可能得出完全相反的结果，即一个是 <code>true</code> 一个是 <code>false</code></li><li>因为 <code>JavaScript</code> 会把待比较的值转化为数字后再做比较（因此 <code>&quot;0&quot;</code> 变成了 <code>0</code>）。若只是将一个变量转化为 <code>Boolean</code> 值，则会使用其他的类型转换规则</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(a)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(b)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a == b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="严格相等">严格相等</h3><ol><li>普通的相等性检查 <code>==</code> 存在一个问题，不能区分出 <code>0</code> 和 <code>false</code>，也无法区分出空字符串和 <code>false</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;&#x27;</span> == <span class="literal">false</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在比较不同类型的值时，处于相等判断符号 <code>==</code> 两侧的值会先被转化为数字。空字符串和 <code>false</code> 也是如此，转化后它们都为数字 <code>0</code></li><li>严格相等运算符 <code>===</code> 在进行比较时不会做任何的类型转换</li><li>同样的与不相等类似，严格不相等可以表示为 <code>!==</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> === <span class="literal">false</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="对-null-和-undefined-进行比较">对 <code>null</code> 和 <code>undefined</code> 进行比较</h3><ol><li>当使用严格相等 <code>===</code> 比较二者时它们不相等</li><li>当使用非严格相等 <code>==</code> 比较二者时它们相等</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="3"><li>当使用数学式或其他比较方法 <code>&lt; &gt; &lt;= &gt;=</code> 时<ul><li><code>null / undefined</code> 会被转化为数字：<code>null</code> 被转化为 <code>0</code>，<code>undefined</code> 被转化为 <code>NaN</code></li></ul></li></ol><h3 id="奇怪的结果-null-vs-0">奇怪的结果 <code>null vs 0</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> &gt; <span class="number">0</span>); <span class="comment">// 1 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="number">0</span>); <span class="comment">// 2 false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> &gt;= <span class="number">0</span>); <span class="comment">// 3 true</span></span><br></pre></td></tr></table></figure><ol><li>为什么会出现这种反常结果，这是因为相等性检查 <code>==</code> 和普通比较符 <code>&gt; &lt; &gt;= &lt;=</code> 的代码逻辑是相互独立的。进行值的比较时，<code>null</code> 会被转化为数字，因此它被转化为了 <code>0</code>。这就是为什么（<code>3</code>）中 <code>null &gt;= 0</code> 返回值是 <code>true</code>，（<code>1</code>）中 <code>null &gt; 0</code> 返回值是 <code>false</code></li><li>另一方面，<code>undefined</code> 和 <code>null</code> 在相等性检查 <code>==</code> 中不会进行任何的类型转换，它们有自己独立的比较规则，所以除了它们之间互等外，不会等于任何其他的值。这就解释了为什么（<code>2</code>）中 <code>null == 0</code> 会返回 <code>false</code></li></ol><h3 id="特立独行的-undefined">特立独行的 <code>undefined</code></h3><ol><li><code>undefined</code> 不应该被与其他值进行比较</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> &gt; <span class="number">0</span>); <span class="comment">// false 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> &lt; <span class="number">0</span>); <span class="comment">// false 2</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> == <span class="number">0</span>); <span class="comment">// false 3</span></span><br></pre></td></tr></table></figure><ol><li><code>(1)</code> 和 <code>(2)</code> 都返回 <code>false</code> 是因为 <code>undefined</code> 在比较中被转换为了 <code>NaN</code>，而 <code>NaN</code> 是一个特殊的数值型值，它与任何值进行比较都会返回 <code>false</code></li><li><code>(3)</code> 返回 <code>false</code> 是因为这是一个相等性检查，而 <code>undefined</code> 只与 <code>null</code> 相等，不会与其他值相等</li></ol><h3 id="避免问题">避免问题</h3><ol><li>除了严格相等 <code>===</code> 外，其他但凡是有 <code>undefined/null</code> 参与的比较，我们都需要格外小心</li><li>除非你非常清楚自己在做什么，否则永远不要使用 <code>&gt;= &gt; &lt; &lt;=</code> 去比较一个可能为 <code>null/undefined</code> 的变量。对于取值可能是 <code>null/undefined</code> 的变量，请按需要分别检查它的取值情况</li></ol><h2 id="条件分支-if-和">条件分支: <code>if</code> 和 <code>?</code></h2><h3 id="if-语句"><code>if</code> 语句</h3><ol><li><code>if(...)</code> 语句计算括号里的条件表达式，如果计算结果是 <code>true</code> 就会执行对应的代码块</li></ol><h3 id="布尔转换">布尔转换</h3><ol><li><code>if(...)</code> 语句会计算圆括号内的表达式，并将计算结果转化为布尔值</li><li>类型转换的规则<ul><li>数字 <code>0</code>、空字符串 <code>&quot;&quot;</code>、<code>null</code>、<code>undefined</code> 和 <code>NaN</code> 都会被转换成 <code>false</code></li><li>其他值被转换为 <code>true</code></li></ul></li></ol><h3 id="else-语句"><code>else</code> 语句</h3><ol><li><code>if</code> 语句有时会包含一个可选的 <code>“else”</code> 块。如果判断条件不成立，就会执行它内部的代码</li></ol><h3 id="多个条件-else-if">多个条件 <code>else if</code></h3><ol><li>可以通过使用 <code>else if</code> 子句实现一个条件的几个变体</li></ol><h3 id="条件运算符">条件运算符 <code>?</code></h3><ol><li>这个运算符通过问号 <code>?</code> 表示。有时它被称为三元运算符，被称为“三元”是因为该运算符中有三个操作数。实际上它是 JavaScript 中唯一一个有这么多操作数的运算符</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = condition ? value1 : value2;</span><br></pre></td></tr></table></figure><h3 id="多个">多个 <code>?</code></h3><ol><li>使用一系列问号 ? 运算符可以返回一个取决于多个条件的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = prompt(<span class="string">&#x27;age?&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> message = (age &lt; <span class="number">3</span>) ? <span class="string">&#x27;Hi, baby!&#x27;</span> :</span><br><span class="line">  (age &lt; <span class="number">18</span>) ? <span class="string">&#x27;Hello!&#x27;</span> :</span><br><span class="line">  (age &lt; <span class="number">100</span>) ? <span class="string">&#x27;Greetings!&#x27;</span> :</span><br><span class="line">  <span class="string">&#x27;What an unusual age!&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(message);</span><br></pre></td></tr></table></figure><h3 id="的非常规使用"><code>?</code> 的非常规使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(company == <span class="string">&#x27;Netscape&#x27;</span>) ? alert(<span class="string">&#x27;Right!&#x27;</span>) : alert(<span class="string">&#x27;Wrong.&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="逻辑运算符">逻辑运算符</h2><ol><li><code>JavaScript</code> 中的四个逻辑运算 <code>||</code> 、<code>&amp;&amp;</code>、<code>!</code>、<code>??</code>(空值合并运算符)</li></ol><h3 id="或运算符"><code>||</code> 或运算符</h3><ol><li>在传统的编程中，逻辑或仅能够操作布尔值。如果参与运算的任意一个参数为 <code>true</code>，返回的结果就为 <code>true</code>，否则返回 <code>false</code></li><li>在 <code>JavaScript</code> 中，逻辑运算符更加灵活强大</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">true</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> || <span class="literal">true</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> || <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> || <span class="literal">false</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol start="3"><li>大多数情况下，逻辑或 <code>||</code> 会被用在 <code>if</code> 语句中，用来测试是否有任何给定的条件为 <code>true</code></li></ol><h3 id="或运算寻找第一个真值">或运算寻找第一个真值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = value1 || value2 || value3;</span><br></pre></td></tr></table></figure><ol><li>上面的或运算符做了如下过程：<ul><li>从左到右依次计算操作数</li><li>处理每一个操作数时，都将其转化为布尔值，如果结果是 <code>true</code> 就停止计算，返回这个操作数的初始值</li><li>如果所有的操作数都被计算过(也就是，转化结果都是 <code>false</code>)，则返回最后一个操作数</li></ul></li><li>返回的值是操作数的初始形式，不会做布尔转换</li><li>换句话说，一个或运算 <code>||</code> 的链，将返回第一个真值，如果不存在真值，就返回该链的最后一个值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> || <span class="number">0</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> || <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> || <span class="number">0</span> || <span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span> || <span class="literal">null</span> || <span class="number">0</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ol start="4"><li>有趣的用法<ul><li>获取变量列表或者表达式中的第一个真值</li><li>短路求值</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取变量列表或者表达式中的第一个真值</span></span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> nickName = <span class="string">&quot;SuperCoder&quot;</span>;</span><br><span class="line"></span><br><span class="line">alert( firstName || lastName || nickName || <span class="string">&quot;Anonymous&quot;</span>); <span class="comment">// SuperCoder</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 短路求值</span></span><br><span class="line"><span class="literal">true</span> || alert(<span class="string">&quot;not printed&quot;</span>);</span><br><span class="line"><span class="literal">false</span> || alert(<span class="string">&quot;printed&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="与运算符"><code>&amp;&amp;</code> 与运算符</h3><ol><li>在传统的编程中，当两个操作数都是真值时，与运算返回 <code>true</code>，否则返回 <code>false</code></li><li>就像或运算一样，与运算的操作数可以是任意类型的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">true</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &amp;&amp; <span class="literal">true</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span> &amp;&amp; <span class="literal">false</span>); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">false</span> &amp;&amp; <span class="literal">false</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="与运算寻找第一个假值">与运算寻找第一个假值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = value1 &amp;&amp; value2 &amp;&amp; value3</span><br></pre></td></tr></table></figure><ol><li><code>&amp;&amp;</code> 做了如下事<ul><li>从左到右依次计算操作数</li><li>在处理每一个操作数时，都将其转化为布尔值，如果结果是 <code>false</code> 就停止，并返回这个操作数的初始值</li><li>如果<span class='nota' data-nota='都是真值'>所有操作数都被计算过</span>，则返回最后一个操作数</li></ul></li><li>与运算 <code>&amp;&amp;</code> 在或运算 <code>||</code> 之前进行<ul><li>与运算 <code>&amp;&amp;</code> 优先级比或运算 <code>||</code> 要高</li></ul></li></ol><h3 id="非"><code>!</code> 非</h3><ol><li>逻辑非运算符接收一个参数，并按如下运作：<ul><li>将操作数转化为布尔类型: <code>true / false</code></li><li>返回相反的值</li></ul></li><li>两个非运算 <code>!!</code> 有时候用来将某个值转化为布尔类型 <code>!!0</code></li><li>非运算符 <code>!</code> 的优先级在所有逻辑运算符里面最高，所以它总是在 <code>&amp;&amp;</code> 和 <code>||</code> 之前执行</li></ol><h2 id="空值合并运算符">空值合并运算符 <code>??</code></h2><ol><li>空值运算符 <code>??</code>, <code>a ?? b</code> 的结果是，如果 <code>a</code> 是已定义的，则结果是 <code>a</code> 否则结果是 <code>b</code> 换言之，如果第一个参数不是 <code>null/undefined</code>，则 <code>??</code> 返回第一个参数，否则返回第二个参数，也可以使用 <code>result = a || b</code> =&gt; <code>result = a ?? b</code></li><li>还可以使用 <code>??</code> 从一系列值中选择第一个非 <code>null/undefined</code> 的值 <code>result = a ?? b ?? c ?? 'dd'</code></li><li>或运算符 <code>||</code> 可以与 <code>??</code> 运算符相同的方式使用，但是它们之间最重要的区别在于<ul><li><code>||</code> 返回第一个 <u>真值</u></li><li><code>??</code> 返回第一个 <u>已定义的值</u></li></ul></li><li><code>||</code> 无法区别 <code>false</code> <code>0</code> 空字符串 <code>&quot;&quot;</code> 和 <code>null / undefined</code> 它们都 <span class='nota' data-nota='假值'>一样</span>。如果其中任何一个是 <code>||</code> 的第一个参数，那么都将得到第二个参数作为结果</li><li><code>??</code> 运算符的优先级与 <code>||</code> 相同，他们的优先级都是 <code>4</code></li><li>出于安全原因，<code>JavaScript</code> 禁止将 <code>??</code> 运算符 <code>&amp;&amp;</code> 和 <code>||</code> 一起使用，除非使用括号明确指定了优先级</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span> &amp;&amp; <span class="number">2</span> ?? <span class="number">3</span>; <span class="comment">// Syntax error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = (<span class="number">1</span> &amp;&amp; <span class="number">2</span>) ?? <span class="number">3</span>; <span class="comment">// right</span></span><br></pre></td></tr></table></figure><h2 id="循环-while-和-for">循环 <code>while</code> 和 <code>for</code></h2><h3 id="while-循环"><code>while</code> 循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (condition) &#123;</span><br><span class="line">    <span class="comment">// 循环体 condition 为真时执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">while</span> (i) <span class="built_in">console</span>.info(i--);</span><br></pre></td></tr></table></figure><ol><li>循环体的单次执行叫作 <u>一次迭代</u></li><li>单行循环体不需要大括号，可以省略</li></ol><h3 id="do-while-循环"><code>do...while</code> 循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125; <span class="keyword">while</span> (condition);</span><br></pre></td></tr></table></figure><ol><li><code>do...while</code> 循环不管条件是否为真，循环体 <u>至少执行一次</u></li></ol><h3 id="for-循环"><code>for</code> 循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (begin; condition; step) &#123;</span><br><span class="line">    <span class="comment">// 循环体 body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// begin 进入循环时执行一次</span></span><br><span class="line"><span class="comment">// condition 在每次循环迭代之前检查，如果为 `false` 停止循环</span></span><br><span class="line"><span class="comment">// body 条件为真时，重复运行</span></span><br><span class="line"><span class="comment">// step 在每次循环体迭代后执行</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 内联变量声明</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    alert(i); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(i); <span class="comment">// 错误，没有这个变量</span></span><br></pre></td></tr></table></figure><ol><li><code>for</code> 循环的任何语句段都可以被省略，例如，如果我们在循环开始时不需要做任何事，我们就可以省略 <code>begin</code> 语句段</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>; <span class="comment">// 我们已经声明了 i 并对它进行了赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">3</span>; i++) &#123; <span class="comment">// 不再需要 &quot;begin&quot; 语句段</span></span><br><span class="line">  alert( i ); <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以移除 step 语句段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; i &lt; <span class="number">3</span>;) &#123;</span><br><span class="line">  alert( i++ );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以删除所有内容，从而创建一个无限循环</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="comment">// 无限循环</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请注意 for 的两个 ; 必须存在，否则会出现语法错误</span></span><br></pre></td></tr></table></figure><h3 id="跳出循环">跳出循环</h3><ol><li>通常条件为假时，循环会终止</li><li>可以使用 <code>break</code> 指令强制退出</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = +prompt(<span class="string">&quot;Enter a number&quot;</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!value) <span class="keyword">break</span>; <span class="comment">// (*)</span></span><br><span class="line">    sum += value;</span><br><span class="line">&#125;</span><br><span class="line">alert( <span class="string">&#x27;Sum: &#x27;</span> + sum );</span><br></pre></td></tr></table></figure><h3 id="继续下一次迭代">继续下一次迭代</h3><ol><li><code>continue</code> 指令是 <code>break</code> 的“轻量版”。它不会停掉整个循环。而是停止当前这一次迭代，<span class='nota' data-nota='如果条件允许的话'>并强制启动新一轮循环</span></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//如果为真，跳过循环体的剩余部分。</span></span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">    alert(i); <span class="comment">// 1，然后 3，5，7，9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>continue</code> 指令利于减少嵌套</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多了 if 的嵌套</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">        alert( i );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>禁止 <code>break / continue</code> 在 <code>?</code> 的右边<ul><li><u>请注意非表达式的语法结构不能与三元运算符</u> `?` <u>一起使用。特别是</u> `break/continue` <u>这样的指令是不允许这样使用的</u></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i &gt; <span class="number">5</span>) &#123;</span><br><span class="line">    alert(i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 ? 重写</span></span><br><span class="line"></span><br><span class="line">(i &gt; <span class="number">5</span>) ? alert(i) : <span class="keyword">continue</span>; <span class="comment">// continue 不允许在这个位置 显示有语法错误</span></span><br></pre></td></tr></table></figure><h3 id="break-continue-标签"><code>break / continue</code> 标签</h3><ol><li>有时候需要一次从多层嵌套的循环中跳出来</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> input = prompt(<span class="string">`Value at coords (<span class="subst">$&#123;i&#125;</span>,<span class="subst">$&#123;j&#125;</span>)`</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// 如果我想从这里退出并直接执行 alert(&#x27;Done!&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(<span class="string">&#x27;Done!&#x27;</span>);</span><br></pre></td></tr></table></figure><ol><li>在 <code>input</code> 之后的普通 <code>break</code> 只会打破内部循环，标签可以实现这个功能</li><li>标签是在循环之前带有冒号的标识符</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">labelName: <span class="keyword">for</span> (...) &#123;</span><br><span class="line">    ... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>break &lt;labelName&gt;</code> 语句跳出循环至标签处</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">outer: <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> input = prompt(<span class="string">`Value at coords (<span class="subst">$&#123;i&#125;</span>,<span class="subst">$&#123;j&#125;</span>)`</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!input) &#123;</span><br><span class="line">            <span class="comment">// 如果是空字符串或被取消，则中断并跳出这两个循环</span></span><br><span class="line">            <span class="keyword">break</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标签可以单独一行</span></span><br><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">let</span> input = prompt(<span class="string">`Value at coords (<span class="subst">$&#123;i&#125;</span>,<span class="subst">$&#123;j&#125;</span>)`</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!input) &#123;</span><br><span class="line">            <span class="comment">// 如果是空字符串或被取消，则中断并跳出这两个循环</span></span><br><span class="line">            <span class="keyword">break</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>continue</code> 指令也可以与标签一起使用，这种情况下，执行跳转到标记循环的下一次迭代</li><li>标签并不允许跳到所有位置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span> label; <span class="comment">// 跳转至下面的 label 处（无效）</span></span><br><span class="line">label: <span class="keyword">for</span> (...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// break 指令必须在代码块内。从技术上讲，任何被标记的代码块都有效，但 continue 只有在循环内部才可行</span></span><br><span class="line"></span><br><span class="line">label: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">break</span> label; <span class="comment">// 有效</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="switch-语句"><code>switch</code> 语句</h2><ol><li><code>switch</code> 语句可以替代多个 <code>if</code> 判断</li><li><code>switch</code> 语句为多分枝选择的情况提供了一个更具描述性的方式</li></ol><h3 id="switch-语法"><code>switch</code> 语法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(x) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;value1&quot;</span>:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        [<span class="keyword">break</span>]</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;value2&quot;</span>:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        [<span class="keyword">break</span>]</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        [<span class="keyword">break</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>比较 <code>x</code> 值和第一个 <code>case</code> 是否相等，然后比较第二个 <code>case</code> 以此类推(<u>强调一下，这里的相等是严格相等。被比较的值必须是相同的类型才能进行匹配</u>)</li><li>如果相等，<code>switch</code> 语句就执行相应 <code>case</code> 下的代码块，直到遇到最靠近的 <code>break</code> 语句 (或者直到 <code>switch</code> 语句末尾)</li><li>如果没有符合的 <code>case</code> 则执行 <code>default</code> 代码块 (如果 <code>default</code> 存在)</li><li>如果没有 <code>break</code> 程序将不经过任何检查就会继续执行下一个 <code>case</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>任何表达式都可以成为 <code>switch/case</code> 的参数</li></ol><h3 id="case-分组"><code>case</code> 分组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (a) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    alert(<span class="string">&#x27;Right!&#x27;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// (*) 下面这两个 case 被分在一组</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    alert(<span class="string">&#x27;Wrong!&#x27;</span>);</span><br><span class="line">    alert(<span class="string">&quot;Why don&#x27;t you take a math class?&quot;</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    alert(<span class="string">&#x27;The result is strange. Really.&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数">函数</h2><ol><li>函数声明</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数列表</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>局部变量，在函数中声明的变量只在函数内部可见</li><li>外部变量，函数也可以访问外部变量，函数对外部变量拥有全部的访问权限。函数也可以修改外部变量</li><li><u>只有在没有局部变量的情况下才会使用外部变量</u>，如果在函数内部声明了同名变量，那么函数会 <kbd>遮蔽</kbd> 外部变量</li></ol><div class="tip cogs"><p>任何函数之外声明的变量都被称为全局变量。</p><p>全局变量在任意函数中都是可见的（除非被局部变量遮蔽）</p><p>减少全局变量的使用是一种很好的做法。现代的代码有很少甚至没有全局变量。大多数变量存在于它们的函数中。但是有时候，全局变量能够用于存储项目级别的数据</p></div><h3 id="参数">参数</h3><ol><li>可以通过参数将任意数据传递给函数</li><li>参数是函数声明中括号内列出的变量(它是函数声明时的术语)</li><li>参数是调用函数时传递给函数的值(它是函数调用时的术语)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params"><span class="keyword">from</span>, text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">from</span> = <span class="string">&#x27;*&#x27;</span> + <span class="keyword">from</span> + <span class="string">&#x27;*&#x27;</span>; <span class="comment">// 让 &quot;from&quot; 看起来更优雅</span></span><br><span class="line">    alert( <span class="keyword">from</span> + <span class="string">&#x27;: &#x27;</span> + text );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">from</span> = <span class="string">&quot;Ann&quot;</span>;</span><br><span class="line">showMessage(<span class="keyword">from</span>, <span class="string">&quot;Hello&quot;</span>); <span class="comment">// *Ann*: Hello</span></span><br><span class="line"><span class="comment">// &quot;from&quot; 值相同，函数修改了一个局部的副本。</span></span><br><span class="line">alert( <span class="keyword">from</span> ); <span class="comment">// Ann</span></span><br></pre></td></tr></table></figure><h3 id="默认值">默认值</h3><ol><li>如果一个函数被调用，但有参数未被提供，那么相应的值就会变成 <code>undefined</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMessage</span>(<span class="params"><span class="keyword">from</span>, text = <span class="string">&quot;no text given&quot;</span></span>) </span>&#123;</span><br><span class="line">    alert( <span class="keyword">from</span> + <span class="string">&quot;: &quot;</span> + text );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">showMessage(<span class="string">&quot;Ann&quot;</span>); <span class="comment">// Ann: no text given</span></span><br></pre></td></tr></table></figure><div class="tip "></div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript常用的12种设计模式</title>
      <link href="4e8353c9/"/>
      <url>4e8353c9/</url>
      
        <content type="html"><![CDATA[<h2 id="简介">简介</h2><ol><li>设计模式是一套被反复使用、多数人知晓、经过分类编目的、代码设计经验的总结。它是为了可重用代码，让代码更容易的被他人理解并保证代码的可靠性</li><li>设计模式的几大原则<ul><li>单一职责原则</li><li>开放封闭原则</li><li>里式替换原则</li><li>接口隔离原则</li><li>依赖反转原则</li><li>最少知识原则</li></ul></li><li>常见的12种设计模式<ul><li>工厂模式</li><li>单例模式</li><li>观察者模式</li><li>发布-订阅模式</li><li>原型模式</li><li>适配器模式</li><li>装饰者模式</li><li>策略模式</li><li>模块模式</li><li>代理模式</li><li>迭代器模式</li><li>状态模式</li></ul></li></ol><h2 id="工厂模式">工厂模式</h2><ol><li>工厂模式通过工厂方法来创建对象，而不是直接使用 <code>new</code> 关键字，工厂方法根据输入参数的不同，决定创建哪个具体的对象实例并将其返回。</li><li>工厂模式就是根据不用的输入返回不同的实例，一般用来创建同一类对象，它的主要思想就是将对象的创建与对象的实现分离，在创建对象时，不暴露具体的逻辑，而是将逻辑封装在函数中，那么这个函数就可以视为一个工厂，工厂模式根据抽象程度的不同可以分为: 简单工厂、工厂方法、抽象工厂</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义产品类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">display</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`product: <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义工厂类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">createProduct</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Product(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用工厂创建对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> factory = <span class="keyword">new</span> Factory();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = factory.createProduct(<span class="string">&#x27;p1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = factory.createProduct(<span class="string">&#x27;p2&#x27;</span>);</span><br><span class="line"></span><br><span class="line">p1.display();</span><br><span class="line">p2.display();</span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当需要创建多个相似的对象时</li><li>当对象创建过程复杂或需要隐藏创建逻辑时</li><li>当希望通过公共的接口来创建对象时</li></ul></li><li>优点<ul><li>将对象的创建与使用代码分离，客户端只需关注接口而不需要关心具体的对象创建过程</li><li>可以通过工厂方法来创建不同类型的对象，提供灵活性和可扩展性</li></ul></li><li><code>vue</code> 中的工厂模式<ul><li><p><code>VNode</code>，和原生的 <code>document.createElement</code> 类型，<code>vue</code> 这种具有虚拟 <code>dom</code> 树(<code>virtual dom tree</code>) 机制的框架在生成虚拟 <code>dom</code> 的时候，提供了 <code>createElement</code> 方法来生成 <code>VNode</code> 用来作为真实 <code>dom</code> 节点的映射</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">createElement(<span class="string">&#x27;h3&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;main-title&#x27;</span> &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;img&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;avatar&#x27;</span>, <span class="attr">attrs</span>: &#123; <span class="attr">src</span>: <span class="string">&#x27;../avatar.jpg&#x27;</span> &#125;&#125;),</span><br><span class="line">    createElement(<span class="string">&#x27;p&#x27;</span>, &#123; <span class="attr">class</span>: <span class="string">&#x27;user-desc&#x27;</span> &#125;, <span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createElement 函数结构</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vnode</span>(<span class="title">tag</span>, <span class="title">data</span>, <span class="title">children</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">tag, data, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vnode(tag, data, children);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>vue-route</code> 在 <code>vue</code> 进行路由创建模式中，也使用了工厂模式</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mode = mode; <span class="comment">// 路由模式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (mode) &#123; <span class="comment">// 简单工厂</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;history&#x27;</span>: <span class="comment">// </span></span><br><span class="line">                <span class="built_in">this</span>.history = <span class="keyword">new</span> HTML5History(<span class="built_in">this</span>, options.base);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;hash&#x27;</span>: <span class="comment">// hash 方式</span></span><br><span class="line">                <span class="built_in">this</span>.history = <span class="keyword">new</span> HashHistory(<span class="built_in">this</span>, options.base, <span class="built_in">this</span>.fallback);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;abstract&#x27;</span>: <span class="comment">// abstract 方式</span></span><br><span class="line">                <span class="built_in">this</span>.history = <span class="keyword">new</span> AbstractHistory(<span class="built_in">this</span>, options.base);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="comment">// ...初始化失败报错</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>mode</code> 是路由创建的模式，这里有三种 <code>History、Hash、Abstract</code>，其中，<code>History</code> 是 <code>H5</code> 的路由方式，<code>Hash</code> 是路由中带 <code>#</code> 的路由方式，<code>Abstract</code> 代表非浏览器环境中路由方式，比如 <code>Node、weex</code> 等；<code>this.history</code> 用来保存路由实例，<code>vue-router</code> 中使用了工厂模式的思想来获得响应路由控制类的实例</li></ul></li></ul></li></ol><h2 id="单例模式">单例模式</h2><ol><li>单例模式确保一个类只有一个实例，并提供全局访问点来获取该实例，它通过私有化构造函数限制外部直接创建对象，并提供一个静态方法来获取或创建唯一的实例</li><li>单例模式又叫单体模式，保证一个类只有一个实例，并提供一个访问它的全局访问点，也就是说，第二次使用同一个类创建新对象的时候，应该得到与第一次创建的对象完全相同的对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> instance = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (Singleton.instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> Singleton.instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Singleton.instance = <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ins1 = <span class="keyword">new</span> Singleton();</span><br><span class="line"><span class="keyword">const</span> ins2 = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.info(ins1 === ins2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用场景</p><ul><li>当只需要一个全局对象来协调系统中的操作时</li><li>当需要频繁访问同一个对象实例时</li><li>当需要限制一个类只有一个实例</li></ul></li><li><p>优点</p><ul><li>提供了对唯一实例的全局访问，方便共享对象</li><li>避免了重复创建实例的开销，节省了内存和资源</li></ul></li><li><p><code>vue</code> 的单例模式</p><ul><li><code>element-ui</code> <code>loading</code><ul><li>指令模式: <code>Vue.use(Loading.directive)</code>，使用 `<div :v-loading.fullscreen="true">…</div></li><li>服务模式: <code>Vue.prototype.$loading = service</code>，使用 <code>this.$loading(&#123;fullscreen: true&#125;)</code></li><li>用服务方法使用全屏 <code>loading</code> 是单例的，即在前一个全屏 <code>loading</code> 关闭前再次调用全屏 <code>loading</code> 并不会创建一个新的 <code>loading</code> 实例，而是返回现有全屏 <code>Loading</code> 的实例</li></ul></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 这里的单例是 fullScreenLoading，是存放在闭包中的，如果用户传的 options 的 fullscreen 为 true 且已经创建了单例，则直接返回之前创建的单例，如果之前没有创建过，则创建单例并赋值给闭包中的 fullScreenLoading 后返回新创建的单例实例</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> LoadingVue <span class="keyword">from</span> <span class="string">&#x27;./loading.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LoadingContructor = Vue.extend(LoadingVue);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fullScreenLoading; <span class="comment">// 单例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Loading = <span class="function">(<span class="params">options = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (options.fullscreen &amp;&amp; fullScreenLoading) &#123;</span><br><span class="line">        <span class="keyword">return</span> fullScreenLoading;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> instance = <span class="keyword">new</span> LoadingContructor(&#123;</span><br><span class="line">        el: <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>),</span><br><span class="line">        data: options</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.fullscreen) &#123;</span><br><span class="line">        fullScreenLoading = instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Loading;</span><br></pre></td></tr></table></figure><ul><li><p><code>Vuex</code>，一个专为 <code>Vue.js</code> 应用程序开发的状态管理模式。<code>Vuex</code>，它们都实现了一个全局的 <code>Store</code> 用于存储应用的所有状态。这个 Store 的实现，正是单例模式的典型应用</p><ul><li><code>Vuex</code> 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>通过调用 <code>Vue.use()</code> 方法，安装了 <code>Vuex</code> 插件。<code>Vuex</code> 插件是一个对象，它在内部实现了一个 <code>install</code> 方法，这个方法会在插件安装时被调用，从而把 <code>Store</code> 注入到<code>Vue</code> 实例里去。也就是说每 <code>install</code> 一次，都会尝试给 <code>Vue</code> 实例注入一个 <code>Store</code></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue; <span class="comment">// 单例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断传入的Vue实例对象是否已经被install过Vuex插件（是否有了唯一的state）</span></span><br><span class="line">    <span class="keyword">if</span>(Vue &amp;&amp; _Vue === Vue) &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">&#x27;[vuex] already installed. Vue.use(Vuex) should be called only once.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Vue = _Vue; <span class="comment">// 若没有，则为这个Vue实例对象install一个唯一的Vuex</span></span><br><span class="line">    <span class="comment">// 将Vuex的初始化逻辑写进 Vue 的钩子函数里</span></span><br><span class="line">    <span class="comment">// 可以保证一个 Vue 实例（即一个 Vue 应用）只会被 install 一次 Vuex 插件，所以每个 Vue 实例只会拥有一个全局的 Store</span></span><br><span class="line">    applyMixin(Vue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="观察者模式">观察者模式</h2><ol><li>观察者模式定义了对象之间的一对多依赖关系，当一个对象的状态发生变化时，它的所有依赖者（观察者）都会被通知和更新</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.observers = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">addObserver</span>(<span class="params">observer</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.observers.push(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">removeObserver</span>(<span class="params">observer</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.observers = <span class="built_in">this</span>.observers.filter(<span class="function"><span class="params">obs</span> =&gt;</span> obs !== observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">notifyObservers</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.observers.forEach(<span class="function"><span class="params">obs</span> =&gt;</span> obs.update());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Observer <span class="subst">$&#123;<span class="built_in">this</span>.name&#125;</span> has been notified`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建主题和观察者</span></span><br><span class="line"><span class="keyword">const</span> subject = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obs1 = <span class="keyword">new</span> Observer(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> obs2 = <span class="keyword">new</span> Observer(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册观察者</span></span><br><span class="line">subject.addObserver(obs1);</span><br><span class="line">subject.addObserver(obs2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通知观察者</span></span><br><span class="line">subject.addObserver();</span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当一个对象的变化需要通知其他对象，以便它们可以做出相应的响应时</li><li>当对象之间的耦合度需要降低，使得它们可以独立地交互时</li></ul></li><li>优点<ul><li>实现了对象之间的松耦合，被观察者和观察者可以独立地演化和变化</li><li>可以轻松添加或移除观察者，以实现动态的发布-订阅机制</li></ul></li></ol><h2 id="发布-订阅模式">发布-订阅模式</h2><ol><li>发布-订阅模式类似于观察者模式，但是发布者(或称为主题)不会直接通知特定的订阅者，而是通过消息代理(或称为事件总线)来分发和传递消息。订阅者可以根据自身的需求订阅感兴趣的消息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventBus</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.subscriber = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">subscribe</span>(<span class="params">eventName, callback</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.subscribers[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.subscribers[eventName] = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.subscribers[eventName].push(callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">unsubscribe</span>(<span class="params">eventName, callback</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.subscribers[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.subscribers[eventName] = <span class="built_in">this</span>.subscribers[eventName].filter(<span class="function"><span class="params">cb</span> =&gt;</span> cb !== callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">publish</span>(<span class="params">eventName, data</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.subscribers[eventName]) &#123;</span><br><span class="line">            <span class="built_in">this</span>.subscribers[eventName].forEach(<span class="function"><span class="params">callback</span> =&gt;</span> callback(data));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建事件总线</span></span><br><span class="line"><span class="keyword">const</span> eventBus = <span class="keyword">new</span> EventBus();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 订阅事件总线</span></span><br><span class="line"><span class="keyword">const</span> callback1 = <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Subscriber 1 received: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line"><span class="keyword">const</span> callback2 = <span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">`Subscriber 2 received: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">eventBus.subscribe(<span class="string">&#x27;event1&#x27;</span>, callback1);</span><br><span class="line">eventBus.subscribe(<span class="string">&#x27;event1&#x27;</span>, callback2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发布事件</span></span><br><span class="line">eventBus.publish(<span class="string">&#x27;event1&#x27;</span>, <span class="string">&#x27;hello, subscribers&#x27;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用场景</p><ul><li>当一个对象的状态变化需要通知多个订阅者时</li><li>当需要将发布和订阅者解耦，使它们可以独立地演化时</li><li>当希望在系统中引入中介层以提供更灵活的消息传递机制时</li></ul></li><li><p>优点</p><ul><li>解耦了发布者和订阅者，使它们可以独立地交互</li><li>提供了更灵活的消息传递机制，可以实现更复杂的事件处理逻辑</li></ul></li><li><p>观察者模式和发布-订阅模式的区别</p><ul><li>观察者模式是由具体目标调度的，而发布-订阅模式是统一由调度中心调的</li></ul> <div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/4e8353c9/pubsub.png" alt="发布订阅模式和观察者模式的区别"/></div><span class="image-caption">发布订阅模式和观察者模式的区别</span></div></li><li><p><code>vue</code> 中的发布-订阅模式</p><ul><li><code>EventBus</code>，<code>vue</code> 中的一种事件机制，可以用来解决组件间数据通信</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建事件中心管理组件之间的通信</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> EventBus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中使用 xxx.vue </span></span><br><span class="line"><span class="comment">// 发送事件</span></span><br><span class="line">EventBus.$emit(<span class="string">&#x27;evnetName&#x27;</span>, &#123;<span class="attr">num</span>: <span class="number">1</span>&#125;);</span><br><span class="line"><span class="comment">// 接收事件</span></span><br><span class="line">EventBus.$on(<span class="string">&#x27;eventName&#x27;</span>, <span class="function">(<span class="params">&#123; num &#125;</span>) =&gt;</span> <span class="built_in">console</span>.log(num));</span><br></pre></td></tr></table></figure><ul><li><code>vue</code> 双向绑定机制</li></ul> <div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/4e8353c9/rerewrite.png" alt="vue响应式"/></div><span class="image-caption">vue响应式</span></div><ul><li>响应式化大致是使用 <code>Object.defineProperty</code> 把数据转为 <code>getter/setter</code>，并为每个数据添加一个订阅者列表的过程，这个列表是 <code>getter</code> 闭包中的属性，将会记录所有依赖这个数据的组件，也就是说，响应化后的数据相当于发布者</li><li>每个组件都对应一个 <code>Watcher</code> 订阅者，当每个组件的渲染函数被执行时，都会将本组件的 <code>watcher</code> 放到自己所依赖的响应式数据的订阅者列表里，这就相当于完成了订阅，一般这个过程被称为依赖收集 <code>Dependency Collect</code></li><li>组件渲染函数执行的结果是生成虚拟 <code>dom</code> (<code>virtual dom tree</code>)，这个树生成后将被映射为浏览器上的真实的 <code>dom</code> 树，也就是用户所看到的页面列表</li><li>当响应式数据发生变化时，也就是触发了 <code>setter</code> 时，<code>setter</code> 会负责通知 <code>notify</code> 该数据的订阅者列表里的 <code>watcher</code>，<code>watcher</code> 会触发组件重新渲染(<code>trigger re-render</code>) 来更新 <code>update</code> 视图</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/core/observers/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> <span class="title">reactiveGetter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">const</span> value = getter ? getter.call(obj) : val; <span class="comment">// 如果原本对象拥有 getter 方法则执行</span></span><br><span class="line">        dep.depend(); <span class="comment">// 进行依赖收集 ,dep.addSub</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> <span class="title">reactiveSetter</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">if</span> (setter) &#123;</span><br><span class="line">            setter.call(obj, newValue); <span class="comment">// 如果原本对象拥有 setter 方法则执行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        dep.notify()<span class="comment">// 如果发生变更，则通知更新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="原型模式">原型模式</h2><ol><li>原型模式通过克隆现有对象来创建新对象，而不是依赖显式的实例化过程。每个对象都可以作为另一个对象的原型，新对象会继承原型对象的属性和方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">name</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">clone</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.create(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// Object.getPrototypeOf(object); 返回指定对象的原型（即内部 [[Prototype]] 属性的值）</span></span><br><span class="line">        <span class="comment">// Object.create(object); 以该对象为原型创建一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建原型对象</span></span><br><span class="line"><span class="keyword">const</span> prototype = <span class="keyword">new</span> Prototype(<span class="string">&#x27;prototype&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 克隆对象</span></span><br><span class="line"><span class="keyword">const</span> clone1 = prototype.clone();</span><br><span class="line"><span class="keyword">const</span> clone2 = prototype.clone();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clone1.name);</span><br><span class="line"><span class="built_in">console</span>.log(clone2.name);</span><br><span class="line"></span><br><span class="line">prototype.name = <span class="string">&#x27;console&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(clone1.name);</span><br><span class="line"><span class="built_in">console</span>.log(clone2.name);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当创建对象的过程比较昂贵或复杂时，而且新对象的创建与现有对象的状态无关时</li><li>当希望通过修改原型来影响所有克隆对象时</li><li>当需要避免使用 <code>new</code> 关键字直接实例化对象时</li></ul></li><li>优点<ul><li>避免了创建对象的昂贵或复杂过程，提高了性能和效率</li><li>可以通过修改原型对象来影响所有克隆对象，实现了对象状态的批量修改</li></ul></li></ol><h2 id="适配器模式">适配器模式</h2><ol><li>适配器模式将一个类的接口转换为另一个接口，以满足客户端的需求，它通过创建一个适配器类来实现接口转换，并在适配器类中调用被适配类的方法</li><li>适配器模式(<code>Adapter Pattern</code>) 又叫包装器模式，将一个类(对象)的接口(方法、属性)转化为用户需要的另一个接口，解决类(对象),之间接口不兼容的问题<ul><li>主要功能是进行转换匹配，目的是复用已有的功能，而不是来实现新的接口，也就是说，访问者需要的功能应该是已经实现好了的，不需要适配器模式来实现，适配器模式主要负责把不兼容的接口转换为访问者期望的格式而已</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">specificRequest</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Specific request&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">adaptee</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">request</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.adaptee.specificRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用适配器</span></span><br><span class="line"><span class="keyword">const</span> adaptee = <span class="keyword">new</span> Adaptee();</span><br><span class="line"><span class="keyword">const</span> adapter = <span class="keyword">new</span> Adapter(adaptee);</span><br><span class="line"><span class="built_in">console</span>.log(adapter.request()); <span class="comment">// </span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>使用场景</p><ul><li>当需要将一个已有类的接口转换为另一个接口时</li><li>当希望通过一个统一的接口来使用多个不兼容的类时</li><li>当需要在不影响现有代码的情况下，对已有类的方法进行扩展或修改时</li></ul></li><li><p>优点</p><ul><li>可以将已有类与新代码进行无缝衔接，使它们可以协同工作</li><li>可以实现对象之间的接口转换，提供了灵活性和可扩展性</li></ul></li><li><p>适配器实际案例</p><ul><li><code>vue</code> 计算属性</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            message: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        reversedMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对原有数据并没有改变，只改变了原有数据的表现形式</span></span><br></pre></td></tr></table></figure><ul><li><code>axios</code> 用来发送请求的 <code>adapter</code> 本质上是封装了浏览器提供的 <code>XMLHttpRequest</code></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="title">xhrAdapter</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">dispatchXhrRequest</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> requestData = config.data;</span><br><span class="line">        <span class="keyword">var</span> requestHeaders = config.headers;</span><br><span class="line">        <span class="keyword">var</span> request = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化请求</span></span><br><span class="line">        request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置最大超时时间</span></span><br><span class="line">        request.timeout = config.timeout;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// readyState 属性发生变化时的回调</span></span><br><span class="line">        request.onreadystatechange = <span class="function"><span class="keyword">function</span> <span class="title">handleLoad</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 浏览器请求退出时的回调</span></span><br><span class="line">        request.onabort = <span class="function"><span class="keyword">function</span> <span class="title">handleAbort</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当请求报错时的回调</span></span><br><span class="line">        request.onerror = <span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当请求超时调用的回调</span></span><br><span class="line">        request.ontimeout = <span class="function"><span class="keyword">function</span> <span class="title">handleTimeout</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置请求头的值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&#x27;setRequestHeader&#x27;</span> <span class="keyword">in</span> request) &#123;</span><br><span class="line">            request.setRequestHeader(key, val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨域请求是否应该使用证书</span></span><br><span class="line">        <span class="keyword">if</span> (config.withCredentials) &#123;</span><br><span class="line">            request.withCredentials = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 响应类型</span></span><br><span class="line">        <span class="keyword">if</span> (config.responseType) &#123;</span><br><span class="line">            request.responseType = config.responseType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送请求</span></span><br><span class="line">        request.send(requestData);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> 这个模块主要是对请求头、请求配置和一些回调的设置，并没有对原生的 API 有改动，所以也可以在其他地方正常使用。这个适配器可以看作是对 XMLHttpRequest 的适配，是用户对 Axios 调用层到原生 XMLHttpRequest 这个 API 之间的适配层</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="装饰者模式">装饰者模式</h2><ol><li>装饰者模式动态地给对象添加新的行为或功能，同时不改变其原始类结构，它通过创建一个装饰器类来包装原始对象，并在装饰器类中添加额外的行为</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">operation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Component operation&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">component</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">operation</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.component.operation()&#125;</span> + Decorator operation`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用装饰者</span></span><br><span class="line"><span class="keyword">const</span> com = <span class="keyword">new</span> Component();</span><br><span class="line"><span class="keyword">const</span> decorator = <span class="keyword">new</span> Decorator(com);</span><br><span class="line"><span class="built_in">console</span>.log(decorator.operation()); <span class="comment">// 输出 component operation + Decorator operation</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当需要在不改变现有对象结构的情况下，动态地给对象添加新的行为时</li><li>当希望通过透明的方式为对象添加功能，而不影响其使用方式和客户端代码时</li><li>当不适合使用子类来扩展对象功能时</li></ul></li><li>优点<ul><li>可以透明地扩展对象的功能，而不影响客户端代码</li><li>允许通过装饰器类组合和嵌套多个装饰器，实现复杂的功能组合</li></ul></li></ol><h2 id="策略模式">策略模式</h2><ol><li>策略模式定义了一系列算法，将它们封装为独立的可互换的策略对象，并使得客户端可以在运行时动态地选择不同的策略。客户端通过与策略对象进行交互来实现不同的行为。策略模式定义了一系列算法，将它们一个个封装起来，并且使它们可以互相替换。封装的策略算法一般是独立的，策略模式根据输入来调整采用哪个算法。关键是策略的实现和使用分离</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">execute</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 策略执行的具体操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategy1</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">execute</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Strategy 1&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategy2</span> <span class="keyword">extends</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">execute</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Strategy 2&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用策略</span></span><br><span class="line"><span class="keyword">const</span> st1 = <span class="keyword">new</span> ConcreteStrategy1();</span><br><span class="line"><span class="keyword">const</span> st2 = <span class="keyword">new</span> ConcreteStrategy2();</span><br><span class="line"></span><br><span class="line">st1.execute();</span><br><span class="line">st2.execute();</span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当需要在多个算法或行为之间进行动态选择时</li><li>当希望将算法的实现与使用它的客户端代码分离，以便它们可以独立地演化和修改时</li><li>当不希望使用大量的条件语句来处理不同的情况时</li></ul></li><li>优点<ul><li>实现了算法的封装和多态性，可以根据需要灵活地切换算法</li><li>将算法的实现与使用它的客户端代码分离，使得它们可以独立演化和修改</li></ul></li><li>策略模式的实际使用<ul><li><p>表格 <code>formatter</code></p><ul><li><code>element ui</code> 的表格控件的 <code>column</code> 接受收一个 <code>formatter</code> 参数来格式化内容，其类型为函数，并且还可以接收几个特定的参数，例如：<code>Function(row, column, cellValue, index)</code></li><li>以文件大小为例，后端经常会直接传入 <code>bit</code> 单位的文件大小，那么前端需要根据后端的数据，根据需求转化为需要的单位的文件大小，例如 <code>kb/mb</code></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先实现文件计算的算法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> StrategyMap = &#123;</span><br><span class="line">    <span class="comment">// StrategyMap 1. 将文件大小 bit 转为 kb</span></span><br><span class="line">    bitToKB: <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> num = <span class="built_in">Number</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isNaN</span>(num) ? val : (num / <span class="number">1024</span>).toFixed(<span class="number">0</span>) + <span class="string">&#x27;KB&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// StrategyMap 2. 将文件大小 bit 转为 MB</span></span><br><span class="line">    bitToMB: <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> num = <span class="built_in">Number</span>(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">isNaN</span>(num) ? val : (num / <span class="number">1024</span> / <span class="number">1024</span>).toFixed(<span class="number">1</span>) + <span class="string">&#x27;MB&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Context: 生成el表单 formatter</span></span><br><span class="line"><span class="keyword">const</span> strategyContext = <span class="function"><span class="keyword">function</span>(<span class="params">type, rowKey</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">row, column, cellValue, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StrategyMap[type](row[rowKey]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> strategyContext;</span><br></pre></td></tr></table></figure></li><li><p>表单验证</p><ul><li>除了表格中的 <code>formatter</code> 之外，策略模式也经常用在表单验证的场景。<code>element-ui</code> 的 <code>form</code> 表单具有表单验证功能，用来校验用户输入的表单内容。实际需求中表单验证项一般会比较复杂，所以需要给每个表单项增加 <code>validator</code> 自定义校验方法</li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 姓名校验 由2-10位汉字组成 </span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateUsername</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^[\u4e00-\u9fa5]&#123;2,10&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 手机号校验 由以1开头的11位数字组成  </span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateMobile</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^1\d&#123;10&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">validateEmail</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> reg = <span class="regexp">/^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Validates <span class="keyword">from</span> <span class="string">&#x27;../validates.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成表单自定义校验函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> formValidateGene = <span class="function">(<span class="params">key, msg</span>) =&gt;</span> <span class="function">(<span class="params">rule, value, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Validates[key](value)) &#123;</span><br><span class="line">        cb();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb(<span class="keyword">new</span> <span class="built_in">Error</span>(msg));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="模块模式">模块模式</h2><ol><li>模块模式使用函数作用域和闭包来封装和组织代码，实现模块化和私有性。它通过返回一个包含公共方法和属性的对象，来实现对外部的封装</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">module</span> = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> privateVariable = <span class="string">&#x27;private&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;private method&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        publicVariable: <span class="string">&#x27;public&#x27;</span>,</span><br><span class="line">        publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;public method&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.publicVariable);</span><br><span class="line"><span class="built_in">module</span>.publicMethod();</span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当希望将相关的方法和属性封装在一个单独的对象时</li><li>当希望限制对方法和属性的访问，并保持私有性时</li><li>当需要实现模块化，避免全局命名冲突和污染时</li></ul></li><li>优点<ul><li>将相关的方法和属性封装在一个单独的对象中，提供了组织和管理代码的方式</li><li>通过闭包实现了私有性，可以隐藏内部实现细节，防止外部访问和修改</li></ul></li></ol><h2 id="代理模式">代理模式</h2><ol><li>代理模式为一个对象提供一个代理或占位符，并控制对其的访问，代理对象可以在访问被代理对象之前或之后添加额外的逻辑，如延迟加载、权限控制、缓存等。代理模式又称委托模式，它为目标对象创建一个代理对象，以控制对目标对象的访问。代理模式把代理对象插入到访问者和目标对象之间，从而为访问者对目标对象的访问引入一定的间接性。正是这种间接性，给了代理对象很多操作空间，比如在调用目标对象前和调用后进行一些预操作和后操作，从而实现新的功能或者扩展目标的功能</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">request</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;Real subject request&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">realSubject</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">request</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 在调用真实对象之前或之后执行额外的操作</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;proxy request&#x27;</span>);</span><br><span class="line">        <span class="built_in">this</span>.realSubject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用代理</span></span><br><span class="line"><span class="keyword">const</span> realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(realSubject);</span><br><span class="line"></span><br><span class="line">proxy.request();</span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当需要在访问对象之前或之后执行额外的操作</li><li>当希望通过代理控制对象的访问权限时</li><li>当需要延迟加载对象或实现缓存功能时</li></ul></li><li>优点<ul><li>可以在访问对象之前或之后执行额外操作，如延迟加载、权限控制、缓存等</li><li>提供了对真实对象的访问控制，可以限制对对象的直接访问</li></ul></li><li>代理模式实际使用<ul><li>拦截器<ul><li><code>axios</code> 实例来进行 <code>http</code> 请求，使用拦截器 <code>interceptor</code> 可以提前对 <code>request</code> 请求和 <code>response</code> 响应返回进行一些预处理，比如<ul><li><code>request</code> 响应头、<code>cookie</code> 设置</li><li>权限信息的预处理，常见的比如验权操作或 <code>token</code> 验证</li><li>数据格式的格式化，比如对组件绑定的 <code>date</code> 类型的数据在请求前进行一些格式约定好的序列化操作</li><li>空字符串的格式预处理，根据后端进行一些过滤操作</li><li><code>response</code> 的一些通用报错处理，比如使用 <code>message</code> 控件抛出错误</li><li>除了 <code>http</code> 相关的拦截器之外，还有路由跳转的拦截器，可以进行一些路由跳转的预处理等操作</li></ul></li></ul></li><li>前端框架的数据响应化<ul><li><code>Vue 2.x</code> 中通过 <code>Object.defineProperty</code> 来劫持各个属性的 <code>setter/getter</code>，在数据变动时，通过发布-订阅模式发布消息给订阅者，触发相应的监听回调，从而实现数据的响应式化，也就是数据到视图的双向绑定</li><li>为什么 <code>Vue 2.x</code> 到 <code>3.x</code> 要从 <code>Object.defineProperty</code> 改用 <code>Proxy</code> 呢，是因为前者的一些局限性，导致的以下缺陷<ul><li>无法监听利用索引直接设置数组的一个项，例如 <code>vm.items[indexOfItem] = newValue</code></li><li>无法监听数组的长度的修改，例如 <code>vm.items.length = newLength</code></li><li>无法监听 <code>es6</code> 的 <code>Set weakSet Map WeakMap</code> 的变化</li><li>无法监听 <code>Class</code> 类型的数据</li><li>无法监听对象属性的新加或删除</li></ul></li></ul></li></ul></li></ol><h2 id="迭代器模式">迭代器模式</h2><ol><li>迭代器模式提供了一种访问集合对象元素的方式，而无需暴露集合的内部结构，它将迭代逻辑封装在迭代器对象中，客户端通过迭代器来遍历集合</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义集合对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">addItem</span>(<span class="params">item</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items.push(item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getIterator</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator(<span class="built_in">this</span>.items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义迭代器对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">collection</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.collection = collection;</span><br><span class="line">        <span class="built_in">this</span>.index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">hasNext</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.index &lt; <span class="built_in">this</span>.collection.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.collection[<span class="built_in">this</span>.index++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用迭代器遍历集合</span></span><br><span class="line"><span class="keyword">const</span> collection = <span class="keyword">new</span> Collection();</span><br><span class="line">collection.addItem(<span class="string">&quot;item 1&quot;</span>);</span><br><span class="line">collection.addItem(<span class="string">&quot;item 2&quot;</span>);</span><br><span class="line">collection.addItem(<span class="string">&quot;item 3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = collection.getIterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当集合对象的内部结构可能经常变化时，使用迭代器可以减少对客户端代码的影响</li><li>当需要对集合对象进行不同类型的遍历时，迭代器提供了统一的接口，使得遍历逻辑更加灵活和可扩展</li><li>当需要在遍历过程中对集合元素进行筛选、过滤或转换时，可以通过迭代器来实现</li></ul></li><li>优点<ul><li>将遍历集合的责任从客户端代码抽离出来，简化了客户端代码</li><li>隐藏了集合的内部结构，提供了更好的封装性和安全性</li><li>支持不同类型的集合，提供了统一的迭代接口</li></ul></li></ol><h2 id="状态模式">状态模式</h2><ol><li>状态模式运行对象在内部状态发生改变时改变其行为，看起来像是对象类发生了改变，它将每个状态封装在一个独立的类中，并允许对象在不同状态之间切换</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义状态接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">handle</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 默认实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义具体状态类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateA</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">handle</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;state A&#x27;</span>);</span><br><span class="line">        context.setState(<span class="keyword">new</span> ConcreteSateB());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStateB</span> <span class="keyword">extends</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">handle</span>(<span class="params">context</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sate B&#x27;</span>);</span><br><span class="line">        context.setState(<span class="keyword">new</span> ConcreteStateA());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义上下文</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="keyword">new</span> ConcreteStateA();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">setState</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">request</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state.handle(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用状态模式</span></span><br><span class="line"><span class="keyword">const</span> context = <span class="keyword">new</span> Context();</span><br><span class="line">context.request(); <span class="comment">// 输出 stateA</span></span><br><span class="line">context.request(); <span class="comment">// B</span></span><br><span class="line">context.request(); <span class="comment">//A</span></span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景<ul><li>当一个对象的行为取决于其内部状态，并且在不同状态下具有不同行为时，可以使用状态模式来管理状态转换和行为</li><li>当需要在运行时根据条件动态地改变对象的行为时，状态模式提供了一种优雅的方式来实现</li><li>当对象有大量的条件语句，而且随着状态的增加会变得更加复杂时，可以使用状态模式来简化代码结构</li></ul></li><li>优点<ul><li>将对象的状态和行为封装在独立的类中，提高了代码的可读性和可维护性</li><li>避免了使用大量的条件语句来处理不同的状态，简化了代码结构</li><li>新增或修改状态变得更加容易，不会对其他状态产生影响</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的四个观察者Api</title>
      <link href="40c5f1c9/"/>
      <url>40c5f1c9/</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript中的几个Observer">JavaScript中的几个Observer</h2><ol><li><code>IntersectionObserver</code></li><li><code>MutationObserver</code></li><li><code>ResizeObserver</code></li><li><code>PerformanceObserver</code></li></ol><h2 id="IntersectionObserver">IntersectionObserver</h2><ol><li>如果需要监听某个元素，当它在视口中可见的时候希望可以得到通知，这个 <code>api</code> 就是最佳选择，以往我们的做法是绑定容器的 <code>scroll</code> 事件，或者设定时器不停的调用 <code>getBoundingClientRect()</code> 获取元素位置，这样做的性能会很差，因为每次获取元素的位置都会引起整个布局的重新计算，如果一些元素被放到 <code>iframe</code> 里面，想要知道它们何时出现几乎是不可能的</li><li><code>IntersectionObserver</code> 提供了一种异步观察目标元素与其祖先元素或顶级文档视口（<code>viewport</code>）交叉状态的方法，其祖先元素或视口被称为根</li><li>当一个 <code>IntersectionObserver</code> 对象被创建时，其被配置为监听根中一段给定比例的可见区域。一旦 <code>IntersectionObserver</code> 被创建，则无法更改其配置，所以一个给定的观察者对象只能用来监听可见区域的特定变化值；然而，你可以在同一个观察者对象中配置监听多个目标元素</li><li>构造函数 <code>IntersectionObserver(callback[, options])</code><ul><li><code>callback</code> 是一个回调函数，当其监听到目标元素的可见部分（的比例）超过了一个或多个阈值（<code>threshold</code>）时，会执行指定的回调函数<ul><li>回调函数接收两个参数<ul><li>接收监听元素的实时数据组成的数组 <code>[IntersectionObserverEntry]</code>，每个被触发的阈值，都或多或少与指定阈值有偏差</li><li>被调用的 <code>intersectionObserver</code> 实例</li></ul></li></ul></li><li>每个 <code>IntersectionObserverEntry</code> 里包含如下属性<ul><li><code>time</code> 时间戳，可见性发生变化的时间，是一个高精度时间戳，单位为毫秒</li><li><code>rootBounds</code> 根元素的位置信息</li><li><code>boundingClientRect</code> 目标元素的位置信息</li><li><code>intersectionRect</code> 交叉部分的位置信息</li><li><code>intersectionRatio</code> 目标元素的可见比例，即 <code>intersectionRect</code> 占 <code>boundingClientRect</code> 的比例，完全可见时为 <code>1</code>，完全不可见时小于等于 <code>0</code></li><li><code>taget</code> 目标元素，也叫被观察的元素，是一个 <code>dom</code> 节点对象</li><li><code>isVisible</code> 未查阅相关资料，且不会发生变化</li><li><code>isIntersecting</code> 目标元素是否与视口交叉。<code>mdn</code> 介绍：返回一个布尔值，如果目标元素与交叉区域观察者对象 <code>(intersection observer)</code> 的根相交，则返回 <code>true</code> .如果返回 <code>true</code>, 则 <code>IntersectionObserverEntry</code> 描述了变换到交叉时的状态; 如果返回 <code>false</code>, 那么可以由此判断，变换是从交叉状态到非交叉状态</li></ul></li><li><code>options</code> 是一些配置, <code>[, options]</code> 表示可选参数<ul><li><code>root</code> 目标元素的祖先元素，即该元素必须是目标元素的直接或间接父级，如果构造函数未传人 <code>root</code> 或其值是 <code>null</code>，则默认使用顶级文档作为视口</li><li><code>rootMargin</code> 一个在计算交叉值时添加至 <code>root</code> 边界盒中的一组偏移量，写法类似 <code>css</code> 的 <code>margin</code>，<code>mdn</code> 介绍计算交叉时添加到根边界盒 <code>(en-US)</code> 的矩形偏移量，可以有效的缩小或扩大根的判定范围从而满足计算需要。此属性返回的值可能与调用构造函数时指定的值不同，因此可能需要更改该值，以匹配内部要求。所有的偏移量均可用像素（<code>px</code>）或百分比（<code>%</code>）来表达，默认值为 <code>“0px 0px 0px 0px”</code></li><li><code>threshold</code> 规定了一个监听目标与边界盒交叉区域的比例值，可以是一个具体的数值或是一组 <code>0.0</code> 到 <code>1.0</code> 之间的数组，<code>mdn</code> 介绍：一个包含阈值的列表，按升序排列，列表中的每个阈值都是监听对象的交叉区域与边界区域的比率。当监听对象的任何阈值被越过时，都会生成一个通知（<code>Notification</code>）。如果构造器未传入值，则默认值为 <code>0</code><br>5.实例方法和属性</li></ul></li><li><code>root</code> 同 <code>options</code> 只读</li><li><code>rootMargin</code> 同 <code>options</code> 只读</li><li><code>threshold</code> 同 <code>options</code> 只读</li><li><code>disconnect()</code> 停止监听目标</li><li><code>observe()</code> 开始监听目标元素</li><li><code>takeRecords()</code> 返回所有观察目标的 <code>intersectionObserverEntry</code> 对象数组</li><li><code>unobserve()</code> 停止监听特定的目标元素，需要传人目标元素</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化一个观察器</span></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span>(<span class="params">entries, observer</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(entries);</span><br><span class="line">    <span class="built_in">console</span>.log(observer);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> target = <span class="built_in">document</span>.querySelect(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"><span class="comment">// 开始监听元素</span></span><br><span class="line">observer.observe(target);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 停止对目标元素的监听</span></span><br><span class="line">observer.unobserve(target);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终止对所有目标的监听</span></span><br><span class="line">observer.disconnect();</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/40c5f1c9/intersectratio.png" alt="intersectionRatio"/></div><span class="image-caption">intersectionRatio</span></div><ol start="6"><li>示例</li></ol><iframe id="cp_embed_oNQojrP" src="//codepen.io/milkdue/embed/oNQojrP?height=300&theme-id=dark&slug-hash=oNQojrP&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><ol start="7"><li>图片懒加载例子</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;img[data-src]&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    rootMargin: <span class="string">&#x27;0px&#x27;</span>,</span><br><span class="line">    threshold: <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, self</span>) =&gt;</span> &#123;</span><br><span class="line">    entries.forEach(<span class="function"><span class="params">entry</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(entry.isIntersecting)&#123;</span><br><span class="line">            <span class="keyword">let</span> img = entry.target;</span><br><span class="line">            <span class="keyword">let</span> src = img.dataset.src;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (src) &#123;</span><br><span class="line">                img.src = src;</span><br><span class="line">                img.removeAttribute(<span class="string">&#x27;data-src&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 解除观察</span></span><br><span class="line">            self.unobserve(entry.target);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, config)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">imgs.forEach(<span class="function"><span class="params">img</span> =&gt;</span> observer.observe(img));</span><br></pre></td></tr></table></figure><ol start="8"><li>无限滚动例子 <code>infinite scroll</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> intersectionObserver = <span class="keyword">new</span> IntersectionObserver(<span class="function"><span class="keyword">function</span>(<span class="params">entries</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果不可见，就返回</span></span><br><span class="line">    <span class="keyword">if</span>(entries[<span class="number">0</span>].intersectionRatio &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    loadItems(<span class="number">10</span>); <span class="comment">// 加载数据 伪代码</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;loaded new items&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">intersectionObserver.observe($<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="MutationObserver">MutationObserver</h2><ol><li>如果想要知道某个元素在某个时候发生了具体的哪些变化，<code>MutationObserver</code> 就是最佳选择</li><li>构造函数 <code>MutationObserver(callback)</code><ul><li><code>callback</code> 一个回调函数，每当指定节点或子树以及配置项有 <code>dom</code> 变动时会被调用，回调函数拥有两个参数<ul><li>一个是描述了所有被触发改动 <code>MutationRecord</code> 对象数组</li><li>另一个是调用该函数的 <code>MutationObserver</code> 对象</li></ul></li><li>返回值，一个新的、包含监听 <code>DOM</code> 变化回调函数的 <code>MutationObserver</code> 对象</li></ul></li><li><code>MutationObserver</code> 对象的方法<ul><li><code>disconnect()</code> 阻止 <code>MutationObserver</code> 实例继续接收通知，直到再次调用其 <code>observe()</code> 方法，该观察者对象包含的回调函数都不会再被调用</li><li><code>observe()</code> 配置 <code>MutationObserver</code> 在 <code>DOM</code> 更改匹配给定选项时，通过其回调函数开始接收通知，就是说调用 <code>observe</code> 方法后开始观察 <code>DOM</code>，当观察者发现匹配观察请求中指定的配置项的更改后，<code>callback()</code> 方法开始调用</li><li><code>takeRecords()</code> 从 <code>MutationObserver</code> 的通知队列中删除所有待处理的通知，并将它们返回到 <code>MutationRecord</code> 对象的新 <code>Array</code> 中，就是返回已检测到但尚未由观察者的回调函数处理的所有匹配 <code>DOM</code> 更改的列表，使变更队列保持为空。此方法最常见的使用场景是在断开观察者之前立即获取所有未处理的更改记录，以便在停止观察者时可以处理任何未处理的更改</li></ul></li><li><code>MutationRecord</code><ul><li>每个 <code>MutationRecord</code> 都代表一个独立的 <code>DOM</code> 变化，在每次随 <code>DOM</code> 变化调用 <code>MutationObserver</code> 的回调函数时，一个相应的 <code>MutationRecord</code> 会被作为参数，传递给回调函数</li><li>属性<ul><li><code>MutationRecord.type</code>，类型是 <code>string</code>，如果是属性变化，则返回 <code>&quot;attributes&quot;</code> 如果是 <code>characterData</code> 节点变化，则返回 <code>&quot;characterData&quot;</code> 如果是子节点树 <code>childList</code> 变化，则返回 <code>&quot;childList&quot;</code></li><li><code>MutationRecord.target</code>，类型是 <code>Node</code>，根据 <code>MutationRecord.type</code>，返回变化所影响的节点。对于属性 <code>attributes</code> 变化，返回属性变化的节点。对于 <code>characterData</code> 变化，返回 <code>characterData</code> 节点。对于子节点树 <code>childList</code> 变化，返回子节点变化的节点</li><li><code>MutationRecord.addedNodes</code>，类型是 <code>NodeList</code>，返回被添加的节点。如果没有节点被添加，则该属性将是一个空的 <code>NodeList</code></li><li><code>MutationRecord.removedNodes</code>，类型是 <code>NodeList</code>，返回被移除的节点。如果没有节点被移除，则该属性将是一个空的 <code>NodeList</code></li><li><code>MutationRecord.previousSibling</code> 类型是 <code>Node</code>，返回被添加或移除的节点之前的兄弟节点，或者 <code>null</code></li><li><code>MutationRecord.nextSibling</code> 类型是 <code>Node</code> 返回被添加或移除的节点之后的兄弟节点，或者 <code>null</code></li><li><code>MutationRecord.attributeName</code> 类型是 <code>string</code> 返回被修改的属性的属性名，或者 <code>null</code></li><li><code>MutationRecord.attributeNamespace</code> 类型是 <code>string</code> 返回被修改属性的命名空间，或者 <code>null</code></li><li><code>MutationRecord.oldValue</code> 类型是 <code>string</code> 返回值取决于 <code>MutationRecord.type</code>。对于属性 <code>attributes</code> 变化，返回变化之前的属性值。对于 <code>characterData</code> 变化，返回变化之前的数据。对于子节点树 <code>childList</code> 变化，返回 <code>null</code>。<strong>注意</strong>，<u>如果要让这个属性起作用，在相应的</u> <code>MutationObserverInit</code> <u>参数的</u><code>MutationObserver</code> <code>observe</code> <u>方法中，</u> <code>attributeOldValue</code> <u>或者</u> <code>characterDataOldValue</code> <u>必须设置 `true`</u></li></ul></li></ul></li><li><code>observe(target, config)</code><ul><li><code>observe</code> 方法传入需要监听的节点，以及监听属性 <code>config</code></li><li><code>config</code><ul><li><code>attributes</code> 布尔类型，属性的变动</li><li><code>childList</code> 布尔类型，子节点的变动(指新增，删除)，不包括修改子节点以及子节点后代的变化</li><li><code>characterData</code> 布尔类型 节点内容或节点文本的变动</li><li><code>subtree</code> 布尔类型 是否将该观察器应用于该节点的所有后代节点</li><li><code>attributeOldValue</code> 布尔类型 观察 <code>attributes</code> 变动时，是否需要记录之前变动的值，如果设置了他可以省略 <code>attributes</code> 的设置，默认是 <code>true</code></li><li><code>characterDataOldValue</code> 布尔类型，观察 <code>characterData</code> 变动时是否需要记录变动前的值，同理，如果设置了他可以省略 <code>characterData</code> 的设置</li><li><code>attributeFilter</code> 数组 需要观察的特定属性，比如 <code>['class', 'src']</code></li></ul></li></ul></li><li><code>MutationObserver</code> 特点<ul><li>等待所有脚本任务完成之后才会运行，采用异步方式</li><li>把 <code>dom</code> 变动封装成一个数组进行处理，而不是一条条地个别处理 <code>dom</code> 变动</li><li>它既可以观察发生在 <code>dom</code> 节点的所有变动，也可以观察某一类变动</li><li>当 <code>dom</code> 发生变动会触发 <code>MutationObserver</code> 事件，但是，它与事件有一个本质不同，事件是同步触发，也就是说 <code>dom</code> 发生变动立即就会触发相应的事件，<code>MutationObserver</code> 则是异步触发，<code>dom</code> 发生变化以后，并不会马上触发，而是要等到所有 <code>dom</code> 操作都结束后才触发</li><li>举例来说，如果在文档中连续插入 <code>1000</code> 个段落（<code>p</code> 元素），会连续触发 <code>1000</code> 个插入事件，执行每个事件的回调函数，这很可能造成浏览器的卡顿；而 <code>MutationObserver</code> 完全不同，只在 <code>1000</code> 个段落都插入结束后才会触发，而且只触发一次，这样较少了 <code>DOM</code> 的频繁变动，大大有利于性能</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> targetNode = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">    attributes: <span class="literal">true</span>,</span><br><span class="line">    childList: <span class="literal">true</span>,</span><br><span class="line">    subtree: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">mutationRecords, observer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> mutation <span class="keyword">of</span> mutationRecords) &#123;</span><br><span class="line">        <span class="keyword">if</span> (mutation.type === <span class="string">&#x27;childList&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;A child node has been added or removed&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mutation.type === <span class="string">&#x27;attributes&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;The &#x27;</span> + mutation.attributeName + <span class="string">&#x27; attribute was modified&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> observer = <span class="keyword">new</span> MutationObserver(callback);</span><br><span class="line"></span><br><span class="line">observer.observe(targetNode, config);</span><br><span class="line"></span><br><span class="line">observer.disconnect();</span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/youthful-haslett-6qtwyq?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="youthful-haslett-6qtwyq"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h2 id="ResizeObserver">ResizeObserver</h2><ol><li>用来监听元素尺寸变化，之前为了监听元素的尺寸变化，都将监听附加到 <code>window</code> 中的 <code>resize</code> 事件，对于不受窗口变化影响的元素就没这么简单了</li><li>构造函数 <code>ResizeObserver(callback)</code>，创建并返回一个新的 <code>ResizeObserver</code> 对象</li><li><code>callback</code> 在内容盒或边框盒边界尺寸发生变化时调用<ul><li>该回调函数接收两个参数<ul><li><code>entries</code> 一个 <code>ResizeObserverEntry</code> 对象数组，可以用于获取每个元素改变后的新尺寸，<code>ResizeObserverentry</code> 属性如下<ul><li><code>ResizeObserverEntry.borderBoxSize</code> 只读属性，一个对象，当运行回调时，该对象包含着正在观察元素的新边框盒的大小</li><li><code>ResizeObserverEntry.contentBoxSize</code> 只读属性，一个对象，当运行回调时，该对象包含着正在观察元素的新内容盒的大小</li><li><code>ResizeObserverEntry.devicePixelContentBoxSize</code> 只读属性，一个对象，当运行回调时，该对象包含着正在观察元素的新内容盒的大小（以设备像素为单位）</li><li><code>ResizeObserverEntry.contentRect</code> 只读属性，一个对象，当运行回调时，该对象包含着正在观察元素新大小的 <code>DOMRectReadOnly</code> 对象。请注意，这比以上两个属性有着更好的支持，但是它是 <code>Resize Observer API</code> 早期实现遗留下来的，出于对浏览器的兼容性原因，仍然被保留在规范中，并且在未来的版本中可能被弃用</li><li><code>ResizeObserverEntry.target</code> 只读属性，对正在观察 <code>Element</code> 或 <code>SVGElement</code> 的引用</li></ul></li><li><code>observer</code> 对 <code>ResizeObserver</code> 自身的引用，因此需要它的时候，你要从回调函数的内部访问。例如，这可用于在达到特定的情况时，自动取消对观察者的监听，但如果你不需要它，可以省略它</li></ul></li></ul></li></ol><div class="tip "><p>内容盒是盒模型放置内容的部分，这意味着边框盒减去内边距和边框的宽度就是内容盒。边框盒包含内容、内边距和边框</p></div><ol start="4"><li>方法<ul><li><code>disconnect()</code> 取消特定观察者目标上所有对 <code>element</code> 的监听</li><li><code>observe(target[, options])</code> 开始对指定 <code>element</code> 的监听<ul><li><code>target</code> 是要监听的元素</li><li><code>options</code> 是一个可选参数，允许为监听的对象设置参数，目前只有一个参数<ul><li><code>box</code> 设置 <code>observer</code> 将监听的盒模型，可能的值<ul><li><code>content-bxo</code> 默认，<code>css</code> 中定义的内容区域的大小</li><li><code>border-box</code> <code>css</code> 中定义的边框区域的大小</li><li><code>device-pixel-content-box</code> 在对元素或其祖先应用任何 CSS 转换之前，CSS 中定义的内容区域的大小，以设备像素为单位</li></ul></li></ul></li></ul></li><li><code>unobserve(target)</code> 结束对指定 <code>element</code> 的监听</li></ul></li><li>触发条件<ul><li>在内容盒或边框盒边界尺寸发生变化时触发</li><li>元素被插入或移除时触发</li><li>元素 <code>display</code> 从显示变成 <code>none</code> 或相反过程时触发</li></ul></li><li>何时不触发<ul><li>对于不可替换内联元素不触发</li><li><code>css transform</code> 操作不触发</li></ul></li><li>该 <code>api</code> 依然处于试验阶段，需要考虑其兼容性</li></ol><iframe src="https://codesandbox.io/embed/stoic-taussig-w62m49?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="stoic-taussig-w62m49"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h2 id="PerformanceObserver">PerformanceObserver</h2><ol><li><code>PerformanceObserver</code> 是一个相对比较复杂的 <code>api</code> 用来监控各种性能相关的指标。 该 <code>API</code> 由一系列 <code>API</code> 组成：<ul><li><a href="https://www.w3.org/TR/2019/WD-performance-timeline-2-20190321/">Performance Timeline Level 2</a></li><li><a href="https://w3c.github.io/paint-timing/">Paint Timing 1</a></li><li><a href="https://w3c.github.io/navigation-timing/">Navigation Timing Level 2</a></li><li><a href="https://www.w3.org/TR/2019/WD-user-timing-3-20190308/">User Timing Level 3</a></li><li><a href="https://www.w3.org/TR/2019/WD-resource-timing-2-20190307/">Resource Timing Level 2</a></li><li><a href="https://www.w3.org/TR/2017/WD-longtasks-1-20170907/">Long Tasks API 1</a></li></ul></li><li>构造函数<ul><li><code>PerformanceObserver(callback)</code></li><li><code>callback</code> 为回调函数接收如下两个参数<ul><li>第一个参数是 性能观察条目列表 <code>PerformanceObserverEntryList</code><ul><li><code>PerformanceObserverEntryList.getEntries()</code> 返回一个 <code>PerformanceEntry</code> 对象数组</li><li><code>PerformanceObserverEntryList.getEntriesByType(type)</code> 根据 <code>type</code> 返回一个 <code>PerformanceEntry</code> 所构成的对象数组</li><li><code>PerformanceObserverEntryList.getEntriesByName(name[, type])</code> 根据 <code>name</code> 和 <code>typ</code>返回一个 <code>PerformanceEntry</code> 所构成的对象数组</li></ul></li><li>第二个参数是 观察者对象 <code>observer</code></li></ul></li><li><code>PerformanceEntry</code> 对象代表了 <code>performance</code> 时间列表中的单个 <code>metric</code> 数据。每一个 <code>performance entry</code> 都可以在应用运行过程中通过手动构建 <code>mark</code> 或者 <code>measure</code> (例如调用 <code>mark()</code> 方法) 生成。此外，<code>Performance entries</code> 在资源加载的时候，也会被动生成（例如图片、<code>script、css</code> 等资源加载），该对象包含如下属性和方法<ul><li><code>PerformanceEntry.name</code> 只读，该 <code>PerformanceEntry</code> 的名字</li><li><code>PerformanceEntry.entryType</code> 只读， <code>DOMString</code> 代表所上报的 <code>performance metric</code> 的 <code>entryType</code> 类型，例如 “mark”，其他类型可查阅 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceEntry/entryType">EntryType</a></li><li><code>PerformanceEntry.startTime</code> 只读，为 <code>metric</code> 上报的时间</li><li><code>PerformanceEntry.duration</code> 该事件的耗时</li><li><code>PerformanceEntry.toJSON()</code> 返回 <code>PerformanceEntry</code> 对象的 <code>JSON</code> 格式数据</li></ul></li><li>开始监听 <code>observer.observe(&#123;entryTypes: [entryTypes]&#125;)</code><ul><li><code>entryTypes</code>: 需要监控的指标名，这些指标都可以通过 <code>performance.getEntries()</code> 获取到，此外还可以通过 <code>performance.getEntriesByName()</code> 、<code>performance.getEntriesByType()</code> 分别针对 <code>name</code> 和 <code>entryType</code> 来过滤<ul><li><code>mark</code> 获取所有通过 <code>performance.mark(markName)</code> 做的所有标记</li><li><code>measure</code> 获取通过 <code>performance.measure(measureName, markName_start, markName_end)</code> 得到的所有测量值</li><li><code>longtask</code> 监听长任务（超过 <code>50ms</code> 的任务）（不足：只能监控到长任务的存在，貌似不能定位到具体任务）</li><li><code>paint</code> 获取绘制相关的性能指标，分为两种：<code>first-paint</code>、<code>first-contentful-paint</code></li><li><code>navigation</code> 各种与页面有关的时间，可通过 <code>performance.timing</code> 获取</li><li><code>resource</code> 各种与资源加载相关的信息</li></ul></li></ul></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> PerformanceObserver(<span class="function">(<span class="params">list</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> output;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> list.getEntries()) &#123;</span><br><span class="line">       <span class="comment">//业务代码</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observer.observe(&#123;</span><br><span class="line">    <span class="comment">//按需要填写</span></span><br><span class="line">    entryTypes: [<span class="string">&#x27;mark&#x27;</span>, <span class="string">&#x27;measure&#x27;</span>, <span class="string">&#x27;longtask&#x27;</span>, <span class="string">&#x27;paint&#x27;</span>, <span class="string">&#x27;navigation&#x27;</span>, <span class="string">&#x27;resource&#x27;</span>] </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><iframe id="cp_embed_XWyzqOP" src="//codepen.io/milkdue/embed/XWyzqOP?height=300&theme-id=dark&slug-hash=XWyzqOP&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript控制台</title>
      <link href="1d6a2e1f/"/>
      <url>1d6a2e1f/</url>
      
        <content type="html"><![CDATA[<h2 id="web控制台">web控制台</h2><p><code>Web</code> 控制台是一个工具，主要用于记录与网页相关的信息，例如：网络请求、<code>JavaScript</code> 安全错误、警告、<code>CSS</code> 等。它使我们能够通过在网页内容中执行<code>JavaScript</code> 表达式来与网页交互</p><h2 id="控制台的类型">控制台的类型</h2><ol><li><code>console.log()</code></li><li><code>console.error()</code></li><li><code>console.warn()</code></li><li><code>console.clear()</code></li><li><code>console.time()</code></li><li><code>console.table()</code></li><li><code>console.count()</code></li><li><code>console.group()</code></li></ol><h3 id="console-log">console.log()</h3><ol><li>用于将输出信息打印到控制台，<code>log()</code> 可以放入任何类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">111</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">console</span>.log(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h3 id="console-error">console.error()</h3><ol><li>用于将错误消息记录到控制台，默认情况下，错误消息将突出显示为红色</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.error(<span class="string">&#x27;error&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="console-warn">console.warn()</h3><ol><li>用于将警告消息记录到控制台，默认情况下，警告消息将突出显示为黄色</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.warn(<span class="string">&#x27;warn&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="console-clear">console.clear()</h3><ol><li>用于清除控制台信息</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.clear();</span><br></pre></td></tr></table></figure><h3 id="console-time-和-console-timeEnd">console.time() 和 console.timeEnd()</h3><ol><li>想知道一段代码或一个函数所需要花费的时间，都可以使用 <code>JavaScript</code> 控制台对象提供的 <code>time()</code> 和 <code>timeEnd()</code> 方法。关键是要有一个必须相同的标签，而里面的代码可以是任何东西（函数、对象、甚至直接 <code>console.log()</code> 都可以）</li><li>启动一个计时器来跟踪某一个操作的占用时长。每一个计时器必须拥有唯一的名字，页面中最多能同时运行 <code>10,000</code> 个计时器</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">&quot;forEach&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000</span>).map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> index * <span class="number">2</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item));</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">&quot;forEach&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="console-table">console.table()</h3><ol><li>在控制台生成表格，输入数据必须是数组或对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.table(&#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>&#125;);</span><br></pre></td></tr></table></figure><h3 id="console-count">console.count()</h3><ol><li>调用时会将数组写入控制台</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.count(<span class="number">1</span>); <span class="comment">// 1: 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.count(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="console-group-和-console-groupEnd">console.group() 和 console.groupEnd()</h3><ol><li>控制台对象的 <code>group()</code> 和 <code>groupEnd()</code> 方法允许我们将内容分组到单独的代码块中，并且这些代码块将缩进。和 <code>time()</code> 和 <code>timeEnd()</code> 一样，它们也接受值相同的标签</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.group(<span class="string">&#x27;group&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;group001&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">&#x27;group002&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">&#x27;group003&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.groupEnd(<span class="string">&#x27;group&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;exit group&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端必须了解的package.json</title>
      <link href="c35f6055/"/>
      <url>c35f6055/</url>
      
        <content type="html"><![CDATA[<h2 id="package-json">package.json</h2><div class="tip "><p><code>package.json</code> 是一个用于描述和配置项目的重要文件，其中包含了许多字段和选项，可以影响项目的构建、依赖管理、脚本执行等方面。了解这些字段可以帮助开发者更好地理解和控制项目的行为</p><p><code>package.json</code> 对于大部分前端开发者来说，知道 <code>dependencies</code> 与<code>devDependencies</code> 就够了。但对于库开发者或有更高级需求的开发者来说，了解 <code>package.json</code> 的其他字段是非常有必要的</p></div><h2 id="必须属性">必须属性</h2><h3 id="name">name</h3><ol><li>定义项目的名称，不能以 <code>.</code> 和 <code>_</code> 开头，不能包含大写字母</li></ol><h3 id="version">version</h3><ol><li>定义项目的版本号，格式为 <code>大版本号.次版本号.修订号</code></li></ol><h2 id="描述信息">描述信息</h2><h3 id="description">description</h3><ol><li>项目描述</li></ol><h3 id="keywords">keywords</h3><ol><li>项目关键字</li></ol><h3 id="author">author</h3><ol><li>项目作者</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;author&quot;: &quot;name (https://github.com)&quot;</span><br></pre></td></tr></table></figure><h3 id="contributors">contributors</h3><ol><li>项目贡献者</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;contributors&quot;: [</span><br><span class="line">    <span class="string">&quot;name &lt;emial&gt; (https://github.com)&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="homepage">homepage</h3><ol><li>项目主页地址</li></ol><h3 id="repository">repository</h3><ol><li>项目代码仓库地址</li></ol><h3 id="bugs">bugs</h3><ol><li>项目提交问题地址</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//提交问题的地址和反馈的邮箱,url通常是Github中的issues页面</span></span><br><span class="line">&quot;bugs&quot;: &#123; </span><br><span class="line">    &quot;url&quot; : &quot;https://github.com/facebook/react/issues&quot;, </span><br><span class="line">    &quot;email&quot; : &quot;xxxxx@xx.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="funding">funding</h3><ol><li>指定项目的资金支持方式和链接</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &quot;funding&quot;: &#123;</span><br><span class="line">    &quot;type&quot;: &quot;afdian&quot;,</span><br><span class="line">    &quot;url&quot;: &quot;https://afdian.net/&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖配置">依赖配置</h2><h3 id="dependencies">dependencies</h3><ol><li>生产环境的依赖包</li><li>版本号<ul><li><code>^</code> 限定大版本</li><li><code>~</code> 限定次版本</li></ul></li><li><code>package-lock.json</code> 中存储当前实际安装的版本</li></ol><h3 id="devDependencies">devDependencies</h3><ol><li>开发环境的依赖包，比如一些打包工具、babel、eslint</li></ol><h3 id="peerDependencies">peerDependencies</h3><ol><li><p>对等依赖的作用</p><ul><li>减小打包体积：例如使用 <code>react</code> 开发的组件库，安装 <code>react</code> 是必不可少的，而使用组件库的开发者，本地项目肯定安装了 <code>react</code> 因此开发的组件库中不必把 <code>react</code> 打包进去 (期望项目的使用者来提供这些模块的实现)</li><li>版本一致性：使用你的组件库的开发者需要确保它们的项目中安装了与你声明的对等依赖版本兼容的包，以确保组件库可以正常运行</li></ul></li><li><p>例如：声明使用组件库，需要在项目中安装大于 <code>17.0.1</code> 版本的 <code>react</code></p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;peerDependencies&quot;: &#123;</span><br><span class="line">    &quot;react&quot;: &quot;&gt;17.0.1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="peerDependenciesMeta">peerDependenciesMeta</h3><ol><li>将对等依赖标记为可选，如果用户没有安装对等依赖，<code>npm</code> 不会发出警告</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;peerDependenciesMeta&quot;: &#123;</span><br><span class="line">    &quot;react&quot;: &#123;</span><br><span class="line">        &quot;optional&quot;: true //标记为可选</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bundledDependencies">bundledDependencies</h3><ol><li>声明捆绑依赖项(使用情景较少)</li></ol><h3 id="optionalDependencies">optionalDependencies</h3><ol><li>声明可选依赖项(使用情景较少)</li></ol><h3 id="engines">engines</h3><ol><li>声明对 <code>npm</code> 或 <code>node</code> 版本要求<ul><li><code>engines</code> 只是起到一个说明的作用，即使用户安装的版本不符合要求，也不影响依赖包的安装</li></ul></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;engines&quot;: &#123;</span><br><span class="line">    &quot;node&quot;: &quot;&gt;=8.10.3 &lt;12.13.0&quot;,</span><br><span class="line">    &quot;npm&quot;: &quot;&gt;=6.9.0&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="workspaces">workspaces</h3><ol><li><p>单个代码库中管理多个包(<code>monorepo</code>)，在 <code>workspaces</code> 声明目录下的 <code>package</code> 会软链接到根目录的 <code>node_modules</code> 中</p></li><li><p>初始化项目</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line"></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure><ol start="2"><li>声明本项目是 <code>workspaces</code> 模式</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;private&quot;: &quot;true&quot;,</span><br><span class="line">&quot;workspaces&quot;: [</span><br><span class="line">    <span class="string">&quot;packages/*&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>表示所有子包都在 <code>packages</code> 文件夹下</p><ol start="3"><li>创建子包 <code>p1</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -w packages/p1 -y</span><br></pre></td></tr></table></figure><p>在 <code>node_modules/.package-lock.json</code> 中可以看到 <code>&quot;link&quot;: true</code> 链接符号信息</p><ol start="4"><li>新建 <code>packages/p1/index.js</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="string">&#x27;p1包&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="5"><li>创建子包 <code>p2</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -w packages/p2 -y</span><br></pre></td></tr></table></figure><ol start="6"><li>将子包 <code>p1</code> 添加到 <code>p2</code> 中</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i p1 -w p2</span><br></pre></td></tr></table></figure><p>安装，卸载等命令都是一样的，只是多了 <code>--workspace=</code> 参数(简写 <code>-w</code>)，用来指定在哪个包中执行命令</p><ol start="7"><li>子包 <code>p2</code> 中使用 <code>p1</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">require</span>(<span class="string">&quot;p1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;使用&#x27;</span>, p1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="string">&#x27;p2包&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>workspaces</code> 功能与 <code>lerna</code> 类似，如果只需简单地管理多个包，<code>workspaces</code> 足够了。<code>lerna</code> 具有版本管理，发包提示，简化多包项目发布流程等更多功能</p><h2 id="脚本配置">脚本配置</h2><h3 id="scripts">scripts</h3><ol><li>脚本入口</li></ol><h3 id="config">config</h3><ol><li>用于定义项目的配置项，例如设置环境变量</li><li><code>config</code> 配置</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">    &quot;baseUrl&quot;: &quot;https://example.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>scripts</code> 配置</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node index.js&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>新建 <code>index.js</code></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 process.env.npm_package_config_xxx取值 注意需要写到 config里面</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(process.env.npm_package_config_baseUrl);</span><br></pre></td></tr></table></figure><p>运行 <code>npm start</code> 打印对应 <code>baseUrl</code></p><h2 id="文件-目录">文件&amp;目录</h2><h3 id="module-非官方字段">module (非官方字段)</h3><ol><li>指定 <code>es</code> 模块入口文件</li><li>例子：当其他开发者在它们的项目中导入你的包，会加载并执行包中的 <code>dist/index.esm.js</code></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;module&quot;: &quot;dist/index.esm.js&quot;</span><br></pre></td></tr></table></figure><h3 id="main">main</h3><ol><li>指定 <code>commonjs</code> 模块 或 <code>es</code> 模块入口文件，如果不指定该字段，默认是根目录下的 <code>index.js</code></li><li>从 <code>node12.20.0</code> 版本开始 <code>main</code> 字段也可以指定 <code>es</code> 模块的入口文件</li></ol><h3 id="browser">browser</h3><ol><li>指定浏览器使用的入口文件，例如 <code>umd</code> 模块</li></ol><h3 id="types-非官方字段">types (非官方字段)</h3><ol><li>指定 <code>TypeScript</code> 类型声明文件 <code>.d.ts</code> 文件的路径</li></ol><h3 id="exports-非官方字段">exports (非官方字段)</h3><ol><li>当打包工具支持 <code>exports</code> 字段时，(<code>webpack</code> <code>rollup</code> 等)，以上 <code>main</code> <code>browser</code> <code>module</code> <code>types</code> 四个字段都被忽略</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;exports&quot;: &#123;</span><br><span class="line">    &quot;.&quot;: &#123;</span><br><span class="line">        &quot;import&quot;: &quot;./dist/index.esm.js&quot;,</span><br><span class="line">        &quot;require&quot;: &quot;./dist/index.cjs.js&quot;,</span><br><span class="line">        &quot;browser&quot;: &quot;./dist/index.umd.js&quot;,</span><br><span class="line">        &quot;types&quot;: &quot;./dist/index.d.ts&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>.</code> 表示默认导出<ul><li><code>import</code> 指定了 <code>ES module</code> <code>esm</code> 规范下的导出文件路径</li><li><code>require</code> 指定了 <code>commonJs</code> 规范下的导出文件路径</li><li><code>browser</code> 指定了用于浏览器环境的导出文件路径</li><li><code>types</code> 指定了类型声明文件的路径</li></ul></li><li>导出其他文件，例如除了导出默认路径，导出源文件</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;exports&quot;:&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &quot;./main&quot; : &quot;./src/main.js&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>其他项目上使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> main <span class="keyword">from</span> <span class="string">&#x27;packageName&#x27;</span>; <span class="comment">// . 方式定义的</span></span><br><span class="line"><span class="keyword">import</span> main <span class="keyword">from</span> <span class="string">&#x27;packageName/main&#x27;</span>; <span class="comment">// ./mian 方式定义的</span></span><br></pre></td></tr></table></figure><h3 id="type-非官方字段">type (非官方字段)</h3><ol><li>指定模块系统的使用方式 <code>commonjs</code> <code>module</code> <code>umd</code> <code>json</code></li><li>例如：指定模块系统为 <code>ES module</code> 模式，使用 <code>CommonJS</code> 文件时，需显式的定义为 <code>.cjs</code> 文件扩展名，来明确指定这些文件为 <code>CommonJS</code> 模块</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;type&quot;: &quot;module&quot;</span><br></pre></td></tr></table></figure><h3 id="files">files</h3><ol><li>指定哪些包会被推送到 <code>npm</code> 服务器</li><li>例子: 只推送 <code>index.js</code> 和 <code>dist</code> 包到 <code>npm</code> 服务器</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;files&quot;: [</span><br><span class="line">    &quot;index.js&quot;,</span><br><span class="line">    <span class="string">&quot;dist&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li>可以在项目根目录新建一个 <code>.npmignore</code> 文件，说明不需要提交到 <code>npm</code> 服务器的文件，类似 <code>.gitignore</code> 写在这个文件中的文件即便被写在 <code>files</code> 属性中也会被排除在外</li></ol><h3 id="bin">bin</h3><ol><li>定义在全局安装时可执行的命令 （使用情景较少）</li></ol><h3 id="man">man</h3><ol><li><code>linux</code> 中的帮助指令 （使用情景较少）</li></ol><h3 id="directories">directories</h3><ol><li>定义项目目录结构的字段（使用情景较少）</li></ol><h2 id="发布配置">发布配置</h2><h3 id="private"><code>private</code></h3><ol><li>防止私有包发布到 <code>npm</code> 服务器，要发布到 <code>npm</code> 上设为 <code>false</code></li></ol><h3 id="preferGlobal-非官方字段">preferGlobal (非官方字段)</h3><ol><li>当设置 <code>&quot;preferGlobal&quot;</code> 字段为 <code>true</code> 时，它表示你的包更适合以全局方式安装，而不是作为项目的依赖项进行本地安装,这个字段的设置是为了向用户传达关于你的包的最佳使用方式的建议。它并不会直接影响包的安装方式或包管理器的行为</li></ol><h3 id="publishConfig">publishConfig</h3><ol><li>在发布包时指定特定的配置</li><li>指定包发布的注册表 <code>URL</code>，指定所有用户都可以访问（私有的会收费）</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;publishConfig&quot;: &#123;</span><br><span class="line">    &quot;registry&quot;: &quot;https://registry.npmjs.org/&quot;,</span><br><span class="line">    &quot;access&quot;: &quot;public&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="os">os</h3><ol><li>指定你的包适用的操作系统</li><li>示例：包只适用于 <code>darwin（macOS）</code> 和 <code>linux</code></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;os&quot;: [&quot;darwin&quot;, &quot;linux&quot;]</span><br></pre></td></tr></table></figure><ol start="3"><li>示例：禁用 <code>win32</code></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;os&quot;: [&quot;!win32&quot;]</span><br></pre></td></tr></table></figure><h3 id="cpu">cpu</h3><ol><li>该配置和 <code>OS</code> 配置类似，用 <code>CPU</code> 可以更准确的限制用户的安装环境</li></ol><h3 id="license">license</h3><ol><li>指定软件的开源协议</li><li><code>ISC</code>：在所有副本中保留版权声明和许可证声明，使用者就可以拿你的代码做任何想做的事情，你也无需承担任何责任</li><li><code>MIT</code>：在所有副本或主要部分中保留版权声明和许可证声明，使用者就可以拿你的代码做任何想做的事情，你也无需承担任何责任</li></ol><h2 id="第三方配置-非官方字段">第三方配置 (非官方字段)</h2><h3 id="eslintConfig">eslintConfig</h3><ol><li><code>eslint</code> 的配置，更推荐使用 <code>.eslintrc</code> 等方式进行配置</li></ol><h3 id="babel">babel</h3><ol><li><code>babel</code> 的配置，更推荐使用 <code>.babelrc</code> 进行配置</li></ol><h3 id="unpkg">unpkg</h3><ol><li><code>unpkg</code> 是一个基于 <code>CDN</code> 的前端包托管服务，用于在浏览器中直接引用和加载 <code>npm</code> 上发布的包</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/package-name@version&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lint-staged"><code>lint-staged</code></h3><ol><li><code>lint-staged</code> 是一个在 <code>Git</code> 暂存文件上运行 <code>linters</code> 的工具，通常配合 <code>gitHooks</code> 一起使用</li></ol><h3 id="browserslist">browserslist</h3><ol><li>支持哪些浏览器以及版本 <code>autoprefixer</code> 常用到它</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;browserslist&quot;: [</span><br><span class="line">    &quot;defaults&quot;,</span><br><span class="line">    &quot;not ie &lt; 8&quot;,</span><br><span class="line">    &quot;last 2 versions&quot;,</span><br><span class="line">    &quot;&gt; 1%&quot;,</span><br><span class="line">    &quot;iOS 7&quot;,</span><br><span class="line">    <span class="string">&quot;last 3 iOS versions&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="sideEffects">sideEffects</h3><ol><li>指定包是否具有副作用，协助 <code>webpack</code> <code>rollup</code> 等进行 <code>tree shaking</code></li><li>多数情况下可以直接设置为 <code>false</code>，这样打包工具就会自动删除未被 <code>import</code> 的代码</li><li>但是有些情况例外<ul><li>有一些特定的模块文件，它们执行一些副作用操作，如注册全局事件监听器、修改全局状态等</li><li>告诉构建工具不要将样式文件排除在无用代码消除的优化范围之外</li></ul></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;sideEffects&quot;: [&quot;./path/to/module.js&quot;, &quot;*.css&quot;]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十分钟理解Object.defineProperty</title>
      <link href="7bfffe12/"/>
      <url>7bfffe12/</url>
      
        <content type="html"><![CDATA[<h2 id="Object-defineProperty语法">Object.defineProperty语法</h2><ol><li><code>Object.defineProperty()</code> 的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性</li><li><code>Object.defineproperty</code> 可以接收三个参数 <code>Object.defineproperty(object, prop, desc)</code><ul><li><code>object</code> 需要定义或修改的对象</li><li><code>prop</code> 需要定义或修改的属性名</li><li><code>options</code> 配置项，也叫属性描述符</li></ul></li><li>传统的对象属性的赋值是可以删除的，但是通过 <code>Object.defineProperty</code> 定义的属性可以通过属性描述符进行更精准的控制对象属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统的对象添加或修改属性值</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;suxi&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.sex = <span class="string">&#x27;男&#x27;</span>;</span><br><span class="line">person.age = <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;score&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="number">99</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.score); <span class="comment">// 99</span></span><br><span class="line">person.score = <span class="number">100</span>; <span class="comment">// 无法修改</span></span><br><span class="line"><span class="built_in">console</span>.log(person.score); <span class="comment">// 99</span></span><br></pre></td></tr></table></figure><h2 id="属性的特性以及内部属性">属性的特性以及内部属性</h2><ol><li><code>js</code> 有三种类型的属性<ul><li>命名数据属性：拥有一个确定的值的属性，这也是最常见的属性</li><li>命名访问器属性：通过 <code>getter</code> 和 <code>setter</code> 进行读取和赋值的属性</li><li>内部属性：由 <code>JavaScript</code> 引擎内部使用的属性，不能通过 <code>JavaScript</code> 代码直接访问到，不过可以通过一些方法间接读取和设置。比如，每个对象都有一个内部属性 <code>[[Prototype]]</code>，你不能直接访问这个属性，但可以通过 <code>Object.getPrototypeOf()</code> 方法间接的读取到它的值。虽然内部属性通常用一个双中括号包围的名称来表示，但实际上这并不是它们的名字，它们是一种抽象操作，是不可见的，根本没有上面两种属性有的那种字符串类型的属性</li></ul></li></ol><h2 id="属性描述符">属性描述符</h2><ol><li>通过 <code>Object.defineProperty</code> 为对象定义属性，有两种形式，且不能混合使用，分别为数据描述符，存取描述符，下面描述两者之间的区别</li></ol><h3 id="数据描述符">数据描述符</h3><ol><li>数据描述符特有的两个属性<ul><li><code>value</code></li><li><code>writable</code></li></ul></li></ol><div class="note pink icon flat"><i class="note-icon fa fa-exclamation"></i><p>注意：当使用了 <code>writable</code> 和 <code>value</code> 属性，不允许使用 <code>getter</code> 和 <code>setter</code> 这两个方法</p></div><ol><li><code>writable</code>: 描述对象属性是否可写<ul><li>当我们在一个对象上定义某个属性时， <code>writable</code> 默认是 <code>true</code> 意味这个属性是可写的</li><li>当我们通过属性描述符定义一个属性时， <code>writable</code> 默认是 <code>false</code>，正如上面无法修改 <code>score</code> 属性的值</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;suxi&#x27;</span>,</span><br><span class="line">    writable: <span class="literal">false</span>, <span class="comment">// 是否可以改变</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi</span></span><br><span class="line">person.name = <span class="string">&#x27;peiqi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi 无法改变</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="number">19</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// 19;</span></span><br><span class="line">person.age = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><div class="note pink icon flat"><i class="note-icon fa fa-exclamation"></i><p>注意：如果描述符中的某些属性被省略，会使用以下默认规则</p></div><table><thead><tr><th style="text-align:center">属性名</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center"><code>value</code></td><td style="text-align:center"><code>undefined</code></td></tr><tr><td style="text-align:center"><code>get</code></td><td style="text-align:center"><code>undefined</code></td></tr><tr><td style="text-align:center"><code>set</code></td><td style="text-align:center"><code>undefined</code></td></tr><tr><td style="text-align:center"><code>writable</code></td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"><code>enumerable</code></td><td style="text-align:center"><code>false</code></td></tr><tr><td style="text-align:center"><code>configurable</code></td><td style="text-align:center"><code>false</code></td></tr></tbody></table><h3 id="存取描述符">存取描述符</h3><ol><li>由一对 <code>getter</code> <code>setter</code> 函数功能来描述的属性<ul><li><code>get</code>: 一个给属性提供 <code>getter</code> 的方法，如果没有 <code>getter</code> 则为 <code>undefined</code> 该方法返回值被用作属性值，默认为 <code>undefined</code></li><li><code>set</code>: 一个给属性提供 <code>setter</code> 的方法，如果没有 <code>setter</code> 则为 <code>undefined</code> 该方法将接受唯一参数并将参数的新值分配给该属性，默认值为 <code>undefined</code></li></ul></li></ol><div class="note pink icon flat"><i class="note-icon fa fa-exclamation"></i><p>注意：当使用了 <code>getter</code> 和 <code>setter</code> 方法，不允许使用 <code>value</code> 和 <code>writable</code> 这两个属性</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> temp = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我要读取属性&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我要设置属性&quot;</span>);</span><br><span class="line">        temp = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// null null</span></span><br><span class="line">person.name = <span class="string">&#x27;suxi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// suxi suxi</span></span><br><span class="line">temp = <span class="string">&#x27;peiqi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// peiqi peiqi</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> temp = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我要读取属性&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// null null</span></span><br><span class="line">person.name = <span class="string">&#x27;suxi&#x27;</span>; <span class="comment">// 没有set </span></span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// null null</span></span><br><span class="line">temp = <span class="string">&#x27;peiqi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// peiqi peiqi</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> temp = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我要设置属性&quot;</span>);</span><br><span class="line">        temp = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// undefined null // 没有get</span></span><br><span class="line">person.name = <span class="string">&#x27;suxi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// undefined suxi</span></span><br><span class="line">temp = <span class="string">&#x27;peiqi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name, temp); <span class="comment">// undefined peiqi</span></span><br></pre></td></tr></table></figure><p>存取器描述</p><ol><li>当使用存取器描述属性时，允许设置以下特性属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;key&#x27;</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125;,</span><br><span class="line">    configurable: <span class="literal">true</span> | <span class="literal">false</span>, <span class="comment">// 是否可删除或重新定义该属性</span></span><br><span class="line">    enumerable: <span class="literal">true</span> | <span class="literal">false</span>, <span class="comment">// 是否可以使用 for in 或 Object.keys 遍历属性</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>当设置或获取对象的某个属性的值的时候，可以提供 <code>getter / setter</code> 方法<ul><li><code>getter</code> 是一种获取属性值的方法</li><li><code>setter</code> 是一种设置属性值的方法</li></ul></li></ol><div class="note pink icon flat"><i class="note-icon fa fa-exclamation"></i><p>注意：<code>get</code> 或 <code>set</code> 不是必须成对出现，任意写其一就可以，如果不设置方法，则 <code>get</code> 或 <code>set</code> 的默认值为 <code>undefined</code></p></div><h2 id="其他描述符">其他描述符</h2><ol><li>数据描述符和存取描述均具有以下描述符<ul><li><code>configurable</code> 描述属性是否配置，以及可否可以通过 <code>delete</code> 删除(是否可配置)<ul><li>当我们在一个对象上直接定义某个属性是， <code>configurable</code> 默认是 <code>true</code></li><li>当我们使用属性描述符定义一个属性时，<code>configurable</code> 默认是 <code>false</code></li></ul></li><li><code>enumerable</code> 描述属性是否会出现在 <code>for in</code> 或 <code>Object.keys()</code> 的遍历中(是否可枚举)<ul><li>当我们在一个对象上直接定义某个属性是， <code>enumerable</code> 默认是 <code>true</code></li><li>当我们使用属性描述符定义一个属性时，<code>enumerable</code> 默认是 <code>false</code></li></ul></li></ul></li><li><code>configurable</code> 特性<ul><li>在 <code>configruable</code> 为 <code>false</code> 但 <code>writable</code> 为 <code>true</code> 的情况下可以用两种方式修改其值，但不能删除</li><li>在 <code>configruable</code> 为 <code>true</code> 但 <code>writable</code> 为 <code>false</code> 的情况下可以通过属性描述符修改属性值</li><li>在 <code>configruable</code> 为 <code>false</code> 但 <code>writable</code> 为 <code>true</code> 的情况下可以通过属性描述符修改 <code>writable</code> 为 <code>false</code> 但不能从 <code>false</code> 修改为 <code>true</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;suxi&#x27;</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"><span class="comment">// 严格模式下会抛异常 非严格模式下不会删除该属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">delete</span> person.name);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;peiqi&#x27;</span></span><br><span class="line">&#125;); <span class="comment">// Uncaught TypeError: Cannot redefine property: name</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">&#x27;suxi&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi</span></span><br><span class="line">person.name = <span class="string">&#x27;peiqi&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// peiqi</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;suxi&#x27;</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;peiqi&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// peiqi</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    value: <span class="string">&#x27;suxi&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi</span></span><br><span class="line">person.name = <span class="string">&#x27;peiqi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// peiqi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// peiqi</span></span><br><span class="line"></span><br><span class="line">person.name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// peiqi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">&#125;); <span class="comment">// Uncaught TypeError: Cannot redefine property</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>enumerable</code>特性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">person.gender = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="number">10</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)); <span class="comment">// [&#x27;gendar&#x27;, &#x27;age&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key); <span class="comment">// gendar age</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(person);); <span class="comment">// &#123;&quot;gendar&quot;: &quot;male&quot;, &quot;age&quot;: 10&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person.gender = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;gender&quot;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;male&#x27;</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="number">24</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 等价</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="number">24</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="不变性">不变性</h2><h3 id="对象常量">对象常量</h3><ol><li>结合 <code>writable</code> 和 <code>configurable</code> 都为 <code>false</code> 的情况下，可以创建一个真正的常量属性（不可修改、不可重新定义、不可删除）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;suxi&#x27;</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    writable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上内容可以简写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.defineProperty(person, &#x27;name&#x27;, &#123;</span></span><br><span class="line"><span class="comment">//     value: &#x27;suxi&#x27;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi</span></span><br><span class="line">person.name = <span class="string">&#x27;lisi&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;zhangsan&#x27;</span></span><br><span class="line">&#125;); <span class="comment">// cannot redefine property</span></span><br></pre></td></tr></table></figure><ol start="2"><li>静止扩展<ul><li>如果你需要禁止一个对象添加新属性并且保留已有属性，就可以使用 <code>Object.preventExtensions()</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.preventExtensions(person);</span><br><span class="line"></span><br><span class="line">person.gendar = <span class="string">&#x27;male&#x27;</span>; <span class="comment">// 严格模式下 cannot add property gender 非静默情况下失败</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.gendar); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依然可以进行属性描述符配置</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;suxi&#x27;</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// suxi</span></span><br><span class="line"></span><br><span class="line">person.gendar = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.gendar); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ol start="3"><li>密封<ul><li><code>Object.seal()</code> 会创建一个密封对象，这个方法实际上会在一个现有对象上调用 <code>Object.preventExtensions</code> 并把所有现有属性标记为 <code>configurable: false</code></li><li>密封之后不仅不能添加新属性，也不能重新配置或者删除任何现有属性，虽然可以改属性的值</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;lisi&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.seal(person);</span><br><span class="line"></span><br><span class="line">person.gendar = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.gendar); <span class="comment">// undefined 不可拓展</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)); <span class="comment">// [&#x27;name&#x27;]</span></span><br><span class="line">person.name = <span class="string">&#x27;zhangsan&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// zhangsan</span></span><br><span class="line"><span class="comment">// 不可再次定义属性，当然是从 false 改为 true</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">    configurable: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>冻结<ul><li><code>Object.freeze()</code> 会创建一个冻结对象，这个方法实际上会在一个现有对象调用 <code>Object.seal()</code> 并把所有现有属性标记为 <code>writable: false</code> 这样就无法修改它们的值了</li><li>这个方法是可以用在对象上级别最高的不可变性，它会禁止对于对象及其任意直接属性的修改(但这个对象引用的其他对象不受影响)</li><li>可以深度冻结一个对象，并在这些对象上调用 <code>Object.freeze()</code> 但是一定要小心，这么做可能会无意中冻结其他共享对象</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.freeze(person);</span><br><span class="line"></span><br><span class="line">person.gendar = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.gendar); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(person)); <span class="comment">// [&#x27;name&#x27;]</span></span><br><span class="line"></span><br><span class="line">person.name = <span class="string">&#x27;age&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// jack 不可修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;rose&#x27;</span></span><br><span class="line">&#125;); <span class="comment">// 不可重新定义</span></span><br></pre></td></tr></table></figure><h2 id="Object-defineProperty缺陷">Object.defineProperty缺陷</h2><ol><li>无法检测到对象属性的新增或删除</li><li>无法监听到数组变化</li></ol><h2 id="Object-defineProperties">Object.defineProperties</h2><ol><li><code>Object.defineProperties</code> 和 <code>Object.defineProperty</code> 关系和它们的名字一样是单数和复数的关系，<code>Object.defineProperty</code> 一次只能定义一个属性，而 <code>Object.defineProperties</code> 一次可以定义多个属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.defineProperties(&#123; <span class="attr">agee</span>: <span class="number">18</span> &#125;, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        value: <span class="string">&#x27;lisi&#x27;</span>,</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">false</span>,</span><br><span class="line">        enumerable: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.agee;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.agee = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;agee: 18, name: &#x27;lisi&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ol><li>属性定义，通过 <code>Object.defineProperty()</code><ul><li>如果对象没有对应属性名的属性：如果该对象是可拓展的，则创建一个属性，否则拒绝</li><li>如果对象已经有了这个属性，则安装下面的步骤重新配置这个属性</li><li>如果这个已有的属性是不可配置的，则进行下面的操作会被拒绝<ul><li>将一个数据属性转换为访问器属性，反之亦然</li><li>改变 <code>configurable</code> 和 <code>enumerable</code></li><li>改变 <code>writable</code> 由 <code>false</code> 变为 <code>true</code></li><li>在 <code>writable</code> 为 <code>false</code> 改变 <code>value</code></li><li>改变 <code>getter</code> 和 <code>setter</code></li></ul></li><li>否则这个已有的属性可以被重新配置</li></ul></li><li>属性赋值，通过 <code>object.prop = ''</code><ul><li>如果在原型链上存在一个名为 <code>p</code> 的只读属性(只读的数据属性或者没有 <code>setter</code> 的访问器属性)，则拒绝</li><li>如果在原型链上存在一个名为 <code>p</code> 的且拥有 <code>setter</code> 的访问器属性，则调用这个 <code>setter</code></li><li>如果没有名为 <code>p</code> 的自身属性，则如果这个对象是可扩展的，就创建一个新属性，否则，如果这个对象是不可扩展的，则拒绝</li><li>如果已经存在一个可写的名为 <code>p</code> 的自身属性，则调用 <code>Object.defineProperty</code> 该操作只会更改 <code>p</code> 属性的值，其他的特性（比如可枚举性）都不会改变</li></ul></li><li>作用以及影响<ul><li>属性的定义操作和赋值操作各自有自己的作用和影响</li><li>赋值可能会调用原型上的 <code>setter</code>，定义会创建一个自身属性</li><li>原型链中的同名只读属性可能会阻止赋值操作，但不会阻止定义操作，如果原型链中存在一个同名的只读属性，则无法通过赋值的方式在原对象上添加这个自身属性，必须使用定义操作才可以</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">bar</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;getter&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proto); <span class="comment">// 以一个现有对象作为原型，创建一个新对象</span></span><br><span class="line"></span><br><span class="line">obj.bar = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 严格模式下 cannot set property bar 非严格失败</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.bar); <span class="comment">// getter a</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title">bar</span>() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;getter&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proto);</span><br><span class="line">obj.bar = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 失败</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.bar); <span class="comment">// getter a</span></span><br><span class="line"><span class="comment">// 通过定义操作</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;bar&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;hellox&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(proto.bar); <span class="comment">// getter a</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.bar); <span class="comment">// hellox</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.defineProperties 定义多个属性</span></span><br><span class="line"><span class="keyword">let</span> proto = <span class="built_in">Object</span>.defineProperties(&#123;&#125;, &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">        value: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proto);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;&#125;</span></span><br><span class="line">obj.foo = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 失败</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.foo); <span class="comment">// a</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = <span class="built_in">Object</span>.defineProperties(&#123;&#125;, &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">        value: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        writable: <span class="literal">false</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proto);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这是通过定义的方式在obj对象上创建了自身属性 foo 和原型 proto上的 foo 没有关系</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;foo&quot;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;sfaf&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.foo); <span class="comment">// sfaf</span></span><br><span class="line"><span class="built_in">console</span>.log(proto.foo); <span class="comment">// a</span></span><br><span class="line">obj.foo = <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 失败 定义时不可修改</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.foo); <span class="comment">//sfaf</span></span><br></pre></td></tr></table></figure><ol start="4"><li>赋值运算符不会改变原型链上的属性<ul><li>不能通过 <code>obj.foo</code> 赋值来改变 <code>proto.foo</code> 的值，这种操作只会在 <code>obj</code> 上新建一个自身属性</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = &#123;</span><br><span class="line">    foo: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.create(proto);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;&#125;</span></span><br><span class="line">obj.foo = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.foo); <span class="comment">// b;</span></span><br><span class="line"><span class="built_in">console</span>.log(proto.foo); <span class="comment">// a</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol start="5"><li>对象字面量的属性是通过定义操作添加的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        value: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="6"><li>再次提醒，记住下面两种形式的区别</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">obj.name = <span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    writable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;jack&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">    value: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typescript基础</title>
      <link href="9f47fabe/"/>
      <url>9f47fabe/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript-入门"><code>TypeScript</code> 入门</h2><h3 id="TSC-编译器"><code>TSC</code> 编译器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.ts</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure><h3 id="发出错误">发出错误</h3><ol><li><code>--noEmitOnError</code> 不允许发生错误，一旦发生错误将不会生成 <code>js</code> 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --noEmitOnError hello.ts</span><br></pre></td></tr></table></figure><h3 id="显式类型">显式类型</h3><ol><li>明确指定参数或变量的类型</li><li>但是我们不总是需要编写明确的类型，在大多数情况下，<code>TypeScript</code> 会自动推断代码中的类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person: <span class="built_in">string</span>, data: <span class="built_in">Date</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(person);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;suxi&quot;</span>, <span class="keyword">new</span> <span class="built_in">Date</span>());</span><br></pre></td></tr></table></figure><h3 id="擦拭类型">擦拭类型</h3><ol><li><code>tsc</code> 编译后的 <code>js</code> 将类型擦除掉</li><li>类型注释永远不会改变程序的运行时行为</li></ol><h3 id="降级编译">降级编译</h3><ol><li><code>tsc</code> 指定编译生成 <code>js</code> 的版本</li><li><code>tsc --target es2015 hello.ts</code></li></ol><h3 id="严格模式">严格模式</h3><ol><li><code>tsc --strict true hello.ts</code> 开启严格模式</li><li><code>tsc --strict true --noImplictAny true</code> 开启严格模式，并且当类型隐式推断为 <code>any</code> 时发出错误</li><li><code>tsc --target es2015 --strictNullChecks true</code> <code>null</code> 和 <code>undefined</code> 可以分配给任意类型，这可能会导致空异常，开启 <code>strictNullChecks</code> 可以防止出现空异常</li></ol><h2 id="常用类型">常用类型</h2><h3 id="typescript"><code>typescript</code></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es2016&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span>: <span class="string">&quot;./src&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基元类型-number-string-boolean">基元类型 <code>number</code> <code>string</code> <code>boolean</code></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span> = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">let</span> s: <span class="built_in">string</span> = <span class="string">&quot;abs&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> b: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="数组">数组</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> strs: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>];</span><br></pre></td></tr></table></figure><h3 id="any"><code>any</code></h3><ol><li>当不希望某个特定值导致类型检查错误时，可以使用 <code>any</code></li><li>当一个值的类型是 <code>any</code> 时，可以访问它的任何属性，将它分配给任何类型的值</li><li>但在运行环境下执行代码可能是错误的</li><li>当我们不指定类型时，并且 <code>typescript</code> 无法从上下文推断它时，编译器通常会默认为 <code>any</code>，但是通常情况下，我们需要避免这种情况，因为 <code>any</code> 没有进行类型检查，使用 <code>noImplicitAny</code> 将任何隐式标记 <code>any</code> 为错误</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj: <span class="built_in">any</span> = &#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.foo();</span><br><span class="line">obj.bar = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> n: <span class="built_in">number</span> = obj;</span><br><span class="line">obj = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="变量上的类型注释">变量上的类型注释</h3><ol><li>可以选择添加类型注释来显式指定变量的类型</li><li>但是这不是必须的，因为 <code>typescript</code> 会尝试自动推断代码中的类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName: <span class="built_in">string</span> = <span class="string">&quot;suxi&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> name: <span class="built_in">string</span> = <span class="string">&quot;peiqi&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="函数">函数</h3><h4 id="参数类型注释">参数类型注释</h4><ol><li>即便没有参数类型注释，仍然会检查参数的数量</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">greet(<span class="number">42</span>); <span class="comment">// error</span></span><br><span class="line">greet(<span class="string">&quot;123&quot;</span>, <span class="string">&quot;456&quot;</span>); <span class="comment">// error</span></span><br><span class="line">greet(<span class="string">&quot;42&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="返回类型注释">返回类型注释</h4><ol><li>通常不需要返回类型，因为 <code>typescript</code> 会推断出返回类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumber</span>(<span class="params"></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名函数">匿名函数</h4><ol><li>匿名函数与函数声明有所不同，当一个函数出现在 <code>typescript</code> 可以确定它将如何被调用的地方时，该函数的参数会自动指定类型</li><li>上下文推断类型，函数发生在其中的上下文通知它应该具有什么类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> names: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;def&quot;</span>];</span><br><span class="line"><span class="comment">// 自动推断 name 为 string</span></span><br><span class="line">names.forEach(<span class="function"><span class="params">name</span> =&gt;</span> <span class="built_in">console</span>.log(name.toUpperCase()));</span><br></pre></td></tr></table></figure><h3 id="对象类型">对象类型</h3><ol><li>下面是一个对象类型的例子</li><li><code>x</code> 和 <code>y</code> 是对象的属性，它们的类型为 <code>number</code></li><li>可以使用 <code>,</code> 或 <code>;</code> 分隔属性，最后一个分割符是可选的</li><li>每个属性的类型部分也是可选的，如果不指定类型，则将假定为 <code>any</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point: &#123; <span class="attr">x</span>: <span class="built_in">number</span>; y: <span class="built_in">number</span>; &#125; = &#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可选属性">可选属性</h4><ol><li>对象类型还可以指定其部分或全部属性是可选的</li><li>在属性后添加 <code>?</code> 表示其可选属性</li><li>当使用可选属性时，首先要判断是否存在</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point: &#123; <span class="attr">x</span>: number; y: number; z?: number &#125; = &#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (point.z !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;三维坐标&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;二维坐标&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">point = &#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">1</span>,</span><br><span class="line">    z: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="联合类型">联合类型</h3><p><code>typescript</code> 允许使用多种运算符从现有类型中构建新类型</p><ol><li><p>定义联合类型</p><ul><li>联合类型是由多个其他类型组成的类型，表示可以是这些类型中的任何一种类型</li><li>这些类型中的每一种类型称为联合类型的成员</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="number">123</span>);</span><br><span class="line">print(<span class="string">&quot;123&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用联合类型</p><ul><li>提供联合类型很容易，但是使用时，如果联合的每个成员都有效，<code>ts</code> 将只允许使用联合做一些事情，例如，如果 <code>string | number</code> 联合类型，不能只使用一种类型的操作</li><li>而是使用代码缩小联合，就像没有类型注释的 <code>js</code> 一样，当 <code>ts</code> 可以根据代码结构为值推断为具体的类型时，就会发生缩小</li><li>当然有时对于一个 <code>union</code> 所有成员都有一些共同点，例如，数组和字符串都有一个 <code>slice</code> 方法那么使用该属性就可以不会缩小范围</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id.toUpperCase())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">id: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> id === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// id 为 string</span></span><br><span class="line">        <span class="built_in">console</span>.log(id.toUpperCase())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// id 为 number</span></span><br><span class="line">        <span class="built_in">console</span>.log(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFirstThree</span>(<span class="params">x: <span class="built_in">number</span>[] | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.slice(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="类型别名">类型别名</h3><ol><li>如果我们想要多次使用一个类型，恰好这个类型的定义又很复杂，我们可以使用类型别名来声明类型，以便于多次引用它</li><li>当然类型别名只是别名，不能使用类型别名来创建相同类型的不同版本</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point = &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">    z?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point: Point = &#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ID = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure><h3 id="接口">接口</h3><ol><li>接口声明是另一种方式来命名对象类型</li><li><code>ts</code> 只关注类型的结构和功能</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">    z?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point: Point = &#123;</span><br><span class="line">    x: <span class="number">1</span>,</span><br><span class="line">    y: <span class="number">1</span>,</span><br><span class="line">    z: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口和类型别名之间的差异">接口和类型别名之间的差异</h4><ol><li>类型别名和接口非常相似，在多数情况下可以自由的选择它们，几乎所有功能都在 <code>interface</code> 中可用 <code>type</code> 关键区别在于扩展新类型的方式不同</li><li>类型别名可能不参与声明合并，但接口可以</li><li>接口只能用于声明对象的形状，不能重命名基元</li><li>接口名称将始终以其原始形式出现在错误消息中，但仅当它们按名称使用时</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展接口</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bear <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    honey: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bear: Bear = &#123;</span><br><span class="line">    name: <span class="string">&quot;winnie&quot;</span>,</span><br><span class="line">    honey: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bear.name;</span><br><span class="line">bear.honey;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过交叉点扩展类型</span></span><br><span class="line"><span class="keyword">type</span> Animal = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bear = Animal &amp; &#123;</span><br><span class="line">    honey: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bear: Bear = &#123;</span><br><span class="line">    name: <span class="string">&quot;winnie&quot;</span>,</span><br><span class="line">    honey: <span class="literal">true</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bear.name;</span><br><span class="line">bear.honey;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向现有类型添加新字段</span></span><br><span class="line"><span class="keyword">interface</span> MyWindow &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> MyWindow &#123;</span><br><span class="line">    content: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> w: MyWindow = &#123;</span><br><span class="line">    title: <span class="string">&quot;hello ts&quot;</span>,</span><br><span class="line">    content: <span class="string">&quot;ts is pop&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型创建后不可更改</span></span><br><span class="line"><span class="keyword">type</span> MyWindow = &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MyWindow = &#123;</span><br><span class="line">    content: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型断言">类型断言</h3><ol><li><p>有时，我们会获得有关 <code>TS</code> 不知道的值类型的信息，例如 <code>document.getElementById</code> ， <code>TS</code> 只知道它将返回某种类型的 <code>HTMLElement</code> 但我们自己知道它将始终返回 <code>HTMLCanvasElement</code> 类型与穷尽性检查，这种情况下，我们需要类型断言来指定更加具体的类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>) <span class="keyword">as</span> HTMLCanvasElement;</span><br></pre></td></tr></table></figure></li><li><p>和类型注释一样，类型断言不会影响代码的运行行为并由编译器删除断言，当然也可以使用 <code>&lt;&gt;</code> 进行断言，它们是等效的，但是需要注意这种方式不可以用在 <code>tsx</code> 中</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = &lt;HTMLCanvasElement&gt;<span class="built_in">document</span>.getElementById(<span class="string">&quot;canvas&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>TS</code> 只允许断言转换为更具体或不太具体的类型版本，此规则可防止不可能的断言</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不可能的断言 因为这两种类型没有充分重叠</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="string">&quot;hello&quot;</span> <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// 需要先断言为 unknown 或 any 类型 在断言为 number 类型</span></span><br><span class="line"><span class="keyword">const</span> (x = <span class="string">&quot;hello&quot;</span> <span class="keyword">as</span> unknown) <span class="keyword">as</span> <span class="built_in">number</span>;</span><br></pre></td></tr></table></figure></li></ol><h3 id="文字类型">文字类型</h3><ol><li><p>除了一般类型 <code>string</code> <code>number</code>，我们还可以在类型位置引用特定的字符串和数字</p></li><li><p>一种方法是考虑 <code>js</code> 如何以不同的方式声明变量</p><ul><li><code>var</code> <code>let</code> 两者都允许更改变量中保存的内容</li><li><code>const</code> 不允许，这反映在 <code>ts</code> 如何为文字创建类型上</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> testString = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">testString = <span class="string">&quot;123&quot;</span>; <span class="comment">// 可以任意更改 相当于 testString的类型是 string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> constantString = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="comment">// 已经不能在更改了，它只能表示一个可能的字符串，所有实际上 constantString 的类型是 &quot;hello world&quot; 这就是文字类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但就其本身而言，文字类型并不是很有价值</span></span><br><span class="line"><span class="keyword">let</span> x: <span class="string">&quot;hello&quot;</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">x = <span class="string">&quot;hello&quot;</span>; <span class="comment">// 正确</span></span><br><span class="line">x = <span class="string">&quot;xxxx&quot;</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li><li><p>拥有一个只能有一个值的变量并没有多大用处，但是通过将文字组合成联合类型，可以用来表达一个更有用的概念 — 例如只接受一组特定的值</p></li><li><p>当然文字类型也可以和非文字类型结合使用</p></li><li><p>还有一种文字类型：布尔文字，只有两种布尔文字类型，它们是类型 <code>true</code> 和 <code>false</code> 注意，此时他们是文字类型，不是值。那么基元 <code>boolean</code> 也本身是联合类型 <code>true</code> | <code>false</code> 的别名，可以这样理解</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printText</span>(<span class="params">s: <span class="built_in">string</span>, align: <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s, align);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printText(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;left&quot;</span>);</span><br><span class="line">printText(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;right&quot;</span>);</span><br><span class="line">printText(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;center&quot;</span>); <span class="comment">// 错误</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): -1 | 0 | 1 </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a === b ? <span class="number">0</span> : a &gt; b ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Options &#123;</span><br><span class="line">    width: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configure</span>(<span class="params">x: Options | <span class="string">&quot;auto&quot;</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">configure(&#123; <span class="attr">width</span>: <span class="number">100</span> &#125;);</span><br><span class="line">configure(<span class="string">&quot;auto&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> auto = <span class="string">&quot;auto&quot;</span>; <span class="comment">// 注意 这是 string 隐式 它不是文字类型 而是基元 string 不能直接 configure(auto) 这是错误的</span></span><br><span class="line"><span class="comment">// configure(auto);</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="文字推理">文字推理</h4><ol><li><p>当我们使用对象初始化变量时，<code>TS</code> 假定该对象的属性稍后可能会更改值</p><ul><li>所以 <code>const</code> 定义对象时，并不认为 <code>counter</code> 就是一个文字类型，而是认为它是一个基元 <code>number</code>，所以我们改变 <code>counter</code> 的值，<code>ts</code> 并不认为它是错误的</li><li>这也符合 <code>js</code> 中的行为</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">counter</span>: <span class="number">0</span> &#125;; <span class="comment">// 注意对象 const counter 属性可能改变</span></span><br><span class="line">obj.counter = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">obj.counter = <span class="string">&quot;number&quot;</span>; <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure></li><li><p>上面的行为同样适用于字符串</p></li><li><p>可以使用 <code>as const</code> 将整个对象转换为类型文字，就是说，确保了对象的所有属性分配的都是文字类型，而不是一个更一般的 <code>string</code> <code>number</code> 等</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params">url: <span class="built_in">string</span>, method: <span class="string">&quot;GET&quot;</span> | <span class="string">&quot;POST&quot;</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125;;</span><br><span class="line">handleRequest(req.url, req.method); <span class="comment">// error req.method 不是 &quot;GET&quot; | &quot;POST&quot; 类型 而是 string 类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 两种方式解决</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 在任意位置使用类型断言</span></span><br><span class="line"><span class="comment">// 1.1 第一种 始终保持 req.method 拥有文字类型 &quot;GET&quot; 防止之后可能赋值其他类型 例如 POSt</span></span><br><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> <span class="keyword">as</span> <span class="string">&quot;GET&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 1.2 第二种 我知道有其他原因 `req.method` 具有 GET 值</span></span><br><span class="line">handleRequest(req.url, req.method <span class="keyword">as</span> <span class="string">&quot;GET&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 将整对象转为文字类型</span></span><br><span class="line"><span class="keyword">const</span> req = &#123; <span class="attr">url</span>: <span class="string">&quot;https://example.com&quot;</span>, <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span> &#125; <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="comment">// req的类型实际上是 &#123; url: &quot;https://example.com&quot;; method: &quot;GET&quot; &#125; 可以这样理解</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="null-和-undefined"><code>null</code> 和 <code>undefined</code></h3><ol><li><p><code>js</code> 中 <code>null</code> 和 <code>undefined</code> 表示不存在或未初始化的值</p></li><li><p><code>ts</code> 中有两个对应的同名类型，这些类型的行为取决于是否设置了 <code>strictNullChecks</code> 选项</p><ul><li>关闭 <code>false</code> 依然可以正常访问的值，并且可以将值分配给任何类型的属性。这类似没有空检查的语言 (<code>c#</code> <code>java</code>)，缺少空检查往往是错误的主要来源</li><li>开启，需要在对值使用之前测试这些值，就像在使用可选属性之前检查一样，我们需要使用缩小来检查可能的值</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSome</span>(<span class="params">x: <span class="built_in">string</span> | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;x is null&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;x is string&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(x.length);</span><br><span class="line">        <span class="built_in">console</span>.log(x.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>非空断言运算符 (<code>!</code> 后缀)</p><ul><li><code>ts</code> 的特殊语法，可以在不进行任何显式检查下，使用值</li><li><code>!</code> 在任何表达式之后写入实际上是一种类型断言，表示该值 我知道它由于某种原因它不是 <code>null</code> 或 <code>undefined</code></li><li>就像类型断言一样，它不会更改代码的运行时行为，因此仅当你知道它不是 <code>null</code> 或 <code>undefined</code> 时才应该使用非空断言运算符，这才是重要的</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">liveDangerous</span>(<span class="params">x?: <span class="built_in">number</span> | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x!.toFixed(<span class="number">2</span>)); <span class="comment">// 我知道 x 是 number 类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="枚举">枚举</h3><ol><li>枚举是 <code>ts</code> 添加到 <code>js</code> 中的一个功能，它允许描述一个值，该值是一组可能的命名常量之一。</li><li>关于枚举更深层次的使用</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">enum</span> Direction &#123;</span><br><span class="line">    Up = <span class="number">1</span>,</span><br><span class="line">    Down,</span><br><span class="line">    Left,</span><br><span class="line">    Right,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Up); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(Direction.Down); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Direction;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">Direction</span>) </span>&#123;</span><br><span class="line">    Direction[Direction[<span class="string">&quot;Up&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">    Direction[Direction[<span class="string">&quot;Down&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line">    Direction[Direction[<span class="string">&quot;Left&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Left&quot;</span>;</span><br><span class="line">    Direction[Direction[<span class="string">&quot;Right&quot;</span>] = <span class="number">4</span>] = <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">&#125;)(Direction || (Direction = &#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(Direction.Up);</span><br><span class="line"><span class="built_in">console</span>.log(Direction.Down);</span><br></pre></td></tr></table></figure><h3 id="不太常见的原语">不太常见的原语</h3><h4 id="bigint"><code>bigint</code></h4><ol><li>从 <code>es2020</code> 开始，<code>js</code> 中有一个用来表示非常大的整数的原语 <code>BigInt</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bigNumber1: bigint = <span class="built_in">BigInt</span>(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">let</span> bigNumber2: bigint = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure><h4 id="symbol"><code>symbol</code></h4><ol><li><code>Symbol</code> 用来通过函数创建全局唯一引用</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sy1: symbol = <span class="built_in">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sy2: symbol = <span class="built_in">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sy3 = <span class="built_in">Symbol</span>(<span class="string">&quot;ooo&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sy4 = <span class="built_in">Symbol</span>(<span class="string">&quot;ooo&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sy5 = <span class="built_in">Symbol</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> sy6 = <span class="built_in">Symbol</span>(<span class="string">&quot;222&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sy1 === sy2) &#123;</span><br><span class="line">    <span class="comment">// 虽然这里也永远无法执行 但它不会报错</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">11111</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sy3 === sy4) &#123;</span><br><span class="line">    <span class="comment">// 虽然这里也永远无法执行 但它不会报错</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">22222</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sy5 === sy6) &#123; <span class="comment">// error</span></span><br><span class="line">    <span class="comment">// 永远不会执行，因为此条件始终返回 `false`  因为类型 typeof sy1 和 typeof sy2 没有重叠</span></span><br><span class="line">    <span class="comment">// 这是不是和文字类型比较类似了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型缩小">类型缩小</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    reurn <span class="keyword">new</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>) + input; <span class="comment">// error</span></span><br><span class="line">    <span class="comment">// 运算符 + 不能应用于类型 string | number</span></span><br><span class="line">    <span class="comment">// 我们没有明确检查 padding 是否为 `number` 也没有处理它是 string 的情况</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类型缩小</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> padding + input;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这看起来和无聊的 JS 一样，但是 `TS` 的类型主旨在于编写典型的 `JS` 代码尽可能容易，而不需要弯腰去获取类型安全</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">TS 使用静态类型分析运行的值一样，它在 JS 的运行时控制流构造上构造叠加了类型分析 </span></span><br><span class="line"><span class="comment">if else 三元运算 循环 真值 等 这些都会影响到这些类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在使用 typeof padding === &quot;number&quot; 时可以理解为一种特殊形式的代码，称为类型保护</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">TS 遵循程序可能采取的执行路径，来分析一个值在特定位置的最具体的可能类型</span></span><br><span class="line"><span class="comment">它查看这些特殊的检查和赋值，将类型细化为比声明更具体的类型的过程称为缩小</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">那么主要有以下几种缩小</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="typeof-类型守卫"><code>typeof</code> 类型守卫</h3><ol><li><code>typeof</code> 和 <code>js</code> 运算符一样，它可以提供有关我们运行时拥有的值类型的非常基本的信息。<code>ts</code> 期望它返回一组特定的字符串<ul><li><code>string</code></li><li><code>number</code></li><li><code>bigint</code></li><li><code>boolean</code></li><li><code>symbol</code></li><li><code>undefined</code></li><li><code>object</code></li><li><code>function</code></li></ul></li><li>在 <code>TS</code> 使用 <code>typeof</code> 可以理解为，它缩小在不同分支中的类型</li><li>在 <code>typescript</code> 中检查 <code>typeof</code> 的返回值是一种类型保护</li><li>注意 <code>typeof</code> 不返回字符串 <code>null</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123; <span class="comment">// error 因为 它可能是 null</span></span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(strs);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="真值缩小">真值缩小</h3><ol><li><p>真值检查通常在 <code>js</code> 我们也会这样做: <code>&amp;&amp;</code> <code>||</code> <code>if</code> <code>!</code> 等表达式</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPersonCount</span>(<span class="params">count: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (count) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`There are <span class="subst">$&#123;count&#125;</span> people`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;There are no people&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样通过 <code>if</code> 语句将它们的条件强制转化为 <code>boolean</code> 使它有意义，然后根据结果是 <code>true</code> <code>false</code> 来选择它们的分支</p></li><li><p>下面这些值将会强制转换为 <code>false</code>。其他值被转换为 <code>true</code>，你始终可以在 <code>Boolean</code> 函数中运行值获得 <code>boolean</code> 或使用较短的双布尔否定将值强制转换为 <code>boolean</code>，当然双重否定的优点在于 <code>ts</code> 将它推断为一个 <code>true</code> 的文字类型 比较狭窄 而 <code>Boolean</code> 是一个 <code>boolean</code> 类型</p><ul><li><code>0</code></li><li><code>NaN</code></li><li><code>&quot;&quot;</code></li><li><code>0n</code></li><li><code>null</code></li><li><code>undefined</code></li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// boolean</span></span><br><span class="line">!!<span class="string">&quot;1&quot;</span>; <span class="comment">// true 类型</span></span><br></pre></td></tr></table></figure></li><li><p>利用真值缩小可以防范于 <code>null</code> <code>undefined</code> 之类的值的影响</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs &amp;&amp; <span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(strs);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>但是对原语的真值检查通常容易出错</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这样排除了 空字符串和 null</span></span><br><span class="line">    <span class="keyword">if</span> (strs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(strs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个真值缩小的例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiplyAll</span>(<span class="params">values: <span class="built_in">number</span>[] | <span class="literal">undefined</span>, factor: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!values) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> values.map(<span class="function">(<span class="params">x</span>) =&gt;</span> x * factor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="等值缩小">等值缩小</h3><ol><li><p>使用 <code>===</code> <code>!==</code> <code>!=</code> <code>==</code> 等值检查来实现类型缩小，叫等值缩小</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span>, y: <span class="built_in">string</span> | <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">        <span class="comment">// 我们可以确定 x 和 y 具有相同的类型 string</span></span><br><span class="line">        x.toUpperCase(); <span class="comment">// 因为 x 和 y 具有相同的类型 所以可以调用 toUpperCase()</span></span><br><span class="line">        y.toUpperCase(); <span class="comment">// 因为 x 和 y 具有相同的类型 所以可以调用 toUpperCase()</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x);</span><br><span class="line">        <span class="built_in">console</span>.log(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在真值缩小中我们使用了一个不完善的缩小从而将空字符串从其中排除掉了，那么我们可以使用等值缩小进行完善</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAll</span>(<span class="params">strs: <span class="built_in">string</span> | <span class="built_in">string</span>[] | <span class="literal">null</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (strs !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> s <span class="keyword">of</span> strs) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> strs === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(strs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>js</code> 更宽松的相等性检查 <code>==</code> <code>!=</code> 也能正确缩小。如果要检查一个变量是否等于 <code>null</code> 或 <code>undefined</code> 那么使用 <code>!=</code> 或 <code>==</code> 是一个好的方法</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Container &#123;</span><br><span class="line">    value: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiplyValue</span>(<span class="params">container: Container, factor: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (container != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(container.value);</span><br><span class="line">        container.value *= factor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="in-操作符缩小"><code>in</code> 操作符缩小</h3><ol><li><p><code>in</code> 运算符，用于确定对象是否拥有某个名称的属性</p></li><li><p><code>value in x</code> <code>value</code> 是字符串文字，<code>x</code> 是类型，值为 <code>true</code> 的分支缩小，需要 <code>x</code> 具有可选或必需属性的类型的值，值为 <code>false</code> 的分支缩小，需要具有可选或缺失属性的值</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Fish = &#123; <span class="attr">swim</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> Bird = &#123; <span class="attr">fly</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">animal: Fish | Bird</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;swim&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">        <span class="keyword">return</span> animal.swim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> animal.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Human = &#123; swim?: <span class="function">() =&gt;</span> <span class="built_in">void</span>; fly?: <span class="function">() =&gt;</span> <span class="built_in">void</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move1</span>(<span class="params">animal: Human | Fish | Bird</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;swim&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">        <span class="comment">// Fish Human</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;fly&quot;</span> <span class="keyword">in</span> animal) &#123;</span><br><span class="line">        <span class="comment">// Bird Human</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="instanceof-操作符缩小"><code>instanceof</code> 操作符缩小</h3><ol><li><code>instanceof</code> 检查一个值是否是另一个值的实例。更具体的 <code>x instanceof Foo</code> 检查 <code>x</code> 的原型链中是否含有 <code>Foo.prototype</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logValue</span>(<span class="params">x: <span class="built_in">Date</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Date</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x.toUTCString());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分配缩小">分配缩小</h3><ol><li><p>我们在为任何变量赋值时，<code>TypeScript</code> 会查看赋值的右侧并适当缩小左侧</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="built_in">Math</span>.random() &lt; <span class="number">0.5</span> ? <span class="number">10</span> : <span class="string">&quot;hello world&quot;</span>; <span class="comment">// string | number</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line">x = <span class="string">&quot;goodbye&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br><span class="line"></span><br><span class="line">x = <span class="literal">false</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p>注意，这些分配中的每一个都是有效的，即使在我们第一次赋值后观察到 <code>x</code> 更改为 <code>number</code> 我们仍然可以将 <code>string</code> 赋值给 <code>x</code> ，这是因为 <code>x</code> 在声明时是 <code>string | number</code></p></li></ol><h3 id="控制流分析">控制流分析</h3><ol><li>通过分析代码流程进行缩小类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">padding: <span class="built_in">number</span> | <span class="built_in">string</span>, input: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">&quot; &quot;</span>) + input;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// padding是数字的情况下，下面这行代码不会执行 所以这里只能是类型 string 这就是 控制流分析</span></span><br><span class="line">    <span class="keyword">return</span> padding + input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用类型谓词">使用类型谓词</h3><ol><li><p>为了定义一个用户定义的类型保护，我们需要定义一个函数，其返回类型是一个类型谓词</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Fish = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    swim: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bird = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    fly: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFish</span>(<span class="params">pet: Fish | Bird</span>): <span class="title">pet</span> <span class="title">is</span> <span class="title">Fish</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (pet <span class="keyword">as</span> Fish).swim !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pet is Fish 是类型谓词 形式是 `parameterName is Type` 其中 `parameterName` 是一个形式参数的名称，`Type` 是一个类型名称</span></span><br><span class="line"><span class="comment">// 任何时候 isFish 被调用时，如果原始类型是兼容的，`ts` 将把变量缩小到该特定类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSmallPet</span>(<span class="params"></span>): <span class="title">Fish</span> | <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fish: Fish = &#123;</span><br><span class="line">        name: <span class="string">&quot;gold fish&quot;</span>,</span><br><span class="line">        swim: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bird: Bird = &#123;</span><br><span class="line">        name: <span class="string">&quot;bird&quot;</span>,</span><br><span class="line">        fly: <span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span> ? bird : fish;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pet = getSmallPet();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isFish(pet)) &#123;</span><br><span class="line">    pet.swim();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pet.fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zoo: (Fish | Bird)[] = [getSmallPet(), getSmallPet(), getSmallPet()];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> underWater1: Fish[] = zoo.filter(isFish);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// const underWater1: Fish[] = zoo.filter(isFish) as Fish[];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> underWater2: Fish[] = zoo.filter((pet): pet is Fish =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (pet.name === <span class="string">&quot;frog&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> isFish(pet);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="受歧视的-unions">受歧视的 <code>unions</code></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">    kind: <span class="string">&quot;circle&quot;</span> | <span class="string">&quot;square&quot;</span>;</span><br><span class="line">    radius?: <span class="built_in">number</span>;</span><br><span class="line">    sideLength?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shape.kind === <span class="string">&quot;circle&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 依然不可以直接使用 radius 因为它是可选的</span></span><br><span class="line">        <span class="comment">// 但实际上我们知道 kind 是 circle 时，一定有 radius，这样要么使用 非空断言 要么 使用类型保护</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius! ** <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> shape.sideLength! ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 但实际上是不理想的，理想的状态应该是 kind 是 `circle` 一定有 `radius` 是 `square` 一定有边长</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们需要将 <code>Shape</code> 分成两种类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Circle = &#123;</span><br><span class="line">    kind: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">    radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Square = &#123;</span><br><span class="line">    kind: <span class="string">&quot;square&quot;</span>;</span><br><span class="line">    sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Shape = Circle | Square;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shape.kind === <span class="string">&quot;circle&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> shape.sideLength ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样就摆脱了错误</span></span><br></pre></td></tr></table></figure><ol><li>当联合类型中的每个类型都包含一个与文字类型相同的属性时，<code>ts</code> 认为这是一个有区别的联合类型，并且可以缩小联合类型的成员</li><li>上面的例子 <code>kind</code> 是公共成员，检查 <code>kind</code> 是 <code>circle</code> 就可以剔除 <code>Shape</code> 中所没有 <code>circle</code> 类型属性的类型，同样的检查也适用于 <code>switch</code> 语句</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (shape.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> shape.sideLength ** <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="never-类型与穷尽性检查"><code>never</code> 类型与穷尽性检查</h3><ol><li><p>在缩小范围中，可以将一个联合体的选项减少到已经删掉了所有可能性并且什么都不剩的程度，在这种情况下，我们可以将其称为 <code>never</code> 类型 不存在的状态</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape: Shape</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (shape.kind) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;circle&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.PI * shape.radius ** <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;square&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> shape.sideLength ** <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">const</span> _exhaustiveCheck: <span class="built_in">never</span> = shape;</span><br><span class="line">            <span class="keyword">return</span> _exhaustiveCheck;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="函数更多">函数更多</h2><p>函数是任何程序的基本构件</p><h3 id="函数类型表达式">函数类型表达式</h3><ol><li>描述一个函数的最简单的方法就是用一个函数类型表达式。这些类型在语法上类似于箭头函数</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">fn: (a: <span class="built_in">string</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    fn(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printToConsole</span>(<span class="params">s: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greeter(printToConsole);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn: (a: string) =&gt; void 一个string 参数的函数 没有返回值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然我们也可以使用一个类型来命名一个函数类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> GreetFunction = <span class="function">(<span class="params">a: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">fn: GreetFunction</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用签名">调用签名</h3><ol><li>在 <code>js</code> 中，函数除了可以调用以外，还可以拥有属性。然后，函数类型表达式的语法不允许声明属性。如果我们想用属性来描述可调用的东西，我们可以在一个对象类型中写入一个调用签名</li><li>注意，和函数类型表达式相比，语法略有不同：在参数列表和返回类型之间使用 <code>:</code> 而不是 <code>=&gt;</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> DescriptionFunction = &#123;</span><br><span class="line">    description: <span class="built_in">string</span>;</span><br><span class="line">    (num: <span class="built_in">number</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isOdd</span>(<span class="params">fn: DescriptionFunction</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">num: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num % <span class="number">2</span> === <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn.description = <span class="string">&quot;1111&quot;</span>;</span><br><span class="line"></span><br><span class="line">isOdd(fn);</span><br></pre></td></tr></table></figure><h3 id="构造签名">构造签名</h3><ol><li><p><code>js</code> 函数也可以使用 <code>new</code> 操作符来调用，<code>typescript</code> 称为构造函数，它们通常会创建一个新的对象，你可以通过在调用签名前面添加 <code>new</code> 关键字来写一个构造签名</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctor</span> </span>&#123;</span><br><span class="line">    s: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.s = s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SomeConstructor = &#123;</span><br><span class="line">    <span class="keyword">new</span> (s: <span class="built_in">string</span>): Ctor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">ctor: SomeConstructor</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f = fn(Ctor);</span><br><span class="line"><span class="built_in">console</span>.log(f.s);</span><br></pre></td></tr></table></figure></li><li><p>还有些对象，如 <code>Date</code> 对象，可以在有 <code>new</code> 或没有 <code>new</code> 的情况下被调用，那么可以在同一类型中结合调用签名和构造签名</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> DateFunction &#123;</span><br><span class="line">    <span class="keyword">new</span> (s: <span class="built_in">string</span>): <span class="built_in">Date</span>;</span><br><span class="line">    (t: <span class="built_in">number</span>): <span class="built_in">Date</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDate</span>(<span class="params">fn: DateFunction</span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="keyword">new</span> fn(<span class="string">&quot;2024-12-10&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> t = fn(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ClockConstructor &#123;</span><br><span class="line">    <span class="keyword">new</span> (hour: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>): ClockInerface;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ClockInerface &#123;</span><br><span class="line">    tick(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    ctor: ClockConstructor,</span></span></span><br><span class="line"><span class="function"><span class="params">    hour: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    minute: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">ClockInerface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DigitalClock</span> <span class="title">implements</span> <span class="title">ClockInerface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">tick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;beep beep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnalogClock</span> <span class="title">implements</span> <span class="title">ClockInerface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">tick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;tick tock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c1 = createClock(DigitalClock, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> c2 = createClock(AnalogClock, <span class="number">7</span>, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">c1.tick();</span><br><span class="line">c2.tick();</span><br></pre></td></tr></table></figure></li></ol><h3 id="泛型函数">泛型函数</h3><ol><li><p>在写一个函数时，输入的类型与输出的类型有关，或者两个输入的类型以某中方式相关，那么就可以使用泛型函数</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement</span>(<span class="params">arr: <span class="built_in">any</span>[]</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement1</span>&lt;<span class="title">T</span>&gt;(<span class="params">arr: T[]</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstElemet([]));</span><br><span class="line"><span class="built_in">console</span>.log(firstElemet([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(firstElemet([<span class="string">&quot;str1&quot;</span>]));</span><br></pre></td></tr></table></figure></li></ol><h4 id="类型推断">类型推断</h4><ol><li>在上面的例子中我们没有指定类型，类型是由 <code>ts</code> 自动推断出来的，当然也可以使用多个类型参数</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>&lt;<span class="title">Input</span>, <span class="title">Output</span>&gt;(<span class="params">arr: Input[], func: (arg: Input) =&gt; Output</span>): <span class="title">Output</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.map(func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parsed = map([<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>], <span class="function"><span class="params">n</span> =&gt;</span> <span class="built_in">parseInt</span>(n));</span><br></pre></td></tr></table></figure><h4 id="限制条件">限制条件</h4><ol><li><p>我们可以对任何类型的值进行操作，有时我们想把两个值联系起来，但只能对某个值的子集进行操作，在这种情况下，我们可以使用一个约束条件来限制一个类型参数可以接受的类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">longest</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123; length: <span class="built_in">number</span> &#125;&gt;(a: T, <span class="attr">b</span>: T) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a.length &gt;= b.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(longest([<span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]));</span><br><span class="line"><span class="built_in">console</span>.log(longest(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world123&quot;</span>));</span><br><span class="line">longest(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p>在上面的例子中，有一些有趣的事情需要注意，我们允许 <code>Ts</code> 推断 <code>longest</code> 的返回类型，返回类型推断也适用于通用函数，我们将 <code>T</code> 约束为 <code>&#123; length: number &#125;</code>，所以我们才可以访问 <code>a</code> <code>b</code> 两个参数的 <code>.length</code> 属性，如果没有类型约束，我们不可以访问这些属性，因为这些值可能是一些没有长度属性的其他类型</p></li><li><p><code>Array</code> <code>string</code> 的类型是根据参数推断出来的，所以泛型就是把两个或多个具有相同类型的值联系起来</p></li><li><p>最后，正如我们希望的，<code>longest(10, 20)</code> 会报错，因为数字类型没有 <code>.length</code> 属性</p></li></ol><h4 id="使用受限值">使用受限值</h4><ol><li><p>这里有一个适用通用约束条件的常见错误</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minimumLength</span>&lt;<span class="title">T</span> <span class="title">extends</span> </span>&#123; length: <span class="built_in">number</span> &#125;&gt;(obj: T, <span class="attr">minimum</span>: <span class="built_in">number</span>): T &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.length &gt;= minimum) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">length</span>: minimum &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>看起来上面的函数是没有问题的，<code>T</code> 被限制为 <code>&#123; length: number &#125;</code>，而且这个函数要么返回 <code>T</code> 要么返回一个与该限制相匹配的值，问题是，该函数承诺返回与传入参数相同的类型，而不仅仅是和约束条件想匹配的对象，如果这段代码是合法的，那么你可以得到这样一个无法工作的代码</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = minimumLength([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>));</span><br></pre></td></tr></table></figure></li></ol><h4 id="指定类型参数">指定类型参数</h4><ol><li><p><code>TS</code> 通常可以推断出通用调用中的预期类型参数，但并非总是如此</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combine</span>&lt;<span class="title">T</span>&gt;(<span class="params">arr1: T[], arr2: T[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr1.concat(arr2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = combine([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&quot;hello&quot;</span>]); <span class="comment">// error 因为T首先被推断为 number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你非要这样做 指定类型参数是有必要的</span></span><br><span class="line"><span class="keyword">const</span> arr1 = combine&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="string">&quot;hello&quot;</span>]);</span><br></pre></td></tr></table></figure></li></ol><h4 id="编写优秀通用函数的准则">编写优秀通用函数的准则</h4><p>编写泛型函数很有趣，但是很容易被类型参数所迷惑，有太多的类型参数或在不需要的地方使用约束会使推理不那么成功</p><ol><li><p>类型参数下推</p><ul><li>规则: 在可能的情况下，使用类型参数本身，而不是对其进行约束</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement1</span>&lt;<span class="title">T</span>&gt;(<span class="params">arr: T[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstElement2</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">any</span>[]&gt;(<span class="params">arr: T</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一个函数推断返回类型是 T 而第二个函数推断返回 any</span></span><br><span class="line"><span class="comment">// 因为 ts 必须使用约束类型来解析 arr[0] 表达式，而不是在调用期间 等待解析该元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = firstElement1([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// number</span></span><br><span class="line"><span class="keyword">let</span> b = firstElement2([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]); <span class="comment">// any</span></span><br></pre></td></tr></table></figure></li><li><p>使用更少的类型参数</p><ul><li>规则: 总是尽可能少的使用类型参数</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter1</span>&lt;<span class="title">T</span>&gt;(<span class="params">arr: T[], func: (arg: T) =&gt; <span class="built_in">boolean</span></span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种形式除了让函数更难看懂，没有任何用处</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter2</span>&lt;<span class="title">T</span>, <span class="title">Func</span> <span class="title">extends</span> (<span class="params">arg: T</span>) =&gt; <span class="title">boolean</span>&gt;(<span class="params">arr: T[], fn: Func</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.filter(fn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型参数应出现两次</p><ul><li>规则: 如果一个类型的参数只出现在一个地方，请重新考虑是否真的需要</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>&lt;<span class="title">Str</span> <span class="title">extends</span> <span class="title">string</span>&gt;(<span class="params">s: Str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello, &quot;</span> + s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">greet(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为什么不直接使用 string 类型呢 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">s: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello, &quot;</span> + s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="可选参数">可选参数</h3><ol><li><p><code>js</code> 中的函数经常需要一个可变数量的参数</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n.toFixed()); <span class="comment">// 0 个参数</span></span><br><span class="line">    <span class="built_in">console</span>.log(n.toFixed(<span class="number">1</span>)); <span class="comment">// 1 个参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">x?: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1(); <span class="comment">// 正确</span></span><br><span class="line">fn1(<span class="number">10</span>); <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure></li><li><p>上面 <code>fn1</code> 函数参数 <code>x</code> 虽然指定为 <code>number</code> 但因为它是可选参数，所以它实际上具有 <code>number | undefined</code> 类型</p></li><li><p>也可以提供默认参数值，现在 <code>fn1</code> 的主体中，<code>x</code> 将具有 <code>number</code> 类型，因为任何 <code>undefined</code> 类型都会被替换为 <code>10</code></p></li><li><p>请注意，当一个参数是可选的，调用者总是可以传递未定义的参数，因为这只是模拟一个丢失的参数</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">x = <span class="number">10</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x?: <span class="built_in">number</span></span>): <span class="title">void</span></span>;</span><br><span class="line"></span><br><span class="line">f();</span><br><span class="line">f(<span class="number">10</span>);</span><br><span class="line">f(<span class="literal">undefined</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="回调中的可选参数">回调中的可选参数</h4><ol><li><p>一旦了解可选参数和函数类型表达式，在编写调用回调的函数时就很容易犯错</p></li><li><p>规则: 当为回调写一个函数类型时，永远不要写一个可选参数，除非你打算在不传递该参数的情况下它还可以工作</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myForEach</span>(<span class="params">arr: <span class="built_in">any</span>[], callback: (arg: <span class="built_in">any</span>, index?: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        callback(arr[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们在书写 index? 作为一个可选参数时，通常是想让这些调用是合法的</span></span><br><span class="line">myForEach([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a</span>) =&gt;</span> <span class="built_in">console</span>.log(a));</span><br><span class="line">myForEach([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a, i</span>) =&gt;</span> <span class="built_in">console</span>.log(a, i));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可是，如果调用者不想提供索引，并且回调中使用索引, 那么就会出现错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myForEach</span>(<span class="params">arr: <span class="built_in">any</span>[], callback: (arg: <span class="built_in">any</span>, index?: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        callback(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myForEach([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function">(<span class="params">a, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i.toFixed()); <span class="comment">// error 因为 i 可能是 undefined 所以要让它不报错，要么你确定它一定有值使用非空断言 或者使用类型缩小</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数重载">函数重载</h3><ol><li><p>当一些函数可以在不同的参数数量和类型中被调用，可以通过编写重载签名来指定一个可以不同方式调用的函数，要做到这一点，要写一些数量的函数签名(通常是两个或多个)，然后是函数的主体</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDate</span>(<span class="params">timestamp: <span class="built_in">number</span></span>): <span class="title">Date</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDate</span>(<span class="params">m: <span class="built_in">number</span>, d: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="title">Date</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDate</span>(<span class="params">mOrTimestamp: <span class="built_in">number</span>, d?: <span class="built_in">number</span>, y?: <span class="built_in">number</span></span>): <span class="title">Date</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (d !== <span class="literal">undefined</span> &amp;&amp; y !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(y, mOrTimestamp, d);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(mOrTimestamp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">makeDate(<span class="number">12345678</span>);</span><br><span class="line">makeDate(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2024</span>);</span><br><span class="line">makeDate(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p>这里我们写了两个重载: 一个接受一个参数，另一个接受三个参数。前两个签名被称为重载签名，然后我们写了一个具有兼容签名的函数实现。函数有一个实现签名，但是这个签名不能被直接调用。即使我们写了一个所需参数之后有两个可选的参数，但是也不能以两个参数调用</p></li></ol><h4 id="重载签名和实现签名">重载签名和实现签名</h4><ol><li><p>这是一个常见的混乱来源</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 期望以零参数调用</span></span><br><span class="line"><span class="comment">// 但是错误，提示未提供 x 变量</span></span><br><span class="line">fn(); <span class="comment">// error</span></span><br><span class="line">fn(<span class="number">10</span>); <span class="comment">// 所以只能这样调用，那么这样使用重载签名的意义何在</span></span><br></pre></td></tr></table></figure></li><li><p>用于编写函数体的签名不能从外面看到</p><ul><li>实现的签名从外面是看不到的，在编写重载函数时，应该总是在函数的实现上有两个或两个以上的重载签名</li></ul></li><li><p>实现签名也必须与重载签名兼容</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">boolean</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">void</span></span>; <span class="comment">// error string boolean 不兼容 实现签名是 boolean 而 重载签名是 string 所以实现签名必须使用 联合类型才对</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">boolean</span></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">string</span></span>; <span class="comment">// 返回类型不兼容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">boolean</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ops&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="编写好的重载">编写好的重载</h4><ol><li><p>和泛型一样，在使用函数重载时，有一些准则需要遵循</p><ul><li>在可能的情况下，总是倾向于使用联合类型的参数而不是重载参数</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>(<span class="params">s: <span class="built_in">any</span>[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>(<span class="params">x: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len(<span class="string">&quot;srt&quot;</span>);</span><br><span class="line">len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">len(<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="string">&quot;str&quot;</span> : [<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数的实现签名是兼容的</span></span><br><span class="line"><span class="comment">// 我们可以使用 字符串或数组来调用它</span></span><br><span class="line"><span class="comment">// 但是我们不能使用可能是字符串或数组的值来调用它，因为 ts 只能将一个函数调用解析为一个重载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为两个重载都有相同的参数数量和相同的返回类型，可以改写为</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">len</span>(<span class="params">x: <span class="built_in">any</span>[] | <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">len(<span class="string">&quot;srt&quot;</span>);</span><br><span class="line">len([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">len(<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="string">&quot;str&quot;</span> : [<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure></li></ol><h4 id="函数内-This-的声明">函数内 <code>This</code> 的声明</h4><ol><li><p><code>TypeScript</code> 会通过代码流分析来推断函数中的 <code>this</code> 应该是什么</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;</span><br><span class="line">    id: <span class="number">123</span>,</span><br><span class="line">    admin: <span class="literal">false</span>,</span><br><span class="line">    becomeAdmin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.admin = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ts 理解函数 user.becomeAdmin 有一个对应的 this 它是外部对象 user，这个对于很多情况下已经足够了，但是在某些情况下，我们需要明确的指定函数中的 this 类型</span></span><br><span class="line"><span class="comment">// js 规范中，不能有一个叫 `this` 的参数，所以 TypeScript 使用这个语法空间，让你在函数体中声明 this 类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> User &#123;</span><br><span class="line">    admin: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> DB &#123;</span><br><span class="line">    filterUsers(filter: <span class="function">(<span class="params"><span class="built_in">this</span>: User</span>) =&gt;</span> <span class="built_in">boolean</span>): User[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> db:DB = &#123;</span><br><span class="line">    filterUsers: <span class="function">(<span class="params">filter: (<span class="built_in">this</span>: User) =&gt; <span class="built_in">boolean</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> user1 = &#123;</span><br><span class="line">            admin: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> user2 = &#123;</span><br><span class="line">            admin: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [user1, user2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> admins = db.filterUsers(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">this</span>: User</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.admin;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是注意，需要使用函数而不是箭头函数</span></span><br><span class="line"><span class="keyword">const</span> admins1 = db.filterUsers(<span class="function">() =&gt;</span> <span class="built_in">this</span>.admin); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="需要了解的其他类型">需要了解的其他类型</h3><ol><li>一些函数的上下文中特别相关的类型</li></ol><h4 id="void"><code>void</code></h4><ol><li><p><code>void</code> 表示没有返回值的函数的返回值。当一个函数没有任何返回语句，或者没有从这些返回语句中返回任何明确的值时，它都是推断出来的类型</p></li><li><p>在 <code>js</code> 中，一个不返回任何值的函数将隐含的返回 <code>undefined</code> 的值，然而在 <code>ts</code> 中，<code>void</code> 和 <code>undefined</code> 是不一样的</p></li><li><p>记住 <code>void</code> 和 <code>undefined</code> 不一样</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 推断返回的类型是 void</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="object"><code>object</code></h4><ol><li>特殊类型 <code>object</code> 指的是任何不是基元的值 <code>string</code> <code>number</code> <code>bigint</code> <code>boolean</code> <code>symbol</code> <code>null</code> <code>undefined</code> 之外的。这和空对象类型 <code>&#123;&#125;</code> 不同，也与全局类型 <code>Object</code> 不同。你可能永远不会使用到 <code>Object</code></li><li><code>object</code> 不是 <code>Object</code> 始终使用 <code>object</code></li><li>注意：在 <code>js</code> 中，函数是对象，它们有属性，在它们的原型链上有 <code>Object.prototype</code>，是 <code>object</code> 的实例，可以对它们调用 <code>Object.keys</code>等。由于这些原因，函数类型在 <code>Typescript</code> 中被认为是 <code>object</code></li></ol><h4 id="unknown"><code>unknown</code></h4><ol><li><code>unknown</code> 类型代表任何值，这和 <code>any</code> 类型类似，但是更安全，因为对未知 <code>unknown</code> 值做任何事情都是不合法的</li><li>这对于描述函数类型非常有用，因为你可以描述接受任何值的函数，而不需要在函数体有 <code>any</code> 值。反之，你可以描述一个返回未知类型的值的函数</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">a: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    a.b(); <span class="comment">// 正确</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params">a: unknown</span>) </span>&#123;</span><br><span class="line">    a.b(); <span class="comment">// error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeParse</span>(<span class="params">s: <span class="built_in">string</span></span>): <span class="title">unknown</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = safeParse(<span class="string">&#x27;&#123;&quot;a&quot;: 1&#125;&#x27;</span>); <span class="comment">// 要小心对待 obj</span></span><br></pre></td></tr></table></figure><h4 id="never"><code>never</code></h4><ol><li>有些函数永远不会返回一个值</li><li><code>never</code> 类型表示永远不会被观察到的值，在一个返回类型中，这意味着函数抛出一个异常或终止程序的执行</li><li><code>never</code> 也出现在 <code>TypeScript</code> 确定一个 <code>union</code> 中没有任何东西的时候</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params">msg: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        x; <span class="comment">// never 类型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Function"><code>Function</code></h4><p>全局性的 <code>Function</code> 类型描述了诸如 <code>bind</code> <code>call</code> <code>apply</code> 和其他存在于 <code>JS</code> 中所有函数值的属性。它还有一个特殊的属性。即 <code>Function</code> 类型的值总是可以被调用，这些调用返回 <code>any</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是一个无类型的函数调用，一般来说最好避免，因为 any 返回类型都不安全</span></span><br><span class="line"><span class="comment">// 如果你需要接受一个任意的函数，但不打算调用它，一般来说 () =&gt; void 是安全的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params">f: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数展开运算符">参数展开运算符</h3><h4 id="形参展开">形参展开</h4><ol><li>除了使用可选参数或重载来制作可以接受各种固定参数数量的函数外，还可以使用休止参数来定义接受无限制数量参数的函数</li><li><code>rest</code> 参数出现在所有其他参数之后，并使用 <code>...</code> 语法</li><li>在 <code>ts</code> 中，这些参数的类型注解是隐含的 <code>any[]</code> 而不是 <code>any</code>，任何给出的类型注解必须是 <code>Array&lt;T&gt;</code> 或 <code>T[]</code> 的形式，或一个元组类型</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mulitiply</span>(<span class="params">n: <span class="built_in">number</span>, ...m: <span class="built_in">number</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m.map(<span class="function">(<span class="params">x</span>) =&gt;</span> n * x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = mulitiply(<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h4 id="实参展开">实参展开</h4><ol><li><p>反之，我们可以使用 <code>spread</code> 语法从数组中提供可变数量的参数，例如，数组的 <code>push</code> 方法需要任意数量的参数</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">arr1.push(...arr2);</span><br></pre></td></tr></table></figure></li><li><p>请注意，一般来说 <code>TS</code> 并不假定数组是不可变的，这可能会导致一些意想不到的行为</p></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> args = [<span class="number">8</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> angle = <span class="built_in">Math</span>.atan2(...args); <span class="comment">// error 它不认为 args的数量是两个即使使用了 const 进行定义 除非使用 as const</span></span><br></pre></td></tr></table></figure><h3 id="参数解构">参数解构</h3><ol><li><p>可以使用参数重构来方便的将作为参数提供的对象，解压到函数主体的一个或多个局部变量中。</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">&#123; a, b, c &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sum(&#123; <span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的类型注解在解构的语法之后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">&#123; a, b, c &#125;: &#123; a: <span class="built_in">number</span>; b: <span class="built_in">number</span>; c: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ABC = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; b: <span class="built_in">number</span>; c: <span class="built_in">number</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">&#123; a, b, c &#125;: ABC</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="函数的可分配性">函数的可分配性</h3><h4 id="返回-void-类型">返回 <code>void</code> 类型</h4><ol><li>函数的 <code>void</code> 返回类型可以产生一些不同寻常的行为，但却是预期的行为</li><li>返回类型 <code>void</code> 的上下文类型并不强迫函数不返回东西。另一种说法是，一个具有 <code>void</code> 返回类型的上下文函数类型 ( <code>type vf = () =&gt; void</code>)，在实现时，可以返回任何其他的值，但它会被忽略，因此，以下 <code>() =&gt; void</code> 类型的实现是有效的</li><li>需要注意，当一个字面的函数定义返回类型是 <code>void</code>，该函数不能返回任何东西</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> voidFunc = <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f1: voidFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2: voidFunc = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f3: voidFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当这些函数之一的返回值被分配给另一个变量时，它将保留 void 类型</span></span><br><span class="line"><span class="keyword">const</span> v1 = f1();</span><br><span class="line"><span class="keyword">const</span> v2 = f2();</span><br><span class="line"><span class="keyword">const</span> v3 = f3();</span><br></pre></td></tr></table></figure><h2 id="对象类型-2">对象类型</h2><ol><li><p>在 <code>js</code> 中，我们分组和传递数据的基本方式是通过对象，我们通过对象类型来表示这些对象</p></li><li><p>对象类型可以是匿名的</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person: &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者类型别名</span></span><br><span class="line"><span class="keyword">type</span> Person = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">person: Person</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + person.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="属性修改器">属性修改器</h3><ol><li>对象类型中的每个属性都可以指定几件事: 类型、属性是否可选，以及属性是否可以被写入</li></ol><h4 id="可选属性-2">可选属性</h4><ol><li>在属性后使用 <code>?</code> 表示它是可选的</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Shape = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PaintOptions &#123;</span><br><span class="line">    shape: Shape;</span><br><span class="line">    xPos?: <span class="built_in">number</span>;</span><br><span class="line">    yPos?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintShape</span>(<span class="params">opts: PaintOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shape: Shape = &#123;&#125;;</span><br><span class="line">paintShape(&#123; shape &#125;);</span><br><span class="line">paintShape(&#123; shape, <span class="attr">xPos</span>: <span class="number">100</span> &#125;);</span><br><span class="line">paintShape(&#123; shape, <span class="attr">yPos</span>: <span class="number">100</span> &#125;);</span><br><span class="line">paintShape(&#123; shape, <span class="attr">xPos</span>: <span class="number">100</span>, <span class="attr">yPos</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>在 <code>js</code> 中，即使该属性从未被设置过，我们任然可以访问它-它只是为定义的值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintShape</span>(<span class="params">opts: PaintOptions</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> xPos = opts.xPos || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> yPos = opts.yPos || <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，这种未指定的值设置默认值非常普遍，以至于 <code>js</code> 有特殊的语法来支持它</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">paintShape</span>(<span class="params">&#123; shape, xPos = <span class="number">0</span>, yPos = <span class="number">0</span> &#125;: PaintOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为 paintShape 的参数使用了解构，并未 x y提供了默认值，现在x,y肯定都</span></span><br><span class="line"><span class="comment"> * 存在于 paintShape 的主体中，但对于 `paintShape` 来说的任何调用者来说是可选的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 注意：目前还没有办法将类型注释放在结构模式中，这是因为下面的语法在 js 中有了不同的含义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">&#123; shape: Shape, xPos: <span class="built_in">number</span> = <span class="number">100</span> &#125;</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里是将参数对象中的 shape 换成临时变量 Shape xPos 换成 number 标识符</span></span><br></pre></td></tr></table></figure><h4 id="只读属性">只读属性</h4><ol><li><p>对于 <code>TS</code> 属性可以被标记为只读，虽然它不会在运行时改变任何行为，但是在类型检查期间，一个标记为只读的属性不能被写入</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> SomeType &#123;</span><br><span class="line">    <span class="keyword">readonly</span> prop: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSome</span>(<span class="params">obj: SomeType</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.prop);</span><br><span class="line"></span><br><span class="line">    obj.prop = <span class="string">&quot;hello&quot;</span>; <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>readonly</code> 修饰符并不一定意味着一个值是完全不可改变的，或者换句话说，它的内部内容不能被改变，它只意味着该属性本身不能被重新写入</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Home &#123;</span><br><span class="line">    <span class="keyword">readonly</span> resident: &#123;</span><br><span class="line">        name: <span class="built_in">string</span>;</span><br><span class="line">        age: <span class="built_in">number</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">visitForBirthday</span>(<span class="params">home: Home</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Happy $&#123;home.resident.age&#125; Birthday $&#123;home.resident.name&#125;&quot;</span>);</span><br><span class="line">    home.resident.age++; <span class="comment">// ok</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evict</span>(<span class="params">home: Home</span>) </span>&#123;</span><br><span class="line">    home.resident = &#123;</span><br><span class="line">        name: <span class="string">&quot;Victor the Evictor&quot;</span>,</span><br><span class="line">        age: <span class="number">42</span>,</span><br><span class="line">    &#125;; <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>管理对 <code>readonly</code> 含义的预期很重要，在 <code>ts</code> 开发中，对于一个对象应该如何被使用的问题，它是有用的信号。<code>ts</code> 在检查两个类型的属性是否兼容时，并不考虑这些类型的属性是否是 <code>readonly</code> 所以 <code>readonly</code> 属性也可以通过别名来改变</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ReadonlyPerson &#123;</span><br><span class="line">    <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">readonly</span> age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> writeblePerson: Person = &#123;</span><br><span class="line">    name: <span class="string">&quot;Person McPersonface&quot;</span>,</span><br><span class="line">    age: <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> readonlyPerson: ReadonlyPerson = writeblePerson;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(readonlyPerson.age);</span><br><span class="line">writeblePerson.age++;</span><br><span class="line"><span class="built_in">console</span>.log(readonlyPerson.age);</span><br></pre></td></tr></table></figure></li></ol><h4 id="索引签名">索引签名</h4><ol><li><p>有时并不提前知道一个类型的所有属性名称，但知道值的形状，在这种情况下，可以使用索引签名来描述可能的值的类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [index: number] 索引属性，表示当一个 StringArray 被数字索引时，返回一个字符串</span></span><br><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: StringArray = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>];</span><br></pre></td></tr></table></figure></li><li><p>索引签名的属性类型必须是 <code>string</code> 或 <code>number</code></p></li><li><p>支持两种类型的索引器是可能的，但是从数字索引器返回的类型必须是字符串索引器返回的类型的子类型。这是因为当用 <code>number</code> 进行索引时，<code>js</code> 实际上会在索引到一个对象之前将其转换为 <code>string</code>。这意味着用 <code>100</code> 进行索引和用 <code>'100'</code> 进行索引是一样的，所以两者需要一致</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Animal; <span class="comment">// 错误 number 索引返回 Animal 而 string 索引返回 Dog, Animal 不是 Dog 的子类型</span></span><br><span class="line">    [x: <span class="built_in">string</span>]: Dog;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> YesKey &#123;</span><br><span class="line">    [x: <span class="built_in">number</span>]: Dog;</span><br><span class="line">    [x: <span class="built_in">string</span>]: Animal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>虽然字符串索引签名是描述字典模式的一种强大方式，但它也强制要求所有的属性与它们的返回类型想匹配。这是因为字符串索引声明 <code>obj.proerty</code> 也可以作为 <code>obj[&quot;property&quot;]</code> 在下面的例子中，<code>name</code> 的类型与字符串索引的类型不匹配</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberDictionary &#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">number</span>;</span><br><span class="line">    length: <span class="built_in">number</span>; <span class="comment">// ok</span></span><br><span class="line">    name: <span class="built_in">string</span>; <span class="comment">// error 类型 string 的属性不能赋值给 string 索引类型 number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然而，如果索引类型是属性类型的联合，不同类型的属性是可以接受的</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> NumberOrStringDictionary &#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">number</span> | <span class="built_in">string</span>;</span><br><span class="line">    length: <span class="built_in">number</span>; <span class="comment">// ok</span></span><br><span class="line">    name: <span class="built_in">string</span>; <span class="comment">// ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后，索引签名也可以为只读属性，以防止对其索引的赋值</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadonlyStringArray &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array: ReadonlyStringArray = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>];</span><br><span class="line">array[<span class="number">2</span>] = <span class="string">&quot;3&quot;</span>; <span class="comment">// error readonly</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="扩展类型">扩展类型</h3><ol><li><p>有些类型可能是其他类型的更具体的版本</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> BasicAddress &#123;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    street: <span class="built_in">string</span>;</span><br><span class="line">    city: <span class="built_in">string</span>;</span><br><span class="line">    country: <span class="built_in">string</span>;</span><br><span class="line">    postalCode: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在需要一个地址的单元</span></span><br><span class="line"><span class="keyword">interface</span> AddressWithUnit <span class="keyword">extends</span> BasicAddress &#123;</span><br><span class="line">    unit: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口的 <code>extends</code> 关键字，允许我们有效地从其他命名的类型中复制成员，并添加我们想要的任何新成员，这对于减少重复非常有用，以及表明同一属性的几个不同声明可能是相关的意图来说，是非常有用的</p></li><li><p>接口也可以从多个类型中扩展</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Colorful &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">    radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ColorfulCircle <span class="keyword">extends</span> Colorful, Circle &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cc: ColorfulCircle = &#123;</span><br><span class="line">    color: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">    radius: <span class="number">200</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="交叉类型">交叉类型</h3><ol><li><p>接口允许通过扩展其他类型建立新的类型。而交叉类型可以通过组合其他类型建立新的类型</p></li><li><p>交叉类型用 <code>&amp;</code> 操作符定义</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Colorful &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">    radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ColorfulCircle = Colorful &amp; Circle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cc: ColorfulCircle = &#123;</span><br><span class="line">    color: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">    radius: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params">circle: ColorfulCircle</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(circle.color);</span><br><span class="line">    <span class="built_in">console</span>.log(circle.radius);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">draw(&#123; <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">radius</span>: <span class="number">100</span> &#125;);</span><br><span class="line">draw(cc);</span><br></pre></td></tr></table></figure></li></ol><h3 id="接口与交叉类型">接口与交叉类型</h3><ol><li>接口扩展和交叉类型非常相似，但实际上有些细小的不同，对于接口，我们可以使用 <code>extends</code> 子句来扩展其他类型，而对于交叉类型，我们也可以做类似的事，并用类型别名来命名新类型。</li><li>两者之间的主要区别在于如何处理冲突，这种区别通常是在接口和交叉类型的类型别名之间选择的一个主要原因</li></ol><blockquote class="mindmap" style="height: 400px;contenteditable: true;"><ul><li>接口 VS. 交叉类型<ul><li>相同点<ul><li>都可以描述对象或函数</li><li>都可以扩展其他类型</li></ul></li><li>区别<ul><li>不同的声明范围<ul><li>接口: 声明中，值是具体结构对象</li><li>交叉: 可以为任意的类型创建类型别名</li></ul></li><li>不同的扩展形式<ul><li>接口: extends</li><li>交叉: &amp;</li></ul></li><li>不同的重复定义表现形式<ul><li>接口: 自动合并</li><li>交叉: 报错</li></ul></li></ul></li><li>如何选择<ul><li>建议优先选择接口</li><li>接口满足不了再使用交叉类型</li></ul></li></ul></li></ul></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口可以定义多次，多次的声明会自动合并</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Sister &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Sister &#123;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> si: Sister = &#123; <span class="comment">// error 缺少 age 属性</span></span><br><span class="line">    name: <span class="string">&quot;suxi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sis: Sister = &#123;</span><br><span class="line">    name: <span class="string">&quot;suxi&quot;</span>,</span><br><span class="line">    age: <span class="number">12</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型别名定义多次会报错</span></span><br><span class="line"><span class="keyword">type</span> Sister = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Sister = &#123; <span class="comment">// error 不可以重复定义类型</span></span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="范型对象类型">范型对象类型</h3><ol><li><p>如果有一个包含任何数据的盒子类型: 字符串、数字、苹果</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// any</span></span><br><span class="line"><span class="keyword">interface</span> Box &#123;</span><br><span class="line">    contents: <span class="built_in">any</span>; <span class="comment">// any 但是ts的类型检查就失效了 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用 unknown</span></span><br><span class="line"><span class="keyword">interface</span> Box &#123;</span><br><span class="line">    contents: unknown; <span class="comment">// 虽然安全，但是使用时需要进行类型缩小</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> box: Box = &#123;</span><br><span class="line">    contents: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> box.contents === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(box.contents.toUpperCase());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(box.contents);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为每一个盒子搭建不同的类型</span></span><br><span class="line"><span class="keyword">interface</span> NumberBox &#123;</span><br><span class="line">    contents: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StringBox &#123;</span><br><span class="line">    contents: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> BooleanBox &#123;</span><br><span class="line">    contents: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但这也意味着我们必须创建不同的函数或函数的重载，对这些结构类似的类型进行操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setContents</span>(<span class="params">box: NumberBox, newContents: <span class="built_in">number</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setContetns</span>(<span class="params">box: StringBox, newContents: <span class="built_in">string</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setContents</span>(<span class="params">box: BooleanBox, newContents: <span class="built_in">boolean</span></span>): <span class="title">void</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setContents</span>(<span class="params">box: &#123; contents: <span class="built_in">any</span> &#125;, newContents: <span class="built_in">any</span></span>) </span>&#123;</span><br><span class="line">    box.contents = newContents;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果以后需要引入更多类型的盒子，这是非常差劲的</span></span><br><span class="line"><span class="comment">// 相反我们可以做一个通用的 Box 类型，声明一个类型参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Box&lt;T&gt; &#123;</span><br><span class="line">    contents: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> box1 = Box&lt;<span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">    contents: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> box2 = Box&lt;<span class="built_in">boolean</span>&gt; = &#123;</span><br><span class="line">    contents: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 盒子是可重用的，因为 T 可以用任何东西来代替，这意味着当我们需要一个新类型的盒子时，我们根本不需要一个新的盒子类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Apple &#123;</span><br><span class="line">    weight: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> appleBox: Box&lt;Apple&gt; = &#123;</span><br><span class="line">    contents: &#123;</span><br><span class="line">        weight: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 意味着我们也可以完全避免重载，而使用通用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setContents</span>&lt;<span class="title">T</span>&gt;(<span class="params">box: Box&lt;T&gt;, contents: T</span>) </span>&#123;</span><br><span class="line">    box.contents = contents;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>值得注意的是，类型别名也可以通用的，我们可以通过使用类型别名来代替</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Box&lt;T&gt; = &#123;</span><br><span class="line">    contents: T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>由于类型别名与接口不同，它不仅可以描述对象类型，还可以用它来编写其他类型的通用辅助类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> OrNull&lt;T&gt; = T | <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">type</span> OneOrMany&lt;T&gt; = Type | Type[];</span><br><span class="line"><span class="keyword">type</span> OneOrManyOrNull&lt;T&gt; = orNull&lt;OneOrMany&lt;T&gt;&gt;;</span><br><span class="line"><span class="keyword">type</span> OneOrManyOrNullStrings = OneOrManyOrNull&lt;<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure></li><li><p>通用对象类型通常是某种容器类型，它的工作与它们所包含的元素类型无关。数据结构以这种形式工作是理想的，这样它们就可以在不同的数据类型中重复使用</p></li></ol><h3 id="数组类型">数组类型</h3><ol><li><p>我们一直在使用这样一种类型: 数组类型，<code>number[]</code> <code>string[]</code> 这种类型 实际上是 <code>Array&lt;number&gt;</code> 和 <code>Array&lt;string&gt;</code> 的缩写</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSome</span>(<span class="params">value: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray: <span class="built_in">string</span>[] = [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hell&quot;</span>];</span><br><span class="line"></span><br><span class="line">doSome(myArray);</span><br></pre></td></tr></table></figure></li><li><p>和上面的 <code>Box</code> 类型一样，<code>Array</code> 本身也是一个通用类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Array&lt;T&gt; &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">    pop(): T | <span class="literal">undefined</span>;</span><br><span class="line">    push(...items: T[]): <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>现代 <code>JS</code> 还提供了其他通用的数据结构，比如 <code>Map&lt;K, V&gt;</code> <code>Set&lt;T&gt;</code> <code>Promise&lt;T&gt;</code> 。这意味着，由于 <code>Map</code> <code>Set</code> <code>Promise</code> 的行为方式，它们可以与任何类型的集合一起工作</p></li></ol><h3 id="只读数组类型">只读数组类型</h3><ol><li><p><code>ReadonlyArray</code> 是一个特殊的类型，描述了不应该被改变的数组</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">values: ReadonlyArray&lt;<span class="built_in">string</span>&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> copy = values.slice();</span><br><span class="line">    <span class="built_in">console</span>.log(values[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    values.push(<span class="string">&quot;hello&quot;</span>); <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>和属性的 <code>readonly</code> 修饰符一样，它主要是我们用来了解意图的工具。当我们看到一个返回 <code>ReadonlyArray</code> 的函数时，我们知道我们不能改变它的内容。当我们看一个接受 <code>ReadonlyArray</code> 的函数的时候，我们可以将任何数组传入而不用担心它会改变其内容</p></li><li><p>和 <code>Array</code> 不同，没有一个我们可以使用的 <code>ReadonlyArray</code> 构造函数</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ReadonlyArray(<span class="string">&quot;red&quot;</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p>相反，我们可以将普通的 <code>Array</code> 分配给 <code>ReadonlyArray</code></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> roArray: ReadonlyArray&lt;<span class="built_in">string</span>&gt; = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br></pre></td></tr></table></figure></li><li><p>正如 <code>TypeScript</code> 为 <code>Array&lt;T&gt;</code> 提供了 <code>T[]</code> 的速记语法一样，它也为 <code>ReadonlyArray&lt;T&gt;</code> 提供了只读 <code>Type[]</code> 的速记语法一样</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params">values: <span class="keyword">readonly</span> <span class="built_in">string</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> copy = values.slice();</span><br><span class="line">    values.push(<span class="string">&quot;hllo&quot;</span>); <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后需要注意的是，与 <code>readonly</code> 属性修改器不同，可分配性在普通 <code>Array</code> 和 <code>ReadonlyArray</code> 之间不是双向的</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="keyword">readonly</span> <span class="built_in">string</span>[] = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> y: strng[] = [];</span><br><span class="line"></span><br><span class="line">x = y; <span class="comment">// 非readonly 可以分配给 readonly</span></span><br><span class="line">y = x; <span class="comment">// error readonly 不可以分配给非readonly</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="元组类型">元组类型</h3><ol><li><p><code>Tuple</code> 类型是另一种 <code>Array</code> 类型，它确切地知道包含多少元素，以及它在特定位置包含哪些类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StringNumberPair 是一个 string number 的元组类型，和 ReadonlyArray 一样它在运行时没有任何表示，但对 ts 来说 它描述了其索引 0 包含字符串 和索引1 包含数字的数组</span></span><br><span class="line"><span class="keyword">type</span> StringNumberPair = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们试图索引超过元素的数量，我们会得到一个错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSuff</span>(<span class="params">pair: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> c = pair[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以使用数组析构来对元组进行解构</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSuff</span>(<span class="params">pair: [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> [str, num] = pair;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除了长度检查，像这样的简单元组类型等同于 <code>Array</code> 的版本，它为特定的索引声明属性，并且用数字字面类型声明长度</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringNumberPair &#123;</span><br><span class="line">    length: <span class="number">2</span>;</span><br><span class="line">    <span class="number">0</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="number">1</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">// 其他 Array&lt;string | number&gt; 成员</span></span><br><span class="line">    slice(start?: <span class="built_in">number</span>, end?: <span class="built_in">number</span>): <span class="built_in">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></li><li><p>元组可以通过在元素的类型后面写出问号 <code>?</code> ---- 可选的元组，元素只能出现在末尾，而且还影响到长度的类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Either2dOr3d = [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>?];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCoordinate</span>(<span class="params">coord: Either2dOr3d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [x, y, z] = coord;</span><br><span class="line">    <span class="built_in">console</span>.log(x, y, z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>元组也可以有其余元素，这些元素必须是 <code>array/tuple</code> 类型</p><ul><li><code>StringNumberBooleans</code> 描述了一个元组，其前两个元素分别是字符串和数字，但后面可以有任意数量的布尔</li><li><code>StringBooleansNumber</code> 描述了一个元组，其第一个元素是字符串，最后一个元素是数字，中间可以是任意数量的布尔</li><li><code>BooleansStringNumber</code> 描述了一个元组，其倒数第二个元素是字符串，最后一个元素是数字，起始位置可以是任意数量的布尔</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> StringNumberBooleans = [<span class="built_in">string</span>, <span class="built_in">number</span>, ...boolean[]];</span><br><span class="line"><span class="keyword">type</span> StringBooleansNumber = [<span class="built_in">string</span>, ...boolean[], <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">type</span> BooleansStringNumber = [...boolean[], <span class="built_in">string</span>, <span class="built_in">number</span>];</span><br></pre></td></tr></table></figure></li><li><p><code>ts</code> 允许将 <code>tuples</code> 与参数列表想对应。当想用一个其余参数接受可变数量的参数，并且需要一个最小的元素数量，但不想引人中间变量时，这很方便</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readButtonInput</span>(<span class="params">...args: [<span class="built_in">string</span>, <span class="built_in">number</span>, ...<span class="built_in">boolean</span>[]]</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readButtonInput</span>(<span class="params">name: <span class="built_in">string</span>, version: <span class="built_in">number</span>, ...input: <span class="built_in">boolean</span>[]</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="只读元组类型">只读元组类型</h3><ol><li><p><code>tuple</code> 类型有只读特性，可以通过在它们前面添加一个 <code>readonly</code> 关键字修饰符来指定</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doS</span>(<span class="params">pair: <span class="keyword">readonly</span> [<span class="built_in">string</span>, <span class="built_in">number</span>]</span>) </span>&#123;</span><br><span class="line">    pair[<span class="number">0</span>] = <span class="string">&quot;hello&quot;</span>; <span class="comment">// error 不可写入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在大多数代码中，元组往往被创建并不被修改，所以在可能的情况下，将类型注释为一个字读元组是一个很好的默认。这一点很重要，因为带有 <code>const</code> 的断言的数组字面量将被推断为只读元组类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> point = [<span class="number">3</span>, <span class="number">4</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distance</span>(<span class="params">[x, y]: [<span class="built_in">number</span>, <span class="built_in">number</span>]</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(x * x + y * y); <span class="comment">// error 因为不能保证元组不被修改，所以错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">distance(point);</span><br></pre></td></tr></table></figure></li></ol><h2 id="类型操纵">类型操纵</h2><ol><li>从类型中创建类型，<code>ts</code> 允许用其他类型的术语来表达类型</li><li>实际上有各种各样的类型操作符可以使用。也可以用我们已经有的值来表达类型</li><li>通过结合各种类型操作符，我们可以用一种简洁，可维护的方式来表达复杂的操作和值<ul><li>泛型型 - 带参数的类型</li><li><code>Keyof</code> 类型操作符 - <code>keyof</code> 操作符创建新类型</li><li><code>Typeof</code> 类型操作符 - 使用 <code>typeof</code> 操作符来创建新的类型</li><li>索引访问类型 - 使用 <code>Type[&quot;a&quot;]</code> 语法来访问一个类型的子集</li><li>条件类型 - 在类型系统中像 <code>if</code> 语句一样行事的类型</li><li>映射类型 - 通过映射现有类型中的每个属性来创建类型</li><li>模版字面面类型 - 通过模版字面字符串改变属性的映射类型</li></ul></li></ol><h3 id="泛型">泛型</h3><ol><li>在函数泛型已经介绍了泛型可以指定类型参数或者由 <code>TS</code> 进行推断</li></ol><h4 id="通用类型变量">通用类型变量</h4><ol><li><p>当我们使用泛型时，编译器会强制要求在函数主体中正确使用泛型参数，也就是说，实际上把这些参数当作是任何和所有的类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length); <span class="comment">// error 不一定有 length 这个变量</span></span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T[]</span>): <span class="title">T</span>[] </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="泛型类型">泛型类型</h4><ol><li><p>泛型函数的类型与非泛型函数的类型一样，类型参数列在前面，与函数声明类似</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: &lt;U&gt;<span class="function">(<span class="params">arg: U</span>) =&gt;</span> U = identity;</span><br></pre></td></tr></table></figure></li></ol><h4 id="泛型类">泛型类</h4><p>一个泛型类的形状与泛型接口相似。泛型类在类的名字后面有一个 <code>&lt;&gt;</code> 中的泛型参数列表</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericNumber</span>&lt;<span class="title">NumType</span>&gt; </span>&#123;</span><br><span class="line">    zeroValue: NumType;</span><br><span class="line">    add: <span class="function">(<span class="params">x: NumType, y: NumType</span>) =&gt;</span> NumType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line"></span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和接口一样，把类型参数放在类本身，可以让我们确保类的所有属性都与相同的类型一起工作</p><p>一个类的类型有两个方面：静态方面和实例方面。通用类只在其实例而非静态侧具有通用性，所有在使用类时，静态成员不能使用类的类型参数</p><h4 id="泛型约束">泛型约束</h4><ol><li>我们希望限制这个函数 <code>any</code> 和所有类型一起工作，而不是与 <code>any</code> 和所有同时具有 <code>.length</code> 属性的类型一起工作。只要这个类型有这个成员，我们就允许它，但它必须至少有这个成员。必须把我们的要求作为一个约束条件列在 <code>Type</code> 可以是什么</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">    length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loggingIdentity(&#123; <span class="attr">length</span>: <span class="number">10</span>, <span class="attr">value</span>: <span class="number">3</span> &#125;);</span><br></pre></td></tr></table></figure><h4 id="在泛型约束中使用类型参数">在泛型约束中使用类型参数</h4><p>可以声明一个受另一个类型参数约束的类型参数。例如，在这里我们想从一个给定名称的对象中获取一个属性。我们想确保我们不会意外地获取一个不存在 <code>obj</code> 上的属性，所以我们要在这两种类型之间放置一个约束条件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">getProperty(x, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">getProperty(x, <span class="string">&quot;m&quot;</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h4 id="在泛型中使用类类型">在泛型中使用类类型</h4><p>在 <code>TS</code> 中使用泛型创建工厂时，有必要通过其构造函数来引用类的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>&lt;<span class="title">T</span>&gt;(<span class="params">c: &#123; <span class="keyword">new</span> (): T &#125;</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个更高级的例子，使用原型属性来推断和约束类型的构造函数和实例之间的关系</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Beekeeper</span> </span>&#123;</span><br><span class="line">    hasMask: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZooKeeper</span> </span>&#123;</span><br><span class="line">    nametag: <span class="built_in">string</span> = <span class="string">&quot;Mikle&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    numLegs: <span class="built_in">number</span> = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bee</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    keeper: Beekeeper = <span class="keyword">new</span> Beekeeper();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    keeper: ZooKeeper = <span class="keyword">new</span> ZooKeeper();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createInstance</span>&lt;<span class="title">A</span> <span class="title">extends</span> <span class="title">Animal</span>&gt;(<span class="params">c : &#123; <span class="keyword">new</span> (): A &#125; </span>): <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> c();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createInstance(Lion).keeper.nametag;</span><br><span class="line">createInstance(Bee).keeper.hasMask;</span><br></pre></td></tr></table></figure><h3 id="keyof-类型操作符"><code>keyof</code> 类型操作符</h3><p><code>keyof</code> 运算符接收一个对象类型，其产生其键的字符串或数字字面联合</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Point = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; y: <span class="built_in">number</span>; &#125;;</span><br><span class="line"><span class="keyword">type</span> P = keyof Point;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1: P = <span class="string">&quot;x&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> p2: P = <span class="string">&quot;y&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> p3: P = <span class="string">&quot;z&quot;</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>如果该类型有一个字符串或数字索引签名，<code>keyof</code> 将返回这些类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Arrayish = &#123; [n: <span class="built_in">number</span>]: unknown &#125;;</span><br><span class="line"><span class="keyword">type</span> A = keyof Arrayish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: A = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> a1: A = <span class="string">&quot;0&quot;</span>; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Mapish = &#123; [k: <span class="built_in">string</span>]: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> M = keyof Mapish;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m: M = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> m2: M = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> m3: M = <span class="literal">true</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>注意上面这个例子中，<code>M</code> 是 <code>string | number</code> – 这是因为 <code>JavaScript</code> 对象的键总是被强制为字符串，所以 <code>obj[0]</code> 总是和 <code>obj['0']</code> 相同</p><p><code>keyof</code> 类型在与映射类型结合时变得特别有用</p><h3 id="Typeof-类型操作符"><code>Typeof</code> 类型操作符</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> n: <span class="keyword">typeof</span> s;</span><br><span class="line"></span><br><span class="line">n = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">n = <span class="number">100</span>; <span class="comment">// error 不能将 number 分配给 string</span></span><br></pre></td></tr></table></figure><p><code>typeof</code> 对基本类型来说不是很有用，但结合其他类型操作符，可以使用 <code>typeof</code> 方便的表达许多模式。</p><p>这里介绍一个预定义的类型 <code>ReturnType&lt;T&gt;</code> 它接受一个函数类型并产生其返回类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Predicate = <span class="function">(<span class="params">x: unknown</span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> K = ReturnType&lt;Predicate&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当我们试图在一个函数名上使用 ReturnType 会发生错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">3</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请记住 值和类型不是一回事，为了指代值 f 的类型，我们使用 typeof</span></span><br><span class="line"><span class="keyword">type</span> P = ReturnType&lt;f&gt;; <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> P = ReturnType&lt;<span class="keyword">typeof</span> f&gt;; <span class="comment">// &#123; x: number; y: number;&#125;</span></span><br></pre></td></tr></table></figure><p><code>ts</code> 故意限制了可以使用 <code>typeof</code> 表达式的种类，具体来说，只有在标识符或其属性上使用 <code>typeof</code> 是合法的，这有助于避免混乱的陷阱</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shouldContinue: <span class="keyword">typeof</span> msgbox(<span class="string">&quot;helelo&quot;</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="索引访问类型">索引访问类型</h3><p>我们可以使用索引访问类型来查询另一个类型上的特定属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person = &#123; <span class="attr">age</span>: <span class="built_in">number</span>; name: <span class="built_in">string</span>; alive: <span class="built_in">boolean</span> &#125;;</span><br><span class="line"><span class="keyword">type</span> Age = Person[<span class="string">&quot;age&quot;</span>]; <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ag1: Age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> ag2: Age = <span class="string">&quot;11&quot;</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>索引类型本身就是一个类型，所以我们可以完全使用 <code>unions</code> <code>keyof</code> 或其他类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    alive: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I1 = Person[<span class="string">&quot;age&quot;</span> | <span class="string">&quot;name&quot;</span>]; <span class="comment">// string | number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i1: I1 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> i2: I1 = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> I2 = Person[keyof Person]; <span class="comment">// string | number | boolean</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i3: I2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> i4: I2 = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">const</span> i5: I2 = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>如果试图索引一个不存在的属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> I1 = Person[<span class="string">&quot;alve&quot;</span>]; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>另一种使用任意类型进行索引的例子是使用 <code>number</code> 来获取一个数组元素的类型，我们可以把它和 <code>typeof</code> 结合起来，方便地获取一个数组字面的元素类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MyArray = [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span>, <span class="attr">age</span>: <span class="number">15</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">&quot;Eve&quot;</span>, <span class="attr">age</span>: <span class="number">38</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person = <span class="keyword">typeof</span> MyArray[<span class="built_in">number</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1: Person = &#123;</span><br><span class="line">    name: <span class="string">&quot;suxi&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Age = <span class="keyword">typeof</span> MyArray[<span class="built_in">number</span>][<span class="string">&quot;age&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> age1: Age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Age2 = Person[<span class="string">&quot;age&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> age2: Age2 = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>只能在索引时使用类型，这意味着不能使用 <code>const</code> 来做一个变量引用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> key = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> Age = Person[key]; <span class="comment">// error // key 在这里用作值而不是类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Key = <span class="string">&quot;age&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> Age = Person[key];</span><br></pre></td></tr></table></figure><h3 id="条件类型">条件类型</h3><ol><li><p>在大多数有用的程序的核心，我们必须根据输入来做决定 <code>JS</code> 也不例外，但鉴于数值可以很容易地被内省，这些决定也是基于输入的类型。条件类型有助于描述输入和输出的类型之间的关系</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    live(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    woof(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">type</span> Example1 = Dog <span class="keyword">extends</span> Animal ? <span class="built_in">number</span> : <span class="built_in">string</span>;</span><br><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">type</span> Example2 = <span class="built_in">RegExp</span> <span class="keyword">extends</span> Animal ? <span class="built_in">number</span> : <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件类型的形式看起来像是 js 中的条件表达式</span></span><br><span class="line">SomeType <span class="keyword">extends</span> OtherType ? TrueType : FalseType;</span><br><span class="line"><span class="comment">// 当 extends 左边的类型可以赋值给右边的类型时，那么你将得到第一个分支中的类型，否则得到后一个分支中的类型</span></span><br><span class="line"><span class="comment">// 当然上面这个例子看起来并不是显得有用，因为一眼就可以看出来它的类型。但条件类型的威力来自于它所带来的好处，条件类型的力量来自于它们与泛型一起使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IdLabel &#123;</span><br><span class="line">    id: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> NameLabel &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLabel</span>(<span class="params">id: <span class="built_in">number</span></span>): <span class="title">IdLabel</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLabel</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">NameLabel</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLabel</span>(<span class="params">nameOrId: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">IdLabel</span> | <span class="title">NameLabel</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLabel</span>(<span class="params">nameOrId: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">IdLabel</span> | <span class="title">NameLabel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;unimplemented&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>createLabel</code> 的这些重载描述了一个单一的 <code>js</code> 函数，该函数根据其输入的类型作出选择。注意一些事情：</p><ul><li>如果一个库必须在其 <code>API</code> 中反复作出同样的选择，这就会变得很麻烦</li><li>必须创建三个重载：一个用于确定类型的情况，一个用于最一般的情况，对于 <code>createLabel</code> 所能处理的每一种新类型，重载的数量都会呈指数级增长</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NameOrId&lt;T <span class="keyword">extends</span> <span class="built_in">number</span> | <span class="built_in">string</span>&gt; = T <span class="keyword">extends</span> <span class="built_in">number</span> ? IdLabel : NameLabel;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createLabel</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">number</span> | <span class="title">string</span>&gt;(<span class="params">idOrName: T</span>): <span class="title">NameOrId</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">&quot;unimplemented&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = createLabel(<span class="string">&quot;typescript&quot;</span>);</span><br><span class="line"><span class="comment">// a: NameLabel</span></span><br><span class="line"><span class="keyword">let</span> b = createLabel(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// b: IdLabel</span></span><br><span class="line"><span class="keyword">let</span> c = createLabel(<span class="built_in">Math</span>.random() &gt; <span class="number">0.5</span> ? <span class="string">&quot;hello&quot;</span> : <span class="number">42</span>);</span><br><span class="line"><span class="comment">// c: NameLabel | IdLabel</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="条件类型约束">条件类型约束</h4><ol><li><p>条件类型中的检查会给我们提供一些新的信息。就像用类型守卫缩小范围可以给我们一个更具体的类型一样，条件类型的真正分支将通过我们检查的类型进一步约束泛型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Message&lt;T&gt; = T[<span class="string">&quot;message&quot;</span>]; <span class="comment">// error 类型 message 无法用于索引类型 T</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MessageOf&lt;T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: unknown &#125;&gt; = T[<span class="string">&quot;message&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Email &#123;</span><br><span class="line">    message: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EmailMessageContents = MessageOf&lt;Email&gt;;</span><br></pre></td></tr></table></figure></li><li><p>然而，如果我们想要让 <code>MessageOf</code> 接受任何类型，并在消息属性不可用的情况下，默认为 <code>never</code> 类型呢，我们可以通过约束条件移出，并引入一个条件类型来做到这一点</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MessageOf&lt;T&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">message</span>: unknown &#125; ? T[message] : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> Dog = &#123;</span><br><span class="line">    bark(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> DogMessageContents = MessageOf&lt;Dog&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dmc: DogMessageContents = <span class="string">&quot;error&quot;</span> <span class="keyword">as</span> <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure></li><li><p>在真正的分支中，<code>TS</code> 会知道 <code>T</code> 会有一个消息属性。下面也有一个例子，将数组类型平铺到它们的元素类型上，但在其他方面不做处理</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当 Flatten 被赋予一个数组类型时，它使用一个带有数字的索引访问来获取 string[] 的元素类型。否则，它只是返回它被赋予的类型</span></span><br><span class="line"><span class="keyword">type</span> Flatten&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span>[] ? T[<span class="built_in">number</span>] : T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Str = Flatten&lt;<span class="built_in">string</span>[]&gt;;</span><br><span class="line"><span class="keyword">type</span> Num = Flatten&lt;<span class="built_in">number</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1: Str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num: Num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="在条件类型内进行推理">在条件类型内进行推理</h4><ol><li><p>我们只是发现自己使用条件类型来应用约束条件，然后提取出类型，这最终成为一种常见的操作，而条件类型使得它变得更容易</p></li><li><p>条件类型为我们提供了一种方法来推断在真实分支中使用 <code>infer</code> 关键字进行对比的类型。例如，我们可以在 <code>Flatten</code> 中推断出元素类型，而不是用索引访问类型手动提取出来</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Flatten&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">Array</span>&lt;infer Item&gt; ? Item : T;</span><br></pre></td></tr></table></figure></li><li><p>上面的例子，我们使用 <code>infer</code> 关键字来声明性地引入一个名为 <code>Item</code> 的新的通用类型变量，而不是指定如何在真实分支中检索 <code>T</code> 的元素类型，这使得我们不必考虑如何挖掘和探测我们感兴趣的类型的结构</p></li><li><p>我们可以使用 <code>infer</code> 关键字编写一些有用的辅助类型别名，例如，对于简单的情况，我们可以从函数类型中提取出返回类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> GetReturnType&lt;T&gt; = T <span class="keyword">extends</span> (...args: <span class="built_in">never</span>[]) =&gt; infer Return ? Return : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Num = GetReturnType&lt;<span class="function">() =&gt;</span> <span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> Str = GetReturnType&lt;<span class="function">() =&gt;</span> <span class="built_in">string</span>&gt;;</span><br><span class="line"><span class="keyword">type</span> Bool = GetReturnType&lt;<span class="function">() =&gt;</span> <span class="built_in">boolean</span>&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Never = GetReturnType&lt;<span class="built_in">string</span>&gt;;</span><br></pre></td></tr></table></figure></li><li><p>当从一个具有多个调用签名的类型(如重载函数的类型)进行推断时，从最后一个签名进行推断(据推测，这是最容许的万能情况)，不可能根据参数类型的列表来执行重载解析</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">stringOrNum</span>(<span class="params">x: <span class="built_in">string</span></span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">stringOrNum</span>(<span class="params">x: <span class="built_in">number</span></span>): <span class="title">string</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">stringOrNum</span>(<span class="params">x: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">string</span> | <span class="title">number</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T1 = ReturnType&lt;<span class="keyword">typeof</span> stringOrNum&gt;; <span class="comment">// string | number</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="分布式条件类型">分布式条件类型</h4><ol><li><p>当条件类型作用于一个通用类型时，当给定一个联合类型时，它们就变成了分布式的。例如，以下面的例子为例</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ToArray&lt;T&gt; = T <span class="keyword">extends</span> <span class="built_in">any</span> ? T[] : <span class="built_in">never</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果我们将一个联合类型插入 ToArray, 那么条件类型被用于该联合的每个成员</span></span><br><span class="line"><span class="keyword">type</span> StrArrOrNumber = ToArray&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;;</span><br><span class="line"><span class="comment">// string[] | number[] 这就是分布式 它的结果不是 (string | number)[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> 这里发生的情况是，StrArrOrNumArr 分布在</span></span><br><span class="line"><span class="comment"> string | number;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 并对每个联合的每个成员类型进行映射，以达到有效的目的</span></span><br><span class="line"><span class="comment"> ToArray&lt;string&gt; | ToArray&lt;number&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 给我们留下了</span></span><br><span class="line"><span class="comment"> string[] | number[]</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> 通常情况下，分布性是需要的行为，为了避免这种行为，你可以使用方括号包围 extends 关键字的每一边</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ToArrayNonDist&lt;T&gt; = [T] <span class="keyword">extends</span> [<span class="built_in">any</span>] ? T[] : <span class="built_in">never</span>;</span><br><span class="line"><span class="keyword">type</span> StrArrOrNumArr = ToArrayNonDist&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;; <span class="comment">// 现在是 (string | number)[]</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="映射类型">映射类型</h3><ol><li><p>当不想重复定义类型，一个类型可以以另一个类型为基础创建新类型</p></li><li><p>映射类型建立在索引签名的语法上，索引签名用于声明没有被提前声明的属性类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> OnlyBoolsAndNumber = &#123;</span><br><span class="line">    [key: <span class="built_in">string</span>]: <span class="built_in">boolean</span> | <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> confirms: OnlyBoolsAndNumber = &#123;</span><br><span class="line">    del: <span class="literal">true</span>,</span><br><span class="line">    rodney: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 映射类型是一种通用类型，它使用 propertyKeys 的联合，经常通过 keyof 创建 迭代键来创建一个类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OptionsFlags&lt;T&gt; = &#123;</span><br><span class="line">    [Property <span class="keyword">in</span> keyof T]: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FeatureFlags = &#123;</span><br><span class="line">    darkMode: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    newUserProfile: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">type FeatureOptions = &#123;</span></span><br><span class="line"><span class="comment">    darkMode: boolean;</span></span><br><span class="line"><span class="comment">    newUserProfile: boolean;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FeatureOptions = OptionsFlags&lt;FeatureFlags&gt;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="映射修改器">映射修改器</h4><ol><li><p>在映射的过程中，有两个额外的修饰可以应用: <code>readonly</code> 和 <code>?</code> 它们分别影响可变性和可选性</p></li><li><p>可以通过 <code>-</code> 或 <code>+</code> 作为前缀来删除或添加这些修饰语。如果不加前缀，那么假定是 <code>+</code></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> CreateMutable&lt;T&gt; = &#123;</span><br><span class="line">    -<span class="keyword">readonly</span> [Property <span class="keyword">in</span> keyof T]: T[Property];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LockedAccount = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> id: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">readonly</span> name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> UnlockedAccount = CreateMutable&lt;LockedAccount&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Concrete&lt;T&gt; = &#123;</span><br><span class="line">    [Property <span class="keyword">in</span> keyof T]-?: T[Property];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MaybeUser = &#123;</span><br><span class="line">    id: <span class="built_in">string</span>;</span><br><span class="line">    name?: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User = Concrete&lt;MaybeUser&gt;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="通过-as-做-key-重映射">通过 <code>as</code> 做 <code>key</code> 重映射</h4><ol><li><p>可以通过映射类型中的 <code>as</code> 子句重新映射映射类型中的键</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line"><span class="keyword">type</span> MappedTypeWithNewProperties&lt;T&gt; = &#123;</span><br><span class="line">    [Property <span class="keyword">in</span> keyof T <span class="keyword">as</span> NewKeyType]: T[Property];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用模版字面类型等功能，从先前的属性名称中创建一个新的属性名称</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Capitalize ts提供的模版字符串类型 泛型传入 字符串类型 转换第一个字符大写其余部分不变</span></span><br><span class="line"><span class="comment">// string &amp; Property 是为了确保 Property 是一个字符串类型 交集 暂时这么理解</span></span><br><span class="line"><span class="keyword">type</span> Getter&lt;T&gt; = &#123;</span><br><span class="line">    [Property <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="string">`get<span class="subst">$&#123;Capitalize&lt;<span class="built_in">string</span> &amp; Property&gt;&#125;</span>`</span>]: <span class="function">() =&gt;</span> T[Property];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    location: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> LazyPerson = Getter&lt;Person&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> lazyPerson: LazyPerson = &#123;</span><br><span class="line">    getName: <span class="function">() =&gt;</span> <span class="string">&quot;suxi&quot;</span>,</span><br><span class="line">    getAge: <span class="function">() =&gt;</span> <span class="number">18</span>,</span><br><span class="line">    getLocation: <span class="function">() =&gt;</span> <span class="string">&quot;beijing&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>过滤掉某些属性</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Exclude&lt;U, V&gt; U类型和V类型相同时返回null类型</span></span><br><span class="line"><span class="keyword">type</span> RemoveKindField&lt;T&gt; = &#123;</span><br><span class="line">    [Property <span class="keyword">in</span> keyof T <span class="keyword">as</span> Exclude&lt;Property, <span class="string">&quot;kind&quot;</span>&gt;]: T[Property];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Circle &#123;</span><br><span class="line">    kind: <span class="string">&quot;circle&quot;</span>;</span><br><span class="line">    radius: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> KindlessCircle = RemoveKindField&lt;Circle&gt;;</span><br></pre></td></tr></table></figure></li><li><p>可以映射任意的联合体，不仅仅是 <code>string | number | symbol</code> 的联合体，还可以是任何类型的联合体</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in 操作符 E 类型 是否在联合类型 Events 内</span></span><br><span class="line"><span class="keyword">type</span> EventConfig&lt;Events <span class="keyword">extends</span> &#123; <span class="attr">kind</span>: <span class="built_in">string</span> &#125;&gt; = &#123;</span><br><span class="line">    [E <span class="keyword">in</span> Events <span class="keyword">as</span> E[<span class="string">&quot;kind&quot;</span>]]: <span class="function">(<span class="params">event: E</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> SquareEvent = &#123;</span><br><span class="line">    kind: <span class="string">&quot;square&quot;</span>,</span><br><span class="line">    x: <span class="built_in">number</span>,</span><br><span class="line">    y: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> CircleEvent = &#123;</span><br><span class="line">    kind: <span class="string">&quot;circle&quot;</span>,</span><br><span class="line">    radius: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Config = EventConfig&lt;SquareEvent | CircleEvent&gt;;</span><br></pre></td></tr></table></figure></li><li><p>映射类型与本类型操作部分的其他功能配合得很好，例如，这里有一个使用条件类型的映射类型，它根据一个对象的属性 <code>pii</code> 是否被设置为字面意义上的 <code>true</code> 返回 <code>true</code> 或 <code>false</code></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> ExtractPII&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]: T[P] <span class="keyword">extends</span> &#123; <span class="attr">pii</span>: <span class="literal">true</span> &#125; ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> DBFields = &#123;</span><br><span class="line">    id: &#123; <span class="attr">format</span>: <span class="string">&quot;incrementing&quot;</span> &#125;;</span><br><span class="line">    name: &#123; <span class="attr">type</span>: <span class="built_in">string</span>; pii: <span class="literal">true</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ObjectsNeedingGDPRDeletion 是 &#123; id: false; name: true; &#125;</span></span><br><span class="line"><span class="keyword">type</span> ObjectsNeedingGDPRDeletion = ExtractPII&lt;DBFields&gt;;</span><br></pre></td></tr></table></figure></li></ol><h2 id="类">类</h2><h3 id="类成员">类成员</h3><h4 id="类型属性的类型">类型属性的类型</h4><ol><li><p>在一个类上声明字段，创建一个公共的可写属性</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pt = <span class="keyword">new</span> Point();</span><br><span class="line">pt.x = <span class="number">0</span>;</span><br><span class="line">pt.y = <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li><li><p>和其他位置一样，类型注解是可选的，但如果不指定，将是一个隐含的 <code>any</code> 类型</p></li><li><p>字段也可以有初始化器，这些初始化器将在类被实例化时自动运行</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pt = <span class="keyword">new</span> Point();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;pt.x&#125;</span>, <span class="subst">$&#123;pt.y&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></li><li><p>和 <code>const</code> <code>let</code> <code>var</code> 一样，一个类属性的初始化器将被用来推断其类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pt = <span class="keyword">new</span> Point();</span><br><span class="line">pt.x = <span class="string">&quot;0&quot;</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p><code>tsconfig.json</code> 中 <code>strictPropertyInitialization</code> 设置控制是否需要在构造函数中初始化实例字段</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置了 strictPropertyInitialization 为 true 需要在 构造函数中 初始化 字段</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodGreeter</span> </span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>但是注意，字段需要在构造函数本身中初始化。<code>TypeScript</code> 不会分析从构造函数中调用的方法来检测初始化，因为派生类可能会覆盖这些方法而无法初始化成员</p></li><li><p>如果打算通过构造函数以外的方式来确定初始化一个字段(例如，也许一个外部库为你填充了你的类的一部分)，可以使用确定的赋值断言操作符 <code>!</code></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 没有初始化，但没有报错</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OKGreeter</span> </span>&#123;</span><br><span class="line">    name!: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="readonly"><code>readonly</code></h4><ol><li><p>字段的前缀可以是 <code>readonly</code> 修饰符。这可以防止在构造函数之外对该字段进行赋值</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">readonly</span> name: <span class="built_in">string</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">othername?: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (othername !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = othername;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">err</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&quot;not ok&quot;</span>; <span class="comment">// error 不能在 constructor 以外的地方赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> Greeter();</span><br><span class="line">g.name = <span class="string">&quot;also not ok&quot;</span> <span class="comment">// error 不能在 constructor 以外的地方赋值</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="构造器">构造器</h4><ol><li><p>类构造函数与函数非常相似。可以添加带有类型注释的参数、默认值和重载</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带默认值的正常签名</span></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">string</span></span>);</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">s: <span class="built_in">string</span></span>);</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">xs: <span class="built_in">any</span>, y?: <span class="built_in">any</span></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类的构造函数签名和函数签名之间只有一些区别</p><ul><li>构造函数不能有类型参数 - 这属于外层类的声明</li><li>构造函数不能有返回类型注释 - 类的实例总是被返回</li></ul></li><li><p><code>super</code> 调用</p><ul><li>和 <code>js</code> 一样，如果你有一个基类，在使用任何 <code>this.</code> 成员之前，需要在构造器主体中调用 <code>super</code></li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    k = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 在 ES5 中打印一个错误的值，在 ES6 中抛出异常</span></span><br><span class="line">        <span class="comment">// 必须在访问派生类的 this 前调用 super</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.k);</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="方法">方法</h4><ol><li><p>一个类上的函数属性被称为方法，方法可以使用函数和构造函数相同的所有类型注释</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">    y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    scale(n: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x *= n;</span><br><span class="line">        <span class="built_in">this</span>.y *= n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>除了标准的类型注解，<code>ts</code> 并没有为方法添加其他新的东西</p></li><li><p>注意，在一个方法体中，仍然必须通过 <code>this</code> 访问字段和其他方法，方法体中的非限定名称将总是指代包围范围内的东西</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    x: <span class="built_in">string</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="function"><span class="title">m</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        x = <span class="string">&quot;world&quot;</span>; <span class="comment">// error 修改的是 第一行的 x</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="Getters-Setters"><code>Getters</code> / <code>Setters</code></h4><ol><li><p>类也可以有访问器</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    _length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">length</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">length</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>._length = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意，一个没有额外逻辑的字段支持的 <code>get/set</code> 对在 <code>js</code> 中很少有用，如果不需要在 <code>get/set</code> 操作中添加额外的逻辑，暴露公共字段也是可以的</p></li><li><p><code>TypeScript</code> 对访问器有一些特殊的推理规则</p><ul><li>如果存在 <code>get</code> 但没有 <code>set</code>，则该属性自动是只读的</li><li>如果没有指定 <code>setter</code> 参数的类型，它将从 <code>getter</code> 的返回类型中推断出来</li><li>访问器和设置器必须有相同的成员可见性</li></ul></li><li><p>从 <code>TypeScript4.3</code> 开始，可以有不同类型的访问器用于获取和设置</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thing</span> </span>&#123;</span><br><span class="line">    _size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">size</span>(): <span class="title">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> <span class="title">size</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span> | <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="built_in">Number</span>(value);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Number</span>.isFinite(num)) &#123;</span><br><span class="line">            <span class="built_in">this</span>._size = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>._size = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="索引签名-2">索引签名</h4><p>类可以声明索引签名；这些签名的作用与其他对象类型的索引签名相同</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    [s: <span class="built_in">string</span>]: <span class="built_in">boolean</span> | (<span class="function">(<span class="params">s: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">boolean</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">check</span>(<span class="params">s: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>[s] <span class="keyword">as</span> <span class="built_in">boolean</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为索引签名类型需要同时捕获方法和属性，所以要有用地使用这些类型并不容易。一般来说，最好将索引数据存储在另一个地方，而不是类实例本身</p><h3 id="类继承">类继承</h3><h4 id="implements-子句"><code>implements</code> 子句</h4><ol><li><p>可以使用一个 <code>implements</code> 子句来检查一个类，是否满足一个特定的接口，如果一个类不能正确地实现它，就会发出一个错误</p></li><li><p>类可以实现多个接口，例如 <code>class C implements A, B &#123;&#125;</code></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Pingable &#123;</span><br><span class="line">    ping(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sonar</span> <span class="title">implements</span> <span class="title">Pingable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">ping</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;ping&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ball</span> <span class="title">implements</span> <span class="title">Pingable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 缺少 ping 方法</span></span><br><span class="line">    <span class="function"><span class="title">pong</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;pong!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意，<code>implements</code> 子句只是检查类是否可以被当作接口类型来对待，它根本不会改变类的类型或其方法。一个常见的错误来源是认为 <code>implements</code> 子句会改变类的类型 - 它不会! 它不会!</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个错误的例子</span></span><br><span class="line"><span class="keyword">interface</span> Checkable &#123;</span><br><span class="line">    check(name: <span class="built_in">string</span>): <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameChecker</span> <span class="title">implements</span> <span class="title">Checkable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// s 隐式是 any 类型</span></span><br><span class="line">    <span class="comment">// 我们可能期许它的类型会受到 check 的 name: string 参数的影响</span></span><br><span class="line">    <span class="comment">// 但事实并非如此，实现子句并没有改变类主体的检查方式或其类型的推断</span></span><br><span class="line">    <span class="function"><span class="title">check</span>(<span class="params">s</span>)</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> s.toLowercase() === <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同样的，实现一个带有可选属性的接口并不能创建该属性</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    x: <span class="built_in">number</span>;</span><br><span class="line">    y?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="title">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> C();</span><br><span class="line">c.y = <span class="number">10</span>; <span class="comment">// 类型C上不存在属性 y</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="extends-子句"><code>extends</code> 子句</h4><ol><li><p>类可以从基类中扩展出来，派生类拥有其基类的所有属性和方法，也可以定义额外的成员</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;moving along!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">woof</span>(<span class="params">times: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; times; i++) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;woof&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Dog();</span><br><span class="line"></span><br><span class="line">d.move();</span><br><span class="line">d.woof(<span class="number">3</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="重写方法">重写方法</h4><ol><li><p>派生类也可以覆盖基类的一个字段或属性，可以使用 <code>super.</code> 语法来访问基类方法。注意，因为 <code>JavaScript</code> 类是一个简单的查找对象，没有超级字段的概念</p></li><li><p><code>TypeScript</code> 强制要求派生类总是其基类的一个子类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">greet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">greet</span>(<span class="params">name?: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name === <span class="literal">undefined</span>) &#123;</span><br><span class="line">            <span class="built_in">super</span>.greet();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`hello, <span class="subst">$&#123;name.toUpperCase()&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Derived();</span><br><span class="line">d.greet();</span><br><span class="line">d.greet(<span class="string">&quot;reader&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>派生类遵循其基类契约是很重要的，通过基类引用派生类实例是非常常见的(而且总是合法的)</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> b: Base = d;</span><br><span class="line">b.greet();</span><br></pre></td></tr></table></figure></li><li><p>如果遵循基类的约定将会报错</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">greet</span>(<span class="params">name: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 必须的参数，报错</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello，&quot;</span> + name.toUpperCase());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="初始化顺序">初始化顺序</h4><ol><li>类初始化的顺序是:<ul><li>基类的字段被初始化</li><li>基类构造函数运行</li><li>派生类的字段被初始化</li><li>派生类构造函数运行</li></ul></li><li>这个顺序意味着基类构造函数在自己的构造函数中看到自己的属性，因为派生类的字段初始化还没有运行</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    name = <span class="string">&quot;base&quot;</span>;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;my name is&quot;</span> + <span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    name = <span class="string">&quot;derived&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Derived();</span><br></pre></td></tr></table></figure><h4 id="继承内置类型">继承内置类型</h4><div class="tip cogs"><p>注意: 如果不打算继承 <code>Array</code> <code>Error</code> <code>Map</code> 等内置类型，或者编译目标明确设置为 <code>es6/es2015</code> 或以上，则不需要关注</p></div><ol><li><p>在 <code>es2015</code> 中，返回对象的构造函数隐含地替代了 <code>super(...)</code> 的任何调用者的 <code>this</code> 的值，生成的构造函数代码有必要捕获 <code>super(...)</code> 的任何潜在返回并将其替换为 <code>this</code></p></li><li><p>因此，子类化 <code>Error</code> <code>Array</code> 等可能不再像预期那样工作。这是由于 <code>Error</code> <code>Array</code> 等的构造函数使用 <code>ECMAScript6</code> 的 <code>new.target</code> 来调整原型链；然而，在 <code>ECMAScript 5</code> 中调用构造函数时，没有办法确保 <code>new.target</code> 的值。其他的下级编译器一般默认有同样的限制</p></li><li><p>对于下面的子类 有以下问题</p><ul><li>方法在构造这些子类所返回的对象上可能是未定义的，所以调用 <code>sayHello</code> 会导致错误</li><li><code>instanceof</code> 将在子类的实例和它们的实例之间被打破，所以 <code>new MsgError() instanceof MsgError</code> 将返回 <code>false</code></li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsgError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + <span class="built_in">this</span>.message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> msgError = <span class="keyword">new</span> MsgError(<span class="string">&quot;error&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(msgError.sayHello()); <span class="comment">// TypeError msgError.sayHello is not a function</span></span><br></pre></td></tr></table></figure><ul><li>作为建议，可以在任何 <code>super</code> 调用后立即手动调整原型</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MsgError</span> <span class="keyword">extends</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">m: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(m);</span><br><span class="line">        <span class="built_in">Object</span>.setPrototypeOf(<span class="built_in">this</span>, MsgError.prototype);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sayHello</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        cosnole.log(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="成员的可见性">成员的可见性</h3><h4 id="public"><code>public</code></h4><ol><li>类成员的默认可见性是公共的，一个公共成员可以在任何地方被访问</li><li><code>public</code> 是默认的可见性修饰符，所以永远不需要在类成员上书写它，除非为了风格/可读性的原因</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">greet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> Greeter();</span><br><span class="line">g.greet();</span><br></pre></td></tr></table></figure><h4 id="protected"><code>protected</code></h4><ol><li><p>受保护的 <code>protected</code> 成员只对它们所声明的类或子类可见</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">greet</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello &quot;</span> + <span class="built_in">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpecialGreeter</span> <span class="keyword">extends</span> <span class="title">Greeter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">howdy</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;howdy &quot;</span> + <span class="built_in">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = <span class="keyword">new</span> SpecialGreeter();</span><br><span class="line">g.greet();</span><br><span class="line">g.getName(); <span class="comment">// 无权访问</span></span><br></pre></td></tr></table></figure></li><li><p>受保护成员的暴露</p><ul><li>派生类需要遵循它们的基类契约，但可以选择公开具有更多能力的基类的子类型，这包括将受保护的成员变成公开</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> m = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    m = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Derived();</span><br><span class="line"><span class="built_in">console</span>.log(d.m); <span class="comment">// 没有问题</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="private"><code>private</code></h4><ol><li><p><code>private</code> 和 <code>protected</code> 一样，但不允许从子类中访问该成员</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> x = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getX</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> Base();</span><br><span class="line"><span class="built_in">console</span>.log(b.x); <span class="comment">// 不能类外访问</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dervied</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">showX</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.x); <span class="comment">// 不能在子类访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>私有成员对于派生类是不可见的，所以派生类不能增加其可见性</p></li><li><p>跨实例的私有访问 <code>TS</code> 允许跨实例私有访问</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="title">sameAs</span>(<span class="params">other: A</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> other.x === <span class="built_in">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>像 <code>TS</code> 类型系统的其他方面一样，<code>private</code> 和 <code>protected</code> 只在类型检查中被强制执行</p></li><li><p>这意味着 <code>JS</code> 的运行时结构，如 <code>in</code> 或简单的属性查询，仍然可以访问一个私有或保护的成员</p></li><li><p><code>private</code> 也允许在类型检查时使用括号符号进行访问，这使得私有声明的字段更容易被单元测试之类的东西所访问，缺点是这些字段是软性私有的，不能严格执行私有特性</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySafe</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> secretKey = <span class="number">12345</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> s = <span class="keyword">new</span> MySafe();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s.secretKey); <span class="comment">// error</span></span><br><span class="line"><span class="built_in">console</span>.log(s[<span class="string">&quot;secretKey&quot;</span>]); <span class="comment">// ok</span></span><br></pre></td></tr></table></figure></li><li><p>与 <code>TS</code> 的 <code>private</code> 不同，<code>JS</code> 的 <code>private</code> 字段 <code>#</code> 在编译后仍然是 <code>private</code> 的，并且不提供前面提到的像括号符号访问那样的窗口，使其成为 <code>private</code></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    #barkAmount = <span class="number">0</span>;</span><br><span class="line">    personality = <span class="string">&quot;happy&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.#barkAmount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="built_in">console</span>.log(dog.#barkAmount); <span class="comment">// error </span></span><br><span class="line"><span class="built_in">console</span>.log(dog[<span class="string">&quot;#barkAmount&quot;</span>]) <span class="comment">// error // 即便编译成功也是 undefined</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="静态成员">静态成员</h3><ol><li>类可以有静态成员，这些成员并不与类的特定实例相关联。它们可以通过类的构造函数对象本身来访问</li><li>静态成员也可以使用相同的 <code>public</code> <code>protected</code> 和 <code>private</code> 可见性修饰符</li><li>静态成员也会被继承</li><li>和 <code>JS</code> 一样，静态方法中的 <code>this</code> 代表类本身</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> xx = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">static</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">printX</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(MyClass.x);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.x); <span class="comment">// this表示 MyClass 类本身</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">printXX</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.xx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MyClass.x);</span><br><span class="line">MyClass.printX();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(MyClass.xx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="title">getGreeting</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    myGreeting = Derived.getGreeting();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特殊的静态名称">特殊的静态名称</h4><ol><li>一般来说，从函数原型覆盖属性是不安全/不可能的，因为类本身就是可以用 <code>new</code> 调用函数，所以某些静态名称不能使用。像 <code>name</code> <code>length</code> 和 <code>call</code> 这样的函数属性，定义为静态成员是无效的</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&quot;S!&quot;</span>; <span class="comment">// error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类里的-static-区块">类里的 <code>static</code> 区块</h3><ol><li>静态块允许写一串有自己作用域的语句，可以访问包含类中的私有字段，这意味着我们可以用写语句的所有能力来写初始化代码，不泄露变量，并能完全访问我们类的内部结构</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> #count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> <span class="title">count</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> Foo.#count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> lastInstances = &#123;</span><br><span class="line">                length: <span class="number">100</span></span><br><span class="line">            &#125;;</span><br><span class="line">            Foo.#count += lastInstances.length;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类-2">泛型类</h3><p>类，和接口一样，可以是泛型的。当一个泛型类用 <code>new</code> 实例化时，其类型参数的推断方式与函数调用的方式相同</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    contents: T;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">value: T</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.contents = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> Box(<span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><ol><li>类可以像接口一样使用通用约束和默认值<ul><li>静态成员不能引用类的类型参数，因为类型总是被完全擦除的</li><li>一个泛型类的静态成员永远不能引用该类的类型参数</li></ul></li></ol><h3 id="类运行时的-this">类运行时的 <code>this</code></h3><ol><li><p>记住，<code>TypeScript</code> 并没有改变 <code>JavaScript</code> 的运行时行为，而 <code>JavaScript</code> 的运行时行为偶尔很奇怪</p></li><li><p>比如，<code>JavaScript</code> 对这一点的处理确实是不寻常的</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">    getName: c.getName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj.getName()); <span class="comment">// 输出 obj 而不是 MyClass</span></span><br></pre></td></tr></table></figure></li><li><p>默认情况下，函数内 <code>this</code> 的值取决于函数的调用方式，在这个例子中，因为函数是通过 <code>obj</code> 引用调用，所以它的 <code>this</code> 值是 <code>obj</code> 而不是类实例，这很少是希望发生的事情，<code>TS</code> 提供了一些方法来减轻或防止这种错误</p></li><li><p>箭头函数</p><ul><li>如果有一个经常被调用的函数，失去它的 <code>this</code> 上下文，那么使用一个箭头函数而不是方法定义是有意义的</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line"></span><br><span class="line">    getName = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">const</span> g = c.getName;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(g()); <span class="comment">// myClass</span></span><br></pre></td></tr></table></figure></li><li><p>关于箭头函数，还有一些权衡</p><ul><li><code>this</code> 值保证在运行时是正确的，即使是没有经过 <code>TypeScript</code> 检查的代码也是如此</li><li>这将使用更多的内存，因为每个类实例都将有它自己的副本，每个函数都是这样定义的</li><li>不能在派生类中使用 <code>super.getName</code>，因为在原型链中没有入口可以获取基类方法</li></ul></li><li><p><code>this</code> 参数出现在所有其他参数之后</p><ul><li>在方法或函数定义中，一个名为 <code>this</code> 的初始化参数在 <code>TypeScript</code> 中具有特殊的意义。这些参数在编译过程中会被删除</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"><span class="built_in">this</span>: SomeType, x: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译后</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>TS</code> 检查调用带有 <code>this</code> 参数的函数，是否正确的上下文中进行，我们可以不使用箭头函数，而是在定义方法中添加一个 <code>this</code> 参数，以静态地确保方法被正确调用</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    name = <span class="string">&quot;MyClass&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"><span class="built_in">this</span>: MyClass</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> MyClass();</span><br><span class="line"></span><br><span class="line">c.getName(); <span class="comment">// 正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> g = c.getName;</span><br><span class="line"><span class="built_in">console</span>.log(g());</span><br></pre></td></tr></table></figure><ul><li>这种方法做出了与箭头函数方法相反的取舍<ul><li><code>JS</code> 调用者仍然可能在不知不觉中错误地使用类方法</li><li>每个类定义只有一个函数被分配，而不是每个类实例一个函数</li><li>基类方法定义仍然可以通过 <code>super</code> 调用</li></ul></li></ul></li></ol><h3 id="this-类型"><code>this</code> 类型</h3><ol><li><p>在类中，一个叫做 <code>this</code> 的特殊类型动态地指向当前类的类型</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    contents: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">value: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.contents = value;</span><br><span class="line">        <span class="comment">// 在这里推断出 set 返回的类型是 this，而不是Box</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClearbleBox</span> <span class="keyword">extends</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">clear</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.contents = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> ClearbleBox();</span><br><span class="line"><span class="keyword">const</span> b = a.set(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br></pre></td></tr></table></figure></li><li><p>也可以在参数类型注释中使用 <code>this</code></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    content: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sameAs</span>(<span class="params">other: <span class="built_in">this</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> other.content === <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> Box();</span><br><span class="line"><span class="built_in">console</span>.log(box.sameAs(box))</span><br></pre></td></tr></table></figure></li><li><p>这与其他写法不同: <code>Box</code> 如果有一个派生类，它的 <code>sameAs</code> 方法现在只能接受该同一派生类或其派生类的子类的其他实例</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    content: <span class="built_in">string</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">sameAs</span>(<span class="params">other: <span class="built_in">this</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> other.content === <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DerivedBox</span> <span class="keyword">extends</span> <span class="title">Box</span> </span>&#123;</span><br><span class="line">    otherContent: <span class="built_in">string</span> = <span class="string">&quot;?&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> base = <span class="keyword">new</span> Box();</span><br><span class="line"><span class="keyword">const</span> derived = <span class="keyword">new</span> DerivedBox();</span><br><span class="line">base.sameAs(derived); <span class="comment">// 没有问题</span></span><br><span class="line">derived.sameAs(base); <span class="comment">// error 只能接受 派生类 DerivedBox及其子类 类型的实例</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="基于类型守卫的-this">基于类型守卫的 <code>this</code></h3><ol><li><p>可以在类和接口的方法返回位置使用 <code>this is Type</code>。当与类型缩小混合时(例如 <code>if</code> 语句)，目标对象的类型将被缩小到指定的 <code>Type</code></p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileSystemObject</span> </span>&#123;</span><br><span class="line">    isFile(): <span class="built_in">this</span> is FileRep &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span> <span class="keyword">instanceof</span> FileRep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isDirectory(): <span class="built_in">this</span> is Directory &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span> <span class="keyword">instanceof</span> Directory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isNetworked(): <span class="built_in">this</span> is Networked &amp; <span class="built_in">this</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.networked;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> path: <span class="built_in">string</span>, <span class="keyword">private</span> networked: <span class="built_in">boolean</span></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileRep</span> <span class="keyword">extends</span> <span class="title">FileSystemObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">path: <span class="built_in">string</span>, <span class="keyword">public</span> content: <span class="built_in">string</span></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(path, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Directory</span> <span class="keyword">extends</span> <span class="title">FileSystemObject</span> </span>&#123;</span><br><span class="line">    children: FileSystemObject[];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Networked &#123;</span><br><span class="line">    host: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fso: FileSystemObject = <span class="keyword">new</span> FileRep(<span class="string">&quot;foo/bar&quot;</span>, <span class="string">&quot;baz&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> di: FileSystemObject = <span class="keyword">new</span> Directory(<span class="string">&quot;foo/bar&quot;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> fs: FileSystemObject = <span class="keyword">new</span> FileSystemObject(<span class="string">&quot;foo/bar&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">switch1</span>(<span class="params">fso</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fso.isFile()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(fso.content);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fso.isDirectory()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(fso.path);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fso.isNetworked()) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(fso.host);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">switch1(fso);</span><br><span class="line">switch1(di);</span><br><span class="line">switch1(fs);</span><br></pre></td></tr></table></figure></li><li><p>基于 <code>this</code> 的类型保护的一个常见用例，是允许对一个特定字段进行懒惰验证。例如，下面这种情况：</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    value?: T;</span><br><span class="line"></span><br><span class="line">    hasValue(): <span class="built_in">this</span> is &#123; <span class="attr">value</span>: T &#125; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.value !== <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> Box&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">box.value = <span class="string">&quot;GameBoy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// box.value: string | undefined</span></span><br><span class="line"><span class="keyword">if</span> (box.hasValue()) &#123;</span><br><span class="line">    <span class="comment">// 这里已经可以推断出 box.value: string</span></span><br><span class="line">    <span class="built_in">console</span>.log(box.value.toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="参数属性">参数属性</h3><ol><li><code>TS</code> 提供了特殊的语法，可以将构造函数变成具有相同名称和值的类属性。这些被称为参数属性，通过在构造函数参数前加上可见性修饰符 <code>public</code> <code>private</code> <code>protected</code> 或 <code>readony</code> 中的一个来创建。由此产生的字段会得到这些修饰符</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Params</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"><span class="keyword">public</span> <span class="keyword">readonly</span> x: <span class="built_in">number</span>, <span class="keyword">protected</span> y: <span class="built_in">number</span>, <span class="keyword">private</span> z: <span class="built_in">number</span></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Params(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a.x);</span><br><span class="line"><span class="built_in">console</span>.log(a.y);</span><br></pre></td></tr></table></figure><h3 id="类表达式">类表达式</h3><ol><li>类表达式与类声明非常相似。唯一真正的区别是，类表达式不需要一个名字，尽管我们可以通过它们最终绑定的任何标识符来引用它们</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> someClass = <span class="class"><span class="keyword">class</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    content: T;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">value: T</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> someClass(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="抽象类和成员">抽象类和成员</h3><ol><li><p><code>TypeScript</code> 中的类、方法和字段可以是抽象的。一个抽象的方法或抽象的字段是一个没有提供实现的方法或字段。这些成员必须存在于一个抽象类中，不能直接实例化</p></li><li><p>抽象类的作用是作为子类的基类，实现所有的抽象成员。当一类没有任何抽象成员时，我们就说它是具体的</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> getName(): <span class="built_in">string</span>;</span><br><span class="line">    <span class="function"><span class="title">printName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Hello, &quot;</span> + <span class="built_in">this</span>.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> Base(); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p>不能用 <code>new</code> 关键字来实例化 <code>Base</code> 因为它是抽象的。相反，我们需要创建一个派生类并实现抽象成员</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> d = <span class="keyword">new</span> Derived();</span><br><span class="line">d.printName();</span><br></pre></td></tr></table></figure></li><li><p>抽象构造签名</p><ul><li>如果想接受一些类的构造函数，产生一个从某些抽象类派生出来的类的实例</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript 正确地告诉你，你正在试图实例化一个抽象类。毕竟鉴于 greet 的定义，写这段代码是完全合法的，它最终会构造一个抽象类</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">ctor: <span class="keyword">typeof</span> Base</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="keyword">new</span> ctor(); <span class="comment">// error 不能创建一个抽象类</span></span><br><span class="line">    instance.printName();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 糟糕 </span></span><br><span class="line">greet(Base);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相反，写一个函数，接受具有结构化签名的东西</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">ctor: <span class="keyword">new</span>() =&gt; Base</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> instance = <span class="keyword">new</span> ctor();</span><br><span class="line"></span><br><span class="line">    instance.printName();</span><br><span class="line">&#125;</span><br><span class="line">greet(Derived);</span><br><span class="line">greet(Base); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="类之间的关系">类之间的关系</h3><ol><li><p>在大多数情况下，<code>TypeScript</code> 中的类在结构上与其他类型相同，是可以比较的</p></li><li><p>例如，这两个类可以相互替代使用，因为它们是相同的</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point1</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point2</span> </span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Point1 = <span class="keyword">new</span> Point2(); <span class="comment">// 正确的</span></span><br></pre></td></tr></table></figure></li><li><p>同样的，即使没有明确的继承，类之间的子类型关系也是存在的</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    salary: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Person = <span class="keyword">new</span> Employee(); <span class="comment">// right</span></span><br></pre></td></tr></table></figure></li><li><p>这看起来很简单，但是有几种情况似乎比其他情况更奇怪。空的类没有成员，在一个结构化类型系统中，一个没有成员的类型通常是其它任何东西的超类型。所以如果你有一个空类，任何东西都可以用来代替它</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">x: Empty</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不能用 x 做任何事</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fn(<span class="built_in">window</span>);</span><br><span class="line">fn(&#123;&#125;);</span><br><span class="line">fn(fn);</span><br></pre></td></tr></table></figure></li></ol><h2 id="模块">模块</h2><h3 id="如何定义-JavaScript-模块">如何定义 <code>JavaScript</code> 模块</h3><ol><li>在 <code>TypeScript</code> 中，就像在 <code>ECMAScript2015</code> 中一样，任何包含顶级 <code>import</code> 或 <code>export</code> 的文件都被认为是模块</li><li>相反，一个没有任何顶级导入或导出声明的文件被视为一个脚本，其内容可在全局范围内使用(因此也可用于模块，例如 <code>import &quot;./index.js&quot;</code>)</li><li>模块在自己的范围内执行，而不是在全局范围。这意味着在模块中声明的变量、函数、类等在模块外是不可见的，除非它们被明确地用某种导出形式导出。相反，要使用从不同模块导出的变量、函数、类、接口等，必须使用导入的形式将其导入</li></ol><h3 id="非模块">非模块</h3><ol><li><p><code>JavaScript</code> 规范声明，任何没有 <code>export</code> 或顶层 <code>await</code> 的 <code>JavaScript</code> 文件都应该被认为是一个脚本而不是一个模块</p></li><li><p>在一个脚本文件中，变量和类型被声明为在共享全局范围内，并且假定会使用 <code>outFile</code> 编译器选项将多个输入文件加入一个输出文件，或者在你的 <code>html</code> 中使用 <code>script</code> 标签来加载这些文件</p></li><li><p>如果有一个目前没有任何导入或导出的文件，但希望被当作一个模块来处理，请添加这一行:</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>这将改变该文件，使其成为一个什么都不输出的模块。无论你的模块目标是什么，这个语法都有效</p></li></ol><h3 id="TypeScript-中的模块"><code>TypeScript</code> 中的模块</h3><ol><li>在 <code>TypeScript</code> 中编写基于模块的代码时，有三个主要方面<ul><li>语法</li><li>模块解析</li><li>模块输出目标</li></ul></li></ol><h4 id="ES-模块语法">ES 模块语法</h4><ol><li><p>一个文件可以通过 <code>export default</code> 声明一个主要出口</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hello.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">helloworld</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">&quot;./hello.ts&quot;</span>;</span><br><span class="line">hello();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了默认的导出，还可以通过省略 default 的 export 实现一个以上的变量和函数的导出</span></span><br><span class="line"><span class="comment">// math.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> squareTwo = <span class="number">1.41</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> phi = <span class="number">1.61</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; pi, phi &#125; <span class="keyword">from</span> <span class="string">&quot;./math.ts&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(pi);</span><br></pre></td></tr></table></figure></li></ol><h4 id="额外的导入语法">额外的导入语法</h4><ol><li><p>可以使用 <code>import &#123; old as new &#125;</code> 这样的格式来重命名一个导入</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; pi <span class="keyword">as</span> PI &#125; <span class="keyword">from</span> <span class="string">&quot;./math.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br></pre></td></tr></table></figure></li><li><p>可以把所有导出的对象，用 <code>* as name</code> 放到一个命名空间</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&quot;./math.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(math.pi);</span><br></pre></td></tr></table></figure></li><li><p>也可以通过 <code>import &quot;./file&quot;</code> 导入一个文件，而不把任何变量纳入你的当前模块。这种情况下，<code>import</code> 没有任何作用，然后 <code>math.ts</code> 中的所有代码都被解析了，这可能引发影响其他对象的副作用</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./math.ts&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3.14</span>)</span><br></pre></td></tr></table></figure></li></ol><h4 id="TypeScript-特定的-ES-模块语法"><code>TypeScript</code> 特定的 ES 模块语法</h4><ol><li><p>类型可以使用与 <code>JS</code> 值相同的语法进行导出和导入</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Cat = &#123; <span class="attr">breed</span>: <span class="built_in">string</span>; yearOfBirth: <span class="built_in">number</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Dog &#123;</span><br><span class="line">    breeds: <span class="built_in">string</span>[];</span><br><span class="line">    yearOfBirth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Cat, Dog &#125; <span class="keyword">from</span> <span class="string">&quot;./animal.ts&quot;</span>;</span><br><span class="line"><span class="keyword">type</span> Animals = Cat | Dog;</span><br></pre></td></tr></table></figure></li><li><p><code>TS</code> 用了两个概念扩展了 <code>import</code> 语法，用于声明一个类型的导入</p><ul><li><code>import type</code></li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Cat = &#123; <span class="attr">breed</span>: <span class="built_in">string</span>; yearOfBirth: <span class="built_in">number</span>; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Dog &#123;</span><br><span class="line">    breeds: <span class="built_in">string</span>[];</span><br><span class="line">    yearOfBirth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; Cat, Dog &#125; <span class="keyword">from</span> <span class="string">&quot;./animal.ts&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>内联类型导入</p><ul><li><code>TS4.5</code> 还允许以 <code>type</code> 为前缀的单个导入，以表明导入的引用是一个类型</li></ul> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">type</span> Cat, <span class="keyword">type</span> Dog &#125; <span class="keyword">from</span> <span class="string">&quot;./animal.ts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> Animals = Cat | Dog;</span><br></pre></td></tr></table></figure></li></ol><h4 id="ES-模块语法与-CommonJS-行为">ES 模块语法与 CommonJS 行为</h4><p><code>TS</code> 有 <code>ES Module</code> 语法，它直接与 <code>CommonJS</code> 和 <code>AMD</code> 的 <code>require</code> 想关联。使用 <code>ES Module</code> 的 <code>import</code> 在大多数情况下与这些环境的 <code>require</code> 相同，但这种语法确保你在 <code>TypeScript</code> 文件中与 <code>CommonJS</code> 的输出有1对1的匹配</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> code = fs.readFileSync(<span class="string">&quot;hello.ts&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="CommonJS-语法"><code>CommonJS</code> 语法</h3><p><code>CommonJS</code> 是 <code>npm</code> 上大多数模块的交付格式</p><h4 id="导出">导出</h4><p>标识符是通过一个全局调用的 <code>module</code> 上设置 <code>exports</code> 属性来导出的</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">absolute</span>(<span class="params">num: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">0</span>) <span class="keyword">return</span> num * -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    pi: <span class="number">3.14</span>,</span><br><span class="line">    phi: <span class="number">1.61</span>,</span><br><span class="line">    absolute</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些文件可以通过 <code>require</code> 语句导入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> maths = <span class="built_in">require</span>(<span class="string">&quot;maths&quot;</span>);</span><br><span class="line">maths.pi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; pi &#125; = <span class="built_in">require</span>(<span class="string">&quot;maths&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="CommonJS-和-ES-模块的互操作性"><code>CommonJS</code> 和 <code>ES</code> 模块的互操作性</h4><ol><li>关于默认导入和模块命名空间对象导入之间的区别，<code>CommonJS</code> 和 <code>ES Modules</code> 之间存在功能上的不匹配</li></ol><h3 id="TypeScript-的模块解析选项"><code>TypeScript</code> 的模块解析选项</h3><ol><li>模块解析是指从 <code>import</code> 或 <code>require</code> 语句中获取一个字符串，并确定该字符串所指的文件的过程</li><li><code>TS</code> 包括两种解析策略，经典和 <code>Node</code>。当编译器选项 <code>module</code> 不是 <code>commonjs</code> 时，经典策略是默认的，是为了向后兼容。<code>Node</code> 策略复制了 <code>Node</code> 在 <code>CommonJS</code> 模式下的工作方式，对 <code>.ts</code> 和 <code>.d.ts</code> 有额外的检查</li><li>在 <code>TS</code> 中，有许多 <code>TSConfig</code> 标志影响模块策略 <code>moduleResolution</code> <code>baseUrl</code> <code>paths</code> <code>rootDirs</code></li></ol><h3 id="TS-的模块输出选项"><code>TS</code> 的模块输出选项</h3><ol><li><p>有两个选项会影响 <code>JS</code> 输出</p><ul><li><code>target</code> 它决定了哪些 <code>JS</code> 功能被降级(转换在旧 js 运行时运行)，哪些保持不变</li><li><code>module</code> 它决定了哪些代码用于模块之间的相互作用</li></ul></li><li><p>使用的 <code>target</code> 由你期望运行 <code>TypeScript</code> 代码的 <code>JavaScript</code> 运行时中的可用功能决定的。这可能是：支持的最古老的网络浏览器，期望运行的最低版本的 <code>NodeJS</code>，或者可能来自于运行时的独特约束 — electron</p></li><li><p>所有模块之间的通信都是通过模块加载器进行的，编译器选项 <code>module</code> 决定使用哪一个。在运行时，模块加载器负责在执行一个模块之前定位和执行该模块的所有依赖项</p></li><li><p>例如，这里是一个使用 <code>ES</code> 模块语法的 <code>TypeScript</code> 文件，展示了 <code>module</code> 的一些不同选项</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; valueOfPi &#125; <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> twoPi = valueOfPi * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>ES2020</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; valueOfPi &#125; <span class="keyword">from</span> <span class="string">&quot;./constants.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> twoPi = valueOfPi * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>CommonJS</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="built_in">exports</span>.twoPi = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> constants_js_1 = <span class="built_in">require</span>(<span class="string">&quot;./constants.js&quot;</span>);</span><br><span class="line"><span class="built_in">exports</span>.twoPi = constants_js_1.valueOfPi * <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li><code>UMD</code></li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">factory</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">&quot;object&quot;</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> v = factory(<span class="built_in">require</span>, <span class="built_in">exports</span>);</span><br><span class="line">        <span class="keyword">if</span> (v !== <span class="literal">undefined</span>) <span class="built_in">module</span>.exports = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">&quot;function&quot;</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">        define([<span class="string">&quot;require&quot;</span>, <span class="string">&quot;exports&quot;</span>, <span class="string">&quot;./constants.js&quot;</span>], factory);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    <span class="built_in">exports</span>.twoPi = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> constants_js_1 = <span class="built_in">require</span>(<span class="string">&quot;./constants.js&quot;</span>);</span><br><span class="line">    <span class="built_in">exports</span>.twoPi = constants_js_1.valueOfPi * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h3 id="TS-命名空间"><code>TS</code> 命名空间</h3><p><code>TS</code> 有自己的模块格式，称为 命名空间，这比 <code>ES</code> 模块标准要早。这种语法对于创建复杂的定义文件有很多有用的功能，并且在 <code>DefinitelyTyped</code> 中仍然被积极使用。虽然没有被废弃，但命名空间中的大部分功能都存在于 <code>ES Modules</code> 中，我们建议使用与 <code>Js</code> 的方向保持一致</p>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用TensorFlow.js进行人脸动作检测</title>
      <link href="ff44d7d9/"/>
      <url>ff44d7d9/</url>
      
        <content type="html"><![CDATA[<iframe src="https://codesandbox.io/embed/github/milkdue/bioassay/master?file=/src/new-app.vue:1,1&workspaceId=d55c8750-9182-4d7f-996e-e225e9b81f15?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="github/milkdue/bioassay/master?file=/src/new-app.vue:1,1&workspaceId=d55c8750-9182-4d7f-996e-e225e9b81f15"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tensorflow </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm</title>
      <link href="a1345b2b/"/>
      <url>a1345b2b/</url>
      
        <content type="html"><![CDATA[<h1>npm</h1><h2 id="介绍">介绍</h2><p><code>npm</code> 全名 <code>node package manager</code></p><h2 id="基本命令">基本命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看 npm 命令列表</span></span><br><span class="line">npm <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看各个命令的简单用法</span></span><br><span class="line">npm -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 npm 版本</span></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 npm 配置</span></span><br><span class="line">npm config list -l</span><br></pre></td></tr></table></figure><h2 id="npm-使用"><code>npm</code> 使用</h2><ol><li><code>npm init</code> 一路回车，初始化 <code>package.json</code> 文件</li><li>如果使用 <code>-f</code>(代表 <code>force</code>)、<code>-y</code>(代表 <code>yes</code>)直接跳过询问阶段，直接生成 <code>package.json</code> 文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm init -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># -y 和 -f 一样的效果</span></span><br></pre></td></tr></table></figure><h2 id="npm-set-设置环境变量"><code>npm set</code> 设置环境变量</h2><ul><li><code>mac</code> 的配置文件在 <code>vim ~/.npmrc</code> *</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">set</span> init-author-name <span class="string">&#x27;your name&#x27;</span></span><br><span class="line">npm <span class="built_in">set</span> init-author-email <span class="string">&#x27;your email&#x27;</span></span><br><span class="line">npm <span class="built_in">set</span> init-author-url <span class="string">&#x27;your website&#x27;</span></span><br><span class="line">npm <span class="built_in">set</span> init-license <span class="string">&#x27;开源协议 MIT&#x27;</span></span><br></pre></td></tr></table></figure><p>上面命令等于为npm init设置了默认值，以后执行npm init的时候，package.json的作者姓名、邮件、主页、许可证字段就会自动写入预设的值。这些信息会存放在用户主目录的~/.npmrc文件，使得用户不用每个项目都输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局设置 下载的每个模块都确切版本，而不是一个可选的版本范围，版本前不带 ^ 或 ～</span></span><br><span class="line">npm <span class="built_in">set</span> save-exact <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果需要安装依赖时明确版本 固定依赖包axios的版本</span></span><br><span class="line">npm install axios --save-exact</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将指定的 $dir 目录，设为模块的全局安装目录，如果当前有这个目录的写权限，那么运行 npm i的时候，就不需要 sudo 命令授权了</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="variable">$dir</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> save-prefix ~</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的命令使得 `npm install --save` 和 `npm install --save-dev` 安装新模块时允许的版本范围从克拉符号 ^ 改成 ～，即从允许小版本升级，变成只允许补丁包的升级，详细的规则后面会有介绍</span></span><br></pre></td></tr></table></figure><h2 id="npm-info"><code>npm info</code></h2><p><code>npm info</code> 命令可以查看每个模块的具体信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看underscore模块的信息</span></span><br><span class="line">npm info underscore</span><br><span class="line">npm info underscore description</span><br><span class="line">npm info underscore homepage</span><br><span class="line">npm info underscore version</span><br></pre></td></tr></table></figure><h2 id="npm-search"><code>npm search</code></h2><p><code>npm search</code> 命令用于搜索 <code>npm</code> 仓库，它后面可以跟字符串，也可以跟正则表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm search &lt;搜索&gt;</span><br><span class="line"></span><br><span class="line">npm search axios</span><br></pre></td></tr></table></figure><h2 id="npm-list"><code>npm list</code></h2><p><code>npm list</code> 命令以树型结构列出当前项目安装的所有模块，以及它们依赖的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加上global参数，会列出全局安装的模块。</span></span><br><span class="line">npm list -global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出单个模块</span></span><br><span class="line">npm list vue</span><br></pre></td></tr></table></figure><h2 id="npm-install"><code>npm install</code></h2><p><code>node</code> 模块采用 <code>npm install</code> 命令安装</p><p>每个模块都可以全局安装或是本地安装，全局安装指的是将一个模块安装到系统目录中，各个项目都可以调用，一般来说，全局安装只适合于工具模块，比如 <code>eslint</code> 和 <code>gulp</code>，本地安装指的是将一个模块下载到当前项目的 <code>node_modules</code> 子目录，在项目目录之中，才能调用这个模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line">npm install &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局安装</span></span><br><span class="line">npm install -g &lt;package name&gt;</span><br><span class="line">npm install -global &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以直接输入github代码库地址</span></span><br><span class="line">npm install git://github.com/package/path.git</span><br><span class="line">npm install git://github.com/package/path.git<span class="comment">#0.1.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制重新安装</span></span><br><span class="line">npm install &lt;packageName&gt; --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有模块强制重新安装，直接删除node_modules</span></span><br><span class="line">rm -rf node_modules</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载最新的npm @latest表示最新版本 npm可以自己安装自己，之所以可以这样是因为 npm 本身和 node 其他模块没有区别</span></span><br><span class="line">npm install npm@latest -g</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装不同版本">安装不同版本</h3><p><code>npm i</code> 总是安装模块的最新版本，如果要安装模块的特定版本，可以在模块名后面加上特定的版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">npm i axios@latest <span class="comment"># 安装最新版本</span></span><br><span class="line">npm i axios@0.1.1 <span class="comment"># 安装指定版本</span></span><br><span class="line">npm i axios@<span class="string">&quot;&gt;=0.1.0 &lt;0.2.0&quot;</span> <span class="comment"># 安装大于0.1.0小于0.2.0版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果使用 --save-exact参数 会在package.json文件指定安装模块的确切版本</span></span><br><span class="line"></span><br><span class="line">npm i readable-stream --save --save-exact</span><br><span class="line"></span><br><span class="line">npm i sax --save</span><br><span class="line">npm i node-tap --save-dev</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm i sax -S</span><br><span class="line">npm i node-tap -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># --save: 模块将被添加 dependencies 可以简化为 -S</span></span><br><span class="line"><span class="comment"># --save-dev: 模块将被添加到 devDependencies 可以简化为 -D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果安装beta版本的模块，使用如下命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新的beta版本</span></span><br><span class="line">npm i &lt;module-name&gt;@beta (latest beta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本的beta</span></span><br><span class="line">npm i &lt;module-name&gt;@1.3.1-beta.3</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm i会默认安装 dependencies字段和devDependencies字段中的所有模块，如果使用--production参数，可以只安装dependencies字段的模块</span></span><br><span class="line"></span><br><span class="line">npm i --production</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">NODE_ENV=production npm install</span><br></pre></td></tr></table></figure><h2 id="避免系统权限">避免系统权限</h2><p>默认情况下，<code>npm</code> 全局模块会安装在系统目录(<code>/usr/local/lib</code>)，普通用户没有写入权限，需要使用 <code>sudo</code>，使用如下方式可以在没有 <code>root</code> 权限下，安装全局模块</p><p>首先，在主目录下新建配置文件 <code>.npmrc</code>，然后在改文件中将 <code>prefix</code> 变量定义到主目录下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prefix = /home/qingxin/npm</span><br></pre></td></tr></table></figure><p>然后在主目录下新建 <code>npm</code> 子目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/npm</span><br></pre></td></tr></table></figure><p>此后，全局安装的模块都会安装到这个子目录中，<code>npm</code> 也会到 <code>~/npm/bin</code> 目录去寻找命令</p><p>最后，将这个路径在 <code>.bash_profile</code> 文件(或 <code>.bashrc</code> 文件)中加入 <code>PATH</code> 变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/npm/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><h2 id="npm-update"><code>npm update</code></h2><p><code>npm update</code> 命令用来更新本地安装的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级当前项目的指定模块</span></span><br><span class="line"></span><br><span class="line">npm update [module-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级全局安装的模块</span></span><br><span class="line"></span><br><span class="line">npm update -global [module-name]</span><br></pre></td></tr></table></figure><p>它会先到原创仓库查询最新版本，然后查询本地版本，如果本地版本不存在，或者远程版本较新，就会安装</p><p>使用 <code>-S</code> 或 <code>--save</code> 参数，可以在安装的时候更新 <code>package.json</code> 里面模块的版本号</p><p>注意，从 <code>npm v2.6.1</code> 开始，<code>npm update</code> 只更新顶层模块，而不更新依赖的依赖，以前版本是递归更新的，如果想取到老版本的效果，使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --depth 9999 update</span><br></pre></td></tr></table></figure><h2 id="npm-uninstall"><code>npm uninstall</code></h2><p><code>npm uninstall</code> 命令，卸载已安装的模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall [package name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载全局模块</span></span><br><span class="line">npm uninstall [package name] -global</span><br></pre></td></tr></table></figure><h2 id="npm-run"><code>npm run</code></h2><p><code>npm</code> 不仅可以用来模块管理，还可以用来执行脚本，<code>package.json</code> 文件有一个 <code>scripts</code> 字段，可以用于指定脚本命令，供 <code>npm</code> 直接调用</p><p><code>npm run</code> 命令会自动在环境变量 <code>$PATH</code> 添加 <code>node_modules/.bin</code> 目录，所以 <code>scripts</code> 字段里面调用命令时不用加上路径，这就避免了全局安装 <code>NPM</code> 模块</p><p><code>npm run</code> 如果不加任何参数，直接运行，会列出 <code>package.json</code> 里面所有可以执行的脚本命令，<code>npm run</code> 实际上是 <code>npm run lint</code> 的缩写</p><p><code>npm</code> 内置了两个命令简写，<code>npm test</code> 等同于执行 <code>npm run test</code>，<code>npm start</code> 等同于执行 <code>npm run start</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure><p><code>npm run</code> 会创建一个 <code>shell</code> 执行指定的命令，并临时将 <code>node_modules/.bin</code> 加入 <code>PATH</code> 变量，这意味着本地模块可以直接运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint -S</span><br></pre></td></tr></table></figure><p>例如运行了上面的命令，它产生了两个结果，<code>eslint</code> 被安装在当前目录的 <code>node_modules</code> 目录下，其次，<code>node_modules/.bin</code> 目录会生成一个符号链接 <code>node_modules/.bin/eslint</code>，指向 <code>eslint</code> 模块的可执行脚本，然后就可以在 <code>package.json</code> 的 <code>script</code> 属性里面，不带路径的引用 <code>eslint</code> 这个脚本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Test Project&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^1.10.3&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint .&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 <code>npm run lint</code>的时候，它会自动执行 <code>./node_modules/.bin/eslint .</code></p><p>如果希望一个操作的输出，是另一个操作的输入，可以借用 <code>linux</code> 系统的管道命令，酱两个操作链接在一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build-js&quot;</span>: <span class="string">&quot;browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js&quot;</span></span><br></pre></td></tr></table></figure><p>但是，更方便的写法是引用其他 <code>npm run</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;npm run build-js &amp;&amp; npm run build-css&quot;</span></span><br></pre></td></tr></table></figure><p>上面的写法是先运行 <code>npm run build-js</code>，然后再运行 <code>npm run build-css</code>，两个命令中间用 <code>&amp;&amp;</code> 连接。如果希望两个命令同时平行执行，它们中间可以用 <code>&amp;</code> 连接</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个例子</span></span><br><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;autoprefixer&quot;: &quot;latest&quot;,</span><br><span class="line">  &quot;cssmin&quot;: &quot;latest&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;build:css&quot;: &quot;autoprefixer -b &#x27;last 2 versions&#x27; &lt; assets/styles/main.css | cssmin &gt; dist/main.css&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写在 <code>scripts</code> 属性中的命令，也可以在 <code>node_modules/.bin</code> 目录中直接写成 <code>bash</code> 脚本。下面是一个 <code>bash</code> 脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> site/main</span><br><span class="line">browserify browser/main.js | uglifyjs -mc &gt; static/bundle.js</span><br></pre></td></tr></table></figure><p><a href="http://xn--build-4h1hgl73cv8ecqnptvih1amqeg98dpg7arr4e.sh">假定上面的脚本文件名为build.sh</a>，并且权限为可执行，就可以在scripts属性中引用该文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;build-js&quot;: &quot;bin/build.sh&quot;</span><br></pre></td></tr></table></figure><h2 id="npm-run-参数"><code>npm run</code> 参数</h2><p><code>npm run</code> 命令添加参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;mocha test/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码指定 <code>npm test</code>，实际运行 <code>mocha test/</code>，如果要通过 <code>npm test</code> 命令，将参数传到 <code>mocha</code>，则参数之前要加上两个连词线</p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm run <span class="built_in">test</span> -- anothertest.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等于</span></span><br><span class="line"></span><br><span class="line">mocha <span class="built_in">test</span>/ anothertest.js</span><br></pre></td></tr></table></figure><p>上面命令表示，<code>mocha</code> 要运行所有 <code>test</code> 子目录的测试脚本，以及另外一个测试脚本<code>anothertest.js</code>。</p><p><code>npm run</code>本身有一个参数 <code>-s</code>，表示关闭 <code>npm</code> 本身的输出，只输出脚本产生的结果</p><h2 id="npm-run-all"><code>npm-run-all</code></h2><ol><li><code>npm-run-all</code> 这个模块可以运行多个 <code>scripts</code> 脚本命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i npm-run-all -D</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继发执行</span></span><br><span class="line">npm-run-all build:html build:js</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">npm run build:html &amp;&amp; npm run build:js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 并行执行</span></span><br><span class="line">npm-run-all --parallel watch:html watch:js</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">npm run watch:html &amp; npm run watch:js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 混合执行</span></span><br><span class="line">npm-run-all clean lint --parallel watch:html watch:js</span><br><span class="line"><span class="comment"># 等同于</span></span><br><span class="line">npm-run-all clean lint</span><br><span class="line">npm-run-all --parallel watch:html watch:js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通配符号</span></span><br><span class="line">npm-run-all --parallel watch:*</span><br></pre></td></tr></table></figure><ol><li><code>start</code> 脚本<ul><li><p><code>start</code> 脚本用于启动应用程序</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;start&quot;: &quot;npm-run-all --parallel dev serve&quot;</span><br><span class="line"># npm run start 并行执行 dev 脚本 和 serve 脚本命令</span><br><span class="line"># 相当于</span><br><span class="line">npm run dev &amp; npm run serve</span><br></pre></td></tr></table></figure></li><li><p>如果没有 <code>start</code> 脚本配置，<code>npm start</code> 命令默认执行下面的脚本，前提是模块的根目录存在一个 <code>server.js</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure></li></ul></li><li><code>dev</code> 脚本命令</li></ol><ul><li><p><code>dev</code> 脚本命令，规定开发阶段所要做的处理，比如构建网页资源</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;npm-run-all dev:*&quot;</span><br><span class="line"><span class="comment">// 这个命令用于继发执行所有 dev 的子命令 例如：dev:sass dev:autoprefix</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;predev:sass&quot;: &quot;node-sass --source-map src/css/hoodie.css.map --output-style nested src/sass/base.scss src/css/hoodie.css&quot;</span><br><span class="line"><span class="comment">// 这个命令 将 sass 文件编译为 css 文件，并生成 source map 文件 这个一个hook 后面会讲到</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;dev:sass&quot;: &quot;node-sass --source-map src/css/hoodie.css.map --watch --output-style nested src/sass/base.scss src/css/hoodie.css&quot;</span><br><span class="line"><span class="comment">// 这个命令会监听 sass 文件的变动，只要有变动，就自动将其编译为css文件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&quot;dev:autoprefix&quot;: &quot;postcss --use autoprefixer --autoprefixer.browsers \&quot;&gt; 5%\&quot; --output src/css/hoodie.css src/css/hoodie.css&quot;</span><br><span class="line"><span class="comment">// 这个命令 为css文件加上浏览器前缀，限制条件是只考虑市场份额大于5%的浏览器</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><p><code>serve</code> 脚本命令</p><ul><li><code>serve</code> 脚本用于启动服务</li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;serve&quot;: &quot;live-server dist/ --port=9090&quot;</span><br><span class="line"><span class="comment">// 上面命令启动服务，用的是live-server模块，将服务启动在9090端口，展示dist子目录</span></span><br></pre></td></tr></table></figure><ul><li><code>live-server</code> 模块有三个功能<ul><li>启动一个 <code>HTTP</code> 服务器，展示指定目录的 <code>index.html</code> 文件，通过该文件加载各种网络资源，这是 <code>file://</code> 协议做不到的</li><li>添加自动刷新功能。只要指定目录之中，文件有任何变化，它就会刷新页面</li><li><code>npm run serve</code> 命令执行以后，自动打开浏览器</li><li>以前，上面三个功能需要三个模块来完成：<code>http-server</code>、<code>live-reload</code>和<code>opener</code>，现在只要 <code>live-server</code> 一个模块就够了</li></ul></li></ul></li><li><p><code>test</code> 脚本命令</p><ul><li><code>test</code> 命令用于执行测试</li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;test&quot;: &quot;npm-run-all test:*&quot;,</span><br><span class="line"><span class="comment">// 执行 npm run test 它会帮我们执行test的所有子命令 例如 test:lint</span></span><br><span class="line">&quot;test:lint&quot;: &quot;sass-lint --verbose --config .sass-lint.yml src/sass/*&quot;</span><br><span class="line"><span class="comment">// 上面命令规定，执行测试时，运行lint 脚本，检查脚本之中的语法错误</span></span><br></pre></td></tr></table></figure></li><li><p><code>prod</code> 脚本命令</p><ul><li><code>prod</code> 脚本命令，规定进入生产环境时需要做的处理</li><li>例如下面的命令，将 <code>sass</code> 文件转为 <code>css</code> 文件，并加上浏览器前缀</li></ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;prod&quot;: &quot;npm-run-all prod:*&quot;,</span><br><span class="line">&quot;prod:sass&quot;: &quot;node-sass --output-style compressed src/sass/base.scss src/css/prod/hoodie.min.css&quot;,</span><br><span class="line">&quot;prod:autoprefix&quot;: &quot;postcss --use autoprefixer --autoprefixer.browsers &quot;&gt; 5%&quot; --output src/css/prod/hoodie.min.css src/css/prod/hoodie.min.css&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>help</code> 脚本命令</p><ul><li><code>help</code> 脚本命令用于展示帮助信息</li><li>下面的命令，<code>markdown-chalk</code> 模块用于将指定的 <code>markdown</code> 文件，转为彩色文本显示在终端</li></ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;help&quot;: &quot;markdown-chalk --input DEVLOPMENT.md&quot;</span><br></pre></td></tr></table></figure></li><li><p><code>docs</code> 脚本命令</p><ul><li><code>docs</code> 脚本用于生成文档</li><li>下面的命令使用 <code>kss-node</code> 模块，提供源码的注释生成 <code>markdown</code> 格式的文档。</li></ul> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;docs&quot;: &quot;kss-node --source src/sass --homepage ../../styleguide.md&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="pre-和-post-脚本"><code>pre-</code> 和 <code>post-</code> 脚本</h2><p><code>npm run</code> 为每条命令提供了 <code>pre-</code> 和 <code>post-</code> 两个钩子(<code>hook</code>)，以 <code>npm run lint</code> 为例，执行这条命令之前，<code>npm</code> 会先查看有没有定义 <code>prelint</code> 和 <code>postlint</code> 两个钩子，如果有的话，就先执行 <code>npm run prelint</code>，然后执行 <code>npm run lint</code>，最后执行 <code>npm run postlint</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;myproject&quot;</span>,</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;latest&quot;</span></span><br><span class="line">    <span class="string">&quot;karma&quot;</span>: <span class="string">&quot;latest&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint --cache --ext .js --ext .jsx src&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;karma start --log-leve=error karma.config.js --single-run=true&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;pretest&quot;</span>: <span class="string">&quot;npm run lint&quot;</span>,</span><br><span class="line">    <span class="comment">// 在执行 npm run test 之前执行</span></span><br><span class="line">    <span class="attr">&quot;posttest&quot;</span>: <span class="string">&quot;echo &#x27;Finished running tests&#x27;&quot;</span></span><br><span class="line">    <span class="comment">// 在执行 npm run test 之后执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>注意：如果执行过程出错，就不会执行排在后面的脚本，即如果 <code>prelint</code> 脚本执行出错，就不会接着执行 <code>lint</code> 和 <code>postlint</code> 脚本。</p></li><li><p>一些常见的 <code>pre-</code> 和 <code>post-</code> 脚本</p><ul><li><code>prepublish</code>：发布一个模块前执行</li><li><code>postpublish</code>：发布一个模块后执行</li><li><code>preinstall</code>：用户执行<code>npm install</code>命令时，先执行该脚本</li><li><code>postinstall</code>：用户执行<code>npm install</code>命令时，安装结束后执行该脚本，通常用于将下载的源码编译成用户需要的格式，比如有些模块需要在用户机器上跟本地的<code>C++</code>模块一起编译</li><li><code>preuninstall</code>：卸载一个模块前执行</li><li><code>postuninstall</code>：卸载一个模块后执行</li><li><code>preversion</code>：更改模块版本前执行</li><li><code>postversion</code>：更改模块版本后执行</li><li><code>pretest</code>：运行<code>npm test</code>命令前执行</li><li><code>posttest</code>：运行<code>npm test</code>命令后执行</li><li><code>prestop</code>：运行<code>npm stop</code>命令前执行</li><li>poststop：运行<code>npm stop</code>命令后执行</li><li>prestart：运行<code>npm start</code>命令前执行</li><li>poststart：运行<code>npm start</code>命令后执行</li><li>prerestart：运行<code>npm restart</code>命令前执行</li><li>postrestart：运行<code>npm restart</code>命令后执行</li></ul></li><li><p>对于最后一个<code>npm restart</code>命令，如果没有设置<code>restart</code>脚本，<code>prerestart</code>和<code>postrestart</code>会依次执行<code>stop</code>和<code>start</code>脚本</p></li><li><p>另外，不能在<code>pre</code>脚本之前再加<code>pre</code>，即<code>prepretest</code>脚本不起作用</p></li><li><p>注意，即使 <code>Npm</code> 可以自动运行<code>pre</code>和<code>post</code>脚本，也可以手动执行它们</p></li><li><p>一些例子</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;postinstall&quot;</span>: <span class="string">&quot;node lib/post_install.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于处理从Git仓库拉下来的源码。比如，有些源码是用TypeScript写的，可能需要转换一下 安装之后执行 lib/post_install.js</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;dist:modules&quot;</span>: <span class="string">&quot;babel ./src --out-dir ./dist-modules&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gh-pages&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line"><span class="attr">&quot;gh-pages:deploy&quot;</span>: <span class="string">&quot;gh-pages -d gh-pages&quot;</span>,</span><br><span class="line"><span class="attr">&quot;prepublish&quot;</span>: <span class="string">&quot;npm run dist:modules&quot;</span>,</span><br><span class="line"><span class="comment">// npm run publish时，会先执行Babel编译，然后调用Webpack构建，最后发到Github Pages上面</span></span><br><span class="line"><span class="attr">&quot;postpublish&quot;</span>: <span class="string">&quot;npm run gh-pages &amp;&amp; npm run gh-pages:deploy&quot;</span></span><br><span class="line"><span class="comment">// &amp;&amp; 继发 先执行 npm run gh-page 然后执行 npm run gh-pages:deploy</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>以上都是<code>npm</code>相关操作的钩子，如果安装某些模块，还能支持<code>Git</code>相关的钩子。下面以<code>husky</code>模块为例</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev</span><br></pre></td></tr></table></figure> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"><span class="attr">&quot;lint&quot;</span>: <span class="string">&quot;eslint yourJsFiles.js&quot;</span>,</span><br><span class="line"><span class="attr">&quot;precommit&quot;</span>: <span class="string">&quot;npm run test &amp;&amp; npm run lint&quot;</span>,</span><br><span class="line"><span class="comment">// commit 之前</span></span><br><span class="line"><span class="attr">&quot;prepush&quot;</span>: <span class="string">&quot;npm run test &amp;&amp; npm run lint&quot;</span>,</span><br><span class="line"><span class="attr">&quot;...&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line"><span class="comment">// push之前</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似作用的模块还有<code>pre-commit</code>、<code>precommit-hook</code>等</p></li><li><p>内部变量</p><ul><li><code>scripts</code> 字段可以使用一些内部变量，主要是 <code>package.json</code> 的各种字段</li><li>比如 <code>package.json</code> 的内容是 <code>&#123;&quot;name&quot;:&quot;foo&quot;, &quot;version&quot;:&quot;1.2.5&quot;&#125;</code> 那么变量 <code>npm_package_name</code> 的值就是 <code>foo</code>，变量 <code>npm_package_version</code> 就是 <code>1.2.5</code></li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span>:&#123;</span><br><span class="line"><span class="attr">&quot;bundle&quot;</span>: <span class="string">&quot;mkdir -p build/$npm_package_version/&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行npm run bundle以后，将会生成build/1.2.5/子目录</span></span><br></pre></td></tr></table></figure><ul><li><code>config</code> 字段也可以用来设置内部字段</li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;name&quot;: &quot;fooproject&quot;,</span><br><span class="line">&quot;config&quot;: &#123;</span><br><span class="line">&quot;reporter&quot;: &quot;xunit&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">&quot;test&quot;: &quot;mocha test/ --reporter $npm_package_config_reporter&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量npm_package_config_reporter对应的就是reporter</span></span><br></pre></td></tr></table></figure></li><li><p>通配符</p></li><li><p><code>npm</code> 的通配符的规则如下</p><ul><li><code>*</code> 匹配<code>0</code>个或多个字符</li><li><code>?</code> 匹配<code>1</code>个字符</li><li><code>[...]</code> 匹配某个范围的字符。如果该范围的第一个字符是<code>!</code>或<code>^</code>，则匹配不在该范围的字符</li><li><code>!(pattern|pattern|pattern)</code> 匹配任何不符合给定的模式</li><li><code>?(pattern|pattern|pattern)</code> 匹配<code>0</code>个或<code>1</code>个给定的模式</li><li><code>+(pattern|pattern|pattern)</code> 匹配<code>1</code>个或多个给定的模式</li><li><code>*(a|b|c)</code> 匹配<code>0</code>个或多个给定的模式</li><li><code>@(pattern|pat*|pat?erN)</code> 只匹配给定模式之一</li><li><code>**</code> 如果出现在路径部分，表示<code>0</code>个或多个子目录</li></ul></li></ol><h2 id="全局模块">全局模块</h2><ol><li>全局模块可以直接在任何地方使用</li></ol><h2 id="npm-link"><code>npm link</code></h2><p>就是将当前的目录临时放到全局下</p><p>开发 <code>npm</code> 模块的时候，有时我们会希望，边开发边试用，比如本地调试的时候 <code>require('module')</code>，会自动加载本机开发中的模块，<code>node</code> 规定，使用一个模块时，需要将其安装到全局或项目的 <code>node_modules</code> 目录中，对于开发中的模块，解决方法就是在全局的 <code>node_modules</code> 目录中，生成一个符号链接，指向模块的本地目录</p><p><code>npm link</code> 就是起到这个作用，会自动创建这个符号链接</p><p>举个🌰</p><p>在项目根目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 该命令会在 npm 全局模块目录中，生成一个符号链接文件，该文件的名字就是 package.json文件中指定的模块名</span></span><br><span class="line">src/myModule$ npm link</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模块名</span></span><br><span class="line">/path/to/global/node_modules/myModule -&gt; src/myModule</span><br></pre></td></tr></table></figure><p>这个时候，已经可以全局调用模块了，但是如果我们要让这个模块安装在项目内，还要进行下面的步骤</p><p>切换到项目目录，再次运行 <code>npm link</code> 命令，并指定模块名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/myProject$ npm link myModule</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的命令等同于生成了本地模块的符号链接</span></span><br><span class="line"></span><br><span class="line">src/myProject/node_modules/myModule -&gt; /path/to/global/node_modules/myModule</span><br></pre></td></tr></table></figure><p>然后就可以加载模块了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleO = <span class="built_in">require</span>(<span class="string">&quot;myModule&quot;</span>)</span><br></pre></td></tr></table></figure><p>这样一来，<code>myModule</code> 的任何变化，都可以直接反映在 <code>myProject</code> 项目之中。但是，这样也出现了风险，任何在 <code>myProject</code> 目录中对<code>myModule</code> 的修改，都会反映到模块的源码中</p><p>如果你的项目不再需要该模块，可以在项目目录内使用 <code>npm unlink</code> 命令，删除符号链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src/myProject$ npm unlink myModule</span><br></pre></td></tr></table></figure><h2 id="npm-bin"><code>npm bin</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示相对于当前目录的，Node模块的可执行脚本所在的目录（即.bin目录）</span></span><br><span class="line">/User/qx/node_modules/.bin</span><br></pre></td></tr></table></figure><h2 id="npm-adduser"><code>npm adduser</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br><span class="line"></span><br><span class="line">Username: Username</span><br><span class="line">Password: Password</span><br><span class="line">Email: Email</span><br></pre></td></tr></table></figure><h2 id="npm-publish"><code>npm publish</code></h2><p><code>npm publish</code> 用于将当前模块发布到 <code>npm</code> 中，执行之前需要向 <code>npm</code> 申请用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 申请用户名</span></span><br><span class="line">npm adduser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">npm login</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布</span></span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前模块是一个 beta 版本，比如 1.3.1-beta.3 那么发布的时候 需要使用 tag 参数，将其发布到指定标签，默认的发布标签是 @latest</span></span><br><span class="line"></span><br><span class="line">npm publish --tag beta</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果发布私有模块，模块初始化的时候，需要加上 scope 参数，只有 npm 的付费用户才能发布私有模块</span></span><br><span class="line">npm init --scope=&lt;yourscope&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果模块是 es6 语法，那么发布的时候，最好转成 es5 首先 需要安装Babel</span></span><br><span class="line">npm i babel-cli@6 babel-preset-es2015@6 -D</span><br></pre></td></tr></table></figure><p>然后在 package.json 里写入 build 脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;build&quot;: &quot;babel source --presets babel-preset-es2015 --out-dir distribution&quot;,</span><br><span class="line">    &quot;prepublish&quot;: &quot;npm run build&quot; // publish 之前打包</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面的脚本，会将 <code>source</code> 目录中的 <code>es6</code> 源码文件，转为 <code>distribution</code> 目录里面的 <code>es5</code> 文件，然后创建 <code>.npmignore</code> 和 <code>.gitignore</code> ，分别写入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .npmignore</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># .gitignore</span></span><br><span class="line">node_modules</span><br><span class="line">distribution</span><br></pre></td></tr></table></figure><h2 id="npm-deprecate"><code>npm deprecate</code></h2><p>如果想要废弃某个版本的模块，使用 <code>npm deprecate</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm deprecate my-thing@<span class="string">&quot;&lt; 0.2.3&quot;</span> <span class="string">&quot;critical bug fixed in v0.2.3&quot;</span></span><br></pre></td></tr></table></figure><p>运行上面的命令以后，小于 <code>0.2.3</code> 版本的模块的 <code>package.json</code> 都会写入一行警告，用户安装这些版本时，这行警告就会在命令行显示</p><h2 id="npm-owner"><code>npm owner</code></h2><ol><li>模块的维护者可以发布新版本，<code>npm owner</code> 命令用于管理模块的维护者</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出指定模块的维护者</span></span><br><span class="line">npm owner ls &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增维护者</span></span><br><span class="line">npm owner add &lt;user&gt; &lt;package name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除维护者</span></span><br><span class="line">npm owner rm &lt;user&gt; &lt;package name&gt;</span><br></pre></td></tr></table></figure><h2 id="其他命令">其他命令</h2><ol><li><p><code>npm home</code> 打开一个模块的主页</p></li><li><p><code>npm repo</code> 打开一个模块的代码仓库</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm home <span class="variable">$package</span></span><br><span class="line">npm repo <span class="variable">$package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这两个命令不需要提前安装模块</span></span><br></pre></td></tr></table></figure></li><li><p><code>npm outdated</code> 检查当前项目所依赖的模块，是否已经有新版本</p><ul><li>它会输出当前版本 <code>current version</code> 应当安装的版本 <code>wanted version</code> 和最新发布的版本 <code>latest version</code></li></ul></li><li><p><code>npm prune</code> 检查当前项目的 <code>node_modules</code> 目录中，是否有 <code>package.json</code> 里面没有提到的模块，然后将所有这些模块输出在命令行</p></li><li><p><code>npm shrinkwrap</code> 锁定当前项目的依赖模块的版本</p><ul><li>运行该命令后，会在当前项目的根目录下生成一个 <code>npm-shrinkwrap.json</code> 文件，内容是<code>node_modules</code> 目录下所有已经安装的模块，以及它们的精确版本</li><li>下次运行 <code>npm install</code> 命令时，<code>npm</code> 发现当前目录下有 <code>npm-shrinkwrap.json</code> 文件，就会只安装里面提到的模块，且版本也会保持一致</li></ul></li></ol><h2 id="git-npm"><code>git / npm</code></h2><p><code>npm</code> 版本号管理的问题</p><ol><li><code>semver</code> 规范，规定了版本号，由 <code>MAJOR</code> <code>MINOR</code> <code>PATCH</code></li><li><code>MAJOR</code> 可能不在兼容老版本</li><li><code>MINOR</code> 新增了一些兼容旧版本的 <code>api</code></li><li><code>PATCH</code> 修复 <code>bug</code></li></ol><p><code>git</code> 的 <code>tag</code> 对应着 <code>npm</code> 的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 会自动和git进行关联</span></span><br><span class="line">npm version major minor patch</span><br></pre></td></tr></table></figure><p>版本号的含义</p><ol><li><code>2.2.0</code> 必须是 <code>2.2.0</code></li><li><code>^2.2.0</code> 限定大版本，后面更新只要不超过 <code>2</code> 就可以</li><li><code>~2.2.0</code> 限定前两个版本，后面的版本只要比 <code>0</code> 大就可以</li><li><code>=2.0</code> 大于这个版本</li><li><code>&lt;=2.0</code> 小于等于这个版本</li></ol><p>预发版本</p><ol><li><code>alpha</code> 预览版本，内部测试版</li><li><code>beta</code> 测试版，公开测试版</li><li><code>rc</code> 最终测试版本</li></ol><h2 id="scripts"><code>scripts</code></h2><ol><li>可以配置脚本的命令 快捷键(可以把很长的命令放到 <code>scripts</code> 中)</li><li>执行命令 会将当前的 <code>node_modules</code> 目录下的 <code>.bin</code> 文件夹放到全局中(所以可以直接使用)</li><li><code>npm run start</code> 可以简写为 <code>npm start</code></li></ol><h2 id="npx"><code>npx</code></h2><ol><li><code>npx</code> 和 <code>script</code> 一样可以帮我们直接运行 <code>.bin</code> 目录下的内容</li><li>如果 <code>.bin</code> 目录下存在 会执行对应脚本，如果不存在会下载运行</li></ol><blockquote><p>npx 只是一个临时的使用方案。 npm5.2 之后产生的</p></blockquote><h2 id="源的切换">源的切换</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i nrm -g</span><br><span class="line"></span><br><span class="line">nrm ls</span><br><span class="line"></span><br><span class="line">nrm use</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于butterfly的外挂标签引入</title>
      <link href="56718f73/"/>
      <url>56718f73/</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>本文档主要参考<a href="https://jq.qq.com/?_wv=1027&amp;k=EF1Elvqp">🧊Akilarの糖果屋🍭</a>，<a href="https://vlts.cc/v5/tag-plugins/">Volantis 5.0</a>，转载需注明出处</p><p>若您在使用本帖教程后，发现样式无法完全还原，请重点排查您的其余第三方魔改css样式，例如css中是否存在<code>.circle</code>、<code>.square</code>等易重class名。</p></div><details red><summary> 点开查看开发记录 </summary>              <div class='content'>              <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>本文所涉及的样式，主要参考的是各类已有主题，并对相应styl文件进行样式修改以及添加夜间模式适配。已尽可能追根溯源找到了各部分魔改内容最初的作者，如有错误和遗漏还请联系我修改。</p></div><div class="timeline"><p class='p h2'>开发记录</p><div class="timenode"><div class="meta"><p><p>2020-11-14:内测版v0.05</p></p></div><div class="body"><ol><li>主要使用了<a href="https://github.com/volantis-x/hexo-theme-volantis">Volantis</a>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。</li><li>主要参考内容</li></ol><ul><li><a href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></li><li><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins）</a></li><li><a href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></li><li><a href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></li><li><a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></li><li><a href="https://hunterx.xyz/use-mindmap-in-hexo.html">在hexo中使用思维导图</a></li></ul></div></div><div class="timenode"><div class="meta"><p><p>2020-11-15:正式版v1.0</p></p></div><div class="body"><ol><li>基本完成Volantis外挂标签移植。</li><li>移除了btn标签，因为存在冲突。而且不如butterfly自带的button样式好看。</li><li>适配了folding标签的夜间模式。</li><li>打包了静态资源文件，上传蓝奏云。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-11-16:正式版v1.1</p></p></div><div class="body"><ol><li>新增tip.js，将小康大佬的渐变色上标标签写法从HTML的方式改成用标签语法编写。</li><li>新增动态标签样式anima，使用了fontawesome-animation项目。</li><li>新增标签内容夜间模式适配。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-03:正式版v1.2</p></p></div><div class="body"><ol><li>新增当初弃用的issues.js标签，以配合友链魔改教程中的issues自动更新功能。</li><li>更新了静态资源文件，请之前的读者重新覆盖安装。</li><li>修改了<code>fontawesome-animation.min.css</code>的引入方式，改成使用<code>@import</code>注入<code>index.css</code>。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-07:正式版v1.21</p></p></div><div class="body"><ol><li>资源文件无任何改动。</li><li>更新了动态标签的使用说明。补全参数配置，更换示例。使得教程更加通俗易懂。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-13:正式版v1.3</p></p></div><div class="body"><ol><li>新增Butterfly_v3.4.0的配置文件。</li><li>请读者根据自己的主题版本选择替换。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-17:正式版v1.4</p></p></div><div class="body"><ol><li>新增两个样式标签poem和icon</li><li>修复了folding标签嵌套字体逐级放大的bug。</li><li>不再更新v3.4.0以下版本的适配内容。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-12-31:正式版v1.5</p></p></div><div class="body"><ol><li>新增两个样式标签，github徽标ghbdage和特效标签wow</li><li>移除静态资源中的<code>fontawesome-animation.min.css</code>以及<code>issues.js</code>，改为CDN引用。</li><li>本帖不专门提供特效标签wow的配置方案，若有需要，请查看相关教程<a href="https://akilar.top/posts/abab51cf/">使用wowjs给博客添加动画效果</a></li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-02-24:正式版v1.6</p></p></div><div class="body"><ol><li>新增一个样式标签，进度条progress</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-03-19:正式版v1.61</p></p></div><div class="body"><ol><li>修复行内图片换行错误。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-07-07:发布插件版v1.0.0</p></p></div><div class="body"><ol><li>使用npm插件安装。</li><li>测试版本为butterfly_v3.1.0、3.3.0、3.7.8、3.8.0</li><li>插件写法调整为高内聚，理论上不受butterfly主题版本影响。</li><li>为了获得完整效果，建议打开主题的beautify配置项和theme_color配置项。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-08-06:发布插件版v1.0.3</p></p></div><div class="body"><ol><li>新增<code>carousel</code>旋转相册</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2021-08-06:发布插件版v1.0.3</p></p></div><div class="body"><ol><li>新增<code>mindmap</code><span class='nota' data-nota='由博主添加'>思维导图</span></li></ol></div></div></div>              </div>            </details><div class="tabs" id="配置方案"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#配置方案-1">npm插件安装方案（推荐）</button></li><li class="tab"><button type="button" data-href="#配置方案-2">源码修改配置方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="配置方案-1"><ol><li>安装插件,在博客根目录<code>[Blogroot]</code>下打开终端，运行以下指令：</li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-plugins --save</span><br></pre></td></tr></table></figure><p>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ol start="2"><li>添加配置信息，以下为写法示例</li></ol><p>在站点配置文件<code>_config.yml</code>或者主题配置文件<code>_config.butterfly.yml</code>中添加</p>  <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://cdn.jsdelivr.net/npm/hexo-butterfly-tag-plugins-plus@latest/lib/carousel-touch.min.js</span> <span class="comment">#旋转相册鼠标动作依赖</span></span><br></pre></td></tr></table></figure><ol start="3"><li>参数释义</li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">备选值/类型</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">enable</td><td style="text-align:left">true/false</td><td style="text-align:left">【必选】控制开关</td></tr><tr><td style="text-align:left">priority</td><td style="text-align:left">number</td><td style="text-align:left">【可选】过滤器优先级，数值越小，执行越早，默认为10，选填</td></tr><tr><td style="text-align:left">issues</td><td style="text-align:left">true/false</td><td style="text-align:left">【可选】issues标签控制开关，默认为false</td></tr><tr><td style="text-align:left">CDN.anima</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】动画标签anima的依赖</td></tr><tr><td style="text-align:left">CDN.jquery</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.issues</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】issues标签依赖</td></tr><tr><td style="text-align:left">CDN.iconfont</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】iconfont标签symbol样式引入</td></tr><tr><td style="text-align:left">CDN.carousel</td><td style="text-align:left">URL</td><td style="text-align:left">【可选】carousel旋转相册标签鼠标拖动依赖</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="配置方案-2"><ol><li>下载资源文件<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Akilarlxh/Tag_Plugins"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=Akilarlxh&repo=Tag_Plugins&theme=vue&show_owner=true"/></a></li><li>将下载的<code>Tag_Plugins.zip</code>解压得到<code>butterfly</code>文件夹。</li><li>将<code>butterfly</code>文件夹复制到<code>[Blogroot]\themes\</code>目录下，覆盖当前的<code>butterfly</code>主题文件夹，提示重复则选择替换。(如果担心覆盖自己的其他魔改内容，可以根据静态文件内容自主比对修改)</li><li>修改<code>[Blogroot]\_config.butterfly.yml</code>的<code>inject</code>配置项，添加<code>CDN</code>依赖项。由于<code>issues</code>写入<code>timeline</code>和<code>site-card</code>标签要用到<code>jquery</code>，请务必根据注释指示的版本决定是否添加。</li></ol>  <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;https://cdn.jsdelivr.net/gh/l-lin/font-awesome-animation/dist/font-awesome-animation.min.css&quot;</span>  <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span>  <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/hexo-butterfly-tag-plugins-plus@latest/lib/carousel-touch.min.js&quot;&gt;&lt;/script&gt;</span> <span class="comment">#carousel相册鼠标动作的依赖</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment"># 自butterfly_v3.4.0+开始，主题基本实现去jquery化，需要自己添加引用，请读者根据版本自行决定是否添加这行引用。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">defer</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="comment">#数据集合标签issues的依赖</span></span><br></pre></td></tr></table></figure><ol start="5"><li>考虑到hexo自带的markdown渲染插件<code>hexo-renderer-marked</code>与外挂标签语法的兼容性较差，建议您将其替换成<a href="https://www.npmjs.com/package/hexo-renderer-kramed">hexo-renderer-kramed</a></li></ol>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure><ol start="6"><li>外挂标签使用方案请参阅下文。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内文本样式-text">行内文本样式 <code>text</code></h2><div class="tabs" id="text"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#text-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#text-2">样式预览</button></li><li class="tab"><button type="button" data-href="#text-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="text-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="text-2"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="text-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内文本-span">行内文本 <code>span</code></h2><div class="tabs" id="span"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#span-1">标签语法</button></li><li class="tab"><button type="button" data-href="#span-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#span-3">样式预览</button></li><li class="tab"><button type="button" data-href="#span-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="span-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="span-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="span-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="段落文本-p">段落文本 p</h2><div class="tabs" id="p"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#p-1">标签语法</button></li><li class="tab"><button type="button" data-href="#p-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#p-3">样式预览</button></li><li class="tab"><button type="button" data-href="#p-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="p-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-2"><ol><li>字体: logo, code</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="p-3"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="p-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="引用-note">引用 <code>note</code></h2><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>以下是<code>butterfly</code>主题的note写法。</p></div><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#note-1">通用配置</button></li><li class="tab"><button type="button" data-href="#note-2">语法格式</button></li><li class="tab"><button type="button" data-href="#note-3">配置参数</button></li><li class="tab active"><button type="button" data-href="#note-4">样式预览</button></li><li class="tab"><button type="button" data-href="#note-5">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="note-1"><p>修改主题配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>Note</code>标签外挂有两种用法。<code>icons</code>和<code>light_bg_offset</code>只对方法一生效。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><details cyan><summary> 方法一 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><details cyan><summary> 方法一 </summary>              <div class='content'>              <table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">class</td><td style="text-align:left">【可选】标识，不同的标识有不同的配色<br>（ default / primary / success / info / warning / danger ）</td></tr><tr><td style="text-align:left">no-icon</td><td style="text-align:left">【可选】不显示 icon</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">用法</th></tr></thead><tbody><tr><td style="text-align:left">color</td><td style="text-align:left">(default / blue / pink / purple / orange / green)</td></tr><tr><td style="text-align:left">icon</td><td style="text-align:left">【可选】标识，可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td style="text-align:left">style</td><td style="text-align:left">【可选】可以覆盖配置中的 style<br>（simple/modern/flat/disabled）</td></tr></tbody></table>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="note-4"><details cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><code>simple</code>样式</li></ol>  <div class="note simple"><p>默认 提示块标签</p></div>  <div class="note default simple"><p>default 提示块标签</p></div>  <div class="note primary simple"><p>primary 提示块标签</p></div>  <div class="note success simple"><p>success 提示块标签</p></div>  <div class="note info simple"><p>info 提示块标签</p></div>  <div class="note warning simple"><p>warning 提示块标签</p></div>  <div class="note danger simple"><p>danger 提示块标签</p></div><ol start="2"><li><code>modern</code>样式</li></ol>  <div class="note modern"><p>默认 提示块标签</p></div>  <div class="note default modern"><p>default 提示块标签</p></div>  <div class="note primary modern"><p>primary 提示块标签</p></div>  <div class="note success modern"><p>success 提示块标签</p></div>  <div class="note info modern"><p>info 提示块标签</p></div>  <div class="note warning modern"><p>warning 提示块标签</p></div>  <div class="note danger modern"><p>danger 提示块标签</p></div><ol start="3"><li><code>flat</code>样式</li></ol>  <div class="note flat"><p>默认 提示块标签</p></div>  <div class="note default flat"><p>default 提示块标签</p></div>  <div class="note primary flat"><p>primary 提示块标签</p></div>  <div class="note success flat"><p>success 提示块标签</p></div>  <div class="note info flat"><p>info 提示块标签</p></div>  <div class="note warning flat"><p>warning 提示块标签</p></div>  <div class="note danger flat"><p>danger 提示块标签</p></div><ol start="4"><li><code>disabled</code>样式</li></ol>  <div class="note disabled"><p>默认 提示块标签</p></div>  <div class="note default disabled"><p>default 提示块标签</p></div>  <div class="note primary disabled"><p>primary 提示块标签</p></div>  <div class="note success disabled"><p>success 提示块标签</p></div>  <div class="note info disabled"><p>info 提示块标签</p></div>  <div class="note warning disabled"><p>warning 提示块标签</p></div>  <div class="note danger disabled"><p>danger 提示块标签</p></div><ol start="5"><li><code>no-icon</code>样式</li></ol>  <div class="note no-icon simple"><p>默认 提示块标签</p></div>  <div class="note default no-icon simple"><p>default 提示块标签</p></div>  <div class="note primary no-icon simple"><p>primary 提示块标签</p></div>  <div class="note success no-icon simple"><p>success 提示块标签</p></div>  <div class="note info no-icon simple"><p>info 提示块标签</p></div>  <div class="note warning no-icon simple"><p>warning 提示块标签</p></div>  <div class="note danger no-icon simple"><p>danger 提示块标签</p></div>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <ol><li>simple样式</li></ol>  <div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div>  <div class="note pink icon simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div>  <div class="note red icon simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div>  <div class="note orange icon simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple icon simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div>  <div class="note green icon simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="2"><li>modern样式</li></ol>  <div class="note icon modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div>  <div class="note pink icon modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div>  <div class="note red icon modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div>  <div class="note orange icon modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple icon modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div>  <div class="note green icon modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="3"><li>flat样式</li></ol>  <div class="note icon flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue icon flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div>  <div class="note pink icon flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div>  <div class="note red icon flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div>  <div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div>  <div class="note green icon flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="4"><li>disabled样式</li></ol>  <div class="note icon disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div>  <div class="note pink icon disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div>  <div class="note red icon disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div>  <div class="note orange icon disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple icon disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div>  <div class="note green icon disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><ol start="5"><li>no-icon样式</li></ol>  <div class="note no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note blue no-icon simple"><p>2021年快到了…</p></div>  <div class="note pink no-icon simple"><p>小心开车 安全至上</p></div>  <div class="note red no-icon simple"><p>这是三片呢？还是四片？</p></div>  <div class="note orange no-icon simple"><p>你是刷 Visa 还是 UnionPay</p></div>  <div class="note purple no-icon simple"><p>剪刀石头布</p></div>  <div class="note green no-icon simple"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-5"><details cyan><summary> 方法一 </summary>              <div class='content'>              <ol><li><code>simple</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>modern</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>flat</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>disabled</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>no-icon</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details blue><summary> 方法二 </summary>              <div class='content'>              <ol><li><code>simple</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>modern</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>flat</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><code>disabled</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><code>no-icon</code>样式</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="上标标签-tip">上标标签 tip</h2><div class="tip cogs"><p>主要样式参考自<a href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly渐变背景标签</a>,自己写了个<code>tip.js</code>来渲染标签，精简了一下代码。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;默认情况&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="动态标签-anima">动态标签 anima</h2><div class="tip faa-horizontal animated"><p>动态标签的实质是引用了<a href="https://github.com/l-lin/font-awesome-animation">font-awesome-animation</a>的css样式，不一定局限于tip标签，也可以是其他标签。<br>只不过这里<code>tip.js</code>是我自己写的，所以我清楚它会怎么被渲染成html，才用的这个写法。<br>可以熟读文档，使用html语言来编写其他标签类型。</p></div><div class="tabs" id="tip"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#tip-1">标签语法</button></li><li class="tab"><button type="button" data-href="#tip-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#tip-3">样式预览</button></li><li class="tab"><button type="button" data-href="#tip-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="tip-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-2"><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>更多详情请参看<a href="http://l-lin.github.io/font-awesome-animation/">font-awesome-animation文档</a></p><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><table><thead><tr><th style="text-align:left">On DOM load<br>当页面加载时<br>显示动画</th><th style="text-align:left">On hover<br>当鼠标悬停时<br>显示动画</th><th style="text-align:left">On parent hover<br>当鼠标悬停<br>在父级元素时<br>显示动画</th></tr></thead><tbody><tr><td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated"></i> faa-wrench animated</span></td><td style="text-align:left"><span><i class="fas fa-wrench faa-wrench animated-hover"></i> faa-wrench animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-wrench faa-wrench"></i> faa-wrench</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-bell faa-ring animated"></i> faa-ring animated</span></td><td style="text-align:left"><span><i class="fas fa-bell faa-ring animated-hover"></i> faa-ring animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-bell faa-ring"></i> faa-ring</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated"></i> faa-horizontal animated</span></td><td style="text-align:left"><span><i class="fas fa-envelope faa-horizontal animated-hover"></i> faa-horizontal animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-horizontal"></i> faa-horizontal</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated"></i> faa-vertical animated</span></td><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-vertical animated-hover"></i> faa-vertical animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-vertical"></i> faa-vertical</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated"></i> faa-flash animated</span></td><td style="text-align:left"><span><i class="fas fa-exclamation-triangle faa-flash animated-hover"></i> faa-flash animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-exclamation-triangle faa-flash"></i> faa-flash</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated"></i> faa-bounce animated</span></td><td style="text-align:left"><span><i class="fas fa-thumbs-up faa-bounce animated-hover"></i> faa-bounce animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-thumbs-up faa-bounce"></i> faa-bounce</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated"></i> faa-spin animated</span></td><td style="text-align:left"><span><i class="fas fa-spinner faa-spin animated-hover"></i> faa-spin animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-spinner faa-spin"></i> faa-spin</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-plane faa-tada animated"></i> faa-tada animated</span></td><td style="text-align:left"><span><i class="fas fa-plane faa-tada animated-hover"></i> faa-tada animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-plane faa-tada"></i> faa-tada</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated"></i> faa-pulse animated</span></td><td style="text-align:left"><span><i class="fas fa-heart faa-pulse animated-hover"></i> faa-pulse animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-heart faa-pulse"></i> faa-pulse</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated"></i> faa-shake animated</span></td><td style="text-align:left"><span><i class="fas fa-envelope faa-shake animated-hover"></i> faa-shake animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-envelope faa-shake"></i> faa-shake</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated"></i> faa-tada animated</span></td><td style="text-align:left"><span><i class="fas fa-trophy faa-tada animated-hover"></i> faa-tada animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-trophy faa-tada"></i> faa-tada</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated"></i> faa-passing animated</span></td><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing animated-hover"></i> faa-passing animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing"></i> faa-passing</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated"></i> faa-passing-reverse animated</span></td><td style="text-align:left"><span><i class="fas fa-space-shuttle faa-passing-reverse animated-hover"></i> faa-passing-reverse animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-space-shuttle faa-passing-reverse"></i> faa-passing-reverse</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-circle faa-burst animated"></i> faa-burst animated</span></td><td style="text-align:left"><span><i class="fas fa-circle faa-burst animated-hover"></i> faa-burst animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-circle faa-burst"></i> faa-burst</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-star faa-falling animated"></i> faa-falling animated</span></td><td style="text-align:left"><span><i class="fas fa-star faa-falling animated-hover"></i> faa-falling animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-star faa-falling"></i> faa-falling</span></td></tr><tr><td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated"></i> faa-rising animated</span></td><td style="text-align:left"><span><i class="fas fa-rocket faa-rising animated-hover"></i> faa-rising animated-hover</span></td><td style="text-align:left"><span class="faa-parent animated-hover"><i class="fas fa-rocket faa-rising"></i> faa-rising</span></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="tip-3"><ol><li>On DOM load（当页面加载时显示动画）</li></ol>  <div class="tip warning faa-horizontal animated"><p>warning</p></div>  <div class="tip ban faa-flash animated"><p>ban</p></div><ol start="2"><li>调整动画速度。</li></ol>  <div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div>  <div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><ol start="3"><li>On hover（当鼠标悬停时显示动画）</li></ol>  <div class="tip warning faa-horizontal animated-hover"><p>warning</p></div>  <div class="tip ban faa-flash animated-hover"><p>ban</p></div><ol start="4"><li>On parent hover（当鼠标悬停在父级元素时显示动画）</li></ol>  <div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div>  <div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tip-4"><ol><li>On DOM load（当页面加载时显示动画）</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>调整动画速度</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>On hover（当鼠标悬停时显示动画）</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>On parent hover（当鼠标悬停在父级元素时显示动画）</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="复选列表-checkbox">复选列表 checkbox</h2><div class="tabs" id="checkbox"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#checkbox-1">标签语法</button></li><li class="tab"><button type="button" data-href="#checkbox-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#checkbox-3">样式预览</button></li><li class="tab"><button type="button" data-href="#checkbox-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="checkbox-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-2"><ol><li>样式: plus, minus, times</li><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="checkbox-3"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="checkbox-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="单选列表-radio">单选列表 radio</h2><div class="tabs" id="radio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#radio-1">标签语法</button></li><li class="tab"><button type="button" data-href="#radio-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#radio-3">样式预览</button></li><li class="tab"><button type="button" data-href="#radio-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="radio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-2"><ol><li>颜色: <span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span></li><li>选中状态: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="radio-3"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="radio-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="时间轴-timeline">时间轴 timeline</h2><div class="tabs" id="timeline"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#timeline-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#timeline-2">样式预览</button></li><li class="tab"><button type="button" data-href="#timeline-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="timeline-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选） %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% timenode 时间节点（标题） %&#125;</span><br><span class="line">正文内容</span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="timeline-2"><div class="timeline"><div class="timenode"><div class="meta"><p><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></p></div><div class="body"><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class="timenode"><div class="meta"><p><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></p></div><div class="body"><p>不需要额外处理。</p></div></div><div class="timenode"><div class="meta"><p><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></p></div><div class="body"><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="timeline-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) %&#125;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% timenode 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&#123;% endtimenode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="链接卡片-link">链接卡片 link</h2><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#link-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#link-2">样式预览</button></li><li class="tab"><button type="button" data-href="#link-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="link-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="link-2"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="按钮-btns">按钮 btns</h2><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p><code>Volantis</code>的按钮使用的是<code>btn</code>和<code>btns</code>标签。<code>btns</code>和<code>butterfly</code>的<code>button</code>不冲突，但是<code>btn</code>会被强制渲染，导致部分参数失效,而且<code>btn</code>的效果还是<code>butterfly</code>的<code>button</code>更好看些。所以就只适配了<code>btns</code>。</p></div><div class="tabs" id="btn"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#btn-1">标签语法</button></li><li class="tab"><button type="button" data-href="#btn-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#btn-3">样式预览</button></li><li class="tab"><button type="button" data-href="#btn-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="btn-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;标题&lt;/b&gt; </code>和<code> &lt;p&gt;描述文字&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">wide</td><td style="text-align:left">宽一点的按钮</td></tr><tr><td style="text-align:left">fill</td><td style="text-align:left">填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td style="text-align:left">center</td><td style="text-align:left">居中，按钮之间是固定间距</td></tr><tr><td style="text-align:left">around</td><td style="text-align:left">居中分散</td></tr><tr><td style="text-align:left">grid2</td><td style="text-align:left">等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid3</td><td style="text-align:left">等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid4</td><td style="text-align:left">等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td style="text-align:left">grid5</td><td style="text-align:left">等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="btn-3"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：</li></ol>  <div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div><ol start="2"><li>或者含有图标的按钮：</li></ol>  <div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><ol start="3"><li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</li></ol>  <div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="btn-4"><ol><li>如果需要显示类似「团队成员」之类的一组含有头像的链接：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>或者含有图标的按钮：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="github卡片-ghcard">github卡片 ghcard</h2><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>ghcard使用了<code>github-readme-stats</code>的API，支持直接使用markdown语法来写。</p></div><div class="tabs" id="ghcard"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghcard-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghcard-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghcard-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghcard-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghcard-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-2"><p>更多参数可以参考：<br><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/anuraghazra/github-readme-stats"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=anuraghazra&repo=github-readme-stats&show_owner=true"/></a><br>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">取值</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">hide</td><td style="text-align:left">stars,commits,prs,issues,contribs</td><td style="text-align:left">隐藏指定统计</td></tr><tr><td style="text-align:left">count_private</td><td style="text-align:left">true</td><td style="text-align:left">将私人项目贡献添加到总提交计数中</td></tr><tr><td style="text-align:left">show_icons</td><td style="text-align:left">true</td><td style="text-align:left">显示图标</td></tr><tr><td style="text-align:left">theme</td><td style="text-align:left">请查阅<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td style="text-align:left">主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghcard-3"><ol><li>用户信息卡片</li></ol><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a></td></tr></tbody></table><ol start="2"><li>仓库信息卡片</li></ol><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghcard-4"><ol><li>用户信息卡片</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard xaoxuu %&#125; | &#123;% ghcard xaoxuu, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=buefy %&#125; | &#123;% ghcard xaoxuu, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=onedark %&#125; | &#123;% ghcard xaoxuu, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard xaoxuu, theme=algolia %&#125; | &#123;% ghcard xaoxuu, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><ol start="2"><li>仓库信息卡片</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="github徽标-ghbdage">github徽标 ghbdage</h2><div class="tip cogs"><p>关于ghbdage参数的更多具体用法可以参看相关教程：<a href="https://akilar.top/posts/e87ad7f8">添加github徽标</a></p></div><div class="tabs" id="ghbdage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#ghbdage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#ghbdage-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#ghbdage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#ghbdage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="ghbdage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="ghbdage-3"><div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div>1. 基本参数<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object>2. 信息参数<br><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object>3. 拓展参数<br><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=40"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=40&logoColor=violet"></object><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="ghbdage-4"><div class="note info modern"><p>本外挂标签的参数分为三组，用<code>||</code>分割。</p></div>1. 基本参数,定义徽标左右文字和图标<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure>2. 信息参数，定义徽标右侧内容背景色，指向链接<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure>3. 拓展参数，支持shields的API的全部参数内容<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="网站卡片-sites">网站卡片 sites</h2><div class="tabs" id="site"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#site-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#site-2">样式预览</button></li><li class="tab"><button type="button" data-href="#site-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="site-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="site-2"><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="site-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="行内图片-inlineimage">行内图片 inlineimage</h2><div class="tabs" id="inlineimage"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#inlineimage-1">标签语法</button></li><li class="tab"><button type="button" data-href="#inlineimage-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#inlineimage-3">样式预览</button></li><li class="tab"><button type="button" data-href="#inlineimage-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="inlineimage-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-2"><ol><li>高度：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="inlineimage-3"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="inlineimage-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="单张图片-image">单张图片 image</h2><div class="tabs" id="image"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#image-1">标签语法</button></li><li class="tab"><button type="button" data-href="#image-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#image-3">样式预览</button></li><li class="tab"><button type="button" data-href="#image-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="image-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="image-3"><ol><li>添加描述：</li></ol>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><ol start="2"><li>指定宽度：</li></ol>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div><ol start="3"><li>指定宽度并添加描述：</li></ol>  <div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div><ol start="4"><li>设置占位背景色：</li></ol>  <div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="image-4"><ol><li>添加描述：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>指定宽度：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>指定宽度并添加描述：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设置占位背景色：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="音频-audio">音频 audio</h2><div class="tabs" id="audio"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#audio-1">标签语法</button></li><li class="tab active"><button type="button" data-href="#audio-2">样式预览</button></li><li class="tab"><button type="button" data-href="#audio-3">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="audio-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="audio-2"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="audio-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="视频-video">视频 video</h2><div class="tabs" id="video"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#video-1">标签语法</button></li><li class="tab"><button type="button" data-href="#video-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#video-3">样式预览</button></li><li class="tab"><button type="button" data-href="#video-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="video-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-2"><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="video-3"><ol><li>100%宽度</li></ol>  <div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><ol start="2"><li>50%宽度</li></ol>  <div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><ol start="3"><li>25%宽度</li></ol>  <div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="video-4"><ol><li>100%宽度</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>50%宽度</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>25%宽度</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="相册-gallery">相册 gallery</h2><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>自带<code>gallery</code>相册，而且会根据图片大小自动调整排版，效果比<code>Volantis</code>的<code>gallery</code>更好，故不再收录<code>Volantis</code>的<code>gallery</code>标签。</p></div><div class="note simple"><p>以下为<code>Butterfly</code>自带的<code>gallery</code>标签写法。相册图库和相册配合使用。</p></div><div class="tabs" id="gallery"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#gallery-1">标签语法</button></li><li class="tab"><button type="button" data-href="#gallery-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#gallery-3">样式预览</button></li><li class="tab"><button type="button" data-href="#gallery-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="gallery-1"><ol><li>gallerygroup 相册图库</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>gallery 相册</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th style="text-align:left">参数名</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">name</td><td style="text-align:left">图库名字</td></tr><tr><td style="text-align:left">description</td><td style="text-align:left">图库描述</td></tr><tr><td style="text-align:left">link</td><td style="text-align:left">链接到对应相册的地址</td></tr><tr><td style="text-align:left">img-url</td><td style="text-align:left">图库封面</td></tr></tbody></table><div class="note info simple"><p>思维拓展一下，相册图库的实质其实就是个快捷方式，可以自定义添加描述、封面、链接。那么我们未必要把它当做一个相册，完全可以作为一个链接卡片，链接到视频、QQ、友链都是不错的选择。</p></div><ul><li>gallery 相册<br>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="gallery-3"><ul><li>gallerygroup 相册图库</li></ul><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img" src='https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div><ul><li>gallery 相册</li></ul><div class="justified-gallery"><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="gallery-4"><div class="note info simple"><p>对于很多同学提问的<code>gallerygroup</code>和<code>gallery</code>相册页的链接问题。这里说下我个人的使用习惯。<br>一般使用相册图库的话，可以在导航栏加一个gallery的page(<strong>使用指令<code>hexo new page gallery</code>添加</strong>)，里面放相册图库作为封面。然后在<code>[Blogroot]/source/gallery/</code>下面建立相应的文件夹，例如若按照这里的示例，若欲使用<code>/gallery/MC/</code>路径访问MC相册，则需要新建<code>[Blogroot]/source/gallery/MC/index.md</code>，并在里面填入<code>gallery</code>相册内容。</p></div><ol><li>gallerygroup 相册图库</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>gallery 相册</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="折叠框-folding">折叠框 folding</h2><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>虽然也有内置折叠框<code>hideToggle</code>标签，但是<code>Volantis</code>的<code>folding</code>折叠框更好看一些。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：状态填写 open 代表默认打开。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><details ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details green><summary> 查看代码测试 </summary>              <div class='content'>              <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br></pre></td></tr></table></figure>              </div>            </details><details yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="分栏-tab">分栏 tab</h2><div class="note blue icon disabled"><i class="note-icon fas fa-bullhorn"></i><p><code>Butterfly</code>的<code>tab</code>标签和<code>Volantis</code>的<code>tab</code>标签都是移值自<code>NexT</code>主题，所以写法和效果一模一样。</p></div><div class="tabs" id="folding"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#folding-1">标签语法</button></li><li class="tab"><button type="button" data-href="#folding-2">配置参数</button></li><li class="tab active"><button type="button" data-href="#folding-3">样式预览</button></li><li class="tab"><button type="button" data-href="#folding-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="folding-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-2"><ol><li>Unique name :<ul><li>选项卡块标签的唯一名称，不带逗号。</li><li>将在#id中用作每个标签及其索引号的前缀。</li><li>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</li><li>仅当前帖子/页面的URL必须是唯一的！</li></ul></li><li>[index]:<ul><li>活动选项卡的索引号。</li><li>如果未指定，将选择第一个标签（1）。</li><li>如果index为-1，则不会选择任何选项卡。</li><li>可选参数。</li></ul></li><li>[Tab caption]:<ul><li>当前选项卡的标题。</li><li>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</li><li>如果未指定标题，但指定了图标，则标题将为空。</li><li>可选参数。</li></ul></li><li>[@icon]:<ul><li>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</li><li>可以指定带空格或不带空格；</li><li>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</li><li>可选参数。</li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="folding-3"><div class="note primary simple"><p>Demo 1 - 预设选择第一个【默认】</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary simple"><p>Demo 2 - 预设选择tabs</p></div><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary simple"><p>Demo 3 - 没有预设值</p></div><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note primary simple"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="folding-4"><div class="note primary simple"><p>Demo 1 - 预设选择第一个【默认】</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>Demo 2 - 预设选择tabs</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>Demo 3 - 没有预设值</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="note primary simple"><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="数据集合-issues">数据集合 issues</h2><script defer src="https://cdn.jsdelivr.net/npm/hexo-theme-volantis@latest/source/js/issues.min.js"></script><div class="tabs" id="issues"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#issues-1">标签语法</button></li><li class="tab"><button type="button" data-href="#issues-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#issues-3">样式预览</button></li><li class="tab"><button type="button" data-href="#issues-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="issues-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues type | api=url | group=key:value1,value2（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-2"><p><span class='p center logo large'>type(类型)：</span><br>根据需求不同，会将 issues 内容解析成不同的 HTML 标签，目前支持的类型有：</p><ol><li>时间轴<code>timeline</code>: 解析成<code>timeline</code>标签，<code>issue</code>的标题对应<code>timeline</code>的时间，<code>issue</code>的内容对应<code>timeline</code>的内容。</li><li>网站卡片<code>sites</code>: 解析成<code>sites</code>标签，需要有<code>JSON</code>代码块,各参数对应<code>sites</code>标签参数:</li></ol>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;screenshot&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;「keywords」&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left">title</td><td style="text-align:left">网站名称</td></tr><tr><td style="text-align:left">screenshot</td><td style="text-align:left">网站预览图</td></tr><tr><td style="text-align:left">url</td><td style="text-align:left">网站链接，需要添加<br><code>https://</code>协议组成完整域名。<br>否则可能被识别成站点相对路径。</td></tr><tr><td style="text-align:left">avatar</td><td style="text-align:left">站长头像</td></tr><tr><td style="text-align:left">「keywords」</td><td style="text-align:left">分组依据，<br>未必要叫「keywords」，<br>详见下文group(分组)</td></tr></tbody></table><p><span class='p center logo large'>api(接口)：</span><br>url为可以调的通的API，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">api&#x3D;https:&#x2F;&#x2F;gitee.com&#x2F;api&#x2F;v5&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active</span><br><span class="line">api&#x3D;https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;xaoxuu&#x2F;friends&#x2F;issues?sort&#x3D;updated&amp;state&#x3D;open&amp;page&#x3D;1&amp;per_page&#x3D;100&amp;labels&#x3D;active</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">释义</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://gitee.com/api/v5/">https://gitee.com/api/v5/</a></td><td style="text-align:left">gitee仓库的api</td></tr><tr><td style="text-align:left"><a href="https://api.github.com/">https://api.github.com/</a></td><td style="text-align:left">github仓库的api</td></tr><tr><td style="text-align:left">repos/xaoxuu/friends/issues</td><td style="text-align:left">repos/用户名/仓库名/issues</td></tr><tr><td style="text-align:left">sort=updated&amp;state=open</td><td style="text-align:left">界定哪些类型的<code>issues</code>会<br>被读取过来渲染成相应的标签</td></tr><tr><td style="text-align:left">page=1&amp;per_page=100</td><td style="text-align:left">读取前100条issues</td></tr><tr><td style="text-align:left">labels=active</td><td style="text-align:left">控制默认的issue不显示，<br>只有自己审核通过<br>添加了active标签之后才会显示</td></tr></tbody></table><p><span class='p center logo large'>group(分组)：</span><br><code>sites</code>类型的<code>issues</code>默认不分组，如果需要分组，可指定分组依据<code>「keywords」</code>，和分组白名单<code>「value1」</code>、<code>「value2」</code>等，例如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">group=version:v4,v3,v2</span></span><br><span class="line"><span class="comment"># 此处的version就是上文中的「keywords」</span></span><br></pre></td></tr></table></figure><p>这个参数的作用就是，筛选出<code>JSON</code>中包含<code>&quot;version&quot;: &quot;v4&quot;</code>或者<code>&quot;version&quot;:&quot;v3&quot;</code>或者<code>&quot;version&quot;: &quot;v2&quot;</code>的数据，并分组显示。</p><p><span class='p center logo large'>仓库ISSUES模板配置</span></p><details green><summary> Github仓库配置方案 </summary>              <div class='content'>              <ol><li>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.github\ISSUE_TEMPLATE.md</code>,<br>并在其中输入以下内容作为<code>issues</code>模板。</li></ol>  <div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line">about: 请根据指示规范填写友链格式。</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://akilar.top/img/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>新建active label</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/d63b5c0c.png" alt="新建label用于控制审核结果"></p><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/6311f960.png" alt="配置名称描述颜色"></p><ol start="3"><li>提交示例</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/f87ebfd3.png" alt="填写规范"><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/efdfc67d.png" alt="审核通过"></p><ol start="4"><li>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</li></ol>              </div>            </details><details yellow><summary> Gitee仓库配置方案 </summary>              <div class='content'>              <ol><li>新建一个仓库，仓库名随意，这里我命名为<code>friend_link</code>,<br>新建文件<code>friend_link\.gitee\ISSUE_TEMPLATE.md</code>,<br>并在其中输入以下内容作为<code>issues</code>模板。</li></ol>  <div class="tip warning faa-horizontal animated fa-slow"><p>其中的json代码块前面的反斜杠记得删去。此处这么写主要是为了转义，否则无法嵌套代码块。</p></div>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">name: 友链模板</span><br><span class="line">about: 请根据指示规范填写友链格式。</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!-- 请在下方代码块的双引号中填写 --&gt;</span><br><span class="line">\<span class="code">```json</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">    &quot;title&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;screenshot&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;url&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;avatar&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;description&quot;: &quot;&quot;,</span></span><br><span class="line"><span class="code">    &quot;keywords&quot;: &quot;&quot;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">\```</span></span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;站点名称&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;站点预览图链接&quot;,</span><br><span class="line">&quot;url&quot;: &quot;站点链接&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;头像链接&quot;,</span><br><span class="line">&quot;description&quot;: &quot;站点描述&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;关键词，作为分组名&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 示例 --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line">&quot;title&quot;: &quot;Akilarの糖果屋&quot;,</span><br><span class="line">&quot;screenshot&quot;: &quot;https://cdn.jsdelivr.net/gh/Akilarlxh/ScreenShot@gh-pages/akilar.top.jpg&quot;,</span><br><span class="line">&quot;url&quot;: &quot;https://akilar.top/&quot;,</span><br><span class="line">&quot;avatar&quot;: &quot;https://akilar.top/img/siteicon/favicon.png&quot;,</span><br><span class="line">&quot;description&quot;: &quot;期待您的光临！&quot;,</span><br><span class="line">&quot;keywords&quot;: &quot;糖果屋&quot;</span><br><span class="line">--&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>新建active标签</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/7522911b.png" alt="新建标签用于控制审核结果"></p><ol start="3"><li>提交示例</li></ol><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/dd334eea.png" alt="填写规范"><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/72d06ae1.png" alt="审核通过"></p><ol start="4"><li>从审核通过到页面读取有一段api的缓存期，稍微有点耐心。</li></ol>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="issues-3"><ol><li>时间轴标签<code>timeline</code>渲染<br>对应的仓库<code>issues</code>链接:</li></ol>  <div class="tag link"><a class="link-card" title="xaoxuu/timeline" href="https://gitee.com/xaoxuu/timeline/issues"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/timeline</p><p class="url">https://gitee.com/xaoxuu/timeline/issues</p></div></a></div>  <div class="issues-api timeline"api="https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&creator=xaoxuu&sort=created&direction=desc&page=1&per_page=100"></div><ol start="2"><li>网站卡片标签<code>sites</code>渲染</li></ol><ul><li><p>gitee仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://gitee.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://gitee.com/xaoxuu/friends/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li><li><p>github仓库示例</p><p>对应的仓库<code>issues</code>链接:</p><div class="tag link"><a class="link-card" title="xaoxuu/friends" href="https://github.com/xaoxuu/friends/issues"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">xaoxuu/friends</p><p class="url">https://github.com/xaoxuu/friends/issues</p></div></a></div><p>渲染后的标签：</p><div class="issues-api sites"api="https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&state=open&page=1&per_page=100&labels=active"></div></li></ul><ol start="3"><li>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：<br>对应的仓库<code>issues</code>链接:</li></ol>  <div class="tag link"><a class="link-card" title="如何参与项目" href="https://github.com/volantis-x/examples/issues"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets@master/logo/256/safari.png"/></div><div class="right"><p class="text">如何参与项目</p><p class="url">https://github.com/volantis-x/examples/issues</p></div></a></div><p>渲染后的标签：</p>  <div class="issues-api sites"api="https://api.github.com/repos/volantis-x/examples/issues?sort=updated&state=open&page=1&per_page=100"group="version:版本：^4.0,版本：^3.0,版本：^2.0"></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="issues-4"><ol><li>时间轴标签<code>timeline</code>渲染</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues timeline | api=https://gitee.com/api/v5/repos/xaoxuu/timeline/issues?state=open&amp;creator=xaoxuu&amp;sort=created&amp;direction=desc&amp;page=1&amp;per<span class="emphasis">_page=100 %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>网站卡片标签<code>sites</code>渲染</li></ol><ul><li><p>gitee仓库示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://gitee.com/api/v5/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>github仓库示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/xaoxuu/friends/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100&amp;labels=active %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>网站卡片标签<code>sites</code>分组渲染<br>这是<code>Volantis</code>主题官网的「示例博客」页面的数据：</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% issues sites | api=https://api.github.com/repos/volantis-x/examples/issues?sort=updated&amp;state=open&amp;page=1&amp;per<span class="emphasis">_page=100 | group=version:版本：^4.0,版本：^3.0,版本：^2.0 %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="诗词标签-poem">诗词标签 poem</h2><div class="tabs" id="poem"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#poem-1">标签语法</button></li><li class="tab"><button type="button" data-href="#poem-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#poem-3">样式预览</button></li><li class="tab"><button type="button" data-href="#poem-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="poem-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem [title],[author] %&#125;</span><br><span class="line">诗词内容</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-2"><ol><li>title：诗词标题</li><li>author：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="poem-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？<br>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="poem-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="阿里图标-icon">阿里图标 icon</h2><div class="tip cogs"><p>本标签的图标需要自己额外引入阿里矢量图标库的样式，具体引入方案请移步：<a href="https://akilar.top/posts/d2ebecef/">Hexo引入阿里矢量图标库</a></p></div><div class="tabs" id="icon示例"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#icon示例-1">标签语法</button></li><li class="tab"><button type="button" data-href="#icon示例-2">参数释义</button></li><li class="tab active"><button type="button" data-href="#icon示例-3">样式预览</button></li><li class="tab"><button type="button" data-href="#icon示例-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="icon示例-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="icon示例-3"><table><thead><tr><th style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg></th><th style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></th></tr></thead><tbody><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></td></tr><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></td></tr><tr><td style="text-align:left"><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg></td><td style="text-align:left"><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="icon示例-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="特效标签wow">特效标签wow</h2><div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p>特效标签的静态资源未添加在本帖的配置内容中（因为多为cdn配置），请移步相关教程完成相关配置：</p><div class="tag link"><a class="link-card" title="使用wowjs给博客添加动画效果" href="https://akilar.top/posts/abab51cf/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/Akilarlxh/Akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">使用wowjs给博客添加动画效果</p><p class="url">https://akilar.top/posts/abab51cf/</p></div></a></div></div><div class="tabs" id="animate"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#animate-1">标签语法</button></li><li class="tab"><button type="button" data-href="#animate-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#animate-3">样式预览</button></li><li class="tab"><button type="button" data-href="#animate-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="animate-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><div class="note warning simple"><p>注意，后面四个虽然是选填项，但是当有跨位选填时，次序不能乱。详见示例。<br>支持嵌套其他外挂标签。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="animate-3"><ol><li><code>flip</code>动画效果。</li></ol>  <div class='wow animate__flip' data-wow-duration='' data-wow-delay='' data-wow-offset=''  data-wow-iteration='' >  <div class="note green icon modern"><i class="note-icon fas fa-fan"></i><p><code>flip</code>动画效果。</p></div></div>2. `zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次。  <div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' >  <div class="note blue icon modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div>3. `slideInRight`动画效果，持续`5s`，延时`5s`。  <div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' >  <div class="note orange icon modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div>4. `heartBeat`动画效果，延时`5s`，重复`10`次。  <div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' >  <div class="note red icon modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="animate-4"><ol><li><code>flip</code>动画效果。</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__flip %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note green &#x27;fas fa-fan&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`flip`动画效果。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次。</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。此处注意不用的参数位置要留空，用逗号间隔。</li></ol>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="进度条-progress">进度条 progress</h2><div class="note info morden simple"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="progress"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#progress-1">标签语法</button></li><li class="tab"><button type="button" data-href="#progress-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#progress-3">样式预览</button></li><li class="tab"><button type="button" data-href="#progress-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="progress-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-2"><p><code>width</code>: 0到100的阿拉伯数字<br><code>color</code>: 颜色，取值有<span class='p red'>red</span>,<span class='p yellow'>yellow</span>,<span class='p green'>green</span>,<span class='p cyan'>cyan</span>,<span class='p blue'>blue</span>,<span class='p gray'>gray</span><br><code>text</code>:进度条上的文字内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="progress-3"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="progress-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="注释-notation">注释 notation</h2><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>label</code>: 注释词汇<br><code>text</code>: 悬停显示的注解内容</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="旋转相册-carousel">旋转相册 carousel</h2><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% carousel [Id] , [name] %&#125;</span><br><span class="line">![](/img/1.jpg)</span><br><span class="line">![](/img/2.jpg)</span><br><span class="line">![](/img/3,jpg)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>Id</code>: 相册唯一ID，用于监测相册鼠标动作。禁止使用中文。同一页内不得出现相同ID的carousel相册。<br><code>name</code>: 相册中间显示的内容，建议用英文单引号包裹</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><div id='gundam' class='carousel'><div id="gundam-drag-container" class="drag-container"><div id="gundam-spin-container" class="spin-container"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110444226.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110525753.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110600751.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110621554.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110637459.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110654150.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110707916.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110719787.png" alt=""><br><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110731118.png" alt=""><p>gaoda</p></div><div id="gundam-carousel-ground" class="carousel-ground"></div></div></div><script type="text/javascript">carouselinit('gundam');</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% carousel gundam,gaoda %&#125;</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110444226.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110508327.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110525753.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110600751.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110621554.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110637459.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110654150.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110707916.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110719787.png)</span><br><span class="line">![](https://cdn.jsdelivr.net/npm/akilar-candyassets/image/20200907110731118.png)</span><br><span class="line">&#123;% endcarousel %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="思维导图-mindmap">思维导图 mindmap</h2><div class="tabs" id="notation"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#notation-1">标签语法</button></li><li class="tab"><button type="button" data-href="#notation-2">参数配置</button></li><li class="tab active"><button type="button" data-href="#notation-3">样式预览</button></li><li class="tab"><button type="button" data-href="#notation-4">示例源码</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="notation-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mindmap [height]%&#125;</span><br><span class="line"><span class="bullet">-</span> [<span class="string">思维导图</span>](<span class="link">https://www.keyiqingxin.cn/</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">前言</span>](<span class="link">https://www.keyiqingxin.cn</span>)</span><br><span class="line"><span class="bullet">  -</span> 使用方法</span><br><span class="line"><span class="bullet">    -</span> 一</span><br><span class="line"><span class="bullet">    -</span> 二</span><br><span class="line"><span class="bullet">    -</span> 三</span><br><span class="line"><span class="bullet">  -</span> 参考资料</span><br><span class="line"><span class="bullet">  -</span> 参数配置</span><br><span class="line"><span class="bullet">  -</span> 样式预览</span><br><span class="line"><span class="bullet">  -</span> 内容</span><br><span class="line">&#123;% endmindmap %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-2"><p><code>height</code>: 思维导图高度，默认300</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="notation-3"><blockquote class="mindmap" style="height: 500px;contenteditable: true;"><ul><li><a href="https://www.keyiqingxin.cn/">思维导图</a><ul><li><a href="https://www.keyiqingxin.cn">前言</a></li><li>使用方法<ul><li>一</li><li>二</li><li>三</li></ul></li><li>参考资料</li><li>参数配置</li><li>样式预览</li><li>内容</li></ul></li></ul></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="notation-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mindmap %&#125;</span><br><span class="line"><span class="bullet">-</span> [<span class="string">思维导图</span>](<span class="link">https://www.keyiqingxin.cn/</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">前言</span>](<span class="link">https://www.keyiqingxin.cn</span>)</span><br><span class="line"><span class="bullet">  -</span> 使用方法</span><br><span class="line"><span class="bullet">    -</span> 一</span><br><span class="line"><span class="bullet">    -</span> 二</span><br><span class="line"><span class="bullet">    -</span> 三</span><br><span class="line"><span class="bullet">  -</span> 参考资料</span><br><span class="line"><span class="bullet">  -</span> 参数配置</span><br><span class="line"><span class="bullet">  -</span> 样式预览</span><br><span class="line"><span class="bullet">  -</span> 内容</span><br><span class="line">&#123;% endmindmap %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写githubcalendar爬虫api</title>
      <link href="700f0d34/"/>
      <url>700f0d34/</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>冰老师的 <code>api</code> 年久失修了，所以重新用 <code>node</code> 写一个 <code>githubcalendar</code> 的爬虫</p><p>可以在冰老师原有的教程修改修改即可使用该 <code>api</code></p></div><div class="tag link"><a class="link-card" title="冰老师教程贴" href="https://zfe.space/post/hexo-githubcalendar.html"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://zfe.space/images/headimage.png"/></div><div class="right"><p class="text">冰老师教程贴</p><p class="url">https://zfe.space/post/hexo-githubcalendar.html</p></div></a></div><div class="tabs" id="github"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#github-1">fork仓库方式</button></li><li class="tab"><button type="button" data-href="#github-2">源码方式</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="github-1"><p><code>fork</code> 如下仓库</p><div class="tag link"><a class="link-card" title="仓库" href="https://github.com/milkdue/github-contribute"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/avatar/69843097.jpg"/></div><div class="right"><p class="text">仓库</p><p class="url">https://github.com/milkdue/github-contribute</p></div></a></div><p>修改 <code>vercel.json</code>，替换 <code>headers</code> 的跨域设置为自己的域名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;https://blog.keyiqingxin.cn&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;content-type&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class='nota' data-nota='vercel部署现在需要绑定自己的域名'>vercel</span> 部署此 <code>api</code></p><p>网页访问：vercel访问域名/api?name=github名字</p><p>接下来就是替换 <code>api</code> 了，可以看到该 <code>api</code> 和 冰老师提供的 <code>api</code> 有所差异，所以使用的话，需要修改一下 <code>npm包中的内容</code><br>1. 首先得安装 <code>hexo-githubcalendar</code> 插件包 <code>npm i hexo-githubcalendar</code><br>2. 在 <code>node_modules</code> 中找到该包，修改以下代码</p><pre><code>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GithubCalendarConfig</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">-    <span class="keyword">var</span> git_githubapiurl =<span class="string">&quot;$&#123;github_api&#125;?$&#123;github_user&#125;&quot;</span></span><br><span class="line">+    <span class="keyword">var</span> git_githubapiurl =<span class="string">&quot;$&#123;github_api&#125;?name=$&#123;github_user&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> git_color =$&#123;github_color&#125;;</span><br><span class="line">    <span class="keyword">var</span> git_user =<span class="string">&quot;$&#123;github_user&#125;&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> parent_div_git = $&#123;get_layout&#125;;</span><br><span class="line">    <span class="keyword">var</span> git_div_html = <span class="string">&#x27;$&#123;githubcalendar_html&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(parent_div_git &amp;&amp; location.pathname ==<span class="string">&#x27;$&#123;calendar_enable_page&#125;&#x27;</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;已挂载github calendar&#x27;</span>)</span><br><span class="line">        <span class="comment">// parent_div_git.innerHTML=git_div_html+parent_div_git.innerHTML // 无报错，但不影响使用(支持pjax跳转)</span></span><br><span class="line">        parent_div_git.insertAdjacentHTML(<span class="string">&quot;afterbegin&quot;</span>,git_div_html) <span class="comment">// 有报错，但不影响使用(支持pjax跳转)</span></span><br><span class="line">    &#125;;</span><br><span class="line">    GithubCalendar(git_githubapiurl,git_color,git_user)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>($&#123;get_layout&#125;)&#123;</span><br><span class="line">    GithubCalendarConfig()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="github-2"><ol><li><p>初始化 <code>npm</code> 包</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>安装依赖</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cheerio -S</span><br></pre></td></tr></table></figure></li><li><p>目录结构</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─package-lock.json</span><br><span class="line">├─package.json</span><br><span class="line">├─vercel.json</span><br><span class="line">├─api</span><br><span class="line">|  └index.js</span><br></pre></td></tr></table></figure></li><li><p><code>index.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* @Author: 可以清心</span></span><br><span class="line"><span class="comment">* @Description: </span></span><br><span class="line"><span class="comment">* @Date: 2023-01-21 21:43:31</span></span><br><span class="line"><span class="comment">* @LastEditTime: 2023-01-22 11:26:23</span></span><br><span class="line"><span class="comment">* @FilePath: \github-contribute\api\index.js</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;  </span><br><span class="line">    <span class="keyword">const</span> NAME = req.query.name;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    https.get(<span class="string">`https://github.com/<span class="subst">$&#123;NAME&#125;</span>`</span>, <span class="function"><span class="keyword">function</span>(<span class="params">resp</span>)</span>&#123;</span><br><span class="line">        resp.on(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>)</span>&#123;</span><br><span class="line">            html += chunk;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        resp.on(<span class="string">&quot;end&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> result = [];</span><br><span class="line">            <span class="keyword">let</span> total = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> $ = cheerio.load(html);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            $(<span class="string">&quot;.js-yearly-contributions &gt; .position-relative .js-calendar-graph &gt; .js-calendar-graph-svg &gt; g &gt; g&quot;</span>).each(<span class="function">(<span class="params">index, g</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> item = [];</span><br><span class="line">                $(g).find(<span class="string">&quot;rect&quot;</span>).each(<span class="function">(<span class="params">index, rect</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> $r = $(rect);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">const</span> date = $r.attr(<span class="string">&quot;data-date&quot;</span>);</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">const</span> text = $r.text();</span><br><span class="line">                    <span class="keyword">let</span> count = <span class="built_in">parseInt</span>(text);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">isNaN</span>(count))&#123;</span><br><span class="line">                        total += count;</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        count = <span class="number">0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    item.push(&#123;</span><br><span class="line">                        date,</span><br><span class="line">                        count</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                result.push(item);</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            res.status(<span class="number">200</span>).json(&#123;</span><br><span class="line">                total,</span><br><span class="line">                contributions: result</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        resp.on(<span class="string">&quot;error&quot;</span>, <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">            res.status(<span class="number">500</span>).json(&#123;</span><br><span class="line">                code: <span class="number">500</span>,</span><br><span class="line">                message: <span class="string">&quot;请求超时&quot;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>vercel.json</p><ul><li>替换为自己的博客域名</li></ul> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;source&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;headers&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;https://blog.keyiqingxin.cn&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;content-type&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;DELETE,PUT,POST,GET,OPTIONS&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>上传至 <code>github</code>，<code>vercel</code> 拉取部署</p></li><li><p>浅浅修改插件 <code>hexo-githubcalendar</code> 的源码（步骤见 <code>tab</code> fork源码方式）</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> vercel </tag>
            
            <tag> node </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react native0.67版本环境搭建</title>
      <link href="5307bd00/"/>
      <url>5307bd00/</url>
      
        <content type="html"><![CDATA[<div class="tip cogs"><p>记录 <code>react native</code> 环境搭建过程，<code>rn</code> 迭代速度太快，本文记录 <code>0.67</code> 版本 <code>rn</code> 搭建 <code>android</code> 过程所遇到的坑，本人很多软件卸了再装，装了再卸，😭<br>下方附上 <code>react native</code> 官方文档</p></div><div class="tag link"><a class="link-card" title="react native官方文档" href="https://reactnative.cn/docs/getting-started"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://reactnative.cn/img/header_logo.svg"/></div><div class="right"><p class="text">react native官方文档</p><p class="url">https://reactnative.cn/docs/getting-started</p></div></a></div><h2 id="安装依赖">安装依赖</h2><ol><li><code>node</code>，注意 <code>node</code> 的版本应该大于 <code>12</code> (傻瓜式安装) <div class="btns rounded center grid5">            <a class="button" href='http://nodejs.cn/download' title='node'><i class='fas fa-download'></i>node</a>              </div></li><li><code>jdk</code>，<code>0.67</code> 版本需要的 <code>jdk</code> 版本是 <code>11</code> 版本，查看 <code>jdk</code> 版本 <code>javac -version</code>，低于 <code>0.67</code> 版本的 <code>rn</code> 需要 <code>jdk1.8</code> 版本 (安装后配置环境变量，具体安装教程已经有很多了，这里不多做介绍) <div class="btns rounded center grid5">            <a class="button" href='https://adoptopenjdk.net' title='jdk'><i class='fas fa-download'></i>jdk</a>              </div></li><li>android studio <div class="btns rounded center grid5">            <a class="button" href='https://developer.android.google.cn/studio' title='android studio'><i class='fas fa-download'></i>android studio</a>              </div></li><li>python2(之前需要安装py，建议安装)</li></ol><h2 id="安装-Android-Studio">安装 <code>Android Studio</code></h2><ol><li><code>Android Studio</code> 默认安装最新版本的 <code>sdk</code>，<code>rn</code> 需要 <code>Android 10 (Q)</code>，如果你的真机 <code>android</code> 版本小于 <code>10</code>，你也可以下载其他版本的 <code>sdk</code></li><li>安装以后，打开 <code>android studio</code> 界面中找到 <code>sdk manager</code>(如果没找到也可以到 <code>setting</code> 中搜索 <code>sdk</code> 找到)</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/5307bd00/20220318-152727-0866.png" alt="sdk" style="width:600px;"/></div><span class="image-caption">sdk</span></div><ol start="3"><li>点击 <code>SDK Platforms</code>，勾选 <code>Show Package Details</code> 确保选中 <code>Android 10.0(Q)</code> 下的 <code>Android SDK Platform 29</code> 和 <code>Intel x86 Atom_64 System Image</code></li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/5307bd00/20220318-153029-0484.png" alt="sdk" style="width:600px;"/></div><span class="image-caption">sdk</span></div><ol start="4"><li>点击 <code>SDK Tools</code> 选项卡，同样勾中右下角的 <code>Show Package Details</code> 展开 <code>Android SDK Build-Tools</code> 选项，确保选中了 <code>React Native</code> 所必须的 <code>29.0.2</code> 版本，你可以同时安装多个其他版本</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/5307bd00/20220318-151430-0103.png" alt="sdk" style="width:600px;"/></div><span class="image-caption">sdk</span></div><ol start="5"><li>还是在 <code>SDK Tools</code> 选项卡，点击 <code>NDK (Side by side)</code>，同样勾中右下角的 <code>Show Package Details</code>，选择 <code>20.1.5948944</code> 版本进行安装</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/5307bd00/20220318-153631-0153.png" alt="sdk" style="width:600px;"/></div><span class="image-caption">sdk</span></div><ol start="6"><li>点击 <code>Apply</code> 下载安装这些组件</li></ol><h2 id="配置环境变量">配置环境变量</h2><ol><li><code>React Native</code> 需要通过环境变量来知道 <code>Android SDK</code> 装在什么位置，从而正常编译</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/5307bd00/20220318-173403-0944.png" alt="sdk安装路径" style="width:600px;"/></div><span class="image-caption">sdk安装路径</span></div><ol start="2"><li>打开控制面板 -&gt; 系统和安全 -&gt; 系统 -&gt; 高级系统设置 -&gt; 高级 -&gt; 环境变量 -&gt; 新建，创建一个名为 <code>ANDROID_HOME</code> 的环境变量指向 <code>Android SDK</code> 所在的目录</li><li>添加工具目录到环境变量 <code>path</code>(注意一定要点编辑，否则会冲掉之前的目录)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%ANDROID_HOME%\platform-tools</span><br><span class="line">%ANDROID_HOME%\emulator</span><br><span class="line">%ANDROID_HOME%\tools</span><br><span class="line">%ANDROID_HOME%\tools\bin</span><br></pre></td></tr></table></figure><h2 id="创建项目">创建项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init MyApp</span><br></pre></td></tr></table></figure><h2 id="连接手机">连接手机</h2><ol><li>打开手机的开发者选项</li><li>打开手机的 <code>usb</code> 调试功能</li><li>检测是否正确连接到设备(每次只应当连接一个设备)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List of devices attached</span><br><span class="line">emulator-5554 offline   # Google emulator</span><br><span class="line">14ed2fcc device         # Physical device</span><br></pre></td></tr></table></figure><h2 id="启动项目">启动项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn android</span><br><span class="line"># 或者</span><br><span class="line">yarn react-native run-android</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> rn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表</title>
      <link href="71c610d3/"/>
      <url>71c610d3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c15609ec963e203d7a3b374ca13299cb8bacefe0404b44aa42fa53bce53f7b58"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码后阅读</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS构造器与new操作符</title>
      <link href="787f2ffe/"/>
      <url>787f2ffe/</url>
      
        <content type="html"><![CDATA[<div class="tip "><p><code>{}</code> 语法可以创建一个对象，但是通常我们需要创建一些类似的对象，这个时候通常使用构造函数和 <code>new</code> 操作符来实现</p></div><h2 id="构造函数">构造函数</h2><div class="note purple icon flat"><i class="note-icon fa fa-thermometer-full"></i><p>构造函数也是常规函数，但是约定构造函数以大写字母开头，并且只能通过 <code>new</code> 关键字来执行</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name, age, six</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 隐藏的操作</span></span><br><span class="line">    <span class="comment">// let this = &#123;&#125;;</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.six = six;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;吃吃吃&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 隐藏的操作</span></span><br><span class="line">    <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dog.prototype.color = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line">Dog.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog(<span class="string">&#x27;苏西&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;雄性&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 苏西</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.age); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.six); <span class="comment">// 雄性</span></span><br><span class="line"><span class="built_in">console</span>.log(dog.color); <span class="comment">// white</span></span><br><span class="line">dog.say(); <span class="comment">// 苏西</span></span><br></pre></td></tr></table></figure><h2 id="new-操作符">new 操作符</h2><ol><li>当一个函数使用 <code>new</code> 操作符创建对象时，相当于以下几个操作<ul><li>创建一个空对象并分配给 <code>this</code></li><li>函数体执行</li><li>返回 <code>this</code></li></ul></li><li>构造函数的目的在于实现对一类事物的创建复用代码</li></ol><h2 id="构造器的-return">构造器的 return</h2><ol><li>通常来说，构造器没有 <code>return</code> 语句，构造器自动将属性写入 <code>this</code> 并作为结果返回</li><li>如果一个构造器有 <code>return</code> 语句，它将遵循以下规则<ul><li><code>return</code> 一个对象，则返回这个对象</li><li><code>return</code> 一个原始类型，忽略掉并返回 <code>this</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;苏西&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">name</span>: <span class="string">&#x27;佩奇&#x27;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog = <span class="keyword">new</span> Dog;</span><br><span class="line"><span class="built_in">console</span>.log(dog.name); <span class="comment">// 佩奇</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;苏西&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> Cat;</span><br><span class="line"><span class="built_in">console</span>.log(cat.name); <span class="comment">// 苏西</span></span><br></pre></td></tr></table></figure><div class="tip "><p>构造器没有参数，可以省略其括号，<code>new Dog()</code> 等价于 <code>new Dog</code></p></div><h2 id="手动实现-new-构造符">手动实现 new 构造符</h2><div class="tabs" id="new"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#new-1">初步实现</button></li><li class="tab"><button type="button" data-href="#new-2">进阶实现</button></li><li class="tab"><button type="button" data-href="#new-3">最终版</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="new-1"><ol><li>创建对象</li><li>对象原型指向构造函数原型</li><li>执行函数</li><li>返回该对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> object = &#123;&#125;;</span><br><span class="line">    <span class="comment">// arguments不是数组，类数组对象，但可以使用并且shift改变原类数组对象，剔除掉第一个参数（函数）</span></span><br><span class="line">    <span class="keyword">let</span> <span class="title">constructor</span> = [].<span class="title">shift</span>.<span class="title">call</span>(<span class="params"><span class="built_in">arguments</span></span>);</span><br><span class="line">    <span class="comment">// 只有函数拥有prototype, 所有对象拥有__proto__</span></span><br><span class="line">    object.__proto__ = consturct.prototype;</span><br><span class="line">    <span class="title">constructor</span>.<span class="title">apply</span>(<span class="params">object, <span class="built_in">arguments</span></span>);</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="new-2"><ol><li>创建对象</li><li>对象原型指向构造函数原型</li><li>执行函数</li><li>判断返回值是否为对象</li><li>是返回该返回值，否返回该对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> object = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="title">constructor</span> = [].<span class="title">shift</span>.<span class="title">call</span>(<span class="params"><span class="built_in">arguments</span></span>);</span><br><span class="line">    object.__proto__ = <span class="title">constructor</span>.<span class="title">prototype</span>;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="title">constructor</span>.<span class="title">apply</span>(<span class="params">object, <span class="built_in">arguments</span></span>);</span><br><span class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// result是对象并且不是null</span></span><br><span class="line">    <span class="keyword">return</span> (type === <span class="string">&#x27;object&#x27;</span> || type === <span class="string">&#x27;function&#x27;</span>) &amp;&amp; result ? result : object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="new-3"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">F, ...args</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 指定原型创建对象</span></span><br><span class="line">    <span class="keyword">let</span> object = <span class="built_in">Object</span>.create(F.prototype);</span><br><span class="line">    <span class="keyword">let</span> result = F.apply(object, args);</span><br><span class="line">    <span class="keyword">let</span> type = <span class="keyword">typeof</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result &amp;&amp; (type === <span class="string">&#x27;object&#x27;</span> || type === <span class="string">&#x27;function&#x27;</span>) ? result : object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">New</span>(<span class="params">F: () =&gt; <span class="built_in">any</span>, ...args: <span class="built_in">any</span></span>): <span class="title">any</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">object</span>: <span class="built_in">any</span> = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">    <span class="keyword">let</span> result: <span class="built_in">any</span> = F.apply(<span class="built_in">object</span>, args);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">type</span>: <span class="built_in">string</span> = <span class="keyword">typeof</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result &amp;&amp; (<span class="keyword">type</span> === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">type</span> === <span class="string">&#x27;function&#x27;</span>) ? result : <span class="built_in">object</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="构造器模式检测">构造器模式检测</h2><div class="note blue icon disabled"><i class="note-icon fa fa-tree"></i><p>在一个函数内部可以使用 <code>new.target</code> 属性来检测是否使用 <code>new</code> 操作符进行了调用，对于使用了 <code>new</code> 关键字，该属性是该函数，否则为 <code>undefined</code></p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span>.target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Dog(); <span class="comment">// function Dog()&#123;...&#125;</span></span><br><span class="line">Dog(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><div class="note default icon flat"><i class="note-icon fa fa-bicycle"></i><p>可以使用 <code>new.target</code> 使常规模式调用函数和使用 <code>new</code> 操作符有相同的行为</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">new</span>.target)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dog</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">new</span>.target)&#123;</span><br><span class="line">        <span class="comment">// arguments.callee() 调用函数本身</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">arguments</span>.callee(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js类型转换</title>
      <link href="92aca09d/"/>
      <url>92aca09d/</url>
      
        <content type="html"><![CDATA[<h2 id="类型转换">类型转换</h2><div class="tip "><p>大多数情况下，运算符和函数会自动将赋给它们的值转换为正确的类型<br>比如，<code>alert</code> 自动将值转换为字符串进行显示<br>在特殊情况下，我们需要将值显式的转换为所期望的类型</p></div><h2 id="字符串转换">字符串转换</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">14</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line">num = <span class="built_in">String</span>(num); <span class="comment">// 14 - 字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><div class="note purple icon flat"><i class="note-icon fa fa-thermometer-full"></i><p>字符串的转换非常明显，false -&gt; ‘false’ null -&gt; ‘null’</p></div><h2 id="数字类型转换">数字类型转换</h2><p>在算术表达式中，会自动进行 <code>number</code> 类型转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;6&#x27;</span> / <span class="string">&#x27;2&#x27;</span>); <span class="comment">// 3 string -&gt; number</span></span><br><span class="line"><span class="comment">// 当然特殊的 + 法时表达式中有字符串是不会转换的</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;33&quot;</span> + <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 332</span></span><br></pre></td></tr></table></figure><p>在 <code>js</code> 中可以使用 <code>Number(value)</code> 显式的将这个 <code>value</code> 转换为 <code>number</code> 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> string = <span class="string">&#x27;32&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> string); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = <span class="built_in">Number</span>(string);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> num); <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果字符串不是一个有效的数字，转换结果是 NaN，注意 NaN 的类型也是 number，仅仅表示不是一个有效的数字</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="literal">NaN</span>); <span class="comment">// number</span></span><br></pre></td></tr></table></figure><p>number转换的规则</p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">规则</th></tr></thead><tbody><tr><td style="text-align:center"><code>undefined</code></td><td style="text-align:center"><code>NaN</code></td></tr><tr><td style="text-align:center"><code>null</code></td><td style="text-align:center"><code>0</code></td></tr><tr><td style="text-align:center"><code>true</code>和<code>false</code></td><td style="text-align:center"><code>1</code> and <code>0</code></td></tr><tr><td style="text-align:center"><code>string</code></td><td style="text-align:center">去掉首尾空格后的纯数字字符串中含有数字，如果剩余字符串为空，则转换结果为<code>0</code>，否则，将会聪剩余字符串中读取数字，类型转换出现错误后，返回 <code>NaN</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&quot;            000&quot;</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&quot;11111111111*&quot;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">true</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">false</span>)); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意虽然 null == undefined 但是 Number(undefined) = NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>)); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="布尔类型转换">布尔类型转换</h2><p>布尔类型转换通过 <code>Boolean()</code> 将其他类型转换为布尔类型，布尔类型转换规则如下：</p><ol><li><code>null</code>、<code>undefined</code>、<code>0</code>、<code>&quot;&quot;</code>、<code>NaN</code>，转换为 <code>false</code></li><li>其他转换为 <code>true</code></li><li>注意 <code>&quot;0&quot;</code> 和 <code>&quot; &quot;</code> 也转换为 <code>true</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly分类页面魔改</title>
      <link href="679887a0/"/>
      <url>679887a0/</url>
      
        <content type="html"><![CDATA[<div class="tip "><p>觉得分类页面不是很好看，打算魔改一下分页页面，恰好店长有写过首页分类的磁贴插件，于是打算利用店长的<span class='nota' data-nota='当然也可以使用其他的配置'>插件中的配置</span>来进行魔改一番(具体效果可查看分类页面)，下面记录一下魔改步骤~</p></div><h2 id="修改源码">修改源码</h2><ol><li><p>修改 <code>[Blogroot]\themes\butterfly\layout\includes\page\categories.pug</code></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.category-lists</span><br><span class="line">- .category-title.is-center&#x3D; _p(&#39;page.category&#39;)</span><br><span class="line">-   |  - </span><br><span class="line">-   span.category-amount&#x3D; site.categories.length</span><br><span class="line">- div!&#x3D; list_categories()</span><br><span class="line">  div!&#x3D; list_category()</span><br></pre></td></tr></table></figure></li><li><p>新建 <code>[Blogroot]\themes\butterfly\scripts\helpers\category.js</code></p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"></span><br><span class="line">hexo.extend.helper.register(<span class="string">&#x27;list_category&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">categories, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!options &amp;&amp; (!categories || !<span class="built_in">Object</span>.prototype.hasOwnProperty.call(categories, <span class="string">&#x27;length&#x27;</span>))) &#123;</span><br><span class="line">        options = categories;</span><br><span class="line">        categories = <span class="built_in">this</span>.site.categories;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!categories || !categories.length) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; style = <span class="string">&#x27;list&#x27;</span>, transform, separator = <span class="string">&#x27;, &#x27;</span>, suffix = <span class="string">&#x27;&#x27;</span> &#125; = options;</span><br><span class="line">    <span class="keyword">const</span> showCount = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(options, <span class="string">&#x27;show_count&#x27;</span>) ? options.show_count : <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">const</span> className = options.class || <span class="string">&#x27;category&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> depth = options.depth ? <span class="built_in">parseInt</span>(options.depth, <span class="number">10</span>) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> orderby = options.orderby || <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> order = options.order || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> showCurrent = options.show_current || <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> childrenIndicator = <span class="built_in">Object</span>.prototype.hasOwnProperty.call(options, <span class="string">&#x27;children_indicator&#x27;</span>) ? options.children_indicator : <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> enable = <span class="literal">false</span>, cover = [], descr = [];</span><br><span class="line">    <span class="keyword">let</span> categoryConfig = &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span>(hexo.theme.config.categoryBar)&#123;</span><br><span class="line">        categoryConfig = hexo.theme.config.categoryBar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hexo.theme.config.category)&#123;</span><br><span class="line">        categoryConfig = hexo.theme.config.category;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    enable = categoryConfig.enable;</span><br><span class="line">    cover = categoryConfig.cover;</span><br><span class="line">    descr = categoryConfig.descr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> prepareQuery = <span class="function"><span class="params">parent</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> query = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">            query.parent = parent;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            query.parent = &#123;<span class="attr">$exists</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> categories.find(query).sort(orderby, order).filter(<span class="function"><span class="params">cat</span> =&gt;</span> cat.length);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hierarchicalList = <span class="function">(<span class="params">level, parent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        prepareQuery(parent).forEach(<span class="function">(<span class="params">cat, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> child;</span><br><span class="line">            <span class="keyword">if</span> (!depth || level + <span class="number">1</span> &lt; depth) &#123;</span><br><span class="line">                child = hierarchicalList(level + <span class="number">1</span>, cat._id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> isCurrent = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (showCurrent &amp;&amp; <span class="built_in">this</span>.page) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; cat.length; j++) &#123;</span><br><span class="line">                    <span class="keyword">const</span> post = cat.posts.data[j];</span><br><span class="line">                    <span class="keyword">if</span> (post &amp;&amp; post._id === <span class="built_in">this</span>.page._id) &#123;</span><br><span class="line">                        isCurrent = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// special case: category page</span></span><br><span class="line">                isCurrent = isCurrent || (<span class="built_in">this</span>.page.base &amp;&amp; <span class="built_in">this</span>.page.base.startsWith(cat.path));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> additionalClassName = child &amp;&amp; childrenIndicator ? <span class="string">` <span class="subst">$&#123;childrenIndicator&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">`&lt;li class=&quot;<span class="subst">$&#123;className&#125;</span>-list-item<span class="subst">$&#123;additionalClassName&#125;</span>&quot;&gt;`</span>;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">`&lt;a class=&quot;<span class="subst">$&#123;className&#125;</span>-list-link<span class="subst">$&#123;isCurrent ? <span class="string">&#x27; current&#x27;</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>&quot; href=&quot;/<span class="subst">$&#123;cat.path&#125;</span><span class="subst">$&#123;suffix&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">            result += transform ? transform(cat.name) : cat.name;</span><br><span class="line">            result += <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (showCount) &#123;</span><br><span class="line">                result += <span class="string">`&lt;span class=&quot;<span class="subst">$&#123;className&#125;</span>-list-count&quot;&gt;<span class="subst">$&#123;cat.length&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (child) &#123;</span><br><span class="line">                result += <span class="string">`&lt;ul class=&quot;<span class="subst">$&#123;className&#125;</span>-list-child&quot;&gt;<span class="subst">$&#123;child&#125;</span>&lt;/ul&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> flatList = <span class="function">(<span class="params">level, parent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        prepareQuery(parent).forEach(<span class="function">(<span class="params">cat, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (i || level) result += separator;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">`&lt;a class=&quot;<span class="subst">$&#123;className&#125;</span>-link&quot; href=&quot;/<span class="subst">$&#123;cat.path&#125;</span><span class="subst">$&#123;suffix&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">            result += transform ? transform(cat.name) : cat.name;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (showCount) &#123;</span><br><span class="line">                result += <span class="string">`&lt;span class=&quot;<span class="subst">$&#123;className&#125;</span>-count&quot;&gt;<span class="subst">$&#123;cat.length&#125;</span>&lt;/span&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            result += <span class="string">&#x27;&lt;/a&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!depth || level + <span class="number">1</span> &lt; depth) &#123;</span><br><span class="line">                result += flatList(level + <span class="number">1</span>, cat._id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> barList = <span class="function">(<span class="params">level, parent</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> picture = cover.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> item.slice(<span class="number">5</span>, -<span class="number">2</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        prepareQuery(parent).forEach(<span class="function">(<span class="params">cat, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(i || level) result += separator;</span><br><span class="line">            </span><br><span class="line">            result += <span class="string">&#x27;&lt;figure class=&quot;effect-apollo&quot;&gt;&#x27;</span>;</span><br><span class="line">            result += <span class="string">`&lt;img src=&quot;<span class="subst">$&#123;picture[i]&#125;</span>&quot; alt=&quot;<span class="subst">$&#123;descr[i]&#125;</span>&quot;&gt;&lt;figcaption&gt;`</span>;</span><br><span class="line">            result += <span class="string">&#x27;&lt;h3&gt;&#x27;</span>;</span><br><span class="line">            result += transform ? transform(cat.name) : cat.name;</span><br><span class="line">            result += <span class="string">&#x27;&lt;/h3&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (showCount) &#123;</span><br><span class="line">                result += <span class="string">`&lt;p&gt;<span class="subst">$&#123;cat.length&#125;</span>&lt;/p&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result += <span class="string">`&lt;a class=&quot;<span class="subst">$&#123;className&#125;</span>-list-link&quot; href=&quot;/<span class="subst">$&#123;cat.path&#125;</span><span class="subst">$&#123;suffix&#125;</span>&quot;&gt;<span class="subst">$&#123;cat.name&#125;</span>&lt;/a&gt;`</span>;</span><br><span class="line">            result += <span class="string">&#x27;&lt;/figcaption&gt;&lt;/figure&gt;&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(enable)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;div class=&quot;category_card_wrap&quot;&gt;<span class="subst">$&#123;barList(<span class="number">0</span>)&#125;</span>&lt;/div&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (style === <span class="string">&#x27;list&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`&lt;ul class=&quot;<span class="subst">$&#123;className&#125;</span>-list&quot;&gt;<span class="subst">$&#123;hierarchicalList(<span class="number">0</span>)&#125;</span>&lt;/ul&gt;`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flatList(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>新建 <code>[Blogroot\themes\butterfly\source\css\costom.css]</code></p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.category_card_wrap</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">1%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">border-right</span>: <span class="number">4px</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: right;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: opacity <span class="number">0.35s</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">0.35s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition-delay</span>: <span class="number">0.1s</span>;</span><br><span class="line">  <span class="attribute">transition-delay</span>: <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">8em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.25em</span>;</span><br><span class="line">    -webkit-<span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">backface-visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span>,</span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">figcaption</span> &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">word-spacing</span>: -<span class="number">0.15em</span>;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span> <span class="selector-tag">h3</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.95</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: opacity <span class="number">0.35s</span>, -webkit-transform <span class="number">0.35s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: opacity <span class="number">0.35s</span>, transform <span class="number">0.35s</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.05</span>,<span class="number">1.05</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.05</span>,<span class="number">1.05</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span> <span class="selector-tag">figcaption</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    -webkit-<span class="attribute">transition</span>: -webkit-transform <span class="number">0.6s</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform <span class="number">0.6s</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.9</span>,<span class="number">1.4</span>,<span class="number">1</span>) <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,-<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.9</span>,<span class="number">1.4</span>,<span class="number">1</span>) <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,-<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span> <span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.6</span>;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.category_card_wrap</span> <span class="selector-tag">figure</span><span class="selector-class">.effect-apollo</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">figcaption</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    -webkit-<span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.9</span>,<span class="number">1.4</span>,<span class="number">1</span>) <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale3d</span>(<span class="number">1.9</span>,<span class="number">1.4</span>,<span class="number">1</span>) <span class="built_in">rotate3d</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">45deg</span>) <span class="built_in">translate3d</span>(<span class="number">0</span>,<span class="number">100%</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>_config.butterfly.yml.yml</code> 的 <code>inject</code> 中引用 <code>css</code></p></li><li><p>如果使用店长的插件，不需要做任何配置即可在分类页面中看到不一样的分类，如果没有使用店长的插件，可以在 <code>_config.butterfly.yml.yml</code> 配置以下内容</p> <figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">category:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 控制分类魔改是否开启，false，表示使用原分类样式</span></span><br><span class="line">  <span class="attr">descr:</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">作品集</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">听力练习</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">学习&amp;教程</span></span><br><span class="line">  <span class="attr">cover:</span> <span class="comment"># 分类图片</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">url(&#x27;https://cdn.jsdelivr.net/gh/milkdue/cdn@2.9/img/girl2.jpg&#x27;)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">url(&#x27;https://cdn.jsdelivr.net/gh/milkdue/cdn@2.9/img/three.jpg&#x27;)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">url(&#x27;https://cdn.jsdelivr.net/gh/milkdue/cdn@3.0/img/four1.jpg&#x27;)</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网格布局</title>
      <link href="df8718c1/"/>
      <url>df8718c1/</url>
      
        <content type="html"><![CDATA[<h2 id="网格布局-grid">网格布局(<code>grid</code>)</h2><div class="tip home"><p>网格布局是一套二维页面布局系统，以下内容来自<a href="http://topic.42du.cn/grid">学习css网格布局</a></p></div><h2 id="启用网格">启用网格</h2><p><code>display</code> 属性设为 <code>grid</code> 或 <code>inline-grid</code> 就创建了一个网格容器，容器的所有<u>直接子节点</u>自动成为网格项目</p><ol><li><code>display: grid</code> 网格项目按行排列，网格项目占用整个容器的宽度</li><li><code>display: inline-grid</code> 网格项目宽度由自身宽度决定</li><li><code>display: subgrid</code> 继承其父级网格容器的行列大小，它是其父级网格容器的一个网格项目</li></ol><iframe id="cp_embed_abwzgaL" src="//codepen.io/milkdue/embed/abwzgaL?height=350&theme-id=dark&slug-hash=abwzgaL&default-tab=result&editable=true" scrolling="no" frameborder="no" height="350" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><div class="tip "><p><code>column、float、clear</code> 和 <code>vertical-align</code> 对网格容器没有效果</p></div><h2 id="网格容器的一些属性">网格容器的一些属性</h2><h3 id="grid-template-columns-和-grid-template-rows"><code>grid-template-columns</code> 和 <code>grid-template-rows</code></h3><div class="note purple icon flat"><i class="note-icon far fa-hand-scissors"></i><p>属性 <code>grid-template-columns</code> 和 <code>grid-template-rows</code> 用来显式定义网格，分为行轨道和列轨道</p></div><p><code>grid-template-rows</code> 定义行尺寸，即轨道尺寸，轨道尺寸可以是任何非负的长度值(<code>px、%、em</code> 等)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>网格布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .container&#123;</span><br><span class="line"><span class="css">            <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="css">            grid-template-rows: <span class="number">50px</span> <span class="number">100px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .item &#123;</span><br><span class="line"><span class="css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-radius</span>: .<span class="number">2rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: .<span class="number">8em</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">min-height</span>: <span class="number">3rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">padding</span>: .<span class="number">75rem</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">color</span>: <span class="number">#f0f0f3</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: <span class="number">#e91e63</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">font-family</span>: -apple-system,BlinkMacSystemFont,.SFNSDisplay-Regular,Roboto,Helvetica,Arial,sans-serif;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网格项目1的轨道是50px --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网格项目2的轨道是100px --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网格项目3和4的轨道取决于本身的高度 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-093540-0990.jpg" alt="轨道尺寸"/></div><span class="image-caption">轨道尺寸</span></div><p><code>grid-template-columns</code> 用于定义列的尺寸，例如 <code>grid-template-columns: 1fr 1fr 2fr;</code> <code>fr</code> 表示按比列划分空间，前两列宽度相同，是最后一列宽度的一半，<code>fr</code> 可以和其它单位混用，混用时，<code>fr</code> 的计算基于其它单位分配后的剩余空间</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">3rem</span> <span class="number">25%</span> <span class="number">1</span>fr <span class="number">2</span>fr;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-103214-0410.jpg" alt="fr和其它尺寸混用"/></div><span class="image-caption">fr和其它尺寸混用</span></div><iframe id="cp_embed_abwzeqQ" src="//codepen.io/milkdue/embed/abwzeqQ?height=300&theme-id=dark&slug-hash=abwzeqQ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="轨道最小最大尺寸设置">轨道最小最大尺寸设置</h3><p>函数 <code>minmax()</code> 用来定义轨道最小/最大边界值，<code>minmax</code> 接收两个参数，第一个参数表示最小轨道尺寸，第二个参数表示最大轨道尺寸，长度值可以是 <code>auto</code>，表示轨道尺寸可以根据内容大小进行伸长或收缩</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="comment">/* 轨道最小100px，即最小100px */</span></span><br><span class="line">    grid-template-rows: <span class="built_in">minmax</span>(<span class="number">100px</span>, auto);</span><br><span class="line">    <span class="comment">/* 第一列轨道最大50%，不能超过整个容器的50% */</span></span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">minmax</span>(auto, <span class="number">50%</span>) <span class="number">1</span>fr <span class="number">3em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-100621-0030.jpg" alt="轨道最小最大尺寸设置"/></div><span class="image-caption">轨道最小最大尺寸设置</span></div><h3 id="重复的网格轨道">重复的网格轨道</h3><p>使用函数 <code>repeat()</code> 用来定义重复的网格轨道，特别是有多个相同轨道的项目，函数 <code>repeat</code> 接收两个参数：第一个参数表示重复的次数，第二个参数表示轨道尺寸</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">100px</span>);</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-103322-0051.jpg" alt="repeat函数"/></div><span class="image-caption">repeat函数</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grid-template-<span class="attribute">columns</span>: <span class="number">30px</span> <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr) <span class="number">30px</span>;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-100529-0701.jpg" alt="repeat函数"/></div><span class="image-caption">repeat函数</span></div><h3 id="定义网格间隙">定义网格间隙</h3><p>属性 <code>grid-column-gap</code> 和 <code>grid-row-gap</code> 定义网格间隙，网格间隙只创建在行列之间，项目和边界之间无间隙，间隙尺寸可以是任何非负的长度值</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-row-gap: <span class="number">20px</span>;</span><br><span class="line">    grid-<span class="attribute">column-gap</span>: <span class="number">5rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-105639-0516.jpg" alt="网格间隙"/></div><span class="image-caption">网格间隙</span></div><p>属性 <code>grid-gap</code> 是 <code>grid-row-gap</code> 和 <code>grid-column-gap</code> 的简写形式，第一个值表示行间隙，第二个值表示列间隙，如果只给定一个值，即表示行间隙也表示列间隙</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-gap: <span class="number">100px</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-130830-0383.jpg" alt="网格间隙"/></div><span class="image-caption">网格间隙</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-gap: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-135632-0660.jpg" alt="网格间隙"/></div><span class="image-caption">网格间隙</span></div><h3 id="网格线命名">网格线命名</h3><p>当利用属性 <code>grid-template-rows</code> 和 <code>grid-template-columns</code> 定义网格的时候，可以同时定义网格线的名称，网格线名称可以用来定位网格项目</p><p>为避免混淆，网格线名称应避免使用规范中的关键字(<code>span</code> 等)</p><p>定义网格线名称的方法是要将其放在中括号内([name-of-line])，并和网格轨道相对应</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: [row-<span class="number">1</span>-start] <span class="number">1</span>fr [row-<span class="number">2</span>-start] <span class="number">1</span>fr [row-<span class="number">2</span>-end];</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: [col-<span class="number">1</span>-start] <span class="number">1</span>fr [col-<span class="number">2</span>-start] <span class="number">1</span>fr [col-<span class="number">3</span>-start] <span class="number">1</span>fr [col-<span class="number">3</span>-end];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-141230-0693.jpg" alt="网格线命名"/></div><span class="image-caption">网格线命名</span></div><p>可以给同一网格线定义多个名称，方法就是在中括号内用空格将多个名称分开，每个网格线名都可以被引用，以用来定位网格项目</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: [row-start row-<span class="number">1</span>-start] <span class="number">1</span>fr [row-<span class="number">1</span>-end row-<span class="number">2</span>-start] <span class="number">1</span>fr [row-<span class="number">2</span>-end row-end];</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: [col-start] <span class="number">1</span>fr [col-<span class="number">2</span>-start] <span class="number">1</span>fr [col-<span class="number">3</span>-start] <span class="number">1</span>fr [col-end]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-153610-0713.jpg" alt="网格线给定多个名称"/></div><span class="image-caption">网格线给定多个名称</span></div><p>函数 <code>repeat()</code> 可以定义同名网格线，多个网格线拥有同样的名字，同名的网格线会被分配一个位置编号，作为其唯一标识</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">3</span>, [row-start] <span class="number">1</span>fr [row-end]);</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, [col-start] <span class="number">1</span>fr [col-end]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-164317-0267.jpg" alt="重复同名网格线"/></div><span class="image-caption">重复同名网格线</span></div><h3 id="用网格区域命名">用网格区域命名</h3><p>一组区域名称要放在单引号或双引号内，每一个名称之间以空格分割，每一组名称定义一行，每一个名称定义一列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-areas: <span class="string">&quot;header header&quot;</span></span><br><span class="line">                        <span class="string">&quot;content sidebar&quot;</span></span><br><span class="line">                        <span class="string">&quot;footer footer&quot;</span>;</span><br><span class="line">    grid-template-rows: <span class="number">150px</span> <span class="number">1</span>fr <span class="number">100px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-093424-0291.jpg" alt="网格区域命名"/></div><span class="image-caption">网格区域命名</span></div><h2 id="网格项目上的一些属性">网格项目上的一些属性</h2><h3 id="用网格线编号定位项目">用网格线编号定位项目</h3><p>网格线本质上是用来表示网格轨道的开始和结束，每条网格线编号都以1开始，以1为步长向前编号，其中包括行列两组网格线</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row-start: <span class="number">2</span>;</span><br><span class="line">    grid-row-end: <span class="number">3</span>;</span><br><span class="line">    grid-column-start: <span class="number">2</span></span><br><span class="line">    grid-column-end: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-131939-0246.jpg" alt="网格项目定位"/></div><span class="image-caption">网格项目定位</span></div><p>属性 <code>grid-row</code> 是 <code>grid-row-start</code> 和 <code>grid-row-end</code> 的简写形式</p><p>属性 <code>grid-column</code> 是 <code>grid-column-start</code> 和 <code>grid-column-end</code> 的简写形式</p><p>如果只指定一个值，它表示 <code>grid-row-start</code> 或 <code>grid-column-start</code></p><p>如果两个值都指定，第一个表示 <code>grid-row-start</code> 或 <code>grid-column-start</code> 第二个值表示 <code>grid-row-end</code> 或 <code>grid-column-end</code>，而且它们之间<span class='p cyan'>必须使用 / 隔开</span></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row: <span class="number">2</span>;</span><br><span class="line">    grid-column: <span class="number">3</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-133054-0380.jpg" alt="网格项目定位"/></div><span class="image-caption">网格项目定位</span></div><p>属性 <code>grid-area</code> 是 <code>grid-column-start</code>、<code>grid-column-end</code>、<code>grid-row-start</code> 和 <code>grid-row-end</code> 的简写形式</p><p>如果四个值都指定，第一个表示 <code>grid-row-start</code>，第二个表示 <code>grid-column-start</code>，第三个表示 <code>grid-row-end</code>，第四个表示 <code>grid-column-end</code>，同样的它们之间需要使用 <code>/</code> 进行分割</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-area: <span class="number">2</span> / <span class="number">2</span> / <span class="number">3</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-131958-0951.jpg" alt="网格项目定位"/></div><span class="image-caption">网格项目定位</span></div><h3 id="网格项目跨越行列">网格项目跨越行列</h3><p>网格项目默认都占用一行和一列，但可以使用定位项目的属性来指定项目跨越多行多列</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-column-start: <span class="number">1</span>;</span><br><span class="line">    grid-column-end: <span class="number">4</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-143601-0492.jpg" alt="网格项目跨列"/></div><span class="image-caption">网格项目跨列</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row-start: <span class="number">1</span>;</span><br><span class="line">    grid-row-end: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-141203-0715.jpg" alt="网格项目跨行"/></div><span class="image-caption">网格项目跨行</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row: <span class="number">2</span> / <span class="number">5</span>;</span><br><span class="line">    grid-column: <span class="number">2</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-142004-0055.jpg" alt="网格项目跨行跨列"/></div><span class="image-caption">网格项目跨行跨列</span></div><p>关键字span可以指定跨越行和列的数量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row: <span class="number">2</span> / span <span class="number">3</span>;</span><br><span class="line">    grid-column: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-142707-0782.jpg" alt="span指定跨越行和列的数量"/></div><span class="image-caption">span指定跨越行和列的数量</span></div><h3 id="用网格线名称定义项目">用网格线名称定义项目</h3><p>利用命名的网格线来进行网格项目定位，注意：<emp>引用网格线名称不用加中括号</emp></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row-start: row-<span class="number">2</span>-start;</span><br><span class="line">    grid-row-end: row-end;</span><br><span class="line">    grid-column-start: col-<span class="number">2</span>-start;</span><br><span class="line">    grid-column-end: col-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210827-154721-0228.jpg" alt="网格名称进行项目定位"/></div><span class="image-caption">网格名称进行项目定位</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-row: row-start <span class="number">2</span> / row-end <span class="number">3</span>;</span><br><span class="line">    grid-column: col-start / col-start <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用同名网格线来定位项目时，应注意在网格线名称和编号之间有<u>一个空格</u></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-080956-0095.jpg" alt="同名网格线定位项目"/></div><span class="image-caption">同名网格线定位项目</span></div><h3 id="使用网格区域定位项目">使用网格区域定位项目</h3><p>网格区域名称可以用在属性 <code>grid-row-start</code>、<code>grid-row-end</code>、<code>grid-column-start</code> 和 <code>grid-column-end</code> 的值中，用来定位项目</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">    grid-row-start: header;</span><br><span class="line">    grid-row-end: header;</span><br><span class="line">    grid-column-start: header;</span><br><span class="line">    grid-column-end: header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-092729-0402.jpg" alt="网格区域名称定位项目"/></div><span class="image-caption">网格区域名称定位项目</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">    grid-row: footer;</span><br><span class="line">    grid-column: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-095729-0098.jpg" alt="网格区域名称定位项目"/></div><span class="image-caption">网格区域名称定位项目</span></div><p>网格区域名称也可以用于简写属性 <code>grid-area</code> 的值中</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">aside</span>&#123;</span><br><span class="line">    grid-area: sidebar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-094631-0368.jpg" alt="网格区域名称简写"/></div><span class="image-caption">网格区域名称简写</span></div><h2 id="隐式网络">隐式网络</h2><p>隐式网络用来在显式网格之外定位项目，有时在显示网格中没有足够的空间，或者要在显式网格之外定位项目就要用到隐式网格，这时可以把这些项目放置在隐式网格中</p><p>隐式网格可以通过属性 <code>grid-auto-rows</code>、<code>grid-auto-columns</code> 和 <code>grid-auto-flow</code> 来定义</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: <span class="number">70px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="number">1</span>fr);</span><br><span class="line">    grid-<span class="attribute">auto</span>-rows: <span class="number">140px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面 <code>css</code> 只定义了一个行轨道，项目 <code>1</code> 和 <code>2</code>高 <code>70px</code>，第二行轨道由隐式网格自动创建并为项目 <code>3</code> 和 <code>4</code> 分配了空间，属性 <code>grid-auto-rows</code> 定义了隐式网格的行轨道尺寸，即项目 <code>3</code> 和 <code>4</code> 的高度是 <code>140px</code></p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-093849-0064.jpg" alt="网格区域名称简写"/></div><span class="image-caption">网格区域名称简写</span></div><p>缺省的网络布局方向是行的方向(<code>row</code>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-<span class="attribute">auto</span>-flow: row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-104107-0340.jpg" alt="隐形网格"/></div><span class="image-caption">隐形网格</span></div><p>缺省的网格布局方向是定义为列的方向(column)</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-102715-0413.jpg" alt="隐形网格"/></div><span class="image-caption">隐形网格</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">30px</span> <span class="number">60px</span>;</span><br><span class="line">    grid-<span class="attribute">auto</span>-flow: column;</span><br><span class="line">    grid-<span class="attribute">auto</span>-<span class="attribute">columns</span>: <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中只定义了两个列轨道尺寸 <code>30px</code> 和 <code>60px</code></p><p>隐式网格中自动创建了其他列并给项目 <code>3</code>、<code>4</code>、<code>5</code> 分配空间，分配的尺寸通过 <code>grid-auto-columns</code> 定义</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-102222-0693.jpg" alt="隐形网格"/></div><span class="image-caption">隐形网格</span></div><h2 id="隐式命名的网格区域">隐式命名的网格区域</h2><p>网格线名称可以任意指定，但分配以 <code>-start</code> 和 <code>-end</code> 结尾的名字有额外的好处，这样隐式创建了具名网格区域，该名称可以用于项目定位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-rows: [outer-start] <span class="number">1</span>fr [inner-start] <span class="number">1</span>fr [inner-end] <span class="number">1</span>fr [outer-end];</span><br><span class="line">    grid-temlate-<span class="attribute">columns</span>: [outer-start] <span class="number">1</span>fr [inner-start] <span class="number">1</span>fr [inner-end] <span class="number">1</span>fr [outer-end];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，行和列都有名为 <code>inner-start</code> 和 <code>inner-end</code> 的网格线，它们隐式地给网格区域分配了名称(<code>inner</code>)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">item1&#123;</span><br><span class="line">    grid-area: inner;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-102436-0849.jpg" alt="隐式命名的网格区域"/></div><span class="image-caption">隐式命名的网格区域</span></div><h2 id="隐式命名的网格线">隐式命名的网格线</h2><p>隐式命名网格线和隐式命名的网格区域的工作原理恰好相反</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    grid-template-areas: <span class="string">&quot;header header&quot;</span></span><br><span class="line">                        <span class="string">&quot;content sidebar&quot;</span></span><br><span class="line">                        <span class="string">&quot;footer footer&quot;</span>;</span><br><span class="line">    grid-template-rows: <span class="number">80px</span> <span class="number">1</span>fr <span class="number">40px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义网格区域时隐式命名了网格线的名称，这些网格线的名称是基于区域名加上 <code>-start</code> 或  <code>-end</code> 后缀组成的</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-103351-0234.jpg" alt="隐式命名的网格线"/></div><span class="image-caption">隐式命名的网格线</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">item1&#123;</span><br><span class="line">    grid-row-start: header-start;</span><br><span class="line">    grid-row-end: content-start;</span><br><span class="line">    grid-<span class="attribute">columns</span>-start: footer-start;</span><br><span class="line">    grid-<span class="attribute">columns</span>-end: sidebar-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-110505-0211.jpg" alt="隐式命名的网格线"/></div><span class="image-caption">隐式命名的网格线</span></div><h2 id="层叠网格项目">层叠网格项目</h2><p>通过项目定位可以使多个项目层叠在一起，属性 <code>z-index</code> 可以改变层叠项目的层次</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>,</span><br><span class="line"><span class="selector-class">.item2</span>&#123;</span><br><span class="line">    grid-row-start: <span class="number">1</span>;</span><br><span class="line">    grid-column-end: span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    grid-column-start: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span>&#123;</span><br><span class="line">    grid-column-start: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，项目 <code>1</code> 和 <code>2</code>行定位于第一条网格线，并跨越两列，两个项目都是用网格线编号进行定位，项目 <code>1</code> 起始于第一条列网格线，项目 <code>2</code> 起始于第二条网格线，这使得两个项目在第一行中间列发生了层叠</p><p>缺省情况下，项目 <code>2</code> 将层叠于项目 <code>1</code> 之上，然而，给项目 <code>1</code> 设置属性 <code>z-index: 1</code> 就使得项目 <code>1</code> 层叠于项目 <code>2</code> 之上</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-112215-0116.jpg" alt="层叠网格项目"/></div><span class="image-caption">层叠网格项目</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.overlay</span>&#123;</span><br><span class="line">    grid-row-start: header-start;</span><br><span class="line">    grid-row-end: content-end;</span><br><span class="line">    grid-column-start: content-start;</span><br><span class="line">    grid-column-end: sidebar-start;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用 <code>grid-template-areas</code> 定义中的隐式网格线名称，定位了一个网格项目 <code>overlay</code> 并将层叠于上层</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-114918-0371.jpg" alt="层叠网格项目"/></div><span class="image-caption">层叠网格项目</span></div><h2 id="网格项目的对齐方式">网格项目的对齐方式</h2><p>网格项目可以按行或列的轴线方向实现多种对齐方式</p><p>属性 <code>justify-items</code> 和 <code>justify-self</code> 以行轴为参照对齐项目，属性 <code>align-items</code> 和 <code>align-self</code> 以列轴为参照对齐项目</p><p>属性 <code>justify-items</code> 和 <code>align-items</code> 是网格容器的属性，支持如下值</p><ul><li><code>auto</code></li><li><code>normal</code></li><li><code>start</code></li><li><code>end</code></li><li><code>center</code></li><li><code>stretch</code></li><li><code>baseline</code></li><li><code>first baseline</code></li><li><code>last baseline</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    grid-template-rows: <span class="number">80px</span> <span class="number">80px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">    grid-template-areas: <span class="string">&quot;content content&quot;</span></span><br><span class="line">                        <span class="string">&quot;content content&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    grid-area: content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    justify-items: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行的轴线起点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-143202-0043.jpg" alt="行的轴线起点处对齐"/></div><span class="image-caption">行的轴线起点处对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    justify-items: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行的轴线中心处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-145204-0125.jpg" alt="行的轴线中心对齐"/></div><span class="image-caption">行的轴线中心对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    justify-items: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行的轴线方向延伸并填满整个区域，<code>stretch</code> 是缺省值</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-143411-0573.png" alt="铺满整个区域"/></div><span class="image-caption">铺满整个区域</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列的轴线起点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-141318-0071.png" alt="列轴线起点对齐"/></div><span class="image-caption">列轴线起点对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-144733-0918.png" alt="列轴线中心对齐"/></div><span class="image-caption">列轴线中心对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列的轴线终点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-142235-0423.png" alt="列轴线终点处对齐"/></div><span class="image-caption">列轴线终点处对齐</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列的轴线方向延伸并填满整个区域</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-145843-0573.png" alt="列轴线方向铺满"/></div><span class="image-caption">列轴线方向铺满</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    justify-items: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目定位于行轴和列轴线的中间位置</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-142648-0872.png" alt="行列轴线中间"/></div><span class="image-caption">行列轴线中间</span></div><p>网格项目可以使用属性 <code>align-self</code> 和 <code>justify-self</code> 定义自己的对齐方式，并支持如下属性值</p><ul><li><code>auto</code></li><li><code>normal</code></li><li><code>start</code></li><li><code>end</code></li><li><code>center</code></li><li><code>stretch</code></li><li><code>baseline</code></li><li><code>first baseline</code></li><li><code>last baseline</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    justify-self: start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span>&#123;</span><br><span class="line">    justify-self: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item3</span>&#123;</span><br><span class="line">    justify-self: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性 <code>justify-self</code> 在行的轴线方向定义对齐方式</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-145558-0556.png" alt="行轴线对齐方式"/></div><span class="image-caption">行轴线对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    <span class="attribute">align-self</span>: start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span>&#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item3</span>&#123;</span><br><span class="line">    <span class="attribute">align-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性 <code>align-self</code> 在列的轴线方向定义对齐方式</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-155200-0973.png" alt="列轴线对齐方式"/></div><span class="image-caption">列轴线对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item1</span>&#123;</span><br><span class="line">    justify-self: center;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位于行轴线和列轴线的中间位置</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-142648-0872.png" alt="行轴线和列轴线的中间位置"/></div><span class="image-caption">行轴线和列轴线的中间位置</span></div><h2 id="网格轨道的对齐方式">网格轨道的对齐方式</h2><p>在网格容器中，网格轨道沿轴线方向有多种对齐方式</p><p>属性 <code>align-content</code> 用于定义<u>列的网格轨道</u>沿着行轴线对齐的方式，而属性 <code>justify-content</code> 用于定义<u>行的网格轨道</u>沿着列的轴线的对齐方式，并分别支持如下属性</p><ul><li><code>normal</code></li><li><code>start</code></li><li><code>end</code></li><li><code>center</code></li><li><code>stretch</code></li><li><code>space-around</code></li><li><code>space-between</code></li><li><code>space-evenly</code></li><li><code>baseline</code></li><li><code>first baseline</code></li><li><code>last baseline</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    grid-template-<span class="attribute">columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">45px</span>);</span><br><span class="line">    grid-template-rows: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">45px</span>);</span><br><span class="line">    grid-gap: <span class="number">0.5rem</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列的轨道在行的轴线起点处对齐，<code>start</code> 是缺省值</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-152243-0128.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列的轨道在行的轴线终点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-153445-0510.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列的轨道在行的轴线中间对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-151347-0325.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在每一列的两侧平均分配额外空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-151649-0619.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列与列之间平均分配额外的空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-151052-0306.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在列与列之间及列与边界之间平均分配额外的空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-154153-0977.png" alt="列网格轨道的对齐方式"/></div><span class="image-caption">列网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行的轨道在列的轴线起点处对齐，属性 <code>start</code> 是缺省值</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-152243-0128.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行的轨道在列的轴线终点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-153356-0937.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行的轨道在列的轴线中点处对齐</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-154257-0279.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一行的两侧平均分配额外空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-162000-0592.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行与行之间平均分配额外空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-164601-0931.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.grid</span>&#123;</span><br><span class="line">    <span class="attribute">align-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在行与行之间及行与边界之间平均分配额外空间</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/df8718c1/20210830-165902-0289.png" alt="行网格轨道的对齐方式"/></div><span class="image-caption">行网格轨道的对齐方式</span></div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于observable的状态管理插件</title>
      <link href="73002bc7/"/>
      <url>73002bc7/</url>
      
        <content type="html"><![CDATA[<div class="tip home"><p>突然之间看到 <code>vue2.x</code> 文档中的<span class='nota' data-nota='Vue.observable(object) 和 Vue.set(target'>两个 api</span>，<code>Vue.observable(object)</code> 可以让一个对象可响应，并且返回的对象可以直接用于渲染函数和计算属性中，并且会在发生变更时触发相应的更新，也可以作为最小化的跨组件状态存储器</p><p>于是心血来潮决定尝试写一个 <code>vue</code> 的状态管理插件</p></div><p>关于上方提到的两个 <code>api</code> 可以在下方文档中找到，这里不多作介绍</p><div class="btns rounded center grid5">            <a class="button" href='https://cn.vuejs.org/v2/api/#Vue-observable' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="使用脚手架创建一个-vue-项目">使用脚手架创建一个 <code>vue</code> 项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create app</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-info-circle"></i><p>因为 <code>Vue.observable</code> 在 <code>2.6.0</code> 版本之后新增的，请确保 <code>vue</code> 和 <code>vue-template-compiler</code> 的版本高于 <code>2.6.0</code> 且二者版本一致</p></div><h2 id="插件源码">插件源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性私有化</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="built_in">Symbol</span>(<span class="string">&#x27;store&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果使用 lodash  _.cloneDeep(value)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">object</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(object === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> object !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> object;</span><br><span class="line">    <span class="keyword">if</span>(object.constructor === <span class="built_in">Date</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(object);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保持原型链不变</span></span><br><span class="line">    <span class="keyword">let</span> temp = <span class="keyword">new</span> object.constructor();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> object)&#123;</span><br><span class="line">        <span class="comment">// 只要自身的属性 object.hasOwnProperty(key)</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key))&#123;</span><br><span class="line">            <span class="keyword">let</span> value = object[key];</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// arguments.callee 为了解除和函数名的耦合 实际上 arguments.callee也指向函数 deepClone 严格模式下不允许使用arguments</span></span><br><span class="line">                temp[key] = <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> ? <span class="built_in">arguments</span>.callee(value) : value;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">                temp[key] = <span class="keyword">typeof</span> value === <span class="string">&#x27;object&#x27;</span> ? deepClone(value) : value;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">State</span></span>&#123;</span><br><span class="line">    [store] = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>[store] = Vue.observable(options);</span><br><span class="line">        <span class="comment">// this[store] = options;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只能通过dispatch来修改状态</span></span><br><span class="line">    <span class="function"><span class="title">dispatch</span>(<span class="params">action</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(action <span class="keyword">instanceof</span> <span class="built_in">Array</span>)&#123;</span><br><span class="line">            action.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                Vue.set(<span class="built_in">this</span>[store], item.type, item.data);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> &#123;type, data&#125; = action;</span><br><span class="line">            Vue.set(<span class="built_in">this</span>[store], type, data);</span><br><span class="line">            <span class="comment">// this[store][type] = data;</span></span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getState</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deepClone(<span class="built_in">this</span>[store]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> state = &#123;</span><br><span class="line">    <span class="function"><span class="title">install</span>(<span class="params">Vue</span>)</span>&#123;</span><br><span class="line">        Vue.mixin(&#123;</span><br><span class="line">            <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="comment">// 获取当前实例的自定义属性 store</span></span><br><span class="line">                <span class="keyword">let</span> store = <span class="built_in">this</span>.$options.store;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 如果不存在，当前实例没有store属性 需要取到父组件的store</span></span><br><span class="line">                <span class="keyword">if</span>(!store)&#123;</span><br><span class="line">                    store = <span class="built_in">this</span>.$parent.$store</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">this</span>.$store = store;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 下面的内容 混入以后就不能和组件的重复了</span></span><br><span class="line">            computed: &#123;</span><br><span class="line">                $$state()&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.$store.getState();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                $$dispatch(action)&#123;</span><br><span class="line">                    <span class="comment">// action可以是数组或对象</span></span><br><span class="line">                    <span class="comment">// 对象形式 interface Action &#123;type: string; data: unknown&#125;</span></span><br><span class="line">                    <span class="comment">// 数组  Action[]</span></span><br><span class="line">                    <span class="built_in">this</span>.$store.dispatch(action)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    State</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br></pre></td></tr></table></figure><h2 id="使用">使用</h2><div class="tip faa-horizontal animated"><p>此插件已发布至 <code>npm</code> 如需使用可参考以下链接<br>另外，请忽略版本的问题，之前的版本不可用，很多 <code>bug</code></p></div><div class="tabs" id="obs"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#obs-1">npm</button></li><li class="tab"><button type="button" data-href="#obs-2">script</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="obs-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-observable-plus@1.1.0 --save</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="obs-2"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue-observable-plus@1.1.0/obs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="举个栗子">举个栗子</h2><div class="tabs" id="exm"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#exm-1">模块化</button></li><li class="tab"><button type="button" data-href="#exm-2">浏览器</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="exm-1"><div class="note blue icon flat"><i class="note-icon fa fa-info"></i><p>下方的栗子中，会看到 <code>$store.getState()</code> 实际上全局混入之后，计算属性中的 <code>$$state</code> 就表示 <code>this.$store.getState()</code>，同时 <code>$$dispatch</code> 和 <code>$store.dispatch</code> 效果相同，请忽略下方栗子中的 <code>getState</code> 这是因为分享的 <code>codesanbox</code> 和本地的 <code>codesanbox</code> <span class='nota' data-nota='在codesanbox中使用$$state不会报错，分享iframe就会报错，可能是抽风了~'>预览效果不一致</span>，读者测试时完全可以使用 <code>$$state</code> 而不是 <code>getState()</code>，这里仅仅是为了预览效果，浏览器直接使用 <code>$$state</code> 不会报错</p></div><iframe src="https://codesandbox.io/embed/still-resonance-nv7vr?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:700px; border:0; border-radius: 4px; overflow:hidden;"    title="still-resonance-nv7vr"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="exm-2"><iframe id="cp_embed_rNmZrRQ" src="//codepen.io/milkdue/embed/rNmZrRQ?height=800&theme-id=dark&slug-hash=rNmZrRQ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="800" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="end"><code>end</code></h2><p>第一次写 <code>vue</code> 插件，如果有任何问题，欢迎读者留言指正~</p>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x的api</title>
      <link href="9b2de178/"/>
      <url>9b2de178/</url>
      
        <content type="html"><![CDATA[<h2 id="全局配置">全局配置</h2><p><code>Vue.config</code> 是一个对象，包含 <code>Vue</code> 的全局配置，可以在启动应用之前修改下列属性</p><h3 id="silent"><code>silent</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>false</code></li><li>作用：取消 <code>vue</code> 所有的日志和警告</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.silent = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="optionMergeStrategies"><code>optionMergeStrategies</code></h3><ul><li>类型：<code>&#123;[key: string]: Function&#125;</code></li><li>默认值：<code>&#123;&#125;</code></li><li>作用：自定义混入时的合并策略，合并策略选项分别在接收父实例和子实例上定义的该选项的值作为第一个和第二个参数，<code>vue</code> 实例上下文被定义为第三个参数传入</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.optionMergeStrategies._my_option = <span class="function"><span class="keyword">function</span>(<span class="params">parent, child, vm</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> child + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="devtools"><code>devtools</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code> (生产版本为 <code>false</code>)</li><li>作用：配置是否允许 <code>vue-devtools</code> 检查代码，开发版本默认是 <code>true</code>，生产版本默认是 <code>false</code>，生产版本设为 <code>true</code> 可以启动检查</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 务必在加载vue后，立即同步设置以下内容</span></span><br><span class="line">Vue.config.devtools = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="errorHandler"><code>errorHandler</code></h3><ul><li>类型：<code>Function</code></li><li>默认值：<code>undefined</code></li><li>作用：处理发生错误的逻辑</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="function"><span class="keyword">function</span>(<span class="params">err, vm, info</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// err 错误信息</span></span><br><span class="line">  <span class="comment">// vm 发生错误的实例</span></span><br><span class="line">  <span class="comment">// info 是 vue 特定的错误信息，比如错误所发生的生命钩子 例如 mounted hook</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="warnHandler"><code>warnHandler</code></h3><ul><li>类型：<code>Function</code></li><li>默认值：<code>undefined</code></li><li>作用：运行时警告赋予一个自定义处理函数，注意这只会在开发者环境下生效，在生产环境下它会被忽略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.warnHandler = <span class="function"><span class="keyword">function</span>(<span class="params">msg, vm, trace</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// trace 是组件继承关系的追踪</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 Vue 的运行时警告赋予一个自定义处理函数。注意这只会在开发者环境下生效，在生产环境下它会被忽略</span></span><br></pre></td></tr></table></figure><h3 id="ignoredElements"><code>ignoredElements</code></h3><ul><li>类型：<code>Array&lt;String | RegExp&gt;</code></li><li>默认值：[]</li><li>作用：须使 <code>Vue</code> 忽略在 <code>Vue</code> 之外的自定义元素 (e.g. 使用了 <code>Web Components APIs</code>)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 <code>Unknown custom element</code> 的警告w</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.ignoredElements = [<span class="string">&#x27;ant-a&#x27;</span>, <span class="regexp">/^ion-/</span>];</span><br></pre></td></tr></table></figure><h3 id="keyCodes"><code>keyCodes</code></h3><ul><li>类型：<code>&#123;[key: string]: number | Array&lt;number&gt;&#125;</code></li><li>默认值：<code>&#123;&#125;</code></li><li>作用：给 <code>v-on</code> 自定义键位别名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes = &#123;</span><br><span class="line">  v: <span class="number">86</span>,</span><br><span class="line">  f1: <span class="number">112</span>,</span><br><span class="line">  mediaPlayPause: <span class="number">179</span>,</span><br><span class="line">  <span class="comment">// 如果是使用 kebab-case(下划线形式)，用双引号括起来</span></span><br><span class="line">  <span class="string">&quot;media-play-pause&quot;</span>: <span class="number">179</span>,</span><br><span class="line">  up: [<span class="number">38</span>, <span class="number">87</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.media-play-pause</span>=<span class="string">&quot;method&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="performance"><code>performance</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>false</code></li><li>作用：设置为 <code>true</code> 以在浏览器开发工具的性能/时间线面板中启用对组件初始化、编译、渲染和打补丁的性能追踪。只适用于开发模式和支持 <code>performance.mark API</code> 的浏览器上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.performance = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h3 id="productionTip"><code>productionTip</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li><li>作用：设置为true以阻止vue在启动时生产提示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.productionTip = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h2 id="全局-api">全局 <code>api</code></h2><h3 id="Vue-extend-options"><code>Vue.extend(options)</code></h3><ul><li>参数：<code>&#123;Object&#125; options</code></li><li>作用：使用基础 <code>vue</code> 构造器，创建一个子类，参数是一个包含组件选项的对象，<code>data</code> 选项是特例，需要注意 <code>Vue.extend()</code> 中它必须是函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Component = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">`&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125;&lt;/p&gt;`</span></span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      firstName: <span class="string">&#x27;Walter&#x27;</span>,</span><br><span class="line">      lastName: <span class="string">&#x27;White&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Component().$mount(<span class="string">&#x27;#div&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Vue-nextTick-callback-context"><code>Vue.nextTick([callback, context])</code></h3><ul><li>参数：<code>&#123;Function&#125; [callback]  &#123;Object&#125; [context]</code></li><li>作用：在下次 <code>dom</code> 更新循环结束之后执行延迟回调，在修改数据之后立即使用这个方法，获取最新后的 <code>dom</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line">vm.msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dom 还没有更新</span></span><br><span class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// dom 更新了</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为一个promise使用</span></span><br><span class="line">Vue.nextTick()</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// dom 更新了</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue-set-target-propertyName-index-value"><code>Vue.set(target, propertyName / index, value)</code></h3><ul><li>参数：<code>&#123;Object | Array&#125; target  &#123;string | number&#125; propertyName / index  &#123;any&#125; value</code></li><li>作用：向响应式对象中添加一个 <code>property</code>，并确保这个新 <code>property</code> 同样是响应式的，且触发视图更新。它必须用于向响应式对象上添加新 <code>property</code>，因为 <code>Vue</code> 无法探测普通的新增 <code>property</code> (比如 <code>this.myObject.newProperty = 'hi'</code>)，返回设置的值，注意不能是 <code>vue</code> 实例，或者 <code>vue</code> 实例的根数据对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">obj</span>: &#123;&#125;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">this</span>.$set(<span class="built_in">this</span>.obj, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;suxi&#x27;</span>), <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-delete-target-propertyName-index"><code>Vue.delete(target, propertyName / index)</code></h3><ul><li>参数：<code>&#123;Object | Array&#125; target  &#123;string | number&#125; propertyName / index</code></li><li>作用：删除对象的 <code>property</code>。如果对象是响应式的，确保删除能触发更新视图。注意目标对象不能是一个 <code>Vue</code> 实例或 <code>Vue</code> 实例的根数据对象，这个方法主要用于避开 Vue 不能检测到 property 被删除的限制，但是你应该很少会使用它</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">obj</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;peiqi&#x27;</span>&#125;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">this</span>.$delete(<span class="built_in">this</span>.obj, <span class="string">&#x27;name&#x27;</span>), <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-directive-id-definition"><code>Vue.directive(id, [definition])</code></h3><ul><li>参数：<code>&#123;string&#125; id  &#123;Function | Object&#125; [definition]</code></li><li>作用：注册或获取<a href="/262ac49e/#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6%E7%AD%96%E7%95%A5">全局指令</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  componentUpdated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  unbind: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册 (指令函数)</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里将会被 `bind` 和 `update` 调用</span></span><br><span class="line">  <span class="comment">// bind 和 update是一样的行为</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter，返回已注册的指令</span></span><br><span class="line"><span class="keyword">var</span> myDirective = Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Vue-filter-id-definition"><code>Vue.filter(id, [definition])</code></h3><ul><li>参数：<code>&#123;string&#125; id  &#123;Function&#125; [definition]</code></li><li>作用：注册或获取全局过滤器</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">Vue.filter(<span class="string">&#x27;my-filter&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 返回处理后的值</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter，返回已注册的过滤器</span></span><br><span class="line"><span class="keyword">var</span> myFilter = Vue.filter(<span class="string">&#x27;my-filter&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Vue-component-id-definition"><code>Vue.component(id, [definition])</code></h3><ul><li>参数：<code>&#123;string&#125; id  &#123;Function | Object&#125; [definition]</code></li><li>作用：注册或获取全局组件，组件还会自动使用给定的 <code>id</code> 设置组件的名称</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册组件，传入一个扩展过的构造器</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, Vue.extend(&#123; <span class="comment">/* ... */</span> &#125;))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册组件，传入一个选项对象 (自动调用 Vue.extend)</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取注册的组件 (始终返回构造器)</span></span><br><span class="line"><span class="keyword">var</span> MyComponent = Vue.component(<span class="string">&#x27;my-component&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="Vue-use-plugin"><code>Vue.use(plugin)</code></h3><ul><li>参数：<code>&#123;Object | Function&#125; plugin</code></li><li>作用：安装 <code>Vue.js</code> 插件。如果插件是一个对象，必须提供 <code>install</code> 方法。如果插件是一个函数，它会被作为 <code>install</code> 方法。<code>install</code> 方法调用时，会将 <code>Vue</code> 作为参数传入，该方法需要在调用 <code>new Vue()</code> 之前被调用，当 <code>install</code> 方法被同一个插件多次调用，插件将只会被安装一次</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(vuex)</span><br></pre></td></tr></table></figure><h3 id="Vue-mixin-mixin"><code>Vue.mixin(mixin)</code></h3><ul><li>参数：<code>&#123;Object&#125; mixin</code></li><li>作用：全局注册一个混入，影响注册之后所有创建的每个 <code>Vue</code> 实例。插件作者可以使用混入，向组件注入自定义的行为。不推荐在应用代码中使用</li></ul><h3 id="Vue-compile-template"><code>Vue.compile(template)</code></h3><ul><li>参数：<code>&#123;string&#125; template</code></li><li>作用：将一个模板编译成 <code>render</code> 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> res = Vue.compile(<span class="string">&#x27;&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: res.render,</span><br><span class="line">  staticRenderFns: res.staticRenderFns</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Vue-observable-object"><code>Vue.observable(object)</code></h3><ul><li>参数：<code>&#123;Object&#125; object</code></li><li>作用：让一个对象可响应。<code>Vue</code> 内部会用它来处理 <code>data</code> 函数返回的对象，返回的对象可以直接用于渲染函数和计算属性内，并且会在发生变更时触发相应的更新。也可以作为最小化的跨组件状态存储器，用于简单的场景</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = Vue.observable(&#123; <span class="attr">count</span>: <span class="number">0</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Demo = &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;button&#x27;</span>, &#123;</span><br><span class="line">      on: &#123; <span class="attr">click</span>: <span class="function">() =&gt;</span> &#123; state.count++ &#125;&#125;</span><br><span class="line">    &#125;, <span class="string">`count is: <span class="subst">$&#123;state.count&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vue-version"><code>Vue.version</code></h3><ul><li>作用：提供字符串形式的 <code>vue</code> 安装版本号，这对社区的插件和组件来说是非常有用的，可以根据不同的版本号采取不同的策略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (version === <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="comment">// Vue v2.x.x</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (version === <span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// Vue v1.x.x</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// Unsupported versions of Vue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数据-选项">数据 / 选项</h2><h3 id="data"><code>data</code></h3><ul><li>类型：<code>Object | Function</code></li><li>作用：<code>vue</code> 实例的数据对象，<code>vue</code> 会递归地把 <code>data</code> 的 <code>property</code> 转换为 <code>getter/setter</code>，从而让 <code>data</code> 的 <code>property</code> 能够响应数据变化。对象必须是纯粹的对象 (含有零个或多个的 <code>key/value</code> 对)：浏览器 <code>API</code> 创建的原生对象，原型上的 <code>property</code> 会被忽略。大概来说，<code>data</code> 应该只能是数据 - 不推荐观察拥有状态行为的对象，一旦观察过，你就无法在根数据对象上添加响应式 <code>property</code>。因此推荐在创建实例之前，就声明所有的根级响应式 <code>property</code></li><li>注意：<ul><li>实例创建之后，可以通过 <code>vm.$data</code> 访问原始数据对象。<code>Vue</code> 实例也代理了 <code>data</code> 对象上所有的 <code>property</code>，因此访问 <code>vm.a</code>等价于访问 <code>vm.$data.a</code></li><li>以 <code>_</code> 或 <code>$</code> 开头的 <code>property</code> 不会被 <code>Vue</code> 实例代理，因为它们可能和 <code>Vue</code> 内置的 <code>property</code>、<code>API</code> 方法冲突。你可以使用例如 <code>vm.$data._property</code> 的方式访问这些 <code>property</code></li><li>当一个组件被定义，<code>data</code> 必须声明为返回一个初始数据对象的函数，因为组件可能被用来创建多个实例。如果 <code>data</code> 仍然是一个纯粹的对象，则所有的实例将共享引用同一个数据对象！通过提供 <code>data</code> 函数，每次创建一个新实例后，我们能够调用 <code>data</code> 函数，从而返回初始数据的一个全新副本数据对象</li><li>如果需要，可以通过将 vm.$data 传入 JSON.parse(JSON.stringify(…)) 得到深拷贝的原始数据对象</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接创建一个实例</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line">vm.a <span class="comment">// =&gt; 1</span></span><br><span class="line">vm.$data === data <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue.extend() 中 data 必须是函数</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，如果你为 data property 使用了箭头函数，则 this 不会指向这个组件的实例，不过你仍然可以将其实例作为函数的第一个参数来访问</span></span><br><span class="line">data: <span class="function"><span class="params">vm</span> =&gt;</span> (&#123;<span class="attr">a</span>: vm.myProp&#125;)</span><br></pre></td></tr></table></figure><h3 id="props"><code>props</code></h3><ul><li>类型：<code>Array&lt;string&gt; | Object</code></li><li>作用：组件间数据传递，<code>props</code> 可以是数组或对象，用于接收来自父组件的数据。<code>props</code> 可以是简单的数组，或者使用对象作为替代，对象允许配置高级选项，如类型检测、自定义验证和设置默认值</li><li>语法<ul><li><code>type</code>：可以是下列原生构造函数中的一种：<code>String、Number、Boolean、Array、Object、Date、Function、Symbol</code>、任何自定义构造函数、或上述内容组成的数组。会检查一个 <code>prop</code> 是否是给定的类型，否则抛出警告</li><li><code>default</code>：<code>any</code>，为该 <code>prop</code> 指定一个默认值。如果该 <code>prop</code> 没有被传入，则换做用这个值。对象或数组的默认值必须从一个工厂函数返回</li><li><code>required</code>：<code>Boolean</code>，定义该 <code>prop</code> 是否是必填项。在非生产环境中，如果这个值为 <code>truthy</code> 且该 <code>prop</code> 没有被传入的，则一个控制台警告将会被抛出</li><li><code>validator</code>：<code>Function</code>，自定义验证函数会将该 <code>prop</code> 的值作为唯一的参数代入。在非生产环境下，如果该函数返回一个 <code>falsy</code> 的值 (也就是验证失败)，一个控制台警告将会被抛出</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单语法</span></span><br><span class="line">Vue.component(<span class="string">&#x27;props-demo-simple&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;size&#x27;</span>, <span class="string">&#x27;myMessage&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象语法，提供验证</span></span><br><span class="line">Vue.component(<span class="string">&#x27;props-demo-advanced&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 检测类型</span></span><br><span class="line">    height: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 检测类型 + 其他验证</span></span><br><span class="line">    age: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt;= <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="propsData"><code>propsData</code></h3><ul><li>类型：<code>&#123;[key: string]: any&#125;</code></li><li>作用：创建实例时传递 <code>props</code> 主要作用是方便测试</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Comp = Vue.extend(&#123;</span><br><span class="line">  props: [<span class="string">&#x27;msg&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;&#123;&#123; msg &#125;&#125;&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Comp(&#123;</span><br><span class="line">  propsData: &#123;</span><br><span class="line">    msg: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="computed"><code>computed</code></h3><ul><li>类型：<code>&#123;[key: string]: Function | &#123;get: Function, set: Function&#125;&#125;</code></li><li>作用：计算属性将被混入到 <code>Vue</code> 实例中。所有 <code>getter</code> 和 <code>setter</code> 的 <code>this</code> 上下文自动地绑定为 <code>Vue</code>实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意如果你为一个计算属性使用了箭头函数，则 this 不会指向这个组件的实例，不过你仍然可以将其实例作为函数的第一个参数来访问。</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  aDouble: <span class="function"><span class="params">vm</span> =&gt;</span> vm.a * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性的结果会被缓存，除非依赖的响应式 property 变化才会重新计算。注意，如果某个依赖 (比如非响应式 property) 在该实例范畴之外，则计算属性是不会被更新的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 仅读取</span></span><br><span class="line">    aDouble: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.a * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 读取和设置</span></span><br><span class="line">    aPlus: &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="number">1</span></span><br><span class="line">      &#125;,</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.a = v - <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.aPlus   <span class="comment">// =&gt; 2</span></span><br><span class="line">vm.aPlus = <span class="number">3</span></span><br><span class="line">vm.a       <span class="comment">// =&gt; 2</span></span><br><span class="line">vm.aDouble <span class="comment">// =&gt; 4</span></span><br></pre></td></tr></table></figure><h3 id="methods"><code>methods</code></h3><ul><li>类型：<code>&#123;[key: string]: Function&#125;</code></li><li>作用：<code>methods</code> 将被混入到 <code>Vue</code> 实例中。可以直接通过 <code>VM</code> 实例访问这些方法，或者在指令表达式中使用。方法中的 <code>this</code> 自动绑定为 <code>Vue</code> 实例</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    plus: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.a++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.plus()</span><br><span class="line">vm.a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="watch"><code>watch</code></h3><ul><li>类型：<code>&#123;[key: string]: string | Function | Object | Array&#125;</code></li><li>作用：<code>watch</code> 一个对象，键是需要观察的表单式，值是回调函数，值也可以是方法名，或者包含选项的对象。<code>Vue</code> 实例将会在实例化时调用 <code>$watch()</code>，遍历 <code>watch</code> 对象的每一个 <code>property</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span>,</span><br><span class="line">    d: <span class="number">4</span>,</span><br><span class="line">    e: &#123;</span><br><span class="line">      f: &#123;</span><br><span class="line">        g: <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 没有设置immediate，被侦听的变量在页面初次加载时第一次绑定值的时候，并不会执行监听操作</span></span><br><span class="line">    a: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;new: %s, old: %s&#x27;</span>, val, oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 方法名</span></span><br><span class="line">    b: <span class="string">&#x27;someMethod&#x27;</span>,</span><br><span class="line">    <span class="comment">// 设置了深度监听，回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深，数组的变化不需要深度监听，对象数组中的属性变化则需要深度监听</span></span><br><span class="line">    c: &#123;</span><br><span class="line">      handler: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">      deep: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置了immediate为true 该回调将会在侦听开始之后被立即调用</span></span><br><span class="line">    d: &#123;</span><br><span class="line">      handler: <span class="string">&#x27;someMethod&#x27;</span>,</span><br><span class="line">      immediate: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 你可以传入回调数组，它们会被逐一调用</span></span><br><span class="line">    e: [</span><br><span class="line">      <span class="string">&#x27;handle1&#x27;</span>,</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">handle2</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        handler: <span class="function"><span class="keyword">function</span> <span class="title">handle3</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// watch vm.e.f&#x27;s value: &#123;g: 5&#125;</span></span><br><span class="line">    <span class="string">&#x27;e.f&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.a = <span class="number">2</span> <span class="comment">// =&gt; new: 2, old: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue =&gt; this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例</span></span><br></pre></td></tr></table></figure><h2 id="选项-DOM">选项 / <code>DOM</code></h2><h3 id="el"><code>el</code></h3><ul><li>类型：<code>string | Element</code></li><li>详细：<ul><li>提供一个在页面上已存在的 <code>DOM</code> 元素作为 <code>Vue</code> 实例的挂载目标。可以是 <code>CSS</code> 选择器，也可以是一个 <code>HTMLElement</code> 实例</li><li>在实例挂载之后，元素可以用 <code>vm.$el</code> 访问</li><li>如果在实例化时存在这个选项，实例将立即进入编译过程，否则，需要显式调用 <code>vm.$mount()</code> 手动开启编译</li><li>提供的元素只能作为挂载点。不同于 <code>Vue 1.x</code>，所有的挂载元素会被 <code>Vue</code> 生成的 <code>DOM</code> 替换。因此不推荐挂载 <code>root</code> 实例到 <code>&lt;html&gt;</code> 或者 <code>&lt;body&gt;</code> 上</li><li>如果 <code>render</code> 函数和 <code>template property</code> 都不存在，挂载 <code>DOM</code> 元素的 <code>HTML</code> 会被提取出来用作模板，此时，必须使用 <code>Runtime + Compiler</code> 构建的 <code>Vue</code> 库</li></ul></li></ul><h3 id="template"><code>template</code></h3><ul><li>类型：<code>string</code></li><li>详细：<ul><li>一个字符串模板作为 <code>Vue</code> 实例的标识使用。模板将会替换挂载的元素。挂载元素的内容都将被忽略，除非模板的内容有分发插槽</li><li>如果值以 <code>#</code> 开始，则它将被用作选择符，并使用匹配元素的 <code>innerHTML</code> 作为模板。常用的技巧是用 <code>&lt;script type=&quot;x-template&quot;&gt;</code> 包含模板</li><li>出于安全考虑，你应该只使用你信任的 <code>Vue</code> 模板。避免使用其他人生成的内容作为你的模板</li><li>如果 <code>Vue</code> 选项中包含渲染函数，该模板将被忽略</li></ul></li></ul><h3 id="render"><code>render</code></h3><ul><li>类型：<code>(createElement: () =&gt; VNode) =&gt; VNode</code></li><li>详细：<ul><li>字符串模板的代替方案，允许你发挥 <code>JavaScript</code> 最大的编程能力。该渲染函数接收一个 <code>createElement</code> 方法作为第一个参数用来创建 <code>VNode</code></li><li>如果组件是一个函数组件，渲染函数还会接收一个额外的 <code>context</code> 参数，为没有实例的函数组件提供上下文信息</li><li><code>Vue</code> 选项中的 <code>render</code> 函数若存在，则 <code>Vue</code> 构造函数不会从 <code>template</code> 选项或通过 <code>el</code> 选项指定的挂载元素中提取出的 <code>HTML</code> 模板编译渲染函数</li></ul></li></ul><h3 id="renderError"><code>renderError</code></h3><ul><li>类型：<code>(createElement: () =&gt; VNode, error: Error) =&gt; VNode</code></li><li>详细：<ul><li>只能在开发者环境下工作</li><li>当 <code>render</code> 函数遭遇错误时，提供另一种渲染输出，其错误将会作为第二个参数传递到 <code>renderError</code>，这个功能配合 <code>hot-reload</code> 非常实用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render (h) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;oops&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  renderError (h, err) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;pre&#x27;</span>, &#123; <span class="attr">style</span>: &#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;&#125;, err.stack)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="选项-生命周期钩子">选项 / 生命周期钩子</h2><div class="note purple icon flat"><i class="note-icon fa fa-thermometer-full"></i><p>所有的生命周期钩子自动绑定 <code>this</code> 上下文到实例中，因此你可以访问数据，对 <code>property</code> 和方法进行运算。这意味着你不能使用箭头函数来定义一个生命周期方法 (例如 <code>created: () =&gt; this.fetchTodos()</code>)。这是因为箭头函数绑定了父上下文，因此 <code>this</code> 与你期待的 <code>Vue</code> 实例不同，<code>this.fetchTodos</code> 的行为未定义</p></div><h3 id="beforeCreate"><code>beforeCreate</code></h3><ul><li>类型：<code>Function</code></li><li>作用：在实例初始化之后，数据观测 (<code>data observer</code>) 和 <code>event/watcher</code> 事件配置之前被调用</li></ul><h3 id="created"><code>created</code></h3><ul><li>类型：<code>Function</code></li><li>作用：在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (<code>data observer</code>)，<code>property</code> 和方法的运算，<code>watch/event</code> 事件回调。然而，挂载阶段还没开始，<code>$el property</code> 目前尚不可用</li></ul><h3 id="beforeMount"><code>beforeMount</code></h3><ul><li>类型：<code>Function</code></li><li>作用：在挂载开始之前被调用，相关的 <code>render</code> 函数首次被调用，该钩子在服务端渲染期间不被调用</li></ul><h3 id="mounted"><code>mounted</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>实例被挂载后调用，这时 <code>el</code> 被新创建的 <code>vm.$el</code> 替换了。如果根实例挂载到了一个文档内的元素上，当 <code>mounted</code> 被调用时 <code>vm.$el</code> 也在文档内</li><li>注意 <code>mounted</code> 不会保证所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以在 <code>mounted</code> 内部使用 <code>vm.$nextTick</code></li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code that will run only after the</span></span><br><span class="line">    <span class="comment">// entire view has been rendered</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="beforeUpdate"><code>beforeUpdate</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>数据更新时调用，发生在虚拟 <code>DOM</code> 打补丁之前。这里适合在更新之前访问现有的 <code>DOM</code>，比如手动移除已添加的事件监听器</li><li>该钩子在服务器端渲染期间不被调用，因为只有初次渲染会在服务端进行</li></ul></li></ul><h3 id="updated"><code>updated</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>由于数据更改导致的虚拟 <code>DOM</code> 重新渲染和打补丁，在这之后会调用该钩子</li><li>当这个钩子被调用时，组件 <code>DOM</code> 已经更新，所以你现在可以执行依赖于 <code>DOM</code> 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之</li><li>注意 <code>updated</code> 不会保证所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，<u>可以在 updated 里使用 vm.$nextTick</u></li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Code that will run only after the</span></span><br><span class="line">    <span class="comment">// entire view has been re-rendered</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="activated"><code>activated</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>被 <code>keep-alive</code> 缓存的组件激活时调用</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><h3 id="deactivated"><code>deactivated</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>被 <code>keep-alive</code> 缓存的组件停用时调用</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><h3 id="beforeDestroy"><code>beforeDestroy</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>实例销毁之前调用。在这一步，实例仍然完全可用</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><h3 id="destroyed"><code>destroyed</code></h3><ul><li>类型：<code>Function</code></li><li>详细：<ul><li>实例销毁后调用。该钩子被调用后，对应 <code>Vue</code> 实例的所有指令都被解绑，所有的事件监听器被移除，所有的子实例也都被销毁</li><li>该钩子在服务器端渲染期间不被调用</li></ul></li></ul><h3 id="errorCaptured"><code>errorCaptured</code></h3><ul><li>类型：<code>(err: Error, vm: Component, info: string) =&gt; ?boolean</code></li><li>详细：<ul><li>当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。<wavy>此钩子可以返回 false 以阻止该错误继续向上传播</wavy></li><li>可以在此钩子中修改组件的状态。因此在捕获错误时，在模板或渲染函数中有一个条件判断来绕过其它内容就很重要；不然该组件可能会进入一个无限的渲染循环</li></ul></li><li>错误传播规则<ul><li>默认情况下，如果全局的 <code>config.errorHandler</code> 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报</li><li>如果一个组件的继承或父级从属链路中存在多个 <code>errorCaptured</code> 钩子，则它们将会被相同的错误逐个唤起</li><li>如果此 <code>errorCaptured</code> 钩子自身抛出了一个错误，则这个新错误和原本被捕获的错误都会发送给全局的 <code>config.errorHandler</code></li><li>一个 <code>errorCaptured</code> 钩子能够返回 <code>false</code> 以<span class='nota' data-nota='本质上是说这个错误已经被搞定了且应该被忽略'>阻止错误继续向上传播</span>。它会阻止其它任何会被这个错误唤起的 <code>errorCaptured</code> 钩子和全局的 <code>config.errorHandler</code></li></ul></li></ul><h2 id="选项-资源">选项 / 资源</h2><h3 id="directives"><code>directives</code></h3><ul><li>类型：<code>Object</code></li><li>作用：包含 <code>Vue</code> 实例可用指令的哈希表</li></ul><h3 id="filters"><code>filters</code></h3><ul><li>类型：<code>Object</code></li><li>作用：包含 <code>Vue</code> 实例可用过滤器的哈希表</li></ul><h3 id="components"><code>components</code></h3><ul><li>类型：<code>Object</code></li><li>作用：包含 <code>Vue</code> 实例可用组件的哈希表</li></ul><h2 id="选项-组合">选项 / 组合</h2><h3 id="parent"><code>parent</code></h3><ul><li>类型：<code>vue instance</code></li><li>详细：<ul><li>指定已创建的实例之父实例，在两者之间建立父子关系。子实例可以用 <code>this.$parent</code> 访问父实例，子实例被推入父实例的 <code>$children</code> 数组中</li><li>节制地使用 <code>$parent</code> 和 <code>$children</code> - 它们的主要目的是作为访问组件的应急方法。更推荐用 <code>props</code> 和 <code>events</code> 实现父子组件通信</li></ul></li></ul><h3 id="mixins"><code>mixins</code></h3><ul><li>类型：<code>Array&lt;Object&gt;</code></li><li>详细：<ul><li><code>mixins</code> 选项接收一个混入对象的数组。这些混入对象可以像正常的实例对象一样包含实例选项，这些选项将会被合并到最终的选项中，使用的是和 <code>Vue.extend()</code> 一样的选项合并逻辑。也就是说，如果你的混入包含一个 <code>created</code> 钩子，而创建组件本身也有一个，那么两个函数都会被调用</li><li><code>mixin</code> 钩子按照传入顺序依次调用，并在调用组件自身的钩子之前被调用</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">1</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">2</span>) &#125;,</span><br><span class="line">  mixins: [mixin]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure><h3 id="extends"><code>extends</code></h3><ul><li>类型：<code>Object | Function</code></li><li>作用：允许声明扩展另一个组件 (可以是一个简单的选项对象或构造函数)，而无需使用 <code>Vue.extend</code>。这主要是为了便于扩展单文件组件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CompA = &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在没有调用 `Vue.extend` 时候继承 CompA</span></span><br><span class="line"><span class="keyword">var</span> CompB = &#123;</span><br><span class="line">  <span class="keyword">extends</span>: CompA,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="provide-inject"><code>provide / inject</code></h3><ul><li>类型：<ul><li><code>provide</code>：<code>Object | () =&gt; Object</code></li><li><code>inject</code>：<code>Array&lt;string&gt; | &#123;[key: string]: string | Symbol | Object&#125;</code></li></ul></li><li>详细：<ul><li>这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在其上下游关系成立的时间里始终生效。如果你熟悉 <code>React</code>，这与 <code>React</code> 的上下文特性(<code>context</code>)很相似</li><li><code>provide</code> 选项应该是一个对象或返回一个对象的函数。该对象包含可注入其子孙的 <code>property</code>。在该对象中你可以使用 <code>ES2015 Symbols</code> 作为 <code>key</code>，但是只在原生支持 <code>Symbol</code> 和 <code>Reflect.ownKeys</code> 的环境下可工作</li><li><code>inject</code> 选项应该是：一个字符串数组，或一个对象，对象的 <code>key</code> 是本地的绑定名，<code>value</code> 是在可用的注入内容中搜索用的 <code>key</code> (字符串或 <code>Symbol</code>)，或一个对象，该对象的 <code>from property</code> 是在可用的注入内容中搜索用的 <code>key</code> (字符串或 <code>Symbol</code>)，<code>default property</code> 是降级情况下使用的 <code>value</code></li><li><code>provide</code> 和 <code>inject</code> 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的 <code>property</code> 还是可响应的</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父级组件提供 &#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">var</span> Provider = &#123;</span><br><span class="line">  provide: &#123;</span><br><span class="line">    foo: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件注入 &#x27;foo&#x27;</span></span><br><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.foo) <span class="comment">// =&gt; &quot;bar&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用symbol</span></span><br><span class="line"><span class="keyword">const</span> s = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Provider = &#123;</span><br><span class="line">  provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      [s]: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123; s &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用注入的值作为一个 property 的默认值</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">  props: &#123;</span><br><span class="line">    bar: &#123;</span><br><span class="line">      <span class="keyword">default</span> () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.foo</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用一个注入的值作为数据入口</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: [<span class="string">&#x27;foo&#x27;</span>],</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      bar: <span class="built_in">this</span>.foo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用默认值使其变成可选项</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123; <span class="attr">default</span>: <span class="string">&#x27;foo&#x27;</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果它需要从一个不同名字的 property 注入，则使用 from 来表示其源 property</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 与 prop 的默认值类似，你需要对非原始值使用一个工厂方法</span></span><br><span class="line"><span class="keyword">const</span> Child = &#123;</span><br><span class="line">  inject: &#123;</span><br><span class="line">    foo: &#123;</span><br><span class="line">      <span class="keyword">from</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function">() =&gt;</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选项-其它">选项 / 其它</h2><h3 id="name"><code>name</code></h3><ul><li>类型：<code>string</code></li><li>详细：<ul><li>只有作为组件选项时起作用</li><li>允许组件模板递归地调用自身。注意，组件在全局用 <code>Vue.component()</code> 注册时，全局 <code>ID</code> 自动作为组件的 <code>name</code></li><li>指定 <code>name</code> 选项的另一个好处是便于调试。有名字的组件有更友好的警告信息。另外，当在有 <code>vue-devtools</code>，未命名组件将显示成 <code>&lt;AnonymousComponent&gt;</code>，这很没有语义。通过提供 <code>name</code> 选项，可以获得更有语义信息的组件树</li></ul></li></ul><h3 id="delimiters"><code>delimiters</code></h3><ul><li>类型：<code>Array&lt;string&gt;</code></li><li>默认值：<code>[&quot;&#123;&#123;", "&#125;&#125;&quot;]</code></li><li>详细：<ul><li>这个选项只在完整构建版本中的浏览器内编译时可用</li><li>改变纯文本插入符号</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  delimiters: [<span class="string">&#x27;$&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插值由 &#123;&#123;&#125;&#125; 变成了 $&#123;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="functional"><code>functional</code></h3><ul><li>类型：<code>boolean</code></li><li>作用：使组件无状态 (没有 <code>data</code>) 和无实例 (没有 <code>this</code> 上下文)。他们用一个简单的 <code>render</code> 函数返回虚拟节点使它们渲染的代价更小</li></ul><h3 id="model"><code>model</code></h3><ul><li>类型：<code>&#123; prop?: string, event?: string &#125;</code></li><li>作用：允许一个自定义组件在使用 <code>v-model</code> 时定制 <code>prop</code> 和 <code>event</code>。默认情况下，一个组件上的 <code>v-model</code> 会把 <code>value</code> 用作 <code>prop</code> 且把 <code>input</code> 用作 <code>event</code>，但是一些输入类型比如单选框和复选框按钮可能想使用 <code>value prop</code> 来达到不同的目的。使用 <code>model</code> 选项可以回避这些情况产生的冲突</li><li>简单来说就是将<kbd>自定义组件</kbd>实现数据双向绑定的效果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-model的语法糖</span></span><br><span class="line">&lt;input v-model=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line">&lt;input v-bind=<span class="string">&quot;value&quot;</span> @input=<span class="string">&quot;value = $event.target.value&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模块化 model 自定义</span></span><br><span class="line"></span><br><span class="line">&lt;my-component :value=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">&lt;my-component v-model=<span class="string">&quot;value&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">    event: <span class="string">&#x27;change&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  prop: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">String</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// 自己触发事件</span></span><br><span class="line">    <span class="comment">// 传过来的值改变了</span></span><br><span class="line">    <span class="function"><span class="title">op</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.$emit(<span class="string">&#x27;change&#x27;</span>, <span class="string">&#x27;佩奇&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;my-component :value=<span class="string">&quot;value&quot;</span> @change=<span class="string">&quot;this.value = $event&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-checkbox&#x27;</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&#x27;checked&#x27;</span>,</span><br><span class="line">    event: <span class="string">&#x27;change&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// this allows using the `value` prop for a different purpose</span></span><br><span class="line">    value: <span class="built_in">String</span>,</span><br><span class="line">    <span class="comment">// use `checked` as the prop which take the place of `value`</span></span><br><span class="line">    checked: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-checkbox</span> <span class="attr">v-model</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;some value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-checkbox</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 相当于</span><br><span class="line"></span><br><span class="line">&lt;my-checkbox</span><br><span class="line">  :checked=&quot;foo&quot;</span><br><span class="line">  @change=&quot;val =&gt; &#123; foo = val &#125;&quot;</span><br><span class="line">  value=&quot;some value&quot;&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">my-checkbox</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="inheritAttrs"><code>inheritAttrs</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>true</code></li><li>作用：默认情况下，组件的根元素会继承组件的属性，如果不希望继承，设置为 <code>false</code>。取消默认继承后，可以通过 <code>$attrs</code> 属性显性的 <code>v-bind</code> 根元素上，注意：这个选项不影响 <code>class</code> 和 <code>style</code> 绑定</li></ul><h3 id="comments"><code>comments</code></h3><ul><li>类型：<code>boolean</code></li><li>默认值：<code>false</code></li><li>作用：当设为 <code>true</code> 时，将会保留且渲染模板中的 <code>HTML</code> 注释。默认行为是舍弃它们，注意，这个选项只在完整构建版本中的浏览器内编译时可用</li></ul><h2 id="实例-property">实例 <code>property</code></h2><h3 id="vm-data"><code>vm.$data</code></h3><ul><li>类型：<code>Object</code></li><li>作用：<code>Vue</code> 实例观察的数据对象。<code>Vue</code> 实例代理了对其 <code>data</code> 对象 <code>property</code> 的访问</li></ul><h3 id="vm-props"><code>vm.$props</code></h3><ul><li>类型：<code>Object</code></li><li>作用：当前组件接收到的 <code>props</code> 对象。<code>Vue</code> 实例代理了对其 <code>props</code> 对象 <code>property</code> 的访问</li></ul><h3 id="vm-el"><code>vm.$el</code></h3><ul><li>类型：<code>Element</code></li><li>作用：<code>Vue</code> 实例使用的根 <code>DOM</code> 元素，只读属性</li></ul><h3 id="vm-options"><code>vm.$options</code></h3><ul><li>类型：<code>Object</code></li><li>作用：用于当前 <code>Vue</code> 实例的初始化选项。需要在选项中包含自定义 <code>property</code> 时会有用处，只读属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  customOption: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$options.customOption) <span class="comment">// =&gt; &#x27;foo&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vm-parent"><code>vm.$parent</code></h3><ul><li>类型：<code>Vue instance</code></li><li>作用：获取父实例对象，只读属性</li></ul><h3 id="vm-root"><code>vm.$root</code></h3><ul><li>类型：<code>Vue instance</code></li><li>作用：获取根实例对象，只读属性</li></ul><h3 id="vm-children"><code>vm.$children</code></h3><ul><li>类型：`Array<Vue instance></li><li>作用：当前实例的直接子组件。需要注意 <code>$children</code> 并不保证顺序，也不是响应式的。如果你发现自己正在尝试使用 <code>$children</code> 来进行数据绑定，考虑使用一个数组配合 <code>v-for</code> 来生成子组件，并且使用 <code>Array</code> 作为真正的来源</li></ul><h3 id="vm-slots"><code>vm.$slots</code></h3><ul><li>类型：<code>&#123; [name: string]: ?Array&lt;VNode&gt; &#125;</code></li><li>详细：<ul><li>无响应性</li><li>用来访问被插槽分发的内容。每个具名插槽有其相应的 <code>property</code> (例如：<code>v-slot:foo</code> 中的内容将会在 <code>vm.$slots.foo</code> 中被找到)。<code>default property</code> 包括了所有没有被包含在具名插槽中的节点，或 <code>v-slot:default</code> 的内容</li><li>请注意插槽不是响应性的。如果你需要一个组件可以在被传入的数据发生变化时重渲染，我们建议改变策略，依赖诸如 <code>props</code> 或 <code>data</code> 等响应性实例选项</li><li>在使用渲染函数书写一个组件时，访问 <code>vm.$slots</code> 最有帮助</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Me<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some page content, which will be included in vm.$slots.default, because it&#x27;s not inside a named slot.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Copyright 2016 Evan You<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>If I have some content down here, it will also be included in vm.$slots.default.<span class="tag">&lt;/<span class="name">p</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> header = <span class="built_in">this</span>.$slots.header</span><br><span class="line">    <span class="keyword">var</span> body   = <span class="built_in">this</span>.$slots.default</span><br><span class="line">    <span class="keyword">var</span> footer = <span class="built_in">this</span>.$slots.footer</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">      createElement(<span class="string">&#x27;header&#x27;</span>, header),</span><br><span class="line">      createElement(<span class="string">&#x27;main&#x27;</span>, body),</span><br><span class="line">      createElement(<span class="string">&#x27;footer&#x27;</span>, footer)</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vm-scopedSlots"><code>vm.$scopedSlots</code></h3><ul><li>类型：<code>&#123; [name: string]: props =&gt; Array&lt;VNode&gt; | undefined &#125;</code></li><li>详细：<ul><li>用来访问作用域插槽。对于包括 默认 <code>slot</code> 在内的每一个插槽，该对象都包含一个返回相应 <code>VNode</code> 的函数</li><li><code>vm.$scopedSlots</code> 在使用渲染函数开发一个组件时特别有用</li></ul></li><li>注意：<ul><li>作用域插槽函数现在保证返回一个 <code>VNode</code> 数组，除非在返回值无效的情况下返回 <code>undefined</code></li><li>所有的 <code>$slots</code> 现在都会作为函数暴露在 <code>$scopedSlots</code> 中。如果你在使用渲染函数，不论当前插槽是否带有作用域，我们都推荐始终通过 <code>$scopedSlots</code> 访问它们。这不仅仅使得在未来添加作用域变得简单，也可以让你最终轻松迁移到所有插槽都是函数的 <code>Vue 3</code></li></ul></li></ul><h3 id="vm-refs"><code>vm.$refs</code></h3><ul><li>类型：<code>Object</code></li><li>作用：一个对象，持有注册过 <code>ref attribute</code> 的所有 <code>DOM</code> 元素和组件实例，只读属性</li></ul><h3 id="vm-isServer"><code>vm.$isServer</code></h3><ul><li>类型：<code>boolean</code></li><li>作用：当前 <code>vue</code> 实例是否运行于服务器，只读属性</li></ul><h3 id="vm-attrs"><code>vm.$attrs</code></h3><ul><li>类型：<code>&#123; [key: string]: string &#125;</code></li><li>作用：包含了父作用域中不作为 <code>prop</code> 被识别 (且获取) 的 <code>attribute</code> 绑定 (<code>class</code> 和 <code>style</code> 除外)。当一个组件没有声明任何 <code>prop</code> 时，这里会包含所有父作用域的绑定 (<code>class</code> 和 <code>style</code> 除外)，并且可以通过 <code>v-bind=&quot;$attrs&quot;</code> 传入内部组件——在创建高级别的组件时非常有用，只读属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="built_in">super</span>-component :value=<span class="string">&quot;&#123;1&#125;&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><h3 id="vm-listeners"><code>vm.$listeners</code></h3><ul><li>类型：<code>&#123; [key: string]: Function | Array&lt;Function&gt; &#125;</code></li><li>作用：包含了父作用域中的 (不含 <code>.native</code> 修饰器的) <code>v-on</code> 事件监听器。它可以通过 <code>v-on=&quot;$listeners&quot;</code> 传入内部组件——在创建更高层次的组件时非常有用</li></ul><h2 id="实例方法-数据">实例方法 / 数据</h2><h3 id="vm-watch-expOrFn-callback-options"><code>vm.$watch( expOrFn, callback, [options] )</code></h3><ul><li>参数：<ul><li><code>&#123;string | Function&#125; expOrFn</code></li><li><code>&#123;Function | Object&#125; callback</code></li><li><code>&#123;Object&#125; [options]</code><ul><li><code>&#123;boolean&#125; deep</code></li><li><code>&#123;boolean&#125; immediate</code></li></ul></li></ul></li><li>返回值：<code>&#123;Function&#125; unwatch</code></li><li>作用：观察 <code>Vue</code> 实例上的一个表达式或者一个函数计算结果的变化。回调函数得到的参数为新值和旧值。表达式只接受简单的键路径。对于更复杂的表达式，用一个函数取代</li><li>注意：在变更 (不是替换) 对象或数组时，旧值将与新值相同，因为它们的引用指向同一个对象/数组。Vue 不会保留变更之前值的副本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 键路径</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;a.b.c&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 做点什么</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line">vm.$watch(</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 表达式 `this.a + this.b` 每次得出一个不同的结果时</span></span><br><span class="line">    <span class="comment">// 处理函数都会被调用。</span></span><br><span class="line">    <span class="comment">// 这就像监听一个未被定义的计算属性</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.a + <span class="built_in">this</span>.b</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 做点什么</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vm.$watch 返回一个取消观察函数，用来停止触发回调：</span></span><br><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(<span class="string">&#x27;a&#x27;</span>, cb)</span><br><span class="line"><span class="comment">// 之后取消观察</span></span><br><span class="line">unwatch()</span><br></pre></td></tr></table></figure><ul><li>选项：<code>deep</code>，为了发现对象内部值的变化，可以在选项参数中指定 deep: true。注意监听数组的变更不需要这么做</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;someObject&#x27;</span>, callback, &#123;</span><br><span class="line">  deep: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.someObject.nestedValue = <span class="number">123</span></span><br><span class="line"><span class="comment">// callback is fired</span></span><br></pre></td></tr></table></figure><ul><li>选项：<code>immediate</code>，在选项参数中指定 <code>immediate: true</code> 将立即以表达式的当前值触发回调，注意在带有 <code>immediate</code> 选项时，不能在第一次回调时取消侦听器侦听给定的 <code>property</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vm.$watch(<span class="string">&#x27;a&#x27;</span>, callback, &#123;</span><br><span class="line">  immediate: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 立即以 `a` 的当前值触发回调</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这会导致报错</span></span><br><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    doSomething()</span><br><span class="line">    unwatch()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你仍然希望在回调内部调用一个取消侦听的函数，你应该先检查其函数的可用性</span></span><br><span class="line"><span class="keyword">var</span> unwatch = vm.$watch(</span><br><span class="line">  <span class="string">&#x27;value&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    doSomething()</span><br><span class="line">    <span class="keyword">if</span> (unwatch) &#123;</span><br><span class="line">      unwatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123; <span class="attr">immediate</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="vm-set-target-propertyName-index-value"><code>vm.$set( target, propertyName/index, value )</code></h3><ul><li>参数：<ul><li><code>&#123;Object | Array&#125; target</code></li><li><code>&#123;string | number&#125; propertyName/index</code></li><li><code>&#123;any&#125; value</code></li></ul></li><li>作用：这是全局 <code>Vue.set</code> 的别名，返回设置的值</li></ul><h3 id="vm-delete-target-propertyName-index"><code>vm.delete(target, propertyName/index)</code></h3><ul><li>参数：<ul><li><code>&#123;Object | Array&#125; target</code></li><li><code>&#123;string | number&#125; propertyName/index</code></li></ul></li><li>作用：这是 <code>Vue.delete</code> 的别名</li></ul><h2 id="实例方法-事件">实例方法 / 事件</h2><h3 id="vm-on-event-callback"><code>vm.$on(event, callback)</code></h3><ul><li>参数：<ul><li><code>&#123;string | Array&lt;string&gt;&#125; event</code></li><li><code>&#123;Function&#125; callback</code></li></ul></li><li>作用：监听当前实例上的自定义事件。事件可以由 <code>vm.$emit</code> 触发。回调函数会接收所有传入事件触发函数的额外参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vm.$on(<span class="string">&#x27;test&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(msg)</span><br><span class="line">&#125;)</span><br><span class="line">vm.$emit(<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"><span class="comment">// =&gt; &quot;hi&quot;</span></span><br></pre></td></tr></table></figure><h3 id="vm-once-event-callback"><code>vm.$once(event, callback)</code></h3><ul><li>参数：<ul><li><code>&#123;string&#125; event</code></li><li><code>&#123;Function&#125; callback</code></li></ul></li><li>作用：监听一个自定义事件，但只触发一次，监听器就会被移除</li></ul><h3 id="vm-off-event-callback"><code>vm.$off([event, callback])</code></h3><ul><li>参数：<ul><li><code>&#123;string | Array&lt;string&gt;&#125; event</code></li><li><code>&#123;Function&#125; callback</code></li></ul></li><li>作用：<ul><li>移除自定义事件监听器</li><li>如果没有提供参数，则移除所有事件监听器</li><li>如果只提供了事件名，则移除该事件所有的监听器</li><li>如果同时提供了事件和回调，则只移除这个回调的监听器</li></ul></li></ul><h3 id="vm-emit-eventName-args"><code>vm.$emit(eventName, [...args])</code></h3><ul><li><p>参数：</p><ul><li><code>&#123;string&#125; eventName</code></li><li><code>[...args]</code></li></ul></li><li><p>作用：触发当前实例上的事件，附加参数都会传给监听器回调</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;welcome-button&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;button v-on:click=&quot;$emit(&#x27;welcome&#x27;)&quot;&gt;</span></span><br><span class="line"><span class="string">      Click me to be welcomed</span></span><br><span class="line"><span class="string">    &lt;/button&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;emit-example-simple&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-button</span> <span class="attr">v-on:welcome</span>=<span class="string">&quot;sayHi&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">welcome-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#emit-example-simple&#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    sayHi: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      alert(<span class="string">&#x27;Hi!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="实例方法-生命周期">实例方法 / 生命周期</h2><h3 id="vm-mount-elementOrSelector"><code>vm.$mount([elementOrSelector])</code></h3><ul><li>参数：<ul><li><code>&#123;Element | string&#125; [elementOrSelector]</code></li><li><code>&#123;boolean&#125; [hydrating]</code></li></ul></li><li>返回值：<code>vm</code> 实例自身</li><li>用法：<ul><li>如果 <code>Vue</code> 实例在实例化时没有收到 <code>el</code> 选项，则它处于未挂载状态，没有关联的 <code>DOM</code> 元素。可以使用 <code>vm.$mount()</code> 手动地挂载一个未挂载的实例</li><li>如果没有提供 <code>elementOrSelector</code> 参数，模板将被渲染为文档之外的的元素，并且你必须使用原生 <code>DOM API</code> 把它插入文档中</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyComponent = Vue.extend(&#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;div&gt;Hello!&lt;/div&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并挂载到 #app (会替换 #app)</span></span><br><span class="line"><span class="keyword">new</span> MyComponent().$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line"><span class="keyword">new</span> MyComponent(&#123; <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者，在文档之外渲染并且随后挂载</span></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> MyComponent().$mount()</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;app&#x27;</span>).appendChild(component.$el)</span><br></pre></td></tr></table></figure><h3 id="vm-forceUpdate"><code>vm.$forceUpdate()</code></h3><ul><li>作用：迫使 <code>vue</code> 实例重新渲染，注意它仅仅影响实例本身和插入插槽内容的子组件，而不是所有子组件</li></ul><h3 id="vm-nextTick-callback"><code>vm.$nextTick([callback])</code></h3><ul><li>参数：<code>&#123;Function&#125; [callback]</code></li><li>作用：将回调延迟到下次 <code>DOM</code> 更新循环之后执行。在修改数据之后立即使用它，然后等待 <code>DOM</code>更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    example: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 修改数据</span></span><br><span class="line">      <span class="built_in">this</span>.message = <span class="string">&#x27;changed&#x27;</span></span><br><span class="line">      <span class="comment">// DOM 还没有更新</span></span><br><span class="line">      <span class="built_in">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// DOM 现在更新了</span></span><br><span class="line">        <span class="comment">// `this` 绑定到当前实例</span></span><br><span class="line">        <span class="built_in">this</span>.doSomethingElse()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vm-destroy"><code>vm.$destroy()</code></h3><ul><li>用法：完全销毁一个实例，清理它与其它实例的连接，解绑它的全部指令及事件监听器，触发 <code>beforeDestroy</code> 和 <code>destroyed</code> 钩子</li></ul><h2 id="指令">指令</h2><h3 id="v-text"><code>v-text</code></h3><ul><li>预期：<code>string</code></li><li>详细：更新元素的 <code>textContent</code>，如果要更新部分的 <code>textContent</code>，需要使用 <code>&#123;&#123;Mustache&#125;&#125;</code> 插值</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 和下面的一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-html"><code>v-html</code></h3><ul><li>预期：<code>string</code></li><li>详细：更新元素的 <code>innerHTML</code>。注意：内容按普通 <code>HTML</code> 插入 - 不会作为 <code>Vue</code> 模板进行编译。如果试图使用 <code>v-html</code> 组合模板，可以重新考虑是否通过使用组件来替代</li><li>注意：<ul><li>在网站上<wavy>动态渲染任意 HTML 是非常危险的，因为容易导致 XSS 攻击</wavy>，只在可信内容上使用 <code>v-html</code>，永不用在用户提交的内容上</li><li>在单文件组件里，<code>scoped</code> 的样式不会应用在 <code>v-html</code> 内部，因为那部分 <code>HTML</code> 没有被 <code>Vue</code> 的模板编译器处理。如果你希望针对 <code>v-html</code> 的内容设置带作用域的 <code>CSS</code>，你可以替换为 <code>CSS Modules</code> 或用一个额外的全局 <code>&lt;style&gt;</code> 元素手动设置类似 <code>BEM</code> 的作用域策略</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><code>v-show</code></h3><ul><li>预期：<code>any</code></li><li>作用：根据表达式之真假值，切换元素的 <code>display CSS property</code>，当条件变化时该指令触发过渡效果</li></ul><h3 id="v-if"><code>v-if</code></h3><ul><li>预期：<code>any</code></li><li>作用：根据表达式的值的 <code>truthiness</code> 来有条件地渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建。如果元素是 <code>&lt;template&gt;</code>，将提出它的内容作为条件块，当条件变化时该指令触发过渡效果</li><li>注意：当和 <code>v-if</code> 一起使用时，<code>v-for</code> 的优先级比 <code>v-if</code> 更高</li></ul><h3 id="v-else"><code>v-else</code></h3><ul><li>限制：前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code></li><li>作用：条件渲染</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;Math.random() &gt; 0.5&quot;</span>&gt;</span></span><br><span class="line">  Now you see me</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Now you don&#x27;t</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-else-if"><code>v-else-if</code></h3><ul><li>类型：<code>any</code></li><li>限制：前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code></li><li>作用：条件渲染</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span></span><br><span class="line">  A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;B&#x27;&quot;</span>&gt;</span></span><br><span class="line">  B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;type === &#x27;C&#x27;&quot;</span>&gt;</span></span><br><span class="line">  C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for"><code>v-for</code></h3><ul><li>预期：<code>Array | Object | number | string | Iterable</code></li><li>用法：基于源数据多次渲染元素或模板块。此指令之值，必须使用特定语法 <code>alias in expression</code>，为当前遍历的元素提供别名</li><li>新增：<code>v-for</code> 实现了部署了 <code>Interable</code> 接口的值，包括原生的 <code>Map</code> 和 <code>Set</code>，不过 <code>vue2.x</code> 目前不支持响应式的 <code>Map</code> 和 <code>Set</code>，所以无法自动探测到变更</li><li>注意：当和 <code>v-if</code> 一起使用时，<code>v-for</code> 的优先级比 <code>v-if</code> 更高</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, key) in object&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(val, name, index) in object&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-on"><code>v-on</code></h3><ul><li>缩写：<code>@</code></li><li>预期：<code>Function | Inline Statement | Object</code></li><li>参数：<code>event</code></li><li>修饰符：<ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code></li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code></li><li><code>.capture</code> - 添加事件侦听器时使用 <code>capture</code> 模式</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时才触发回调</li><li><code>.&#123;keyCode | keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调</li><li><code>.native</code> - 监听组件根元素的原生事件</li><li><code>.once</code> - 只触发一次回调</li><li><code>.left</code> - <code>(2.2.0)</code> 只当点击鼠标左键时触发</li><li><code>.right</code> - <code>(2.2.0)</code> 只当点击鼠标右键时触发</li><li><code>.middle</code> - <code>(2.2.0)</code> 只当点击鼠标中键时触发</li><li><code>.passive</code> - <code>(2.3.0)</code> 以 <code>&#123;passive: true&#125;</code> 模式添加侦听器</li></ul></li><li>用法：<ul><li>绑定事件监听器。事件类型由参数指定。表达式可以是一个方法的名字或一个内联语句，如果没有修饰符也可以省略</li><li>用在普通元素上时，只能监听原生 <code>DOM</code> 事件。用在自定义元素组件上时，也可以监听子组件触发的自定义事件</li><li>在监听原生 <code>DOM</code> 事件时，方法以事件为唯一的参数。如果使用内联语句，语句可以访问一个 <code>$event property：v-on:click=&quot;handle('ok', $event)&quot;</code></li><li>从 <code>2.4.0</code> 开始，<code>v-on</code> 同样支持不带参数绑定一个事件/监听器键值对的对象。注意当使用对象语法时，是不支持任何修饰器的</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态事件 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:</span>[<span class="attr">event</span>]=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doThat(&#x27;hello&#x27;, $event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态事件缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @[<span class="attr">event</span>]=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 停止冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  串联修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;onEnter&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.13</span>=<span class="string">&quot;onEnter&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击回调只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;doThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象语法 (2.4.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">&quot;&#123; mousedown: doThis, mouseup: doThat &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">在子组件上监听自定义事件 (当子组件触发“my-event”时将调用事件处理器)：</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleThis&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">my-event</span>=<span class="string">&quot;handleThis(123, $event)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件中的原生事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> @<span class="attr">click.native</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><code>v-bind</code></h3><ul><li>缩写：<code>:</code></li><li>预期：<code>any (with argument) | Object (without argument)</code></li><li>参数：<code>attrOrProp (optional)</code></li><li>修饰符：<ul><li><code>.prop</code></li><li><code>.camel</code></li><li><code>.sync</code></li></ul></li><li>用法：<ul><li>动态地绑定一个或多个 <code>attribute</code>，或一个组件 <code>prop</code> 到表达式</li><li>在绑定 <code>class</code> 或 <code>style attribute</code> 时，支持其它类型的值，如数组或对象</li><li>在绑定 <code>prop</code> 时，<code>prop</code> 必须在子组件中声明。可以用修饰符指定不同的绑定类型</li><li>没有参数时，可以绑定到一个包含键值对的对象。注意此时 <code>class</code> 和 <code>style</code> 绑定不支持数组和对象</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个 attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;imageSrc&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态 attribute 名缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联字符串拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;&#x27;/path/to/images/&#x27; + fileName&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- class 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;red: isRed&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, classB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[classA, &#123;classB: isB, classC: isC&#125;]&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;fontSize: size + &#x27;px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;[styleObjectA, styleObjectB]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定一个全是 attribute 的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">&quot;&#123;id: someProp, &#x27;other-attr&#x27;: otherProp&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 prop 修饰符绑定 DOM attribute --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:text-content.prop</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop</span>=<span class="string">&quot;someThing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-bind</span>=<span class="string">&quot;$props&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- XLink --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:xlink:special</span>=<span class="string">&quot;foo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.camel</code> 修饰符允许在使用 <code>DOM</code> 模板时将 <code>v-bind property</code> 名称驼峰化，例如 <code>SVG</code> 的 <code>viewBox property</code>，在使用字符串模板或通过 <code>vue-loader / vueify</code> 编译时，无需使用 <code>.camel</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">:view-box.camel</span>=<span class="string">&quot;viewBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model"><code>v-model</code></h3><ul><li>预期：随表单控件类型不同而不同</li><li>限制：<ul><li><code>input</code></li><li><code>select</code></li><li><code>textarea</code></li><li><code>components</code></li></ul></li><li>修饰符：<ul><li><code>.lazy</code> - 取代 <code>input</code> 监听 <code>change</code> 事件</li><li><code>.number</code> - 输入字符串转为有效的数字</li><li><code>.trim</code> - 输入首尾空格过滤</li></ul></li><li>用法：在表单控件或组件上创建双向绑定</li></ul><h3 id="v-slot"><code>v-slot</code></h3><ul><li>缩写：<code>#</code></li><li>预期：可放置在函数参数位置的 <code>javascript</code> 表达式，可选，只需要在为插槽传入 <code>prop</code> 的时候使用</li><li>参数：插槽名(可选，默认是 <code>default</code>)</li><li>限制：<ul><li><code>template</code></li><li>组件</li></ul></li><li>用法：提供具名插槽或需要接收 <code>prop</code> 的插槽</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 具名插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    Header content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  Default slot content</span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    Footer content</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 接收 prop 的具名插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">infinite-scroll</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:item</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; slotProps.item.text &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">infinite-scroll</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 接收 prop 的默认插槽，使用了解构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mouse-position</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; x, y &#125;&quot;</span>&gt;</span></span><br><span class="line">  Mouse position: &#123;&#123; x &#125;&#125;, &#123;&#123; y &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">mouse-position</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-pre"><code>v-pre</code></h3><ul><li>不需要参数</li><li>用法：跳过这个元素和它的子元素的编译过程。可以用来显示原始 <code>Mustache</code> 标签。跳过大量没有指令的节点会加快编译</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123;me&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 原样 &lt;span&gt;&#123;&#123;me&#125;&#125;&lt;/span&gt; --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-cloak"><code>v-cloak</code></h3><ul><li>不需要表达式</li><li>用法：这个指令保持在元素上直到关联实例结束编译。和 <code>CSS</code> 规则如 <code>[v-cloak] &#123;display: none&#125;</code> 一起用时，这个指令可以隐藏未编译的 <code>Mustache</code> 标签直到实例准备完毕</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[v-cloak]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直到编译结束后显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-once"><code>v-once</code></h3><ul><li>不需要表达式</li><li>详细：只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 有子元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-once</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>comment<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-once</span> <span class="attr">:comment</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- `v-for` 指令--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;i in list&quot;</span> <span class="attr">v-once</span>&gt;</span>&#123;&#123;i&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="特殊的-attribute">特殊的 <code>attribute</code></h2><h3 id="key"><code>key</code></h3><ul><li>预期：<code>number | string | boolean (2.4.2 新增) | symbol (2.5.12 新增)</code></li><li><code>key</code> 的特殊 <code>attribute</code> 主要用在 <code>Vue</code> 的虚拟 <code>DOM</code> 算法，在新旧 <code>nodes</code> 对比时辨识 <code>VNodes</code>。如果不使用 <code>key</code>，<code>Vue</code> 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。而使用 <code>key</code> 时，它会基于 <code>key</code> 的变化重新排列元素顺序，并且会移除 <code>key</code> 不存在的元素</li><li>有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误</li><li>它可以用于强制替换元素 / 组件，而不是重复使用它<ul><li>完整地触发组件的生命周期钩子</li><li>触发过渡</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当 text 改变时，span总是被替换而不是修改 text的内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">:key</span>=<span class="string">&quot;text&quot;</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ref"><code>ref</code></h3><ul><li>预期：<code>string</code></li></ul><p><code>ref</code>被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 <code>$refs</code> 对象上。如果在普通的 <code>DOM</code> 元素上使用，引用指向的就是 <code>DOM</code> 元素；如果用在子组件上，引用就指向组件实例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- `vm.$refs.p` will be the DOM node --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `vm.$refs.child` will be the child component instance --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含 <code>DOM</code> 节点或组件实例的数组</p><p>关于 <code>ref</code> 注册时间的重要说明：因为 <code>ref</code> 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们 - 它们还不存在！<code>$refs</code> 也不是响应式的，因此你不应该试图用它在模板中做数据绑定</p><h3 id="is"><code>is</code></h3><ul><li>预期：<code>string | Object(组件的选项对象)</code></li></ul><p>用于动态组件且基于DOM内模板的限制来工作</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当 `currentView` 改变时，组件也跟着改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这样做是有必要的，因为 `&lt;my-row&gt;` 放在一个 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- `&lt;table&gt;` 内可能无效且被放置到外面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;my-row&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="slot"><code>slot</code></h3><p>已经废弃，使用 <code>v-slot</code> 代替它，用于标记哪个具名插槽中插入子组件内容</p><h3 id="slot-scope"><code>slot-scope</code></h3><p>已经废弃，使用 <code>v-slot=&quot;property&quot;</code> 代替</p><h3 id="scope"><code>scope</code></h3><p>已经废弃，使用 <code>v-slot:attrbute</code> 或 <code>#attrbute</code> 代替</p><h2 id="内置的组件">内置的组件</h2><h3 id="component"><code>component</code></h3><ul><li><code>props</code>fsf<ul><li><code>is</code></li><li><code>inline-template</code></li></ul></li><li>用法<ul><li>渲染一个元组件为动态组件，根据 <code>is</code> 的值，来决定哪个组件被渲染</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态组件由 vm 实例的 `componentId` property 控制 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 也能够渲染注册过的组件或 prop 传入的组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;$options.components.child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="transition"><code>transition</code></h3><ul><li><code>props</code>：<ul><li><code>name</code> - <code>string</code>，用于自动生成 <code>CSS</code> 过渡类名。例如：<code>name: 'fade'</code> 将自动拓展为 <code>.fade-enter，.fade-enter-active</code> 等。默认类名为 <code>v</code></li><li><code>appear</code> - <code>boolean</code>，是否在初始渲染时使用过渡。默认为 <code>false</code>。</li><li><code>css</code> - <code>boolean</code>，是否使用 <code>CSS</code> 过渡类。默认为 <code>true</code>。如果设置为 <code>false</code>，将只通过组件事件触发注册的 <code>JavaScript</code> 钩子。</li><li><code>type</code> - <code>string</code>，指定过渡事件类型，侦听过渡何时结束。有效值为 <code>transition</code> 和 <code>animation</code>。默认 <code>Vue.js</code> 将自动检测出持续时间长的为过渡事件类型</li><li><code>mode</code> - <code>string</code>，控制离开/进入过渡的时间序列。有效的模式有 <code>out-in</code> 和 <code>in-out</code>；默认同时进行。</li><li><code>duration</code> - <code>number</code> | <code>&#123;enter: number, leave: number&#125;</code> 指定过渡的持续时间。默认情况下，<code>Vue</code> 会等待过渡所在根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。</li><li><code>enter-class</code> - <code>string</code></li><li><code>leave-class</code> - <code>string</code></li><li><code>appear-class</code> - <code>string</code></li><li><code>enter-to-class</code> - <code>string</code></li><li><code>leave-to-class</code> - <code>string</code></li><li><code>appear-to-class</code> - <code>string</code></li><li><code>enter-active-class</code> - <code>string</code></li><li><code>leave-active-class</code> - <code>string</code></li><li><code>appear-active-class</code> - <code>string</code></li></ul></li><li>事件<ul><li><code>before-enter</code></li><li><code>before-leave</code></li><li><code>before-appear</code></li><li><code>enter</code></li><li><code>leave</code></li><li><code>appear</code></li><li><code>after-enter</code></li><li><code>after-leave</code></li><li><code>after-appear</code></li><li><code>enter-cancelled</code></li><li><code>leave-cancelled (v-show only)</code></li><li><code>appear-cancelled</code></li></ul></li><li>用法：</li></ul><p><code>&lt;transition&gt;</code> 元素作为单个元素/组件的过渡效果。<code>&lt;transition&gt;</code> 只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在可被检查的组件层级中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 简单元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件钩子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;transition-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">after-enter</span>=<span class="string">&quot;transitionComplete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  ...</span><br><span class="line">  methods: &#123;</span><br><span class="line">    transitionComplete: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 传入 &#x27;el&#x27; 这个 DOM 元素作为参数。</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#transition-demo&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="transition-group"><code>transition-group</code></h3><ul><li><code>props</code><ul><li><code>tag</code> - <code>string</code>，默认是 <code>span</code></li><li><code>move-class</code> - 覆盖移动过渡期间应用的 <code>css</code> 类</li><li>除了 <code>mode</code>，其他 <code>attribute</code> 和 <code>transition</code> 相同</li></ul></li><li>事件<ul><li>事件和 <code>transition</code> 相同</li></ul></li><li>用法<ul><li><code>&lt;transition-group&gt;</code> 元素作为多个元素/组件的过渡效果。<code>&lt;transition-group&gt;</code> 渲染一个真实的 <code>DOM</code> 元素。默认渲染 <code>&lt;span&gt;</code>，可以通过 <code>tag attribute</code> 配置哪个元素应该被渲染</li><li><code>&lt;transition-group&gt;</code> 支持通过 <code>CSS transform</code> 过渡移动。当一个子节点被更新，从屏幕上的位置发生变化，它会被应用一个移动中的 <code>CSS</code> 类 (通过 <code>name attribute</code> 或配置 <code>move-class attribute</code> 自动生成)。如果 <code>CSS transform property</code> 是可过渡<code>property</code>，当应用移动类时，将会使用 <code>FLIP</code> 技术使元素流畅地到达动画终点</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slide&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="keep-alive"><code>keep-alive</code></h3><ul><li><code>props</code><ul><li><code>include</code> - 字符串或正则表达式，只有名称匹配的组件会被缓存</li><li><code>exclude</code> - 字符串或正则表达式，任何名称匹配的组件都不会被缓存</li><li><code>max</code> - 最多可以缓存多少个组件实例</li></ul></li><li>用法<ul><li><code>&lt;keep-alive&gt;</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。和 <code>&lt;transition&gt;</code> 相似，<code>&lt;keep-alive&gt;</code> 是一个抽象组件：它自身不会渲染一个 <code>DOM</code> 元素，也不会出现在组件的父组件链中</li><li>当组件在 <code>&lt;keep-alive&gt;</code> 内被切换，它的 <code>activated</code> 和 <code>deactivated</code> 这两个生命周期钩子函数将会被对应执行</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在 2.2.0 及其更高版本中，activated 和 deactivated 将会在 &lt;keep-alive&gt; 树内的所有嵌套组件中触发 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 主要用于保留组件状态或避免重新渲染 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 基本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 多个条件判断的子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp-a</span> <span class="attr">v-if</span>=<span class="string">&quot;a &gt; 1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">comp-b</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">comp-b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 和 `&lt;transition&gt;` 一起使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，<code>keep-alive</code> 是<u>用在其一个直属的子组件被开关的情形</u>，如果你在其中有 <code>v-for</code> 则不会工作。如果有上述的多个条件性的子元素，<code>&lt;keep-alive&gt;</code> 要求同时只有一个子元素被渲染</p><p><code>include</code> 和 <code>exclude</code> 允许组件有条件地缓存，二者都可以用逗号分割字符串、正则表达式或一个数字表示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;a,b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)。匿名组件不能被匹配</p><p><code>max</code> 表示最多可以缓存多少组件，一旦这个数字达到了，新实例创建之前，已缓存组件中最久没有被访问的实例会被销毁</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- &lt;keep-alive&gt; 不会在函数式组件中正常工作，因为它们没有缓存实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:max</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="slot-2"><code>slot</code></h3><ul><li><code>props</code>：<code>name</code> - <code>string</code> 用于命名插槽</li><li><code>usage</code>: <code>slot</code> 元素作为组件模板之中的内容分发插槽，<code>slot</code> 元素自身将会被替换</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x进阶用法</title>
      <link href="262ac49e/"/>
      <url>262ac49e/</url>
      
        <content type="html"><![CDATA[<h2 id="混入">混入</h2><span class='nota' data-nota='mixin'>混入</span>提供了一种非常灵活的方式，来分发 `vue` 组件中的可复用功能，一个混入对象可以包含任意组件选项，当组件使用混入对象时，所有混入对象的选项将被混入到组件本身的选项<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个混入对象</span></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.hello()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个使用混入对象的组件</span></span><br><span class="line"><span class="keyword">var</span> Component = Vue.extend(&#123; <span class="comment">//使用Vue.extend方法创建一个组件构造器</span></span><br><span class="line">  mixins: [myMixin]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//将组件构造器实例化</span></span><br><span class="line"><span class="keyword">var</span> component = <span class="keyword">new</span> Component() <span class="comment">// =&gt; &quot;hello from mixin!&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里介绍一下 Vue.extend(&#123;&#125;) --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    Vue.extend(&#123;&#125;) 其实是一个vue的构造器，继承自vue</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用这个构造器可以创建一个组件子类，参数是一个包含组件选项的对象，注意data必须是一个函数才可以在extend中使用</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    当然也可以这样 new Vue.extend()(&#123;el: &#x27;#app&#x27;, data()&#123;&#125;&#125;)  但是不推荐这么写  new Vue(&#123;&#125;) 不香嘛~</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Component = Vue.extend(&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// data: &#123;name: &#x27;苏西&#x27;&#125;,</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里一定要是函数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">&#x27;苏西&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;佩奇&#x27;</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 创建一个vue组件实例 vm 挂载在app上</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Component().$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="选项合并">选项合并</h3><p>当组件和混入对象含有同名选项时，这些选项将会以合适的方式进行合并，默认合并策略如下：</p><ol><li><span class='nota' data-nota='data'>数据对象</span>在内部进行递归合并，如果<span class='nota' data-nota='同名现象'>发生冲突</span>以组件数据优先</li><li>同名钩子函数合并为一个数组，都会被调用，但混入对象的钩子函数会在组件钩子函数<kbd>之前</kbd>调用</li><li>值为对象的选项，如 <code>methods</code>、<code>components</code> 和 <span class='nota' data-nota='自定义指令，后面介绍'>directives</span>，将会被合并为一个对象，如果键名发生冲突，取组件对象的键值对</li><li><code>Vue.extend()</code> 也<u>使用同样的策略进行合并</u></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 定义一个混入对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myMixin = &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            name: <span class="string">&#x27;佩奇&#x27;</span> <span class="comment">// 不会覆盖组件中的name</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.hello(); <span class="comment">// 1. 先执行混入的钩子 methods中的hello被组件中的hello所覆盖</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;混入的钩子函数&#x27;</span>); <span class="comment">// 3. 执行混入的钩子方法</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;hello from mixin!&#x27;</span>)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">hi</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;hi mixin 混入&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        mixins: [myMixin],</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">&#x27;苏西&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.hi(); <span class="comment">// 2. 执行混入的hi</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">&#x27;组件自身的钩子函数&#x27;</span>); <span class="comment">// 4. 执行组件中的钩子</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;hello from component&#x27;</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全局混入">全局混入</h3><p>混入可以进行全局注册，使用全局混入，它将影响每一个之后创建的 <code>vue</code> 实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为自定义的选项 &#x27;myOption&#x27; 注入一个处理器。</span></span><br><span class="line">Vue.mixin(&#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this.$options 获取当前实例配置项(配置对象，例如 el,data,methods等)</span></span><br><span class="line">    <span class="keyword">var</span> myOption = <span class="built_in">this</span>.$options.myOption</span><br><span class="line">    <span class="keyword">if</span> (myOption) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(myOption)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  myOption: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// hello</span></span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-info"></i><p>请谨慎使用全局混入，因为它会影响每个单独创建的 <code>vue</code> 实例 (包括第三方组件)。大多数情况下，只应当应用于自定义选项，推荐将其作为插件发布，以避免重复应用混入</p></div><h3 id="自定义选项合并策略">自定义选项合并策略</h3><p>自定义选项将使用<span class='nota' data-nota='就是上面的四条策略'>默认策略</span>，如果想让自定义选项以自定义逻辑合并，可以向 <code>Vue.config.optionMergeStrategies</code> 添加一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设组件中有一个属性 myOption 混入中也有一个属性 myOption 下面定义myOption的合并策略</span></span><br><span class="line">Vue.config.optionMergeStrategies.myOption = <span class="function"><span class="keyword">function</span>(<span class="params">toVal, fromVal</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回合并后的值 </span></span><br><span class="line">    <span class="built_in">console</span>.log(toVal, fromVal);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!toVal)&#123;</span><br><span class="line">        <span class="keyword">return</span> fromVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!fromVal)&#123;</span><br><span class="line">        <span class="keyword">return</span> toVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> toVal + fromVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于多数值为对象的选项，可以使用与 methods 相同的合并策略</span></span><br><span class="line"><span class="keyword">var</span> strategies = Vue.config.optionMergeStrategies</span><br><span class="line">strategies.myOption = strategies.methods</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义混入策略</span></span><br><span class="line">Vue.config.optionMergeStrategies.myOption = <span class="function"><span class="keyword">function</span>(<span class="params">toVal, fromVal</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回合并后的值 </span></span><br><span class="line">    <span class="built_in">console</span>.log(toVal, fromVal);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!toVal)&#123;</span><br><span class="line">        <span class="keyword">return</span> fromVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!fromVal)&#123;</span><br><span class="line">        <span class="keyword">return</span> toVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> toVal + fromVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myMixin = &#123;</span><br><span class="line">    myOption: <span class="string">&#x27;suxi&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    myOption: <span class="string">&#x27;peiqi&#x27;</span>,</span><br><span class="line">    mixins: [myMixin],</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$options.myOption); <span class="comment">// suxipeiqi</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="自定义指令">自定义指令</h2><p>除了核心功能默认内置的指令(<code>v-model</code> 和 <code>v-show</code>)，<code>vue</code> 允许注册自定义指令</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 举个栗子</span></span><br><span class="line"><span class="comment">// 注册一个全局自定义指令 v-focus</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时的回调</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册指令，组件也接受一个 directives 的选项</span></span><br><span class="line">directives: &#123;</span><br><span class="line">  focus: &#123;</span><br><span class="line">    <span class="comment">// 指令的定义</span></span><br><span class="line">    inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      el.focus()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用的时候  &lt;input v-focus&gt;</span></span><br></pre></td></tr></table></figure><h3 id="钩子函数">钩子函数</h3><p>一个指令定义对象可以提供下面几个钩子函数(可选)</p><ol><li><code>bind</code>：只调用一次，指令第一次绑定到元素时调用，这里可以进行一次性的初始化设置</li><li><code>inserted</code>：被绑定元素插入父节点时调用(仅保证父节点存在，但不一定已被插入到文档中)</li><li><code>update</code>：所在组件的 <code>VNode</code> 更新时调用，但是可能发生在其子 <code>VNode</code> 更新之前，指令的值可能发生了改变，也可能没有，但是可以通过比较更新前后的值来忽略不必要的模板更新</li><li><code>componentUpdated</code>：指令所在组件的 <code>VNode</code> 及其子 <code>VNode</code> 全部更新后调用</li><li><code>unbind</code>：只调用一次，指令与元素解绑时调用</li></ol><h3 id="钩子函数的参数">钩子函数的参数</h3><p>指令钩子函数会被传入以下参数</p><ol><li><code>el</code>：指令所绑定的元素，可以直接操作 <code>dom</code></li><li><code>binding</code>：一个对象，格式如下<ul><li><code>name</code>：指令名，不包括 <code>v-</code> 前缀</li><li><code>value</code>：指令的绑定值，例如 <code>v-my-directive=&quot;1 + 1&quot;</code>，绑定值为 <code>2</code></li><li><code>oldValue</code>：指令绑定的前一个值，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用，无论是否改变都可用</li><li><code>expression</code>：字符串形式的指令表达式，例如 <code>v-my-directive=&quot;1 + 1&quot;</code>，表达式为 <code>&quot;1 + 1&quot;</code></li><li><code>arg</code>：传给指令的参数，可选，例如 <code>v-my-directive:foo</code> 中，参数是 <code>foo</code></li><li><code>modifiers</code>：一个包含修饰符的对象，例如 <code>v-my-directive.foo.bar</code> 中，修饰符对象为 <code>&#123;foo: true, bar: true&#125;</code></li></ul></li><li><code>vnode</code>：<code>vue</code> 编译生成的虚拟节点</li><li><code>oldVnode</code>：上一个虚拟节点，仅在 <code>update</code> 和 <code>componentUpdated</code> 钩子中可用</li></ol><div class="note red icon flat"><i class="note-icon fa fa-paper-plane"></i><p>除了 <code>el</code> 之外，其它参数都应该是只读的，切勿进行修改。如果需要在钩子之间共享数据，建议通过元素的 <code>dataset</code> 来进行</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">v-demo:foo.a.b</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;demo&#x27;</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">JSON</span>.stringify</span><br><span class="line">    el.innerHTML =</span><br><span class="line">      <span class="string">&#x27;name: &#x27;</span>       + s(binding.name) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// demo</span></span><br><span class="line">      <span class="string">&#x27;value: &#x27;</span>      + s(binding.value) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// hello</span></span><br><span class="line">      <span class="string">&#x27;expression: &#x27;</span> + s(binding.expression) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// message</span></span><br><span class="line">      <span class="string">&#x27;argument: &#x27;</span>   + s(binding.arg) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// foo</span></span><br><span class="line">      <span class="string">&#x27;modifiers: &#x27;</span>  + s(binding.modifiers) + <span class="string">&#x27;&lt;br&gt;&#x27;</span> + <span class="comment">// &#123;a: true, b: true&#125;</span></span><br><span class="line">      <span class="string">&#x27;vnode keys: &#x27;</span> + <span class="built_in">Object</span>.keys(vnode).join(<span class="string">&#x27;, &#x27;</span>) <span class="comment">// 虚拟dom的所有key</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态指令参数">动态指令参数</h3><p>指令的参数可以是动态的，例如，在 <code>v-mydirective:[argument] = &quot;value&quot;</code> 中，可以根据组件实例数据进行更新</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>Scroll down inside this section ↓<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-pin:</span>[<span class="attr">direction</span>]=<span class="string">&quot;200&quot;</span>&gt;</span>I am pinned onto the page at 200px to the left.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;pin&#x27;</span>, &#123;</span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span> (<span class="params">el, binding, vnode</span>) </span>&#123;</span><br><span class="line">    el.style.position = <span class="string">&#x27;fixed&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> s = (binding.arg == <span class="string">&#x27;left&#x27;</span> ? <span class="string">&#x27;left&#x27;</span> : <span class="string">&#x27;top&#x27;</span>)</span><br><span class="line">    el.style[s] = binding.value + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      direction: <span class="string">&#x27;left&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="函数简写">函数简写</h3><p>如果需要在 <span class='nota' data-nota='指令第一次绑定到元素时的钩子函数'>bind</span> 和 <span class='nota' data-nota='VNode 更新时的钩子函数'>update</span> 触发相同的行为，而不关心其他钩子，可以写成下面这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;color-swatch&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  el.style.backgroundColor = binding.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="对象字面量">对象字面量</h3><p>如果指令需要多个值，可以传入一个 <code>javascript</code> 对象字面量，指令函数可以接收合法的 <code>js</code> 表达式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-demo</span>=<span class="string">&quot;&#123; color: &#x27;white&#x27;, text: &#x27;hello!&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.directive(<span class="string">&#x27;demo&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el, binding</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(binding.value.color) <span class="comment">// =&gt; &quot;white&quot;</span></span><br><span class="line">  <span class="built_in">console</span>.log(binding.value.text)  <span class="comment">// =&gt; &quot;hello!&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="渲染函数-JSX">渲染函数 &amp; <code>JSX</code></h2><p><code>vue</code> 推荐在绝大多数情况下使用模板来创建 <code>html</code>，然而在一些场景中，需要 <code>js</code> 的完全编程能力，可以使用渲染函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个组件模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 包含了大量的判断和插槽 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;anchored-heading-template&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">&quot;level === 1&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h2 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 2&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h3 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 3&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h4 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 4&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h5 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 5&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span></span></span><br><span class="line"><span class="javascript">  &lt;h6 v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;level === 6&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        template: <span class="string">&#x27;#anchored-heading-template&#x27;</span>,</span></span><br><span class="line">        props: &#123;</span><br><span class="line">            level: &#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                required: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 render函数来重写</span></span><br><span class="line">Vue.component(<span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 这里是默认的插槽</span></span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level, <span class="built_in">this</span>.$slots.default);</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        level: &#123;</span><br><span class="line">            type: <span class="built_in">Number</span>,</span><br><span class="line">            required: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="createElement-函数"><code>createElement</code> 函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面介绍 render函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// render :() =&gt; VNode 接收一个函数 返回一个VNode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// createElement函数 可以接收三个参数 其中两个参数可选</span></span><br><span class="line"><span class="comment">// @returns &#123;VNode&#125;</span></span><br><span class="line">createElement(</span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签字符串，组件选项对象，或者解析上述任何一种的一个 async 异步函数。必需参数。</span></span><br><span class="line">  <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;Object&#125; 数据对象</span></span><br><span class="line">  <span class="comment">// 一个包含模板相关属性的数据对象</span></span><br><span class="line">  <span class="comment">// 你可以在 template 中使用这些特性。可选参数。</span></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子虚拟节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 也可以使用字符串来生成“文本虚拟节点”。可选参数。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">&#x27;先写一些文字&#x27;</span>,</span><br><span class="line">    createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="string">&#x27;一则头条&#x27;</span>),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: <span class="string">&#x27;foobar&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数的数据对象，该参数可选，可不写</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">  class: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或对象组成的数组</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    fontSize: <span class="string">&#x27;14px&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 正常的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">&#x27;bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">&#x27;baz&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="built_in">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅对于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="built_in">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">&#x27;my-custom-directive&#x27;</span>,</span><br><span class="line">      value: <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">      expression: <span class="string">&#x27;1 + 1&#x27;</span>,</span><br><span class="line">      arg: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 作用域插槽格式</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">&#x27;span&#x27;</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">&#x27;name-of-slot&#x27;</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">&#x27;myKey&#x27;</span>,</span><br><span class="line">  <span class="comment">// 如果你在渲染函数中给多个元素都应用了相同的 ref 名，</span></span><br><span class="line">  <span class="comment">// 那么 `$refs.myRef` 会变成一个数组。</span></span><br><span class="line">  ref: <span class="string">&#x27;myRef&#x27;</span>,</span><br><span class="line">  <span class="comment">// 注意，如果需要使用相同的ref，必须带有下方这个属性，否则$refs不是一个数组，而是一个dom</span></span><br><span class="line">  refInFor: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个栗子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span> <span class="attr">:level</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:live</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> com = Vue.component(<span class="string">&#x27;MyComponent&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;name&#x27;</span>]</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(com)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> createElement(<span class="string">&#x27;h&#x27;</span> + <span class="built_in">this</span>.level, &#123;</span></span><br><span class="line">                class: &#123;</span><br><span class="line"><span class="javascript">                    foo: <span class="literal">true</span>,</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;,[<span class="string">&#x27;wode&#x27;</span>, createElement(<span class="string">&#x27;h2&#x27;</span>, &#123;<span class="attr">class</span>: &#123;<span class="attr">too</span>: <span class="literal">true</span>&#125;&#125;,<span class="string">&#x27;一个标题&#x27;</span>), createElement(com, &#123;<span class="attr">props</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;), ...this.$slots.live]);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        props: &#123;</span><br><span class="line">            level: &#123;</span><br><span class="line"><span class="javascript">                type: <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                required: <span class="literal">true</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.$slots.live)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="节点、树以及虚拟-dom">节点、树以及虚拟 <code>dom</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  Some text content</span><br><span class="line">  <span class="comment">&lt;!-- <span class="doctag">TODO:</span> Add tagline --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的 <code>html</code> 对应的 <code>dom</code> 节点树如下图</p><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/262ac49e/20210728-183807-0251.png" alt=""></p><p>每个元素都是一个节点。每段文字也是一个节点。甚至注释也都是节点。一个节点就是页面的一个部分。就像家谱树一样，<span class='nota' data-nota='也就是说每个部分可以包含其它的一些部分'>每个节点都可以有孩子节点</span></p><p>高效地更新所有这些节点会是比较困难的，然而 <code>vue</code> 可以在模板中或渲染函数自动保持页面的更新，即便数据发生变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; blogTitle &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="built_in">this</span>.blogTitle)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件树中的所有 <code>VNode</code> 必须是唯一的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不合法的操作</span></span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> myParagraphVNode = createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    <span class="comment">// 错误 - 重复的 VNode</span></span><br><span class="line">    myParagraphVNode, myParagraphVNode</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要重复渲染，使用以下方式</span></span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123; <span class="attr">length</span>: <span class="number">20</span> &#125;).map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.apply(this的指向, 一个数组或一个类数组对象)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array(size) 也可以创建一个长度为size的数组，但不能使用 map等函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="attr">length</span>: <span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//  [空 ×5] 可以看到和普通的undefined又不一样 和自己赋值的不太一样 并没有赋值只是有个length 当使用的时候才会赋值为 undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [undefined, undefined, undefined, undefined, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log([...arr1]); <span class="comment">// [undefined, undefined, undefined, undefined, undefined]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="built_in">Array</span>.apply(<span class="literal">null</span>, &#123;<span class="string">&#x27;0&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>: <span class="number">2</span>, <span class="attr">length</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><h3 id="使用-javascript-代替模板功能">使用 <code>javascript</code> 代替模板功能</h3><h4 id="v-if-和-v-for"><code>v-if</code> 和 <code>v-for</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在模板中使用 v-if 和 v-for --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-if</span>=<span class="string">&quot;items.length&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>No items found.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果用渲染函数</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;items&#x27;</span>],</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">createElement</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.items.length)&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;ul&#x27;</span>, <span class="built_in">this</span>.items.map(<span class="function">(<span class="params">item</span>) =&gt;</span> createElement(<span class="string">&#x27;li&#x27;</span>, item.name)))</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> createElement(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;No items found&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是不是回到了react的感觉</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整示例如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span> <span class="attr">:items</span>=<span class="string">&quot;items&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;items&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">this</span>.items.length)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> h(<span class="string">&#x27;ul&#x27;</span>, <span class="built_in">this</span>.items.map(<span class="function"><span class="params">item</span> =&gt;</span> h(<span class="string">&#x27;li&#x27;</span>, item)));</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> h(<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;为空&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [1, 2, 3, 4, 5]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-model"><code>v-model</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要自己手动实现 v-model的逻辑</span></span><br><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">&#x27;input&#x27;</span>, &#123;</span><br><span class="line">    domProps:&#123;</span><br><span class="line">      <span class="comment">// input的value属性</span></span><br><span class="line">      value: self.value</span><br><span class="line">    &#125;,</span><br><span class="line">    on: &#123;</span><br><span class="line">      <span class="comment">// 绑定input事件</span></span><br><span class="line">      <span class="function"><span class="title">input</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 触发input事件</span></span><br><span class="line">        self.value = event.target.value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整示例如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 组件data必须是函数</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                value: <span class="string">&#x27;苏西&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [</span></span><br><span class="line"><span class="javascript">                h(<span class="string">&#x27;input&#x27;</span>, &#123;</span></span><br><span class="line">                    domProps: &#123;</span><br><span class="line">                        value: self.value</span><br><span class="line">                    &#125;,</span><br><span class="line">                    on: &#123;</span><br><span class="line"><span class="javascript">                        <span class="function"><span class="title">input</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line">                            self.value = e.target.value</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;),</span><br><span class="line"><span class="javascript">                h(<span class="string">&#x27;span&#x27;</span>, self.value)</span></span><br><span class="line">            ])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue().$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当然了 vue 基础已经告诉我们  v-model 等价于 v-bind:value 和 v-on:input=&quot;value = $event&quot; (type不同处理逻辑不同) 也可以使用下面的方式 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;value = $event&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;value&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;input&#x27;</span>, &#123;</span></span><br><span class="line">                domProps: &#123;</span><br><span class="line">                    value: self.value</span><br><span class="line">                &#125;,</span><br><span class="line">                on: &#123;</span><br><span class="line"><span class="javascript">                    <span class="function"><span class="title">input</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                        self.$emit(<span class="string">&#x27;input&#x27;</span>, e.target.value)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;<span class="attr">data</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="事件-按键修饰符">事件 &amp; 按键修饰符</h4><p>对于 <code>.passive</code>、<code>.capture</code> 和 <code>.once</code> 这些事件修饰符，<code>vue</code> 提供了相应的前缀可用于 <code>on</code></p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">前缀</th></tr></thead><tbody><tr><td style="text-align:center"><code>.passive</code></td><td style="text-align:center"><code>&amp;</code></td></tr><tr><td style="text-align:center"><code>.capture</code></td><td style="text-align:center"><code>!</code></td></tr><tr><td style="text-align:center"><code>.once</code></td><td style="text-align:center"><code>~</code></td></tr><tr><td style="text-align:center"><code>.capture.once</code> 或 <code>.once.capture</code></td><td style="text-align:center"><code>~!</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">on: &#123;</span><br><span class="line">  <span class="string">&#x27;!click&#x27;</span>: <span class="built_in">this</span>.doThisInCapturingMode,</span><br><span class="line">  <span class="string">&#x27;~keyup&#x27;</span>: <span class="built_in">this</span>.doThisOnce,</span><br><span class="line">  <span class="string">&#x27;~!mouseover&#x27;</span>: <span class="built_in">this</span>.doThisOnceInCapturingMode</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于所有其他的修饰符，私有前缀不是必须的，需要在事件处理函数中进行处理</p><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">前缀</th></tr></thead><tbody><tr><td style="text-align:center"><code>.stop</code></td><td style="text-align:center"><code>event.stopPropagation()</code></td></tr><tr><td style="text-align:center"><code>.prevent</code></td><td style="text-align:center"><code>event.preventDefault()</code></td></tr><tr><td style="text-align:center"><code>.self</code></td><td style="text-align:center"><code>if(event.target !== event.currentTarget) return</code></td></tr><tr><td style="text-align:center">按键 <code>.enter</code>、<code>.13</code></td><td style="text-align:center"><code>if(event.keyCode !== 13) return</code></td></tr><tr><td style="text-align:center">修饰键<code>.ctrl</code> <code>.alt</code> <code>.shift</code> <code>.meta</code></td><td style="text-align:center"><code>if(!event.ctrlKey)return</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">on: &#123;</span><br><span class="line">  keyup: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 如果触发的不是事件绑定的元素，不做任何处理</span></span><br><span class="line">    <span class="keyword">if</span>(event.target !== event.currentTarget) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!event.shiftKye || event.keyCode !== <span class="number">13</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    event.preventDefault();</span><br><span class="line">    event.stopPropagation();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插槽">插槽</h4><p>通过 <code>this.$slots</code> 访问静态插槽的内容，每个插槽都是一个 <code>VNode</code> 数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// &lt;div&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">this</span>.$slots.default);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render: <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// &lt;div&gt;&lt;slot name=&quot;sh&quot;&gt;&lt;/slot&gt;&lt;/div&gt;</span></span><br><span class="line">  <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="built_in">this</span>.$slots.sh);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个栗子 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span></span><br><span class="line">                hello</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:sh</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: skyblue;&quot;</span>&gt;</span></span><br><span class="line">                world</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [...this.$slots.default, ...this.$slots.sh]);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// return h(&#x27;div&#x27;, [this.$slots.default, this.$slots.sh]); 允许这样写 暂时不知道为 ？</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;<span class="attr">data</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以通过 <code>this.$scopedSlots</code> 访问作用域插槽，每个作用域插槽都是返回若干 <code>VNode</code> 的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">&#x27;message&#x27;</span>],</span><br><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;&lt;slot :text=&quot;message&quot;&gt;&lt;/slot&gt;&lt;/div&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    <span class="built_in">this</span>.$scopedSlots.default(&#123;</span><br><span class="line">      text: <span class="built_in">this</span>.message</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个栗子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123;text&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;text&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:sh</span>=<span class="string">&quot;&#123;sh&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;background-color: skyblue;&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;sh&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;suxi&#x27;</span>, <span class="attr">sh</span>: <span class="string">&#x27;peiqi&#x27;</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [<span class="built_in">this</span>.$scopedSlots.default(&#123;<span class="attr">text</span>: self.text&#125;), <span class="built_in">this</span>.$scopedSlots.sh(&#123;<span class="attr">sh</span>: self.sh&#125;)])</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;<span class="attr">data</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果需要用渲染函数向子组件中传递作用域插槽，可以利用 <code>VNode</code> 数据对象中的 <code>scopedSlots</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// `&lt;div&gt;&lt;child v-slot=&quot;props&quot;&gt;&lt;span&gt;&#123;&#123; props.text &#125;&#125;&lt;/span&gt;&lt;/child&gt;&lt;/div&gt;`</span></span><br><span class="line">  <span class="keyword">return</span> createElement(<span class="string">&#x27;div&#x27;</span>, [</span><br><span class="line">    createElement(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// 在数据对象中传递 `scopedSlots`</span></span><br><span class="line">      <span class="comment">// 格式为 &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">      scopedSlots: &#123;</span><br><span class="line">        <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params">props</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> createElement(<span class="string">&#x27;span&#x27;</span>, props.text)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 举个栗子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-demo</span>&gt;</span><span class="tag">&lt;/<span class="name">my-demo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [<span class="built_in">this</span>.$scopedSlots.default(&#123;</span></span><br><span class="line">                text: self.text</span><br><span class="line">            &#125;)])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;suxi&#x27;</span>, <span class="attr">sh</span>: <span class="string">&#x27;peiqi&#x27;</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [h(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line">                scopedSlots: &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>: <span class="function"><span class="params">prop</span> =&gt;</span> h(<span class="string">&#x27;span&#x27;</span>, prop.text)</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;<span class="attr">data</span>: &#123;<span class="attr">value</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 是不是看起来很绕 很麻烦 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSX"><code>JSX</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写太多的 createElement是一件很痛苦的事请，尤其当文档结构复杂的时候</span></span><br><span class="line"></span><br><span class="line">createElement(</span><br><span class="line">  <span class="string">&#x27;anchored-heading&#x27;</span>, &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      level: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [</span><br><span class="line">    createElement(<span class="string">&#x27;span&#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>),</span><br><span class="line">    <span class="string">&#x27; world!&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是不是更像模板语法了</span></span><br><span class="line"><span class="keyword">import</span> AnchoredHeading <span class="keyword">from</span> <span class="string">&#x27;./AnchoredHeading.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;AnchoredHeading level=&#123;<span class="number">1</span>&#125;&gt;</span><br><span class="line">        &lt;span&gt;Hello&lt;/span&gt; world!</span><br><span class="line">      &lt;/AnchoredHeading&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 下面是一个 渲染函数 和 JSX 的对比 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意这里不再使用模板 #app 仅用作挂载元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [<span class="built_in">this</span>.$scopedSlots.default(&#123;</span></span><br><span class="line">                text: self.text</span><br><span class="line">            &#125;)])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;name&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> self = <span class="built_in">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, [h(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line">                scopedSlots: &#123;</span><br><span class="line"><span class="javascript">                    <span class="keyword">default</span>: <span class="function"><span class="params">prop</span> =&gt;</span> h(<span class="string">&#x27;span&#x27;</span>, prop.text)</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">            &#125;), h(<span class="string">&#x27;span&#x27;</span>,&#123;<span class="attr">style</span>: &#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125; self.name)])</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;my-demo&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面是 JSX 语法 </span></span><br><span class="line">Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="built_in">this</span>.$scopedSlots.default(&#123;<span class="attr">text</span>: <span class="built_in">this</span>.text&#125;)&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;my-demo&#x27;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child</span><br><span class="line">                    scopedSlots=&#123;&#123;<span class="attr">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;span style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;&#123;<span class="built_in">this</span>.name&#125;&lt;/span&gt;  </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyDemo</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;佩奇&#x27;&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 看起来是不是好多了（如果你熟悉react的话）</span></span><br></pre></td></tr></table></figure><p>当然浏览器是无法直接运行 <code>jsx</code> 的所以还需要使用 <code>babel</code> 和对应的插件进行编译之后运行，下面给出一个栗子</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue create app 创建vue</span></span><br><span class="line">├── src</span><br><span class="line">│   ├── components</span><br><span class="line">│   │   ├── Child.jsx</span><br><span class="line">│   │   └── MyDemo.jsx</span><br><span class="line">│   ├── App.jsx</span><br><span class="line">└── └── main.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意 创建vue2 的工程已经配置好了 vue jsx babel插件，无需修改 babel.config.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">text</span>: <span class="string">&#x27;苏西&#x27;</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;<span class="built_in">this</span>.$scopedSlots.default(&#123;<span class="attr">text</span>: <span class="built_in">this</span>.text&#125;)&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  MyDemo.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: [<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Child</span><br><span class="line">                    scopedSlots=&#123;&#123;</span><br><span class="line">                        <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;props.text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">                    &#125;&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">                &lt;span style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125;&gt;&#123;<span class="built_in">this</span>.name&#125;&lt;/span&gt;  </span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> MyDemo <span class="keyword">from</span> <span class="string">&#x27;./components/MyDemo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">MyDemo</span> <span class="attr">name</span>=<span class="string">&#123;</span>&#x27;佩奇&#x27;&#125; /&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX 省去了组件注册的过程，引入即可使用</span></span><br></pre></td></tr></table></figure><h3 id="函数式组件">函数式组件</h3><p>使用函数组件，将组件标记为 <code>functional</code>，这也意味着<span class='nota' data-nota='没有响应式数据'>它是无状态的</span>，也<span class='nota' data-nota='this 上下文'>没有实例</span>，一个函数组件就像这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// props是可选的</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 为了弥补缺少的实例</span></span><br><span class="line">  <span class="comment">// 提供第二个参数作为上下文</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">createElement, context</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-flag"></i><p>在 <code>2.3.0</code> 之前的版本，如果一个函数式组件要接收 <code>prop</code>，则 <code>props</code> 选项是必须的，在 <code>2.3.0</code> 或以上的版本，可以省略 <code>props</code> 选项，所有组件上的 <code>attribute</code> 都会被自动隐式解析为 <code>prop</code>，当使用函数式组件时，该引用将会是 <code>HTMLElement</code> 因为它们是无状态的也是无实例的</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如果使用单文件组件 基于模板的函数式组件这样声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">functional</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件需要的一切都是通过 <code>context</code> 参数传递，它是一个包括以下字段的对象</p><ol><li><code>props</code>：提供所有 <code>prop</code> 的对象</li><li><code>children</code>：<code>VNode</code> 子节点数组</li><li><code>slots</code>：一个函数，返回包含所有插槽的对象，</li><li><code>scopedSlots</code>：一个暴露传入的作用域插槽对象，也可以以函数形式暴露普通插槽</li><li><code>data</code>：传递给组件的整个数据对象，作为 <code>createElement</code> 的第二个参数传入组件</li><li><code>parent</code>：对父组件的引用</li><li><code>listeners</code>：包含所有父组件当前组件注册的事件监听器的对象，这是 <code>data.on</code> 的一个别名</li><li><code>injections</code>：如果使用 <code>inject</code> 选项，则该对象包含了应当被注入的 <code>property</code></li></ol><p>函数式组件只是函数，所以渲染开销也会低很多，在作为包装组件时它们也同样非常有用，比如</p><ol><li>程序化地在多个组件中选择一个来代为渲染</li><li>在将 <code>children</code>、<code>props</code>、<code>data</code> 传递给子组件之前操作它们</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EmptyList = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> TableList = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> OrderedList = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> UnorderedList = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;smart-list&#x27;</span>, &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    items: &#123;</span><br><span class="line">      type: <span class="built_in">Array</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    isOrdered: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement, context</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">appropriateListComponent</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> items = context.props.items</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (items.length === <span class="number">0</span>)           <span class="keyword">return</span> EmptyList</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> items[<span class="number">0</span>] === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> TableList</span><br><span class="line">      <span class="keyword">if</span> (context.props.isOrdered)      <span class="keyword">return</span> OrderedList</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> UnorderedList</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> createElement(</span><br><span class="line">      appropriateListComponent(),</span><br><span class="line">      context.data,</span><br><span class="line">      context.children</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个简单的栗子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        functional: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h, context</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(context)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, context.data, context.children)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> h(<span class="string">&#x27;child&#x27;</span>,&#123;<span class="attr">style</span>: &#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>&#125;&#125; <span class="string">&#x27;苏西&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">    &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="向子组件或子元素传递属性和事件">向子组件或子元素传递属性和事件</h4><p>在普通组件中，没有被定义为 <code>prop</code> 的属性会自动添加到组件的根元素上，将已有的同名属性进行替换或与其进行智能合并</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-functional-button&#x27;</span>, &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement, context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 完全透传任何 attribute、事件监听器、子节点等。</span></span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;button&#x27;</span>, context.data, context.children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// context.data实际上就是使用组件时传入的 props class style on 等等属性封装的数据对象</span></span><br></pre></td></tr></table></figure><p>通过向 <code>createElement</code> 传入 <code>context.data</code> 作为第二个参数，我们就把 <code>my-functional-button</code> 上面所有的 <code>attribute</code> 和事件监听器都传递下去了。事实上这是非常透明的，以至于那些事件甚至并不要求 <code>.native</code> 修饰符</p><p>如果你使用基于模板的函数式组件，那么你还需要手动添加 <code>attribute</code> 和监听器。因为我们可以访问到其独立的上下文内容，所以我们可以使用 <code>data.attrs</code> 传递任何 <code>HTML attribute</code>，也可以使用 <code>listeners</code> (即 <code>data.on</code> 的别名) 传递任何事件监听器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">functional</span>&gt;</span></span><br><span class="line">  &lt;button</span><br><span class="line">    class=&quot;btn btn-primary&quot;</span><br><span class="line">    v-bind=&quot;data.attrs&quot;</span><br><span class="line">    v-on=&quot;listeners&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="slots-和-children-对比"><code>slots()</code> 和 <code>children</code> 对比</h4><p><code>slots</code> 是一个函数，返回所有插槽，<code>children</code> 只表示组件内部的元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-functional-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-slot:foo</span>&gt;</span></span><br><span class="line">    first</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>second<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-functional-component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于上面的组件，<code>children</code> 会给你两个段落标签，而 <code>slots().default</code> 只会传递第二个匿名段落标签，<code>slots().foo</code> 会传递第一个具名段落标签，可以选择性让组件感知某个插槽机制，也可以简单的传递 <code>children</code> 移交给其他组件进行处理</p><h2 id="插件">插件</h2><p>插件通常用来为 <code>vue</code> 添加全局功能，例如：</p><ol><li>添加全局方法或属性</li><li>添加全局资源</li><li>通过全局混入来添加一些组件选项</li><li>添加 <code>vue</code> 实例方法，通过把它们添加到 <code>Vue.prototype</code> 上实现</li><li>一个库，提供自己的 <code>API</code> 同时提供上面的一个或几个功能</li></ol><h3 id="使用插件">使用插件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过全局方法 Vue.use() 使用插件，它需要在你调用 new Vue()启动应用之前完成</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 `MyPlugin.install(Vue)`</span></span><br><span class="line">Vue.use(MyPlugin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...组件选项</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以传入一个可选的选项对象</span></span><br><span class="line">Vue.use(MyPlugin, &#123; <span class="attr">someOption</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><p><code>Vue.use</code> 会自动阻止多次注册相同插件，即使多次调用，也会只注册一次</p><h3 id="开发插件">开发插件</h3><p><code>vue</code> 的插件应该暴露一个 <code>install</code> 方法，这个方法的第一个参数是 <code>Vue</code> 构造器，第二个参数是一个可选的选项对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MyPlugin.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 添加全局方法或 property</span></span><br><span class="line">  Vue.myGlobalMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 添加全局资源 自定义指令</span></span><br><span class="line">  Vue.directive(<span class="string">&#x27;my-directive&#x27;</span>, &#123;</span><br><span class="line">    bind (el, binding, vnode, oldVnode) &#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 注入组件选项 全局混入</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 逻辑...</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">  Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params">methodOptions</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 逻辑...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过滤器">过滤器</h2><p><code>vue</code> 允许自定义过滤器，可被用于一些常见的文本格式化，过滤器可以用在两个地方：<u>双花括号插值和 v-bind 表达式</u>，过滤器应该被添加在 <code>js</code> 表达式的尾部，有管道(<code>|</code>)符号指示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在双花括号中 --&gt;</span></span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在 `v-bind` 中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在组件中定义本地过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">filters: &#123;</span><br><span class="line">  <span class="function"><span class="title">capitalize</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    value = value.toString();</span><br><span class="line">    <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者在创建 <code>vue</code> 实例之前全局定义过滤器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">&#x27;capitalize&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!value) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  value = value.toString();</span><br><span class="line">  <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当全局过滤器和局部过滤器重名时，会采用局部过滤器，过滤器函数总接收<span class='nota' data-nota='之前操作链的结果'>表达式的值</span>作为第一个参数，在上例中，<code>capitalize</code> 会接收 <code>message</code> 的值作为第一个参数，并且过滤器可以串联</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;message | filterA | filterB&#125;&#125;</span><br></pre></td></tr></table></figure><p><code>filterA</code> 被定义为接收单个参数的过滤器函数，表达式 <code>message</code> 的值将作为参数传入到函数，然后继续调用同样被定义为接收单个参数的过滤器函数 <code>filterB</code>，将 <code>filterA</code> 的结果传递到 <code>filterB</code> 中。过滤器是 <code>JS</code> 函数，因此可以接收参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(&#x27;arg1&#x27;, arg2) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- message作为第一个参数，普通字符串 `arg1` 作为第二个参数，表达式 arg2 作为第三个参数 --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2.x基本用法</title>
      <link href="c0add594/"/>
      <url>c0add594/</url>
      
        <content type="html"><![CDATA[<h2 id="插值">插值</h2><h3 id="文本插值">文本插值</h3><ol><li>格式<code>&#123;&#123;expression&#125;&#125;</code></li><li>使用<code>v-once</code>指令执行一次插值，后续不再更新</li></ol><iframe id="cp_embed_yLbJKgJ" src="//codepen.io/milkdue/embed/yLbJKgJ?height=300&theme-id=dark&slug-hash=yLbJKgJ&default-tab=js,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="html-插值"><code>html</code> 插值</h3><div class="note purple icon flat"><i class="note-icon fa fa-thermometer-full"></i><p>双大括号将数据解释为普通文本而不是html代码，如果需要渲染为html，则需要使用<code>v-html</code>指令</p></div><iframe id="cp_embed_JjNKvMq" src="//codepen.io/milkdue/embed/JjNKvMq?height=300&theme-id=dark&slug-hash=JjNKvMq&default-tab=html,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="指令">指令</h2><div class="note green icon flat"><i class="note-icon fa fa-bolt"></i><p>带有<code>v-</code>前缀的特殊的attribute</p></div><h3 id="参数">参数</h3><div class="note blue icon disabled"><i class="note-icon fa fa-tree"></i><p>一些指令能够接收一个参数，在指令名称之后以冒号表示</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;todo&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态参数">动态参数</h3><div class="note default icon flat"><i class="note-icon fa fa-bicycle"></i><p>用方括号括起来的js表达式作为指令的参数</p></div><ol><li>动态参数会转换为字符串，异常情况下为null，将会移除绑定</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>]=<span class="string">&quot;url&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;todo&quot;</span>&gt;</span>事件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            attributeName: <span class="string">&#x27;href&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            url: <span class="string">&#x27;www.baidu.com&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            eventName: <span class="string">&#x27;click&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性和侦听器">计算属性和侦听器</h2><h3 id="计算属性">计算属性</h3><div class="note pink icon flat"><i class="note-icon fa fa-exclamation"></i><p>对于复杂的逻辑，使用计算属性比在插值逻辑或函数中效率更高</p></div><iframe id="cp_embed_dyWXKaV" src="//codepen.io/milkdue/embed/dyWXKaV?height=300&theme-id=dark&slug-hash=dyWXKaV&default-tab=html,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><div class="note purple icon flat"><i class="note-icon fa fa-flask"></i><p>计算属性默认只有getter，也可以在定义计算属性的同时指定setter</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侦听器">侦听器</h3><div class="note green icon flat"><i class="note-icon fa fa-cogs"></i><p><code>vue</code>通过<code>watch</code>来响应数据的变化，当侦听的数据发生变化时，执行相应的逻辑</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        oldMessage: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        message: <span class="string">&#x27;message&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        <span class="comment">// 侦听oldMessage，发生变化改变message</span></span><br><span class="line">        oldMessage: <span class="function"><span class="keyword">function</span>(<span class="params">newValue, oldValue</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(newValue + <span class="string">&#x27;&#x27;</span> + oldValue);</span><br><span class="line">            <span class="built_in">this</span>.message = newValue + oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">this</span>.oldMessage = <span class="string">&#x27;suxi&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="class-和-style-绑定"><code>class</code> 和 <code>style</code> 绑定</h2><h3 id="绑定-class">绑定 <code>class</code></h3><ol><li><p>传入对象，动态切换<code>class</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- isActive为真值时active存在 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;static&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            isActive: <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 渲染为下方dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>传入数组，动态应用数组中的<code>class</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;[&#x27;static&#x27;, &#x27;active&#x27;]&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 渲染为下方dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;static active&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>自定义组件，在组件上绑定的类名，将会添加在组件的根元素上面，这个元素上存在的类名不会被覆盖</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">class</span>=<span class="string">&quot;baz boo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: &#x27;<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 渲染为以下dom --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;foo bar baz boo&quot;</span>&gt;</span>Hi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="绑定-style">绑定 <code>style</code></h3><ol><li><p>传入对象，类型css的对象</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123;color: &#x27;red&#x27;, fontSize: &#x27;14px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>传入对象数组，将多个样式对象应用于同一个元素上</p></li><li><p>一个样式声明允许提供多个值，这样只会渲染数组中最后一个被浏览器支持的值</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; display: [&#x27;-webkit-box&#x27;, &#x27;-ms-flexbox&#x27;, &#x27;flex&#x27;] &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="条件渲染">条件渲染</h2><h3 id="v-if-v-else-if-v-else"><code>v-if / v-else-if / v-else</code></h3><div class="note orange icon modern"><i class="note-icon fa fa-battery-empty"></i><p><code>v-if</code> / <code>v-else-if</code>指令可以条件性的渲染一块内容，<code>v-else</code>当不满足条件时渲染某块</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;total &gt; 100&quot;</span>&gt;</span>111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;total &gt; 80&quot;</span>&gt;</span>222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>333<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip faa-horizontal animated"><p><code>vue</code>会高效的渲染元素，通常会复用已有的元素而不是从头渲染，如果在一个业务中，两个元素逻辑上是相互独立的，共用一个元素显然是不合理的。<code>vue</code>采用添加唯一的<code>key</code>来避免复用</p></div><iframe id="cp_embed_gOWMjjV" src="//codepen.io/milkdue/embed/gOWMjjV?height=300&theme-id=dark&slug-hash=gOWMjjV&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="v-show"><code>v-show</code></h3><div class="tip warning"><p><code>v-show</code>不支持<code>template</code>和<code>v-else</code>，<code>v-show</code>渲染的元素会被保留在dom中，只切换元素<code>css</code>中的<code>display</code>属性，所以<code>v-if</code>有更高的切换开销，而<code>v-show</code>有更高的初始化渲染开销，切换频次少使用<code>v-if</code>，反之使用<code>v-show</code></p></div><h2 id="列表渲染">列表渲染</h2><h3 id="数组">数组</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in items&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.message&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;item.message&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#example-1&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&#x27;foo&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">message</span>: <span class="string">&#x27;bar&#x27;</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="对象">对象</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;v-for-object&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, index) in object&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;value&#125;&#125; -- &#123;&#123;name&#125;&#125; -- &#123;&#123;index&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#v-for-object&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            object: &#123;</span><br><span class="line"><span class="javascript">                title: <span class="string">&#x27;How to do lists in Vue&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                author: <span class="string">&#x27;Jane Doe&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="维护状态">维护状态</h3><div class="note red icon modern"><i class="note-icon fa fa-hashtag"></i><p><code>vue</code>根据每项提供的唯一的<code>key</code>来追踪每一个节点的身份，使用<code>v-for</code>时，建议为每一项提供唯一的<code>key</code>，在组件中使用<code>v-for</code>，<code>key</code>是必须的</p></div><h3 id="数组更新检测">数组更新检测</h3><ol><li><code>vue</code>重写了数组的一些方法，调用以下方法将会触发视图更新<ul><li><code>push</code></li><li><code>pop</code></li><li><code>shift</code></li><li><code>unshift</code></li><li><code>splice</code></li><li><code>sort</code></li><li><code>reverse</code></li></ul></li><li>数组的一些方法不改变原数组而是返回一个新数组，用新数组替换原数组也会触发视图更新<ul><li><code>filter</code></li><li><code>map</code></li><li><code>concat</code></li><li><code>slice</code></li></ul></li></ol><h3 id="数组过滤-排序-使用计算属性">数组过滤 / 排序(使用计算属性)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in filter&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;ul&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            nums: [1, 2, 3, 4, 5, 6],</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            filter: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.nums.filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-for-和-v-if-一起使用"><code>v-for</code> 和 <code>v-if</code> 一起使用</h3><div class="note red icon flat"><i class="note-icon fa fa-exclamation-triangle"></i><p>不推荐在同一个元素中同时使用 <code>v-for</code> 和 <code>v-if</code>，<code>v-for</code> 的优先级高于<code>v-if</code>，当只渲染部分节点时，可以同时使用~</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in todos&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.isShow&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.key&quot;</span>&gt;</span>&#123;&#123;item.todo&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;ul&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            todos: [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">isShow</span>: <span class="literal">true</span>, <span class="attr">todo</span>: <span class="string">&#x27;起床&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;one&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">isShow</span>: <span class="literal">false</span>, <span class="attr">todo</span>: <span class="string">&#x27;早餐&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;two&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">isShow</span>: <span class="literal">true</span>, <span class="attr">todo</span>: <span class="string">&#x27;午饭&#x27;</span>, <span class="attr">key</span>: <span class="string">&#x27;three&#x27;</span>&#125;</span></span><br><span class="line">            ],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script</span><br></pre></td></tr></table></figure><h2 id="事件绑定">事件绑定</h2><div class="note blue icon flat"><i class="note-icon fa fa-link"></i><p>使用 <code>v-on</code> 指令监听 <code>dom</code>事件，例如 <code>v-on:click=&quot;function&quot;</code>，可以使用简写 <code>@</code>，例如 <code>@click=&quot;function&quot;</code></p></div><h3 id="事件处理方法">事件处理方法</h3><ol><li><p>在 <code>v-on</code> 指令中直接书写 <code>js</code> 代码</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sum += 2&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sum: &#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            sum: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>事件处理流程写入方法中(默认将event对象传入)</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sum: &#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            sum: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">add</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sum += <span class="number">2</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="内联处理器中的方法">内联处理器中的方法</h3><div class="note green icon flat"><i class="note-icon fa fa-at"></i><p>除了直接绑定方法，还可以在指令中直接调用方法，并将参数传入，如果需要在内联语句中访问dom事件，可以用<span class='nota' data-nota='与位置无关'>特殊变量</span> <code>$event</code> 传入</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add(2, $event)&quot;</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>sum: &#123;&#123;sum&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            sum: 0,</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">add</span>(<span class="params">num, event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.sum += num;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件修饰符">事件修饰符</h3><div class="note pink icon flat"><i class="note-icon fa fa-battery-quarter"></i><p>在事件处理程序中调用 <code>event.preventDefault()</code> 或 <code>event.stopPropagation()</code> 是非常常见的需求，<code>vue</code> 提供了事件修饰符来处理 <code>dom</code> 事件细节</p></div><ol><li><span class='nota' data-nota='阻止单击事件继续传播'>.stop</span></li><li><span class='nota' data-nota='阻止浏览器默认行为'>.prevent</span></li><li><span class='nota' data-nota='添加事件监听器时使用事件捕获模式，从 document 传播到点击元素，即内部元素触发的事件先在此处理，然后才交由内部元素进行处理'>.capture</span></li><li><span class='nota' data-nota='只有当 event.target 是当前元素时，才触发事件'>.self</span></li><li><span class='nota' data-nota='事件只触发一次'>.once</span></li><li><span class='nota' data-nota='告诉浏览器不想阻止事件的默认行为，提高移动端性能'>.passive</span></li></ol><div class="tip "><p><code>passive</code> 这个修饰符会执行默认的方法，但明明是默认执行为什么要设置这个修饰符呢？因为浏览器只有等内核线程执行到事件监听器对应的 <code>JavaScript</code> 代码时，才能知道内部是否会调用 <code>preventDefault</code> 函数来阻止事件的默认行为，所以浏览器本身是没有办法对这种场景进行优化的。这种场景下，用户的手势事件无法快速产生，会导致页面无法快速执行滑动逻辑，从而让用户感觉到页面卡顿。通俗点说就是每次事件产生，浏览器都会去查询一下是否有 <code>preventDefault</code> 阻止该次事件的默认动作。我们加上 <code>passive</code> 就是为了告诉浏览器，不用查询了，我们没用 <code>preventDefault</code> 阻止默认动作， 这里一般用在滚动监听，<code>@scoll，@touchmove</code>。因为滚动监听过程中，移动每个像素都会产生一次事件，每次都使用内核线程查询 <code>prevent</code> 会使滑动卡顿。我们通过 <code>passive</code> 将内核线程查询跳过，可以大大提升滑动的流畅度</p></div><div class="note red icon modern"><i class="note-icon fa fa-key"></i><p>使用修饰符时，顺序很重要，相应的代码会以同样的顺序产生。因此，用 <code>v-on:click.prevent.self</code> 会阻止所有的点击，而 <code>v-on:click.self.prevent</code> 只会阻止对元素自身的点击。<code>passive</code> 和 <code>prevent</code> 冲突，不能同时绑定在一个监听器上</p></div><iframe id="cp_embed_OJmbyvd" src="//codepen.io/milkdue/embed/OJmbyvd?height=300&theme-id=dark&slug-hash=OJmbyvd&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="按键修饰符">按键修饰符</h3><div class="note orange icon flat"><i class="note-icon fa fa-check"></i><p>监听键盘事件时，<code>v-on</code>在监听键盘事件时添加按键修饰符</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只有在 key 是 Enter 时调用 vm.submit() --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="按键码">按键码</h4><div class="note red icon flat"><i class="note-icon fa fa-exclamation-circle"></i><p><code>keyCode</code> 的事件用法已经被废弃了并可能不会被最新的浏览器支持</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当event.keyCode = 13时触发 submit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note green icon flat"><i class="note-icon fa fa-bullhorn"></i><p><code>vue</code> 提供了绝大多数常用的按键码的别名，并且有一些按键 (<code>.esc</code> 以及所有的方向键) 在 <code>IE9</code> 中有不同的 <code>key</code> 值, 如果你想支持 <code>IE9</code>，这些内置的别名应该是首选</p></div><ol><li><code>.enter</code></li><li><code>.tab</code></li><li><code>.delete</code></li><li><code>.esc</code></li><li><code>.space</code></li><li><code>.up</code></li><li><code>.down</code></li><li><code>.left</code></li><li><code>.right</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 还可以通过全局config.keyCodes对象自定义按键修饰符别名 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用v-on:keyup.f1 --&gt;</span></span><br><span class="line">Vue.config.keyCodes.f1 = 112;</span><br></pre></td></tr></table></figure><h3 id="系统修饰符">系统修饰符</h3><ol><li>用如下修饰符来实现仅在按下相应按键时才触发鼠标或键盘事件的监听器<ul><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code></li><li><code>.meta</code></li></ul></li><li><code>.exact</code>修饰符<ul><li><code>.exact</code> 修饰符允许控制由精确的系统修饰符组合触发的事件</li></ul></li></ol><div class="tip "><p>请注意修饰键与常规按键不同，在和 <code>keyup</code> 事件一起用时，事件触发时修饰键必须处于按下状态。换句话说，只有在按住 <code>ctrl</code> 的情况下释放其它按键，才能触发 <code>keyup.ctrl</code>。而单单释放 <code>ctrl</code> 也不会触发事件。如果你想要这样的行为，请为 <code>ctrl</code> 换用 <code>keyCode：keyup.17</code></p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 即使 Alt 或 Shift 被一同按下时也会触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有且只有 Ctrl 被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.ctrl.exact</span>=<span class="string">&quot;onCtrlClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 没有任何系统修饰符被按下的时候才触发 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.exact</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span>A<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="鼠标按钮修饰符">鼠标按钮修饰符</h3><ol><li><code>.left</code></li><li><code>.right</code></li><li><code>.middle</code></li></ol><h2 id="表单输入绑定">表单输入绑定</h2><div class="note orange icon flat"><i class="note-icon fa fa-info-circle"></i><p><code>v-model</code> 指令在表单 <code>input、textarea、select</code> 元素上创建双向数据绑定。根据控件类型自动选取正确的方法来更新元素。<code>v-model</code> 会忽略所有表单元素的 <code>value、checked、selected</code> 属性的初始值而总是将<code>vue</code> 实例的数据作为数据来源</p></div><ol><li><code>v-model</code>在内部为不同的输入元素使用不同的<code>property</code>并抛出不同的事件<ul><li><code>text</code>和<code>textarea</code>元素使用<code>value</code>属性和<code>input</code>事件</li><li><code>checkbox</code>和<code>radio</code>使用<code>checked</code>属性和<code>change</code>事件</li><li><code>select</code>元素将<code>value</code>作为<code>prop</code>并将<code>change</code>作为事件</li></ul></li></ol><h3 id="修饰符">修饰符</h3><ol><li><code>.lazy</code>，在默认情况下 <code>v-model</code> 在每次 <code>input</code> 事件触发后将输入框的值与数据进行同步，添加 <code>.lazy</code> 修饰符，从而转为在 <code>change</code> 事件之后进行同步</li><li><code>.number</code>，自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符，如果这个值无法被 <code>parseFloat()</code> 解析，则会返回原始的值</li><li><code>.trim</code>，自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符</li></ol><h2 id="组件">组件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;button-counter&#x27;</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;button v-on:click=&quot;count++&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;button-counter&gt;&lt;/button-counter&gt;</span><br></pre></td></tr></table></figure><h3 id="data"><code>data</code></h3><div class="note red icon flat"><i class="note-icon fa fa-cloud"></i><p>在组件中，data必须是一个函数，因为每一个实例需要维护被返回对象的独立的拷贝</p></div><h3 id="prop-传递数据"><code>prop</code> 传递数据</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="监听子组件事件">监听子组件事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;blog-posts-events-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; fontSize: postFontSize + &#x27;em&#x27; &#125;&quot;</span>&gt;</span></span><br><span class="line">    &lt;blog-post</span><br><span class="line">      v-for=&quot;post in posts&quot;</span><br><span class="line">      v-bind:key=&quot;post.id&quot;</span><br><span class="line">      v-bind:post=&quot;post&quot;</span><br><span class="line">      v-on:enlarge-text=&quot;postFontSize += 0.1&quot; </span><br><span class="line">    &gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span><span class="comment">&lt;!-- 绑定事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;post&#x27;</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 触发事件 $emit</span></span></span><br><span class="line">        template: `</span><br><span class="line"><span class="javascript">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;blog-post&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">post.title</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span></span></span></span><br><span class="line">                Enlarge text</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;post.content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">&#x27;#blog-posts-events-demo&#x27;</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="javascript">            posts: [<span class="comment">/* ... */</span>],</span></span><br><span class="line">            postFontSize: 1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用事件抛出一个值">使用事件抛出一个值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;, 0.1)&quot;</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过$event获取这个值 --&gt;</span></span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-on:enlarge-text=&quot;postFontSize += $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果绑定的事件是一个函数 这个值通过参数获取 --&gt;</span></span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-on:enlarge-text=&quot;changeFontSize&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeFontSize</span>(<span class="params">size</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.postFontSize += size;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件中使用-v-model">组件中使用 <code>v-model</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 等价于 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;searchText&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当用到组件中等价于 --&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;my-component</span><br><span class="line">    v-model=&quot;searchText&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;my-conponent</span><br><span class="line">    :value=&quot;searchText&quot;</span><br><span class="line">    @input=&quot;searchText = $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果需要组件正常工作，必须在 value 属性绑定在一个名字是value的prop上，并且input事件被触发时，将新的值通过自定义的ihput事件抛出 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;value&#x27;</span>],</span></span><br><span class="line">        template: `</span><br><span class="line">            &lt;input</span><br><span class="line"><span class="javascript">                :value=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="javascript">                @input=<span class="string">&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span></span><br><span class="line">            /&gt;</span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态组件">动态组件</h3><div class="note orange icon flat"><i class="note-icon fa fa-battery-empty"></i><p><code>vue</code> 的 <code>component</code> 元素加一个特殊的 <code>is</code> 属性来实现动态组件，<code>is</code>后面的值可以是一个组件的名字或者是一个组件的选项对象</p></div><iframe src="https://codesandbox.io/embed/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-dynamic-components?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-dynamic-components"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h3 id="组件名">组件名</h3><h4 id="使用-kebab-case">使用 <code>kebab-case</code></h4><div class="note red icon flat"><i class="note-icon fa fa-cloud"></i><p>当使用 <span class='nota' data-nota='短横线分隔命名'>kebab-case</span> 定义一个组件时，也必须在引用这个自定义元素时使用kebab-case</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component-name&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">&lt;my-component-name&gt;&lt;/my-component-name&gt;</span><br></pre></td></tr></table></figure><h4 id="使用-PascalCase">使用 <code>PascalCase</code></h4><div class="note green icon flat"><i class="note-icon fa fa-camera"></i><p>当使用 <span class='nota' data-nota='首字母大写命名'>PascalCase</span> 定义一个组件时，引用这个自定义元素时两种命名法都可以使用</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;MyComponentName&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 两种都可以</span></span><br><span class="line">&lt;my-component-name&gt;&lt;/my-component-name&gt;</span><br><span class="line">&lt;MyComponentName&gt;&lt;/MyComponentName&gt;</span><br></pre></td></tr></table></figure><h3 id="解析-dom-模板时的注意事项">解析 <code>dom</code> 模板时的注意事项</h3><p>有些 <code>HTML</code> 元素，诸如 <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;table&gt;</code> 和 <code>&lt;select&gt;</code>，对于哪些元素可以出现在其内部是有严格限制的。而有些元素，诸如 <code>&lt;li&gt;</code>、<code>&lt;tr&gt;</code> 和 <code>&lt;option&gt;</code>，只能出现在其它某些特定的元素内部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">item</span>&gt;</span><span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;item&#x27;</span>, &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上例子中，自定义组件会被提升到外部，并导致最终渲染失败，可以通过 <code>is</code> 属性来避免</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然如果使用单文件组件和 <code>x-template</code> 以及模板字符串定义的模板，那么这条限制是不存在的</p><h3 id="全局注册">全局注册</h3><div class="tip "><p>通过 <code>Vue.component</code> 来创建的组件都是全局注册的组件，注册以后就可以用在任何新创建的 <code>vue</code> 根实例</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;component-a&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;component-b&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;component-c&#x27;</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="局部注册">局部注册</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">var</span> ComponentC = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>: ComponentA,</span><br><span class="line">    <span class="string">&#x27;component-b&#x27;</span>: ComponentB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于单文件组件</span></span><br><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">&#x27;./ComponentA.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册的组件在其子组件中不可用。例如，如果你希望 ComponentA 在 ComponentB 中可用，需要在组件B中声明A组件</span></span><br><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;component-a&#x27;</span>: ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-exclamation-circle"></i><p>局部注册的组件在其子组件中不可用</p></div><h3 id="基础组件的自动化全局注册">基础组件的自动化全局注册</h3><div class="note green icon flat"><i class="note-icon fa fa-cogs"></i><p>使用 <code>webpack</code> 中的方法 <code>require.context</code> 自动化导入组件</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.context(directory: <span class="built_in">String</span>, <span class="attr">useSubdirectories</span>: <span class="built_in">Boolean</span>, <span class="attr">regExp</span>: <span class="built_in">RegExp</span>): <span class="built_in">Object</span></span><br><span class="line"><span class="comment">// directory -&gt; 文件路径</span></span><br><span class="line"><span class="comment">// useSubdirectories -&gt; 是否查找子目录</span></span><br><span class="line"><span class="comment">// regExp -&gt; 要匹配文件的正则</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// test</span></span><br><span class="line"><span class="comment">// ├─components</span></span><br><span class="line"><span class="comment">//   ├─ A.js</span></span><br><span class="line"><span class="comment">//   ├─ B.js</span></span><br><span class="line"><span class="comment">//   ├─ C.js</span></span><br><span class="line"><span class="comment">//   └─ D.js</span></span><br><span class="line"><span class="comment">// └─ index.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>.context(<span class="string">&#x27;./components&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回</span></span><br><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">&quot;./A.js&quot;</span>: <span class="string">&quot;./src/components/test/components/A.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./B.js&quot;</span>: <span class="string">&quot;./src/components/test/components/B.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./C.js&quot;</span>: <span class="string">&quot;./src/components/test/components/C.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;./D.js&quot;</span>: <span class="string">&quot;./src/components/test/components/D.js&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webpackContext</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = webpackContextResolve(req);</span><br><span class="line">    <span class="keyword">return</span> __webpack_require__(id); <span class="comment">// 返回__webpack_require__(id) 相当于require或者import</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">webpackContextResolve</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 接收一个参数，req 是test文件夹下面匹配文件的相对路径，返回这个文件相对整个工程的相对路径</span></span><br><span class="line">    <span class="keyword">var</span> id = map[req];</span><br><span class="line">    <span class="keyword">if</span>(!(id + <span class="number">1</span>)) &#123; <span class="comment">// check for number or string</span></span><br><span class="line">        <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Cannot find module &#x27;&quot;</span> + req + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        e.code = <span class="string">&#x27;MODULE_NOT_FOUND&#x27;</span>;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> id; <span class="comment">// 执行环境的id，返回的是一个字符串，用于热加载 module.hot.accept</span></span><br><span class="line">&#125;</span><br><span class="line">webpackContext.keys = <span class="function"><span class="keyword">function</span> <span class="title">webpackContextKeys</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(map); <span class="comment">// 获取模型map内部的键名</span></span><br><span class="line">&#125;;</span><br><span class="line">webpackContext.resolve = webpackContextResolve;</span><br><span class="line"><span class="built_in">module</span>.exports = webpackContext; <span class="comment">// 返回一个函数 函数有两个方法 resolve 和 keys</span></span><br><span class="line">webpackContext.id = <span class="string">&quot;./src/components/test/components sync recursive \\.js$&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>.context(<span class="string">&#x27;./components&#x27;</span>, <span class="literal">true</span>, <span class="regexp">/\.js$/</span>);</span><br><span class="line"><span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">of</span> webpack.keys())&#123;</span><br><span class="line">    map[key] = webpack(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// map中就是一个个module</span></span><br></pre></td></tr></table></figure><div class="tip "><p><code>require.context</code> 执行后，返回一个方法 <code>webpackContext</code>，这个方法又返回一个 <code>__webpack_require__</code> ，这个<code>__webpack_require__</code> 就相当于 <code>require</code> 或者 <code>import</code>。同时<code>webpackContext</code> 还有二个静态方法 <code>keys</code> 与 <code>resolve</code>，一个 <code>id</code> 属性</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue基础组件全局注册</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> upperFirst <span class="keyword">from</span> <span class="string">&#x27;lodash/upperFirst&#x27;</span></span><br><span class="line"><span class="keyword">import</span> camelCase <span class="keyword">from</span> <span class="string">&#x27;lodash/camelCase&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> requireComponent = <span class="built_in">require</span>.context(</span><br><span class="line">  <span class="comment">// 其组件目录的相对路径</span></span><br><span class="line">  <span class="string">&#x27;./components&#x27;</span>,</span><br><span class="line">  <span class="comment">// 是否查询其子目录</span></span><br><span class="line">  <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 匹配基础组件文件名的正则表达式</span></span><br><span class="line">  /Base[A-Z]\w+\.(vue|js)$/</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">requireComponent.keys().forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回执行require或import的结果</span></span><br><span class="line">  <span class="keyword">const</span> componentConfig = requireComponent(fileName)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取组件的 PascalCase 命名</span></span><br><span class="line">  <span class="keyword">const</span> componentName = upperFirst(</span><br><span class="line">    camelCase(</span><br><span class="line">      <span class="comment">// 获取和目录深度无关的文件名</span></span><br><span class="line">      fileName</span><br><span class="line">        .split(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">        .pop()</span><br><span class="line">        .replace(<span class="regexp">/\.\w+$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 全局注册组件</span></span><br><span class="line">  Vue.component(</span><br><span class="line">    componentName,</span><br><span class="line">    <span class="comment">// 如果这个组件选项是通过 export default 导出的，</span></span><br><span class="line">    <span class="comment">// 那么就会优先使用 .default，</span></span><br><span class="line">    <span class="comment">// 否则回退到使用模块的根。</span></span><br><span class="line">    componentConfig.default || componentConfig</span><br><span class="line">  )</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip ban faa-horizontal animated"><p>全局注册的行为必须在根 <code>Vue</code> 实例 (通过 <code>new Vue</code>) 创建之前发生</p></div><h2 id="prop"><code>prop</code></h2><h3 id="prop-的大小写"><code>prop</code> 的大小写</h3><p><code>HTML</code> 中的 <code>attribute</code> 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符。这意味着当使用 <code>DOM</code> 中的模板时，<span class='nota' data-nota='驼峰命名法'>camelCase</span> 的 <code>prop</code> 名需要使用其等价的 <span class='nota' data-nota='短横线分隔命名法'>kebab-case</span> 命名，如果使用字符串模板，那么这个限制就不存在了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 在 JavaScript 中是 camelCase 的</span></span><br><span class="line">  props: [<span class="string">&#x27;postTitle&#x27;</span>],</span><br><span class="line">  template: <span class="string">&#x27;&lt;h3&gt;&#123;&#123; postTitle &#125;&#125;&lt;/h3&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;!-- 在 HTML 中是 kebab-case 的 --&gt;</span></span><br><span class="line">&lt;blog-post post-title=<span class="string">&quot;hello!&quot;</span>&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="prop-类型"><code>prop</code> 类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以数组形式列出props</span></span><br><span class="line">props: [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;likes&#x27;</span>, <span class="string">&#x27;isPublished&#x27;</span>, <span class="string">&#x27;commentIds&#x27;</span>, <span class="string">&#x27;author&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以对象形式列出props及其类型</span></span><br><span class="line">props: &#123;</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  likes: <span class="built_in">Number</span>,</span><br><span class="line">  isPublished: <span class="built_in">Boolean</span>,</span><br><span class="line">  commentIds: <span class="built_in">Array</span>,</span><br><span class="line">  author: <span class="built_in">Object</span>,</span><br><span class="line">  callback: <span class="built_in">Function</span>,</span><br><span class="line">  contactsPromise: <span class="built_in">Promise</span> <span class="comment">// 或者其他构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个静态值</span></span><br><span class="line">&lt;blog-post title=<span class="string">&quot;My journey with Vue&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个动态值 需要使用v-bind</span></span><br><span class="line">&lt;blog-post v-bind:title=<span class="string">&quot;post.title&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个数字 使用v-bind</span></span><br><span class="line">&lt;blog-post v-bind:likes=<span class="string">&quot;42&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个布尔值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 包含该 prop 没有值的情况在内，都意味着 true</span></span><br><span class="line">&lt;blog-post is-published&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 即便 false 是静态的，我们仍然需要 v-bind 来告诉 Vue</span></span><br><span class="line"><span class="comment">// 这是一个 JavaScript 表达式而不是一个字符串</span></span><br><span class="line">&lt;blog-post v-bind:is-published=<span class="string">&quot;false&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用一个变量进行动态赋值</span></span><br><span class="line">&lt;blog-post v-bind:is-published=<span class="string">&quot;post.isPublished&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个数组</span></span><br><span class="line"><span class="comment">// 即便数组是静态的，我们仍然需要 v-bind 来告诉 Vue</span></span><br><span class="line"><span class="comment">// 这是一个 JavaScript 表达式而不是一个字符串</span></span><br><span class="line">&lt;blog-post v-bind:comment-ids=<span class="string">&quot;[234, 266, 273]&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用一个变量进行动态赋值</span></span><br><span class="line">&lt;blog-post v-bind:comment-ids=<span class="string">&quot;post.commentIds&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 即便对象是静态的，我们仍然需要 v-bind 来告诉 Vue</span></span><br><span class="line"><span class="comment">// 这是一个 JavaScript 表达式而不是一个字符串</span></span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-bind:author=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">    name: &#x27;Veronica&#x27;,</span></span><br><span class="line"><span class="string">    company: &#x27;Veridian Dynamics&#x27;</span></span><br><span class="line"><span class="string">  &#125;&quot;</span></span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用一个变量进行动态赋值</span></span><br><span class="line">&lt;blog-post v-bind:author=<span class="string">&quot;post.author&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个对象的所有property</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你想要将一个对象的所有 property 都作为 prop 传入，你可以使用不带参数的 v-bind (取代 v-bind:prop-name)</span></span><br><span class="line">post: &#123;</span><br><span class="line">  id: <span class="number">1</span>,</span><br><span class="line">  title: <span class="string">&#x27;My Journey with Vue&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;blog-post v-bind=<span class="string">&quot;post&quot;</span>&gt;&lt;/blog-post&gt;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">&lt;blog-post</span><br><span class="line">  v-bind:id=<span class="string">&quot;post.id&quot;</span></span><br><span class="line">  v-bind:title=<span class="string">&quot;post.title&quot;</span></span><br><span class="line">&gt;&lt;/blog-post&gt;</span><br></pre></td></tr></table></figure><h3 id="单向数据流">单向数据流</h3><p>所有的 <code>prop</code> 都使得其父子 <code>prop</code> 之间形成了一个单向下行绑定：父级 <code>prop</code> 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外变更父级组件的状态，额外的，每次父级组件发生变更时，子组件中所有的 <kbd>prop</kbd> 都将会刷新为最新的值。这意味着你不应该在一个子组件内部改变 <code>prop</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。在这种情况下，最好定义一个本地的 data property 并将这个 prop 用作其初始值</span></span><br><span class="line">props: [<span class="string">&#x27;initialCounter&#x27;</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="built_in">this</span>.initialCounter</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性</span></span><br><span class="line"></span><br><span class="line">props: [<span class="string">&#x27;size&#x27;</span>],</span><br><span class="line">computed: &#123;</span><br><span class="line">  normalizedSize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.size.trim().toLowerCase()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变变更这个对象或数组本身将会影响到父组件的状态</span></span><br></pre></td></tr></table></figure><h3 id="prop-验证"><code>prop</code> 验证</h3><div class="note purple icon modern"><i class="note-icon fa fa-tree"></i><p>可以为组件的 <code>prop</code> 指定验证要求，如果有一个需求没有被满足，则 <code>Vue</code> 会在浏览器控制台中发出警告</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (null 和 undefined 会通过任何类型验证)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].indexOf(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><div class="tip ban faa-horizontal animated-hover"><p>注意那些 <code>prop</code> 会在一个组件实例创建之前进行验证，所以实例的 <code>property</code> (如 <code>data、computed</code> 等) 在 <code>default</code> 或 <code>validator</code> 函数中是不可用的</p></div><ol><li><code>type</code> 可以是下面原生的构造函数或其他自定义构造函数，并且通过 <code>instanceof</code> 来进行检查确认<ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">  <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;blog-post&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    author: Person,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="非-prop-的-Attribute">非 <code>prop</code> 的 <code>Attribute</code></h3><p>一个非 <code>prop</code> 的 <code>attribute</code> 是指传向一个组件，但是该组件并没有相应 <code>prop</code> 定义的 <code>attribute</code>，因为显式定义的 <code>prop</code> 适用于向一个子组件传入信息，然而组件库的作者并不总能预见组件会被用于怎样的场景。这也是为什么组件可以接受任意的 <code>attribute</code>，而这些 <code>attribute</code> 会被<wavy>添加到这个组件的根元素上</wavy>，例如组件的 <code>class</code> 属性会被添加到组件的根元素上</p><h4 id="替换-合并已有的-Attribute">替换 / 合并已有的 <code>Attribute</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;myInput&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`&lt;input type=&quot;date&quot; class=&quot;form-control&quot; /&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;my-input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;abc&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染为</span></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control abc&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><div class="tip warning faa-horizontal animated-hover"><p>对于绝大多数 <code>attribute</code> 来说，从外部提供给组件的值会替换掉组件内部设置好的值，所以如果传入 <code>type=&quot;text&quot;</code> 就会替换掉 <code>type=&quot;date&quot;</code> 并把它<emp>破坏</emp>！庆幸的是，class 和 style attribute 会稍微智能一些，即两边的值会被合并起来</p></div><h4 id="禁止-Attribute-继承">禁止 <code>Attribute</code> 继承</h4><p>如果不希望组件的<wavy>根元素</wavy>继承 <code>attribute</code>，在组件选项中设置 <code>inheritAttrs: false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>禁止组件根元素继承属性以后，依然可以使用 <code>$attrs</code> 手动决定这些属性将会赋予哪个元素，<code>$attrs</code> 会将没有声明的属性合并为一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将其他属性启用到input元素上</span></span><br><span class="line">Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind=&quot;$attrs&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅仅将placeholder属性应用</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  props: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind:placeholder=&quot;$attrs.placeholder&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on:input=&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;base-input label=<span class="string">&quot;姓名&quot;</span> value=<span class="string">&quot;苏西&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入姓名~&quot;</span>&gt;&lt;/base-input&gt;</span><br></pre></td></tr></table></figure><div class="note red icon modern"><i class="note-icon fa fa-hashtag"></i><p><code>inheritAttrs: false</code> <u>不会影响</u> <code>style</code> 和 <code>class</code> 的绑定</p></div><iframe src="https://codesandbox.io/embed/pensive-galileo-nqvby?expanddevtools=1&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="pensive-galileo-nqvby"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h2 id="自定义事件">自定义事件</h2><h3 id="事件名">事件名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component v-on:my-event=<span class="string">&quot;doSomething&quot;</span>&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听my-event</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;myEvent&#x27;</span>); <span class="comment">// 不会触发事件 没有任何效果</span></span><br></pre></td></tr></table></figure><p>不同于组件和 <code>prop</code>，事件名不会被用作一个 <code>JavaScript</code> 变量名或 <code>property</code> 名，所以就没有理由使用 <code>camelCase</code> 或 <code>PascalCase</code> 了。并且 <code>v-on</code> 事件监听器在 <code>DOM</code> 模板中会被自动转换为全小写 (因为 <code>HTML</code> 是大小写不敏感的)，所以 <code>v-on:myEvent</code> 将会变成 <code>v-on:myevent</code>——导致 <code>myEvent</code> 不可能被监听到，因此，我们推荐<wavy>始终使用 kebab-case 的事件名</wavy></p><h3 id="自定义组件的-v-model">自定义组件的 <code>v-model</code></h3><p>一个组件上的 <code>v-model</code> 默认会利用名为 <code>value</code> 的 <code>prop</code> 和名为 <code>input</code> 的事件，但是像<u>单选框、复选框</u>等类型的输入控件可能会将 <code>value attribute</code> 用于不同的目的，<code>model</code> 选项可以用来避免这样的冲突</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model中填入 prop 和 event，表示组件的 v-model 利用 checked 的 prop 和 change 事件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;base-checkbox&#x27;</span>, &#123;</span><br><span class="line">  model: &#123;</span><br><span class="line">    prop: <span class="string">&#x27;checked&#x27;</span>,</span><br><span class="line">    event: <span class="string">&#x27;change&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 最好在 props 中声明这个 prop 不声明这个 prop 会报警告：Property or method &quot;checked&quot; is not defined on the instance but referenced during render</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    checked: <span class="built_in">Boolean</span></span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input</span></span><br><span class="line"><span class="string">      type=&quot;checkbox&quot;</span></span><br><span class="line"><span class="string">      v-bind:checked=&quot;checked&quot;</span></span><br><span class="line"><span class="string">      v-on:change=&quot;$emit(&#x27;change&#x27;, $event.target.checked)&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"></span><br><span class="line">&lt;base-checkbox v-model=<span class="string">&quot;lovingVue&quot;</span>&gt;&lt;/base-checkbox&gt;</span><br><span class="line"><span class="comment">// lovingVue作为checked的prop传入到组件，当触发change事件后，改变checked的值</span></span><br></pre></td></tr></table></figure><h3 id="将原生事件绑定到组件">将原生事件绑定到组件</h3><div class="note purple icon flat"><i class="note-icon fa fa-check-square"></i><p>如果需要在组件的<kbd>根元素</kbd>上直接监听一个<kbd>原生事件</kbd>，可以使用 <code>v-on</code> 的 <code>.native</code> 修饰符</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-on:focus.native</span>=<span class="string">&quot;onFocus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果尝试监听一个类似 <code>&lt;input&gt;</code> 的非常特定的元素时，这可能不是一个好主意，比如上方的 <code>base-input</code> 组件中如果 <code>&lt;input&gt;</code> 并<u>不是它的根元素</u>，那么组件中使用 <code>v-on:focus.native</code> 监听器将静默失败，虽然不会产生任何报错，但是也不会触发 <code>onFocus</code> 的事件，为了解决这个问题，<code>vue</code> 提供了 <code>$listeners</code> 属性，它是一个 <code>Object</code>，里面包含了作用在这个组件的所有监听器，<code>$listeners</code> 属性，可以配合 <code>v-on=&quot;$listeners&quot;</code> 将所有事件监听器值向这个组件的某个特定的子元素，当然也可以绑定特定的事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $listeners的格式</span></span><br><span class="line">&#123;</span><br><span class="line">  focus: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;<span class="comment">/* ... */</span>&#125;,</span><br><span class="line">  input: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;<span class="comment">/* ... */</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  props: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123;label&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        type=&quot;text&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on=&quot;$listeners&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">onChange</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;change&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">onFocus</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;focus&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 注意 当使用 $listeners 时，组件上就不可以使用 .native修饰符了，否则 $listeners 将是一个 空对象(不是 null 而是 &#123;&#125;)</span></span><br><span class="line">&lt;base-input @change=<span class="string">&quot;onChange&quot;</span> @focus=<span class="string">&quot;onFocus&quot;</span>&gt;&lt;/base-input&gt;</span><br></pre></td></tr></table></figure><div class="note orange icon modern"><i class="note-icon fa fa-at"></i><p>对于 <code>input</code> 类型的如果需要配合 <code>v-model</code> 工作的组件来说，为这些监听器创建一个计算属性通常是有用的</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span><br><span class="line">  inheritAttrs: <span class="literal">false</span>,</span><br><span class="line">  props: [<span class="string">&#x27;label&#x27;</span>, <span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    inputListeners: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="built_in">this</span></span><br><span class="line">      <span class="comment">// Object.assign 将所有的对象合并为一个新对象</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;,</span><br><span class="line">        <span class="comment">// 我们从父级添加所有的监听器</span></span><br><span class="line">        <span class="built_in">this</span>.$listeners,</span><br><span class="line">        <span class="comment">// 然后我们添加自定义监听器，</span></span><br><span class="line">        <span class="comment">// 或覆写一些监听器的行为</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 这里确保组件配合 v-model 的工作，如果组件绑定了 v-model 事件</span></span><br><span class="line">          input: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">            vm.$emit(<span class="string">&#x27;input&#x27;</span>, event.target.value)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;label&gt;</span></span><br><span class="line"><span class="string">      &#123;&#123; label &#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;input</span></span><br><span class="line"><span class="string">        v-bind=&quot;$attrs&quot;</span></span><br><span class="line"><span class="string">        v-bind:value=&quot;value&quot;</span></span><br><span class="line"><span class="string">        v-on=&quot;inputListeners&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">    &lt;/label&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="sync-修饰符"><code>.sync</code> 修饰符</h3><p>在有些情况下，我们可能需要对一个 <code>prop</code> 进行<kbd>双向绑定</kbd>，不幸的是，真正的双向绑定会带来维护上的问题，因为<wavy>子组件可以变更父组件，且在父组件和子组件两侧都没有明显的变更来源</wavy>。<code>vue</code> 推荐以 <code>update:myPropName</code> 的模式触发事件取而代之</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$emit(<span class="string">&#x27;update:title&#x27;</span>, newTitle)</span><br></pre></td></tr></table></figure><u>父组件监听这个事件，并根据需要变更本地的而数据属性</u><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;text-document</span><br><span class="line">  v-bind:title=&quot;doc.title&quot;</span><br><span class="line">  v-on:update:title=&quot;doc.title = $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure><wavy>vue 为了方便将这种模式提供了一个缩写，即 .sync 修饰符</wavy><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind:title.sync</span>=<span class="string">&quot;doc.title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-exclamation-circle"></i><p>带有 <code>.sync</code> 修饰符的 <code>v-bind</code> 不能和表达式一起使用 (例如 <code>v-bind:title.sync=&quot;doc.title + '!'&quot;</code> 是无效的)。取而代之的是，你只能提供你想要绑定的 <code>property</code> 名，类似 <code>v-model</code>，所以将 <code>v-bind.sync</code> 用在一个字面量的对象上，例如 <code>v-bind.sync=&quot;{ title: doc.title }&quot;</code>，是无法正常工作的</p></div><p>当我们用一个对象同时设置多个 <code>prop</code> 的时候，也可以将这个 <code>.sync</code> 修饰符和 <code>v-bind</code> 配合使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doc: &#123;</span><br><span class="line">      id: <span class="string">&#x27;xx&#x27;</span>,</span><br><span class="line">      title: <span class="string">&#x27;yy&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind.sync</span>=<span class="string">&quot;doc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这样会把 doc 对象中的每一个 property (如 title) 都作为一个独立的 prop 传进去，然后各自添加用于更新的 v-on 监听器。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text-document</span> <span class="attr">v-bind:title.sync</span>=<span class="string">&quot;doc.title&quot;</span> <span class="attr">v-bind:id.sync</span>=<span class="string">&quot;doc.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;text-document</span><br><span class="line">  v-bind:title=&quot;doc.title&quot;</span><br><span class="line">  v-bind:id=&quot;doc.id&quot;</span><br><span class="line">  v-on:update:title=&quot;doc.title = $event&quot;</span><br><span class="line">  v-on:update:id=&quot;doc.id = $event&quot;</span><br><span class="line">&gt;<span class="tag">&lt;/<span class="name">text-document</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- .sync 意味这监听了一个 update:title 事件名的事件，当title改变时触发这个事件，实现双向绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-input</span> <span class="attr">v-bind:title.sync</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;base-input&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        inheritAttrs: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        props: [<span class="string">&#x27;title&#x27;</span>],</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="javascript">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;text&quot;</span> @click=<span class="string">&quot;$emit(&#x27;update:title&#x27;, &#x27;居庙堂之高则忧其民，处江湖之远而忧其君&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">title</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">          title: <span class="string">&#x27;不以物喜，不以己悲&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_qBmrZqg" src="//codepen.io/milkdue/embed/qBmrZqg?height=300&theme-id=dark&slug-hash=qBmrZqg&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h2 id="插槽">插槽</h2><h3 id="插槽内容">插槽内容</h3><div class="note red icon flat"><i class="note-icon fa fa-check"></i><p><code>vue</code> 实现了一套内容分发的 <code>API</code>，将 <code>&lt;slot&gt;</code> 元素作为承载分发内容的出口</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件navigation-link --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation-link</span> <span class="attr">url</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span></span><br><span class="line">  Your Profile</span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件navigation-link的模板 --&gt;</span></span><br><span class="line">&lt;a</span><br><span class="line">  v-bind:href=&quot;url&quot;</span><br><span class="line">  class=&quot;nav-link&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 组件渲染时，会将 &lt;slot&gt;&lt;/slot&gt; 将会被替换为Your Profile --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插槽中可以包含任意的内容，包括html，甚至是一个组件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果组件中的模板中没有 slot 元素，则该组件起始标签和结束标签之间的内容都会被抛弃 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插槽作用域">插槽作用域</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 插槽跟模板的其它地方一样可以访问相同的实例 property (也就是相同的“作用域”)，而不能访问 &lt;navigation-link&gt; 的作用域，例如url是无法访问的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigation-link</span> <span class="attr">url</span>=<span class="string">&quot;/profile&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 无法获取 url 的内容 --&gt;</span></span><br><span class="line">    Your Profile &#123;&#123;title&#125;&#125; &#123;&#123;url&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">navigation-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;navigation-link&#x27;</span>, &#123;</span></span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>插槽<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">          title: <span class="string">&#x27;不以物喜，不以己悲&#x27;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note blue icon flat"><i class="note-icon fa fa-bullhorn"></i><p><emp>父级模板里的所有内容都是在父级作用域中编译的，子模板里的所有内容都是在子作用域中编译的</emp></p></div><h3 id="后备内容">后备内容</h3><p>有时为一个插槽设置具体的<span class='nota' data-nota='也就是默认的'>后备</span>内容是很有用的，它<u>只会在没有提供内容的时候被渲染</u></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- submit-button组件的模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果希望按钮在大多数情况下都渲染文本 Submit 可以在slot中放入希望渲染的后备内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用时不使用插槽就会渲染默认内容，使用插槽就渲染插槽内容 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">submit-button</span>&gt;</span><span class="tag">&lt;/<span class="name">submit-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">submit-button</span>&gt;</span>save<span class="tag">&lt;/<span class="name">submit-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">submit-button</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width: 10px; height: 10px; background: red; border-radius: 50%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">submit-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽">具名插槽</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当一个模板需要多个插槽时，需要使用到具名插槽 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- base-layout组件模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>slot</code> 的一个特殊的属性 <code>name</code>，这个属性就是<wavy>用来定义额外的插槽的</wavy>，其中一个不带 <code>name</code> 属性的 <code>slot</code> 带有隐含的名字 <kbd>default</kbd>，在向具名插槽提供内容时，在 <code>template</code> 元素上使用 <code>v-slot</code> 指令，并以 <code>v-slot</code> 的参数的形式提供其名称</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="tip "><p><code>v-slot</code> 一般只能添加在 <code>&lt;template&gt;</code> 上</p></div><h3 id="作用域插槽">作用域插槽</h3><p>有时候需要<span class='nota' data-nota='就是 template 中的内容'>插槽中的内容</span>能够访问到子组件的数据，那么就需要作用域插槽，将子组件 <code>slot</code> 元素中的数据通过 <code>v-bind</code> 暴露给插槽，插槽通过 <code>v-slot:[param]=&quot;slotProps&quot;</code> 获取到一个包含子组件的 <code>slot</code> 中 <code>v-bind</code> 参数的对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 插槽不起作用，无法访问到 user --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">        &#123;&#123;user.firstName&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 通过v-slot获取到 v-bind的参数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;slotProps.user.firstName&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;current-user&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            user: &#123;</span><br><span class="line"><span class="javascript">              firstName: <span class="string">&#x27;苏西&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              lastName: <span class="string">&#x27;佩奇&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">user.lastName</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="独占默认插槽的缩写语法">独占默认插槽的缩写语法</h4><p>在上面情况下，当被提供的内容只有默认插槽时，<wavy>组件的标签才可以被当作插槽的模板来使用</wavy>，这样我们就可以把 <code>v-slot</code> 直接用在组件上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当然还可以简单，不带参数的 v-slot 假定为默认插槽 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 注意默认插槽的缩写语法不能和具名插槽混用，因为它会导致作用域不明确 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 无效，会导致警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:other</span>=<span class="string">&quot;otherSlotProps&quot;</span>&gt;</span></span><br><span class="line">    slotProps is NOT available here</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只要出现多个插槽，请始终为所有的插槽使用完整的基于 &lt;template&gt; 的语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.user.firstName &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:other</span>=<span class="string">&quot;otherSlotProps&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 就像下面一样，当有多个插槽时必须要使用完整的template语法 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 通过v-slot获取到 v-bind的参数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;slotProps.user.firstOne&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:slotone</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;slotProps.brother.firstOne&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;current-user&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            user: &#123;</span><br><span class="line"><span class="javascript">              firstOne: <span class="string">&#x27;苏西&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              lastTwo: <span class="string">&#x27;佩奇&#x27;</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            brother: &#123;</span><br><span class="line"><span class="javascript">              firstOne: <span class="string">&#x27;乔治1&#x27;</span>,</span></span><br><span class="line"><span class="javascript">              lastTwo: <span class="string">&#x27;乔治2&#x27;</span></span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">user.lastTwo</span>&#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-bind:brother</span>=<span class="string">&quot;brother&quot;</span> <span class="attr">name</span>=<span class="string">&quot;slotone&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123;<span class="name">brother.lastTwo</span>&#125;&#125;</span><span class="xml">  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解构插槽-Prop">解构插槽 <code>Prop</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">current-user</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过v-slot获取到 v-bind的参数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:default</span>=<span class="string">&quot;&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;user.firstName&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者解构赋值 重命名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; user: person &#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; person.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 解构赋值默认值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; user = &#123; firstName: &#x27;Guest&#x27; &#125; &#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="动态插槽名">动态插槽名</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:</span>[<span class="attr">dynamicSlotName</span>]&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="具名插槽的缩写">具名插槽的缩写</h3><div class="note pink icon modern"><i class="note-icon fa fa-hashtag"></i><p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code></p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 相当于 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-bug"></i><p>和其它指令一样，该缩写只在其有参数的时候才可用</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这样会触发一个警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> #=<span class="string">&quot;&#123; user &#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 明确插槽名才可以使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">current-user</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; user &#125;&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; user.firstName &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">current-user</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作用域插槽示例">作用域插槽示例</h3><div class="note green icon flat"><i class="note-icon fa fa-child"></i><p>当需要根据子组件的某些条件来确认是否需要渲染某些内容时，作用域插槽是可用的</p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;&#123;todo&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">          filteredTodos: [</span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">        &lt;li</span><br><span class="line"><span class="javascript">          v-<span class="keyword">for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span></span></span><br><span class="line"><span class="javascript">          v-bind:key=<span class="string">&quot;todo.id&quot;</span></span></span><br><span class="line">        &gt;</span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="comment">&lt;!-- 后备内容 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            </span><span class="template-variable">&#123;&#123; <span class="name">todo.text</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;.app&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="插槽废弃的语法">插槽废弃的语法</h3><p><code>v-slot</code> 指令自 <code>Vue 2.6.0</code> 起被引入，提供更好的支持 <del>slot</del> 和 <del>slot-scope</del> <code>attribute</code> 的 <code>API</code> 替代方案。虽然在所有的 <code>2.x</code> 版本中 <del>slot</del> 和 <del>slot-scope</del> <code>attribute</code> 仍会被支持，但已经被官方废弃且不会出现在 <code>Vue 3</code> 中</p><h4 id="带有-slot-属性的具名插槽">带有 <code>slot</code> 属性的具名插槽</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- base-layout模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新版是 v-slot:或# 旧版是 slot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者直接将slot作用于一个普通元素上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">base-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 未命名的插槽（默认插槽）会捕获未被匹配的内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">base-layout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 以上两个示例会被渲染为 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Here&#x27;s some contact info<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="带有-slot-scope-属性的具名插槽">带有 <code>slot-scope</code> 属性的具名插槽</h4><p>和 <code>v-slot:default=&quot;slotProp&quot;</code> 一样可以接收传递给插槽的 <code>slotProp</code>，这个 <code>slotProp</code> 声明了被接收的 <code>prop</code> 对象会作为 <code>slotProps</code> 变量存在于 <code>template</code> 作用域中，<code>slotProp</code> 可以随意命名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot-example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;default&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot-example</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果slot=&quot;default&quot; 可以省略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot-example</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- slot-scope 可以直接用于非 template元素，包括组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; slotProps.msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot-example</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- slot-scope 的值可以接收任何有效的可以出现在函数定义的参数位置上的 JavaScript 表达式。这意味着在支持的环境下 (单文件组件或现代浏览器)，可以在表达式中使用 ES2015 解构 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-example</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; msg &#125;&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; msg &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">slot-example</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 之前的todo-list组件也可以这样使用 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">todo-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; todo &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;&#123; todo.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态组件-异步组件">动态组件 &amp; 异步组件</h2><h3 id="在动态组件上使用-keep-alive">在动态组件上使用 <code>keep-alive</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当在这些组件之间切换的时候，有时会想<u>保持这些组件的状态</u>，以避免反<wavy>复重渲染</wavy>导致的性能问题</p><iframe src="https://codesandbox.io/embed/shy-forest-xh3ml?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="shy-forest-xh3ml"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><p>可以看到，选择一篇文章，切换到 <code>archive</code> 之后再切回 <code>posts</code>，不会展示之前显示的文章，这是因为每次切换标签的时候，<code>vue</code> 都创建了一个<kbd>新的</kbd><code>currentTabComponent</code> 实例</p><div class="note orange icon flat"><i class="note-icon fa fa-info"></i><p>重新创建动态组件的行为通常是非常有用的，但是有时更希望那些标签的<u>组件实例能够被在它们第一次被创建的时候缓存下来</u>。为了解决这个问题，可以用一个 <code>&lt;keep-alive&gt;</code> 元素将其<emp>动态组件包裹起来</emp></p></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 失活的组件将会被缓存！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;currentTabComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-keep-alive-with-dynamic-components?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-keep-alive-with-dynamic-components"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><div class="tip cogs"><p>注意这个 <code>&lt;keep-alive&gt;</code> 要求被切换到的组件都有自己的名字，不论是通过组件的 <code>name</code> 选项还是局部/全局注册</p></div><h3 id="异步组件">异步组件</h3><p>在大型应用中，可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，<code>Vue</code> 允许你以一个工厂函数的方式定义组件，这个工厂函数会<kbd>异步解析</kbd>组件定义。<code>Vue</code> 只有在这个组件<wavy>需要被渲染的时候才会触发该工厂函数</wavy>，且会把结果<kbd>缓存</kbd>起来供未来渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;async-example&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 定时器模拟异步</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 向 resolve 回调传递组件定义 也可以reject(reason)来表示加载失败</span></span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: <span class="string">&#x27;&lt;div&gt;I am async!&lt;/div&gt;&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以在工厂函数中返回一个 promise</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;async-webpack-example&#x27;</span>, <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./my-async-componet&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部注册的时候，可以直接提供一个返回Promise的函数</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">&#x27;my-component&#x27;</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./my-async-component&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="处理加载状态">处理加载状态</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> AsyncComponent = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="comment">// 需要加载的组件 (应该是一个 `Promise` 对象)</span></span><br><span class="line">  component: <span class="keyword">import</span>(<span class="string">&#x27;./MyComponent.vue&#x27;</span>),</span><br><span class="line">  <span class="comment">// 异步组件加载时使用的组件</span></span><br><span class="line">  loading: LoadingComponent,</span><br><span class="line">  <span class="comment">// 加载失败时使用的组件</span></span><br><span class="line">  error: ErrorComponent,</span><br><span class="line">  <span class="comment">// 展示加载时组件的延时时间。默认值是 200 (毫秒)</span></span><br><span class="line">  delay: <span class="number">200</span>,</span><br><span class="line">  <span class="comment">// 如果提供了超时时间且组件加载也超时了，</span></span><br><span class="line">  <span class="comment">// 则使用加载失败时使用的组件。默认值是：`Infinity`</span></span><br><span class="line">  timeout: <span class="number">3000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意如果你希望在 Vue Router 的路由组件中使用上述语法的话，你必须使用 Vue Router 2.4.0+ 版本</span></span><br></pre></td></tr></table></figure><h2 id="处理边界情况">处理边界情况</h2><h3 id="访问元素-组件">访问元素 &amp; 组件</h3><h4 id="访问根实例">访问根实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在每个 new Vue 实例的子组件中，其根实例可以通过 $root property 进行访问</span></span><br><span class="line"><span class="comment">// Vue 根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    bar: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    baz: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的子组件都可以将这个实例作为一个全局 store 来访问或使用</span></span><br><span class="line"><span class="comment">// 获取根组件的数据</span></span><br><span class="line"><span class="built_in">this</span>.$root.foo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写入根组件的数据</span></span><br><span class="line"><span class="built_in">this</span>.$root.foo = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问根组件的计算属性</span></span><br><span class="line"><span class="built_in">this</span>.$root.bar</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用根组件的方法</span></span><br><span class="line"><span class="built_in">this</span>.$root.baz()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        filteredTodos: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 子组件中获取根组件的数据</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$root.foo);</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li</span></span><br><span class="line"><span class="string">        v-for=&quot;todo in filteredTodos&quot;</span></span><br><span class="line"><span class="string">        v-bind:key=&quot;todo.id&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">        &lt;slot name=&quot;todo&quot; v-bind:todo=&quot;todo&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;!-- 后备内容 --&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123; todo.text &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;.app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="访问父级组件实例">访问父级组件实例</h4><p>和 <code>$root</code> 类似，<code>$parent</code> 属性可以用来<wavy>从一个子组件访问父组件的实例</wavy>，它提供了一种机会，可以在后期随时触达父级组件，来替代将数据以 <code>prop</code> 的方式传入子组件的方式</p><div class="note red icon flat"><i class="note-icon fa fa-info-circle"></i><p>在绝大多数情况下，触达父级组件会使得你的应用更难调试和理解，尤其是当你变更了父级组件的数据的时候。当我们稍后回看那个组件的时候，很难找出那个变更是从哪里发起的</p></div><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        filteredTodos: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="comment">// 子组件中获取根组件的数据</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.foo); <span class="comment">// 1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li</span></span><br><span class="line"><span class="string">        v-for=&quot;todo in filteredTodos&quot;</span></span><br><span class="line"><span class="string">        v-bind:key=&quot;todo.id&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">        &lt;slot name=&quot;todo&quot; v-bind:todo=&quot;todo&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;!-- 后备内容 --&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123; todo.text &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;.app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="访问子组件或子组件实例和方法">访问子组件或子组件实例和方法</h4><p>尽管存在 <code>prop</code> 和事件，有的时候你仍可能需要在 <code>JavaScript</code> 里<u>直接访问一个子组件</u>。为了达到这个目的，可以通过 <code>ref</code> 这个属性为子组件赋予一个 <code>ID</code> 引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">ref</span>=<span class="string">&quot;todolist&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;&#123;todo&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            filteredTodos: [</span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.foo);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.filteredTodos);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">          &lt;li</span><br><span class="line"><span class="javascript">            v-<span class="keyword">for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span></span></span><br><span class="line"><span class="javascript">            v-bind:key=<span class="string">&quot;todo.id&quot;</span></span></span><br><span class="line">          &gt;</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="comment">&lt;!-- 后备内容 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              </span><span class="template-variable">&#123;&#123; <span class="name">todo.text</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        foo: 1</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$refs.todolist.test() <span class="comment">// 访问子组件方法</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当 <code>ref</code> 和 <code>v-for</code> 一起使用的时候，得到的 <code>ref</code> 将会是一个包含了<emp>对应数据源的这些子组件的数组</emp></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-list</span> <span class="attr">ref</span>=<span class="string">&quot;todolist&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:todo</span>=<span class="string">&quot;&#123;todo&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;todo.isComplete&quot;</span>&gt;</span>✓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">todo-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line">            filteredTodos: [</span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span></span><br><span class="line"><span class="javascript">              &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="built_in">this</span>.$parent.foo);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">test</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.filteredTodos);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">          &lt;li</span><br><span class="line"><span class="javascript">            v-<span class="keyword">for</span>=<span class="string">&quot;todo in filteredTodos&quot;</span></span></span><br><span class="line"><span class="javascript">            v-bind:key=<span class="string">&quot;todo.id&quot;</span></span></span><br><span class="line">          &gt;</span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;todo&quot;</span> <span class="attr">v-bind:todo</span>=<span class="string">&quot;todo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              <span class="comment">&lt;!-- 后备内容 --&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">              </span><span class="template-variable">&#123;&#123; <span class="name">todo.text</span> &#125;&#125;</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">        `</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        foo: 1,</span><br><span class="line">        list: [</span><br><span class="line">          &#123;id: 1&#125;,</span><br><span class="line">          &#123;id: 2&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.todolist) <span class="comment">// 数组</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// this.$refs.todolist: VueComponet[]</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>$refs</code> 只会在组件<span class='nota' data-nota='mounted'>渲染完成</span>之后生效，并且它们不是响应式的。这仅作为一个用于直接操作子组件的<code>逃生舱</code>——<u>应该避免在模板或计算属性中访问 $refs</u></p><h4 id="依赖注入">依赖注入</h4><p>使用两个新的实例选项：<code>provide</code> 和 <code>inject</code>，<code>provide</code> 选项允许提供给<u>任意后代组件数据和方法</u>，在后代组件中使用 <code>inject</code> 选项来接收传给后代组件的数据和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;todo-list&#x27;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        filteredTodos: [</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;111&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;222&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">          &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;333&#x27;</span>, <span class="attr">isComplete</span>: <span class="literal">true</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    inject: [<span class="string">&#x27;one&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>], <span class="comment">// 引入one foo</span></span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.one();</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.foo);</span><br><span class="line">    &#125;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li</span></span><br><span class="line"><span class="string">        v-for=&quot;todo in filteredTodos&quot;</span></span><br><span class="line"><span class="string">        v-bind:key=&quot;todo.id&quot;</span></span><br><span class="line"><span class="string">      &gt;</span></span><br><span class="line"><span class="string">        &lt;slot name=&quot;todo&quot; v-bind:todo=&quot;todo&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;!-- 后备内容 --&gt;</span></span><br><span class="line"><span class="string">          &#123;&#123; todo.text &#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;/slot&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;.app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    foo: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">provide</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      one: <span class="built_in">this</span>.one,</span><br><span class="line">      foo: <span class="built_in">this</span>.foo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">one</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;one&#x27;</span> + <span class="built_in">this</span>.foo);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>实际上，可以把依赖注入看作一部分大范围有效的 <code>prop</code>，<wavy>除了祖先组件不需要哪些后代组件使用了它提供的 property，后代组件不需要知道被注入的 property 来自哪里</wavy></p><div class="note red icon flat"><i class="note-icon fa fa-info"></i><p>然而，依赖注入还是有负面影响的。它将你应用程序中的组件与它们当前的组织方式耦合起来，使重构变得更加困难。同时所提供的 <code>property</code> 是非响应式的。这是出于设计的考虑，因为使用它们来创建一个中心化规模化的数据跟使用 <code>$root</code> 做这件事都是不够好的</p></div><h3 id="程序化的事件侦听器">程序化的事件侦听器</h3><ol><li>通过 <code>$on(eventName, eventHandler)</code> 侦听一个事件</li><li>通过 <code>$once(eventName, eventHandler)</code> 一次性侦听一个事件</li><li>通过 <code>$off(eventName, eventHandler)</code> 停止侦听一个事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一次性将这个日期选择器附加到一个输入框上</span></span><br><span class="line"><span class="comment">// 它会被挂载到 DOM 上。</span></span><br><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Pikaday 是一个第三方日期选择器的库</span></span><br><span class="line">  <span class="built_in">this</span>.picker = <span class="keyword">new</span> Pikaday(&#123;</span><br><span class="line">    field: <span class="built_in">this</span>.$refs.input,</span><br><span class="line">    format: <span class="string">&#x27;YYYY-MM-DD&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 在组件被销毁之前，</span></span><br><span class="line"><span class="comment">// 也销毁这个日期选择器。</span></span><br><span class="line">beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.picker.destroy()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里存在了两个问题</p><ul><li>它需要在这个组件实例中保存这个 <code>picker</code>，如果可以的话最好<kbd>只有</kbd>生命周期钩子可以访问到它，这并不算严重的问题，但是它可以被视为<kbd>杂物</kbd></li><li>建立代码<kbd>独立</kbd>于我们的清理代码，这使得我们比较难于<span class='nota' data-nota='两块代码独立，难以维护'>难于程序化地清理我们建立的所有东西</span></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> picker = <span class="keyword">new</span> Pikaday(&#123;</span><br><span class="line">    field: <span class="built_in">this</span>.$refs.input,</span><br><span class="line">    format: <span class="string">&#x27;YYYY-MM-DD&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 组件内的生命周期函数在执行结束后会 $emit 一个hook + 生命周期名字的自定义事件</span></span><br><span class="line">  <span class="built_in">this</span>.$once(<span class="string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    picker.destroy()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这个逻辑，甚至可以让多个输入框同时使用不同的 <code>pikaday</code>，<u>每个实例都程序化的在后期清理它们</u></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.attachDatepicker(<span class="string">&#x27;startDateInput&#x27;</span>)</span><br><span class="line">  <span class="built_in">this</span>.attachDatepicker(<span class="string">&#x27;endDateInput&#x27;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  attachDatepicker: <span class="function"><span class="keyword">function</span> (<span class="params">refName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> picker = <span class="keyword">new</span> Pikaday(&#123;</span><br><span class="line">      field: <span class="built_in">this</span>.$refs[refName],</span><br><span class="line">      format: <span class="string">&#x27;YYYY-MM-DD&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.$once(<span class="string">&#x27;hook:beforeDestroy&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      picker.destroy()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-cloud"></i><p>注意 <code>vue</code> 的事件系统不同于浏览器的 <code>EventTarget API</code>，尽管它们工作起来是相似的，但是 <code>$emit</code>、<code>$on</code>, 和 <code>$off</code> 并不是 <code>dispatchEvent</code>、<code>addEventListener</code> 和 <code>removeEventListener</code> 的别名</p></div><h3 id="循环引用">循环引用</h3><h4 id="递归组件">递归组件</h4><p>组件是可以在它们自己的模板中调用自身的，不过它们只能通过 <code>name</code> 选项来做这件事。<u>当全局注册一个组件时</u>，这个全局的 <code>ID</code> 会自动设置为该组件的 <code>name</code> 选项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;unique-name-of-my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// name: &#x27;unique-name-of-my-component&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">list</span> <span class="attr">:list</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;list&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">&#x27;list&#x27;</span>],</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注意一定要有停止条件，否则栈溢出</span></span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">item.content</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">list</span> <span class="attr">:list</span>=<span class="string">&quot;item.children&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.children !== null&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">list</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line">        list: [</span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list1&#x27;</span>, <span class="attr">children</span>: [&#123;<span class="attr">id</span>: <span class="string">&#x27;1-1&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list1-1&#x27;</span>&#125;, &#123;<span class="attr">id</span>: <span class="string">&#x27;1-2&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list1-2&#x27;</span>&#125;]&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list2&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;list3&#x27;</span>&#125;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="组件之间的循环引用">组件之间的循环引用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 组件tree-folder模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; folder.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tree-folder-contents</span> <span class="attr">:children</span>=<span class="string">&quot;folder.children&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件tree-folder-contents模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;child in children&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tree-folder</span> <span class="attr">v-if</span>=<span class="string">&quot;child.children&quot;</span> <span class="attr">:folder</span>=<span class="string">&quot;child&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>&#123;&#123; child.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 当你仔细观察的时候，你会发现这些组件在渲染树中互为对方的后代和祖先——一个悖论！当通过 Vue.component 全局注册组件的时候，这个悖论会被自动解开 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果你使用一个模块系统依赖/导入组件，例如通过 webpack 或 Browserify，你会遇到一个错误： Failed to mount component: template or render function not defined.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">模块系统发现它需要 A，但是首先 A 依赖 B，但是 B 又依赖 A，但是 A 又依赖 B，如此往复。这变成了一个循环，不知道如何不经过其中一个组件而完全解析出另一个组件。为了解决这个问题，我们需要给模块系统一个点，在那里“A 反正是需要 B 的，但是我们不需要先解析 B</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">在我们的例子中，把 &lt;tree-folder&gt; 组件设为了那个点。我们知道那个产生悖论的子组件是 &lt;tree-folder-contents&gt; 组件，所以我们会等到生命周期钩子 beforeCreate 时去注册它</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// browserify</span></span></span><br><span class="line"><span class="javascript">  beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">this</span>.$options.components.TreeFolderContents = <span class="built_in">require</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>).default</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="comment">// webpack import</span></span></span><br><span class="line">  components: &#123;</span><br><span class="line"><span class="javascript">    TreeFolderContents: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./tree-folder-contents.vue&#x27;</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tree-folder</span> <span class="attr">:folder</span>=<span class="string">&quot;folder&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tree-folder</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;tree-folder&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">&#x27;folder&#x27;</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">folder.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">tree-folder-contents</span> <span class="attr">:children</span>=<span class="string">&quot;folder.children&quot;</span>/&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">&#x27;tree-folder-contents&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">      props: [<span class="string">&#x27;children&#x27;</span>],</span></span><br><span class="line">      template: `</span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;child in children&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">tree-folder</span> <span class="attr">v-if</span>=<span class="string">&quot;child.children&quot;</span> <span class="attr">:folder</span>=<span class="string">&quot;child&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">child.name</span>&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span></span><br><span class="line"><span class="handlebars"><span class="xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span></span><br><span class="line">      `</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">&#x27;.app&#x27;</span>,</span></span><br><span class="line">      data: &#123;</span><br><span class="line"><span class="javascript">        folder: &#123;<span class="attr">name</span>: <span class="string">&#x27;我的电脑&#x27;</span>, <span class="attr">children</span>: [</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;用户&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">children</span>: [&#123;<span class="attr">name</span>: <span class="string">&#x27;默认&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;defalut&#x27;</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&#x27;公用&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;public&#x27;</span>&#125;]&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;System32&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;system32&#x27;</span>&#125;,</span></span><br><span class="line"><span class="javascript">          &#123;<span class="attr">name</span>: <span class="string">&#x27;System64&#x27;</span>, <span class="attr">id</span>: <span class="string">&#x27;system64&#x27;</span>&#125;</span></span><br><span class="line">        ]&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板定义的替代品">模板定义的替代品</h3><h4 id="内联模板">内联模板</h4><p>当 <code>inline-template</code> 这个特殊的 <code>attribute</code> 出现在一个子组件上时，<u>这个组件将会使用其里面的内容作为模板</u>，<span class='nota' data-nota='slot插槽'>而不是将其作为被分发的内容</span>，这使得模板的撰写工作更加灵活</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- inline-template中的内容直接作为模板渲染出来 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>These are compiled as the component&#x27;s own template.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Not parent&#x27;s transclusion content.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 即使写模板也不会生效</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    template: &#x27;<span class="tag">&lt;<span class="name">span</span>&gt;</span>111<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><div class="note green icon flat"><i class="note-icon fa fa-thermometer-full"></i><p><code>inline-template</code> 会让模板的作用域变得更加难以理解。所以作为最佳实践，请在组件内优先选择 <code>template</code> 选项或 <code>.vue</code> 文件里的一个 <code>&lt;template&gt;</code> 元素来定义模板</p></div><h4 id="X-Template"><code>X-Template</code></h4><p>另一个定义模板的方式是在一个 <code>&lt;script&gt;</code> 元素中，并为其带上 <code>text/x-template</code> 的类型，然后通过一个 <code>id</code> 将模板引用过去，但这些模板一般用于极小的应用，<emp>其他情况下避免使用，这会将模板和组件的其他定义分开来</emp></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hello-world</span>&gt;</span><span class="tag">&lt;/<span class="name">hello-world</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;hello-world-template&quot;</span>&gt;</span></span><br><span class="line"><span class="handlebars"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello hello hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">&#x27;hello-world&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    template: <span class="string">&#x27;#hello-world-template&#x27;</span></span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控制更新">控制更新</h3><h4 id="强制更新">强制更新</h4><p>通过 <code>$forceUpdate</code> 来强制更新，<del>对于数组和对象的变更检测，视图是无法及时更新的</del>，需要强制更新( <code>$forceUpdate</code> )</p><iframe id="cp_embed_VwbzejK" src="//codepen.io/milkdue/embed/VwbzejK?height=300&theme-id=dark&slug-hash=VwbzejK&default-tab=js&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h4 id="通过-v-once-创建低开销的静态组件">通过 <code>v-once</code> 创建低开销的静态组件</h4><p>渲染普通的 <code>HTML</code> 元素在 <code>vue</code> 中是非常快速的，但有的时候可能有一个组件，这个组件包含了大量静态内容，在这种情况下，可以在根元素上添加 <code>v-once</code> 属性以确保这些内容只计算一次然后缓存起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;terms-of-service&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div v-once&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Terms of Service&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      ... a lot of static content ...</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="进入-离开-列表过渡">进入 / 离开 &amp; 列表过渡</h2><div class="tip "><p><code>vue</code> 在插入、更新或移除 <code>dom</code> 时，提供多种不同方式的应用过渡效果</p><ol><li>在 <code>css</code> 过渡和动画中自动应用 <code>class</code></li><li>可以配合使用第三方 <code>css</code> 动画库，如 <code>animate.css</code></li><li>在过渡钩子函数中使用 <code>javascript</code> 直接操作 <code>dom</code></li><li>可以配合使用第三方 <code>javascript</code> 动画库，如 <code>velocity.js</code></li></ol></div><h3 id="单元素-组件的过渡">单元素 / 组件的过渡</h3><p><code>vue</code> 提供了 <code>transition</code> 的封装组件，在下列情形中，可以给任何元素或组件添加进入 / 离开过渡</p><ol><li>条件渲染(<code>v-if</code> 或 <code>v-show</code>)</li><li>动态组件(<code>&lt;component :is=&quot;xx&quot;&gt;&lt;/component&gt;</code>)</li><li>组件根节点</li></ol><iframe id="cp_embed_NWjayzZ" src="//codepen.io/milkdue/embed/NWjayzZ?height=300&theme-id=dark&slug-hash=NWjayzZ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>当插入或删除包含在 <code>transition</code> 组件中的元素时，<code>vue</code> 将会做出以下处理</p><ol><li>自动嗅探目标元素是否应用了 <code>CSS</code> 过渡或动画，如果是，在恰当的时机添加/删除 <code>CSS</code> 类名</li><li>如果过渡组件提供了 <code>JavaScript 钩子函数</code>，这些钩子函数将在恰当的时机被调用</li><li>如果没有找到 <code>JavaScript</code> 钩子并且也没有检测到 <code>CSS</code> 过渡/动画，<code>DOM</code> 操作 (插入/删除) 在下一帧中立即执行</li></ol><h4 id="过渡的类名">过渡的类名</h4><p>在进入 / 离开的过渡中，会有 <code>6</code> 个 <code>class</code> 切换</p><ol><li><code>v-enter</code>：定义进入过渡的开始状态，在元素被插入之前生效，在元素被插入之后的下一帧移除</li><li><code>v-enter-active</code>：定义进入过渡生效时的状态，在整个进入过渡阶段中应用，在元素被插入之前生效，在过渡 / 动画完成之后移除，这个类被用来定义进入<span class='nota' data-nota='过渡属性transition'>过渡的过程时间，延迟和曲线函数</span></li><li><code>v-enter-to</code>：定义进入过渡的结束状态，在元素被插入之后下一帧生效(与此同时 <code>v-enter</code> 被移除)，在过渡 / 动画完成之后移除</li><li><code>v-leave</code>：定义离开过渡的开始状态，在离开过渡被触发时立刻生效，下一帧被移除</li><li><code>v-leave-active</code>：定义离开过渡生效时的状态，在整个离开过渡阶段中应用，在离开过渡被触发时立刻生效，在过渡 / 动画完成之后移除，这个类可以被用来定义离开<span class='nota' data-nota='过渡属性transition'>过渡的过程时间，延迟和曲线函数</span></li><li><code>v-leave-to</code>：定义离开过渡的结束状态，在离开过渡被触发之后下一帧生效(与此同时 <code>v-leave</code> 被删除)，在过渡 / 动画完成之后移除</li></ol><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/c0add594/20210722-174402-0844.png" alt="过渡过程"/></div><span class="image-caption">过渡过程</span></div><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.keyiqingxin.cn/post/c0add594/20210727-151531-0600.jpg" alt="过渡过程"/></div><span class="image-caption">过渡过程</span></div><p>对于这些在过渡中切换的类名来说，如果使用了一个没有名字的 <code>&lt;transition&gt;</code>，则 <code>v-</code> 是这些类名的默认前缀，如果使用了 <code>name</code> 属性 <code>&lt;transition name=&quot;my-transition&quot;&gt;</code>，则 <code>v-enter</code> 会替换为 <code>my-transition</code>。其中 <code>v-enter-active</code> 和 <code>v-leave-active</code> 可以控制进入 / 离开过渡的不同的缓和曲线</p><h4 id="CSS-过渡"><code>CSS</code> 过渡</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    Toggle render</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-1&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    show: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 可以设置不同的进入和离开动画 */</span></span><br><span class="line"><span class="comment">/* 设置持续时间和动画函数 */</span></span><br><span class="line"><span class="selector-class">.slide-fade-enter-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.8</span>, <span class="number">1.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.slide-fade-enter</span>, <span class="selector-class">.slide-fade-leave-to</span></span><br><span class="line"><span class="comment">/* .slide-fade-leave-active for below version 2.1.8 */</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">10px</span>);</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CSS-动画"><code>CSS</code> 动画</h4><p><code>css</code> 动画用法同 <code>css</code> 过渡，区别是在动画中 <code>v-enter</code> 类名在节点插入 <code>dom</code> 后不会立即删除，而是在 <code>animationend</code> 事件触发时删除</p><iframe id="cp_embed_bGWoWXG" src="//codepen.io/milkdue/embed/bGWoWXG?height=300&theme-id=dark&slug-hash=bGWoWXG&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h4 id="自定义过渡的类名">自定义过渡的类名</h4><ol><li>可以通过以下的属性来自定义过渡类名<ul><li><code>enter-class</code></li><li><code>enter-active-class</code></li><li><code>enter-to-class</code></li><li><code>leave-class</code></li><li><code>leave-active-class</code></li><li><code>leave-to-class</code></li></ul></li><li>它们的优先级高于普通的类名</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  &lt;transition</span><br><span class="line">    name=&quot;custom-classes-transition&quot;</span><br><span class="line">    enter-active-class=&quot;animated tada&quot;</span><br><span class="line">    leave-active-class=&quot;animated bounceOutRight&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      show: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_eYWeNyN" src="//codepen.io/milkdue/embed/eYWeNyN?height=300&theme-id=dark&slug-hash=eYWeNyN&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h4 id="同时使用过渡和动画">同时使用过渡和动画</h4><p><code>vue</code> 为了知道过渡的完成，必须设置相应的事件监听器，它可以是 <code>transitionend</code> 或 <code>animationend</code>，这取决于给元素应用的 <code>css</code> 规则，如果使用其中任何一种，<code>vue</code> 能自动识别类型并设置监听，但是，假设需要给同一个元素设置两种过渡动效，如果 <code>animation</code> 很快的被触发完成了，而 <code>transition</code> 效果还没结束，在这种情况下，需要使用 <code>type</code> 属性并设置 <code>animation</code> 或 <code>transition</code> 来明确声明需要 <code>vue</code> 监听的类型</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/animate.css@3.5.1&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  &lt;transition</span><br><span class="line">    name=&quot;fade&quot;</span><br><span class="line">    enter-active-class=&quot;animated tada duration-1s&quot;</span><br><span class="line">    leave-active-class=&quot;animated bounceOutRight duration-1s&quot;</span><br><span class="line">    type=&quot;transition&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      show: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显性的过渡持续时间">显性的过渡持续时间</h4><p>在很多情况下，<code>vue</code> 可以自动得出过渡效果的完成时机。默认情况下，<code>vue</code> 会等待其在过渡效果的根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。然而也可以不这样设定——比如，我们可以拥有一个精心编排的一系列过渡效果，其中一些嵌套的内部元素相比于过渡效果的根元素有延迟的或更长的过渡效果，在这种情况下可以用 <code>&lt;transition&gt;</code> 组件上的 <code>duration prop</code> <wavy>定制一个显性的过渡持续时间</wavy></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置显性的过渡时间 单位为毫秒 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;1000&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 定制进入和移除的过渡时间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">:duration</span>=<span class="string">&quot;&#123; enter: 500, leave: 800 &#125;&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="javascript-钩子"><code>javascript</code> 钩子</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">  v-on:enter=&quot;enter&quot;</span><br><span class="line">  v-on:after-enter=&quot;afterEnter&quot;</span><br><span class="line">  v-on:enter-cancelled=&quot;enterCancelled&quot;</span><br><span class="line"></span><br><span class="line">  v-on:before-leave=&quot;beforeLeave&quot;</span><br><span class="line">  v-on:leave=&quot;leave&quot;</span><br><span class="line">  v-on:after-leave=&quot;afterLeave&quot;</span><br><span class="line">  v-on:leave-cancelled=&quot;leaveCancelled&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="comment">// 进入中</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当与 CSS 结合使用时</span></span><br><span class="line">  <span class="comment">// 回调函数 done 是可选的</span></span><br><span class="line">  enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="comment">// 离开时</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  beforeLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当与 CSS 结合使用时</span></span><br><span class="line">  <span class="comment">// 回调函数 done 是可选的</span></span><br><span class="line">  leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// leaveCancelled 只用于 v-show 中</span></span><br><span class="line">  <span class="comment">// 离开过渡被打断时</span></span><br><span class="line">  leaveCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>可以在属性中声明 <code>javascript</code> 钩子<ul><li><code>before-enter</code>：进入过渡运行前</li><li><code>enter</code>：进入过渡运行时</li><li><code>after-enter</code>：进入过渡运行后</li><li><code>enter-cancelled</code>：进入过渡被打断时</li><li><code>before-leave</code>：离开过渡运行前</li><li><code>leave</code>：离开过渡运行时</li><li><code>after-leave</code>：离开过渡运行后</li><li><code>leave-cancelled</code>：离开过渡被打断时</li></ul></li><li>这些钩子函数可以结合 <code>transitions / animations</code> 使用，也可以单独使用</li><li>当只有 <code>javascript</code> 过渡的时候，在 <code>enter</code> 和 <code>leave</code> 中必须使用 <code>done</code> 进行回调，否则，<u>它们将被同步调用，过渡会立即完成</u></li><li>推荐对于使用 <code>javascript</code> 过渡的元素添加 <code>v-bind:css=&quot;false&quot;</code>，<code>vue</code> 会跳过 <code>css</code> 的检测，也可以避免过渡过程中 <code>css</code> 的影响</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;show = !show&quot;</span>&gt;</span></span><br><span class="line">    切换</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  &lt;transition</span><br><span class="line">    v-on:before-enter=&quot;beforeEnter&quot;</span><br><span class="line">    v-on:enter=&quot;enter&quot;</span><br><span class="line">    v-on:leave=&quot;leave&quot;</span><br><span class="line">    v-bind:css=&quot;false&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;show&quot;</span>&gt;</span></span><br><span class="line">      Hello</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#example-4&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      show: <span class="literal">false</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span></span><br><span class="line">        el.style.opacity = 0</span><br><span class="line"><span class="javascript">        el.style.transformOrigin = <span class="string">&#x27;left&#x27;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        Velocity(el, &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">fontSize</span>: <span class="string">&#x27;1.4em&#x27;</span> &#125;, &#123; <span class="attr">duration</span>: <span class="number">300</span> &#125;)</span></span><br><span class="line"><span class="javascript">        Velocity(el, &#123; <span class="attr">fontSize</span>: <span class="string">&#x27;1em&#x27;</span> &#125;, &#123; <span class="attr">complete</span>: done &#125;)</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        Velocity(el, &#123; <span class="attr">translateX</span>: <span class="string">&#x27;15px&#x27;</span>, <span class="attr">rotateZ</span>: <span class="string">&#x27;50deg&#x27;</span> &#125;, &#123; <span class="attr">duration</span>: <span class="number">600</span> &#125;)</span></span><br><span class="line"><span class="javascript">        Velocity(el, &#123; <span class="attr">rotateZ</span>: <span class="string">&#x27;100deg&#x27;</span> &#125;, &#123; <span class="attr">loop</span>: <span class="number">2</span> &#125;)</span></span><br><span class="line">        Velocity(el, &#123;</span><br><span class="line"><span class="javascript">          rotateZ: <span class="string">&#x27;45deg&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          translateY: <span class="string">&#x27;30px&#x27;</span>,</span></span><br><span class="line"><span class="javascript">          translateX: <span class="string">&#x27;30px&#x27;</span>,</span></span><br><span class="line">          opacity: 0</span><br><span class="line">        &#125;, &#123; complete: done &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_NWjwqoZ" src="//codepen.io/milkdue/embed/NWjwqoZ?height=300&theme-id=dark&slug-hash=NWjwqoZ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="初始渲染的过渡">初始渲染的过渡</h3><p>通过 <code>appear</code> 属性来设置节点在<span class='nota' data-nota='组件第一次出现时的过渡'>初始渲染的过渡</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">appear</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自定义 <code>css</code> 类名</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  appear-class=&quot;custom-appear-class&quot;</span><br><span class="line">  appear-to-class=&quot;custom-appear-to-class&quot;</span><br><span class="line">  appear-active-class=&quot;custom-appear-active-class&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_abWEyZj" src="//codepen.io/milkdue/embed/abWEyZj?height=300&theme-id=dark&slug-hash=abWEyZj&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>自定义 <code>javascript</code> 钩子</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition</span><br><span class="line">  appear</span><br><span class="line">  v-on:before-appear=&quot;customBeforeAppearHook&quot;</span><br><span class="line">  v-on:appear=&quot;customAppearHook&quot;</span><br><span class="line">  v-on:after-appear=&quot;customAfterAppearHook&quot;</span><br><span class="line">  v-on:appear-cancelled=&quot;customAppearCancelledHook&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><iframe id="cp_embed_LYyejjv" src="//codepen.io/milkdue/embed/LYyejjv?height=300&theme-id=dark&slug-hash=LYyejjv&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><h3 id="多个元素的过渡">多个元素的过渡</h3><p>一个 <code>transition</code> 标签中含有多个过渡元素，但是当有多个<u>相同标签名</u>的元素切换时，需要通过 <code>key</code> 属性设置唯一的值来标记以让 <code>vue</code> 区分它们，否则 <code>vue</code> 为了效率<u>只会替换相同标签内部的内容</u></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;isEditing&quot;</span> <span class="attr">key</span>=<span class="string">&quot;save&quot;</span>&gt;</span></span><br><span class="line">    Save</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-else</span> <span class="attr">key</span>=<span class="string">&quot;edit&quot;</span>&gt;</span></span><br><span class="line">    Edit</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;isEditing&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123; isEditing ? &#x27;Save&#x27; : &#x27;Edit&#x27; &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="过渡模式">过渡模式</h4><p>点击下面的按钮，在 <code>one</code> 和 <code>two</code> 按钮的过渡中，两个按钮都被重绘了，一个离开过渡的时候另一个开始进入过渡，这是 <code>&lt;transition&gt;</code>的<span class='nota' data-nota='进入和离开同时发生'>默认行为</span>。接下来点击切换定位为绝对定位在彼此的上面运行正常，然后滑动进度条运动变为滑动过渡</p><iframe id="cp_embed_dyWJJgb" src="//codepen.io/milkdue/embed/dyWJJgb?height=300&theme-id=dark&slug-hash=dyWJJgb&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>同时生效的进入和离开的过渡不能满足所有要求，所以 <code>vue</code> 提供了过渡模式</p><ol><li><code>in-out</code>：新元素先过渡，完成之后当前元素过渡离开</li><li><code>out-in</code>：当前元素先进行过渡，完成之后新元素过渡进入(点击切换模式查看效果)</li></ol><h3 id="多个组件的过渡">多个组件的过渡</h3><p>多个组件的过渡需要使用动态组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">fade</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">v-bind:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">3s</span> ease;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="列表过渡">列表过渡</h3><p>对于列表过渡，我们采用 <code>transition-group</code> 组件，该组件的特点如下：</p><ol><li>不同于 <code>transition</code>，它会以一个真实元素呈现：默认为一个 <code>span</code>，可以通过 <code>tag</code> 属性更换为其他元素</li><li>过渡模式不可用，因为不需要相互切换特有的元素</li><li>内部元素总是需要提供唯一的 <code>key</code></li><li><code>css</code> 过渡的类将会应用在内部的元素中，而不是这个组 / 容器本身</li></ol><h4 id="列表的进入-离开过渡">列表的进入 / 离开过渡</h4><iframe id="cp_embed_XWRZJzq" src="//codepen.io/milkdue/embed/XWRZJzq?height=300&theme-id=dark&slug-hash=XWRZJzq&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>上面的过渡并不平滑，当<wavy>添加或移除元素时</wavy>，周围的元素会瞬间移动到它们的新布局的位置</p><h4 id="列表的排序过渡">列表的排序过渡</h4><p><code>transition-group</code> 组件还有一个特殊之处，不仅可以进入和离开动画，还可以<kbd>改变定位</kbd>，要使用这个功能需要 <code>v-move</code> 这个类，它会在元素的改变定位的过程中应用，像之前的类名一样，可以通过 <code>name</code> 属性来自定义前缀，也可以通过 <code>move-class</code> 属性手动设置，<code>v-move</code> 对于设置过渡的切换时机和过渡曲线非常有用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;flip-list&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in items&quot;</span> <span class="attr">v-bind:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    shuffle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// _.shuffle() 返回一个打乱的集合</span></span><br><span class="line">      <span class="built_in">this</span>.items = _.shuffle(<span class="built_in">this</span>.items)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flip-list-move</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_XWRZJLy" src="//codepen.io/milkdue/embed/XWRZJLy?height=300&theme-id=dark&slug-hash=XWRZJLy&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p>使用 <code>v-move</code>时，<code>vue</code> 内部使用了一个 <code>FLIP</code> 简单的动画队列，使用 <code>transforms</code> 将元素从之前的位置平滑过渡到新的位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;shuffle&quot;</span>&gt;</span>Shuffle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;remove&quot;</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">&quot;list-complete&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;p&quot;</span>&gt;</span></span><br><span class="line">    &lt;span</span><br><span class="line">      v-for=&quot;item in items&quot;</span><br><span class="line">      v-bind:key=&quot;item&quot;</span><br><span class="line">      class=&quot;list-complete-item&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; item &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        items: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],</span><br><span class="line">        nextNum: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        randomIndex: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="built_in">this</span>.items.length)</span><br><span class="line">        &#125;,</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.items.splice(<span class="built_in">this</span>.randomIndex(), <span class="number">0</span>, <span class="built_in">this</span>.nextNum++)</span><br><span class="line">        &#125;,</span><br><span class="line">        remove: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.items.splice(<span class="built_in">this</span>.randomIndex(), <span class="number">1</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        shuffle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.items = _.shuffle(<span class="built_in">this</span>.items)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-complete-item</span> &#123;</span><br><span class="line">  <span class="comment">/* 也可以在move-class和list-complete-enter/leave-active中分别加transition，注意一定要是all才可以，可能过渡效果不止一种，这里在item中加transition相当于在move和active中分别加transition */</span></span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-complete-enter</span>, <span class="selector-class">.list-complete-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-complete-leave-active</span> &#123;</span><br><span class="line">  <span class="comment">/* 即将删除的dom需要脱离文档流后面的元素才可以过渡过来 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 另一种css写法 */</span></span><br><span class="line"><span class="selector-class">.list-complete-item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list-complete-enter</span>, <span class="selector-class">.list-complete-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-complete-enter-active</span>,<span class="selector-class">.list-complete-leave-active</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-complete-move</span>&#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-complete-leave-active</span> &#123;</span><br><span class="line">  <span class="comment">/* 即将删除的dom需要脱离文档流后面的元素才可以过渡过来 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note red icon flat"><i class="note-icon fa fa-info"></i><p>需要注意的是使用 <code>FLIP</code> 过渡的元素不能设置为 <code>display: inline</code> 。作为替代方案，可以设置为 <code>display: inline-block</code> 或者放置于 <code>flex</code> 中</p></div><iframe id="cp_embed_BaRYNgP" src="//codepen.io/milkdue/embed/BaRYNgP?height=300&theme-id=dark&slug-hash=BaRYNgP&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p><code>flip</code> 动画不仅可以实现单列过渡，多维网格也可以过渡</p><iframe src="https://codesandbox.io/embed/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h4 id="列表的交错过渡">列表的交错过渡</h4><p>传统的交错过渡需要使用到大量的 <code>css</code>，<code>vue</code> 提供了钩子函数配合 <code>setTimeout</code>来实现<span class='nota' data-nota='延迟过渡'>交错过渡</span></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用 css 来实现交错过渡 */</span></span><br><span class="line"><span class="comment">/* 可以发现 需要写大量的css */</span></span><br><span class="line"><span class="selector-class">.list-enter-active</span>, <span class="selector-class">.list-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-enter</span>, <span class="selector-class">.list-leave-to</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span>, <span class="selector-class">.list-css-leave-active</span> &#123;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter</span>, <span class="selector-class">.list-css-leave-to</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">9s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-enter-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-leave-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">1.2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-leave-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">9s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-leave-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">6s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.list-css-leave-active</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>n+<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">transition-delay</span>: .<span class="number">3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过钩子函数进行过渡</span></span><br><span class="line">Vue.component(<span class="string">&#x27;tab-c&#x27;</span>, &#123;</span><br><span class="line">    props: [<span class="string">&#x27;num&#x27;</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;transition-group</span></span><br><span class="line"><span class="string">        :css=&quot;false&quot;</span></span><br><span class="line"><span class="string">        @before-enter=&quot;beforeEnter&quot;</span></span><br><span class="line"><span class="string">        @enter=&quot;enter&quot;</span></span><br><span class="line"><span class="string">        @after-enter=&quot;afterEnter&quot;</span></span><br><span class="line"><span class="string">        @before-leave=&quot;beforeLeave&quot;</span></span><br><span class="line"><span class="string">        @leave=&quot;leave&quot;</span></span><br><span class="line"><span class="string">        @after-leave=&quot;afterLeave&quot;</span></span><br><span class="line"><span class="string">    &gt;</span></span><br><span class="line"><span class="string">        &lt;item v-for=&quot;item in num&quot; :key=&quot;item&quot; :data-enter=&quot;item * 300&quot; :data-leave=&quot;(num - item) * 300&quot;&gt;&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;/transition-group&gt;</span></span><br><span class="line"><span class="string">    `</span>,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="function"><span class="title">beforeEnter</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 为过渡元素添加类</span></span><br><span class="line">            el.classList.add(<span class="string">&#x27;list-enter&#x27;</span>, <span class="string">&#x27;list-enter-active&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">enter</span>(<span class="params">el, done</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> delay = el.dataset.enter;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                el.classList.remove(<span class="string">&#x27;list-enter&#x27;</span>);</span><br><span class="line">                el.classList.add(<span class="string">&#x27;list-enter-to&#x27;</span>);</span><br><span class="line">                <span class="comment">// 监听 transitionend 事件完成后调用 done 执行after-enter钩子</span></span><br><span class="line">                el.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">onEnd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    el.removeEventListener(<span class="string">&#x27;transitionend&#x27;</span>, onEnd);</span><br><span class="line">                    done(); <span class="comment">// 告诉vue 动画已经完成，触发afterEnter钩子</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">afterEnter</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            el.classList.remove(<span class="string">&#x27;list-enter-to&#x27;</span>, <span class="string">&#x27;list-enter-active&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">beforeLeave</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            el.classList.add(<span class="string">&#x27;list-leave&#x27;</span>, <span class="string">&#x27;list-leave-active&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">leave</span>(<span class="params">el, done</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> delay = el.dataset.leave;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                el.classList.remove(<span class="string">&#x27;list-leave&#x27;</span>);</span><br><span class="line">                el.classList.add(<span class="string">&#x27;list-leave-to&#x27;</span>);</span><br><span class="line">                <span class="comment">// 监听transitionend事件</span></span><br><span class="line">                el.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, <span class="function"><span class="keyword">function</span> <span class="title">onEnd</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    el.removeEventListener(<span class="string">&#x27;transitionend&#x27;</span>, onEnd);</span><br><span class="line">                    done();</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;, delay)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">afterLeave</span>(<span class="params">el</span>)</span>&#123;</span><br><span class="line">            el.classList.remove(<span class="string">&#x27;list-leave-active&#x27;</span>, <span class="string">&#x27;list-leave-to&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/elegant-varahamihira-n5esr?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:800px; border:0; border-radius: 4px; overflow:hidden;"    title="elegant-varahamihira-n5esr"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe><h3 id="可复用的过渡">可复用的过渡</h3><p>过渡可以通过 <code>vue</code> 的组件系统来实现复用，创建一个可复用的组件，需要将 <code>transition</code> 或 <code>transition-group</code> 作为<span class='nota' data-nota='上例中transition-group作为根组件'>根组件</span>，然后将任何子组件放置在其中就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;my-special-transition&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;\</span></span><br><span class="line"><span class="string">    &lt;transition\</span></span><br><span class="line"><span class="string">      name=&quot;very-special-transition&quot;\</span></span><br><span class="line"><span class="string">      mode=&quot;out-in&quot;\</span></span><br><span class="line"><span class="string">      v-on:before-enter=&quot;beforeEnter&quot;\</span></span><br><span class="line"><span class="string">      v-on:after-enter=&quot;afterEnter&quot;\</span></span><br><span class="line"><span class="string">    &gt;\</span></span><br><span class="line"><span class="string">      &lt;slot&gt;&lt;/slot&gt;\</span></span><br><span class="line"><span class="string">    &lt;/transition&gt;\</span></span><br><span class="line"><span class="string">  &#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数式组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;my-special-transition&#x27;</span>, &#123;</span><br><span class="line">  functional: <span class="literal">true</span>,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span> (<span class="params">createElement, context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        name: <span class="string">&#x27;very-special-transition&#x27;</span>,</span><br><span class="line">        mode: <span class="string">&#x27;out-in&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      on: &#123;</span><br><span class="line">        beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        &#125;,</span><br><span class="line">        afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> createElement(<span class="string">&#x27;transition&#x27;</span>, data, context.children)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="动态过渡">动态过渡</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 动态绑定过渡类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">v-bind:name</span>=<span class="string">&quot;transitionName&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="状态过渡">状态过渡</h2><h3 id="状态动画和侦听器">状态动画和侦听器</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.2.4/gsap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;animated-number-demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;number&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; animatedNumber &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#animated-number-demo&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      number: 0,</span><br><span class="line">      tweenedNumber: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="javascript">      animatedNumber: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="built_in">this</span>.tweenedNumber.toFixed(<span class="number">0</span>);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">      number: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        gsap.to(<span class="built_in">this</span>.$data, &#123; <span class="attr">duration</span>: <span class="number">0.5</span>, <span class="attr">tweenedNumber</span>: newValue &#125;);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="把过渡放在组件里">把过渡放在组件里</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/tween.js@16.3.4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;firstNumber&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;20&quot;</span>&gt;</span> +</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;secondNumber&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">step</span>=<span class="string">&quot;20&quot;</span>&gt;</span> =</span><br><span class="line">  &#123;&#123; result &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">animated-integer</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;firstNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animated-integer</span>&gt;</span> +</span><br><span class="line">    <span class="tag">&lt;<span class="name">animated-integer</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;secondNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animated-integer</span>&gt;</span> =</span><br><span class="line">    <span class="tag">&lt;<span class="name">animated-integer</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">animated-integer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种复杂的补间动画逻辑可以被复用</span></span><br><span class="line"><span class="comment">// 任何整数都可以执行动画</span></span><br><span class="line"><span class="comment">// 组件化使我们的界面十分清晰</span></span><br><span class="line"><span class="comment">// 可以支持更多更复杂的动态过渡</span></span><br><span class="line"><span class="comment">// 策略。</span></span><br><span class="line">Vue.component(<span class="string">&#x27;animated-integer&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;span&gt;&#123;&#123; tweeningValue &#125;&#125;&lt;/span&gt;&#x27;</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    value: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      tweeningValue: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    value: <span class="function"><span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.tween(oldValue, newValue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.tween(<span class="number">0</span>, <span class="built_in">this</span>.value)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    tween: <span class="function"><span class="keyword">function</span> (<span class="params">startValue, endValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> vm = <span class="built_in">this</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">animate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TWEEN.update()) &#123;</span><br><span class="line">          requestAnimationFrame(animate)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">new</span> TWEEN.Tween(&#123; <span class="attr">tweeningValue</span>: startValue &#125;)</span><br><span class="line">        .to(&#123; <span class="attr">tweeningValue</span>: endValue &#125;, <span class="number">500</span>)</span><br><span class="line">        .onUpdate(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          vm.tweeningValue = <span class="built_in">this</span>.tweeningValue.toFixed(<span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .start()</span><br><span class="line"></span><br><span class="line">      animate()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有的复杂度都已经从 Vue 的主实例中移除！</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#example-8&#x27;</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstNumber: <span class="number">20</span>,</span><br><span class="line">    secondNumber: <span class="number">40</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    result: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstNumber + <span class="built_in">this</span>.secondNumber</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几个不常见的html、css属性</title>
      <link href="c314f6ea/"/>
      <url>c314f6ea/</url>
      
        <content type="html"><![CDATA[<div class="tip warning faa-horizontal animated"><p>以下内容提到的标签和属性均不考虑浏览器的兼容性，使用时根据实际场景选择是否可以使用和代替</p></div><h2 id="line-clamp-属性"><code>line-clamp</code> 属性</h2><div class="tip "><p>line-clamp 是一个不规范的属性，使用它时可以视情况组合-webkit或-moz进行使用</p></div><p><code>line-clamp</code> 用于限制块元素显示文本的行数，并且只有当 <code>display</code> 属性设置为 <code>-webkit-box</code> 或 <code>-webkit-inline-box</code> 并且<span class='nota' data-nota='指定一个box子元素是否按照水平或垂直排列'>-webkit-box-orient</span>属性设置为 <code>vertical</code> 之后才会生效，通常需要搭配 <code>overflow: hidden</code> 实现指定显示行数的内容。<code>-webkit-line-clamp: 1</code> 配合其他属性和以下样式实现的效果一样</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_XWRmmBQ" src="//codepen.io/milkdue/embed/preview/XWRmmBQ?height=300&theme-id=dark&slug-hash=XWRmmBQ&default-tab=result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vercel托管node.js的api服务</title>
      <link href="5650e2f5/"/>
      <url>5650e2f5/</url>
      
        <content type="html"><![CDATA[<h2 id="vercel"><code>vercel</code></h2><div class="note red icon flat"><i class="note-icon fa fa-exclamation-triangle"></i><p>vercel提供免费的网站托管服务，类似于<code>github page</code>，但它远比<code>page</code>更加强大，速度也快很多。同时vercel支持部署serverless接口，支持py、node等</p></div><h2 id="托管服务">托管服务</h2><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">github托管服务</button></li><li class="tab"><button type="button" data-href="#test4-2">vercel cli托管服务</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><div class="timeline"><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip "><ol><li><code>npm init</code>初始化一个工程</li><li>创建远程仓库之后<code>clone</code>下来</li><li>创建api目录</li><li>在api目录中创建index.js</li><li>代码推入远程仓库</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;<span class="attr">number</span>: <span class="number">1</span>, <span class="attr">name</span>: req.query.name || <span class="string">&#x27;peiqi&#x27;</span>&#125;;</span><br><span class="line">    res.json(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip success"><ol><li>登录<a href="https://vercel.com/">vercel</a>官网</li><li>授权github登入vercel</li><li><code>new project</code></li><li>导入github中对应的仓库</li><li>deploy部署</li></ol></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip bolt"><ol><li>首页visit(会出现404)</li><li>在浏览器地址栏追加/api?name=suxi</li></ol></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip home"><details ><summary> 避免404 </summary>              <div class='content'>              <ol><li>根目录添加vercel.json的配置</li><li>根目录添加index.html</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;routes&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;handle&quot;</span>: <span class="string">&quot;filesystem&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;src&quot;</span>: <span class="string">&quot;/(.*)&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;status&quot;</span>: <span class="number">404</span>,</span><br><span class="line">            <span class="attr">&quot;dest&quot;</span>: <span class="string">&quot;/index.html&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details></div></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><div class="timeline"><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip "><ol><li><code>npm init</code>初始化一个工程</li><li>全局安装vercel <code>npm i vercel -g</code></li><li>登录vercel <code>vercel login</code> 或 <code>vc login</code></li><li>授权登录完毕后输入 <code>vercel</code> 初始化vercel项目</li><li>添加vercel.json配置和404页面</li><li>添加api目录并定义index.js</li></ol></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip success"><ol><li><code>vercel</code> 或 <code>vc</code> 命令本地预览接口</li><li><code>vercel --prod</code> 或 <code>vc --prod</code> 命令部署到远程vercel中</li></ol></div></div></div><div class="timenode"><div class="meta"><p></p></div><div class="body"><div class="tip bolt"><ol><li>访问预览</li><li>在浏览器地址栏追加/api?name=suxi</li></ol></div></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="node-配合-ts"><code>node</code> 配合 <code>ts</code></h2><div class="tip animated"><p>推荐使用ts托管api服务</p></div><ol><li><p>全局安装typescript</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure></li><li><p>安装其他依赖</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i @vercel/node -D</span><br><span class="line">npm i babel-register -D</span><br><span class="line">npm i babel-plugin-transform-es2015-modules-commonjs -D</span><br></pre></td></tr></table></figure></li><li><p>根目录新建typescript的配置文件tsconfig.json</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;es6&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;commonjs&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;emitDecoratorMetadata&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;experimentalDecorators&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;sourceMap&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;noEmitHelpers&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;exclude&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;node_modules&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typings/main&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typings/main.d.ts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typings/browser&quot;</span>,</span><br><span class="line">        <span class="string">&quot;typings/browser.d.ts&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;compileOnSave&quot;</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建<code>.env</code>文件设置时区</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TZ&#x3D;&#39;asia&#x2F;beijing&#39;</span><br></pre></td></tr></table></figure></li><li><p>api目录中添加index.ts</p> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (req: <span class="built_in">any</span>, <span class="attr">res</span>: <span class="built_in">any</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = &#123;<span class="attr">number</span>: <span class="number">1</span>, <span class="attr">name</span>: req.query.name || <span class="string">&#x27;suxi&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    res.status(<span class="number">200</span>).json(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>预览访问</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vercel </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bufferfly主题的一些美化</title>
      <link href="bf0e4745/"/>
      <url>bf0e4745/</url>
      
        <content type="html"><![CDATA[<h2 id="哔哔点啥首页轮播">哔哔点啥首页轮播</h2><div class="tip cogs"><p>首页轮播需要转存json文件，如果没有设置请参照下方木木的教程进行配置</p></div><div class="tag link"><a class="link-card" title="熟悉的味道，不一样配方" href="https://immmmm.com/bb-talks-json/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gravatar.loli.net/avatar/ba83fa02fc4b2ba621514941307e21be"/></div><div class="right"><p class="text">熟悉的味道，不一样配方</p><p class="url">https://immmmm.com/bb-talks-json/</p></div></a></div><h3 id="介绍">介绍</h3><div class="note blue icon modern"><i class="note-icon fa fa-info-circle"></i><p>首页轮播参照小冰老师叨叨点啥进行修改，使用bber的可以参照本教程，使用叨叨请移步以下链接</p></div><div class="tag link"><a class="link-card" title="Hexo Buffterfly主题增加叨叨点啥" href="https://www.heyiki.top/posts/c66dcdf5.html"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://gitee.com/Heyiki/image/raw/master/image/1.jpg"/></div><div class="right"><p class="text">Hexo Buffterfly主题增加叨叨点啥</p><p class="url">https://www.heyiki.top/posts/c66dcdf5.html</p></div></a></div><h3 id="安装-hexo-bbds">安装 <code>hexo-bbds</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-bbds --save</span><br></pre></td></tr></table></figure><p>安装完成以后修改 <code>config.yml</code> 文件，添加以下代码</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">daodao_swiper:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://xxxx.tcb.qcloud.la/json/bber.json</span> <span class="comment"># 这里是你的转存的json地址</span></span><br><span class="line">  <span class="attr">fliter:</span> <span class="string">&quot;[&#x27;img&#x27;,&#x27;iframe&#x27;, &#x27;png&#x27;, &#x27;jpg&#x27;]&quot;</span> <span class="comment"># 将png jpg img等链接过滤</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span> <span class="comment"># 仅在首页显示</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;bbTimeList container&quot; style=&quot;height: auto;width: 100%&quot; id=&quot;bbTimeList&quot;&gt;&lt;i class=&quot;bber-gotobb fas fa-bullhorn&quot; onclick=&quot;location=&amp;#39;/life/&amp;#39;&quot; title=&quot;哔哔点啥&quot;&gt;&lt;/i&gt;&lt;div class=&quot;swiper-container&quot; id=&quot;bbtalk&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;bber-talk&quot; onclick=&quot;location=&amp;#39;/life/&amp;#39;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;i class=&quot;bber-gotobb fas fa-arrow-circle-right&quot; onclick=&quot;location=&amp;quot;/life/&amp;quot;&quot; title=&quot;查看全文&quot;&gt;&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure><div class="note pink icon flat"><i class="note-icon fa fa-at"></i><p>如果想要githubcalendar在首页轮播下方，请确保你的插件 <code>hexo-githubcalendar</code>的版本是 <code>1.2.3</code> 低于该版本请升级之后，修改priority的数值比daodao_swiper的小即可</p></div><h2 id="历史上的今天">历史上的今天</h2><h3 id="npm-部署历史上的今天插件"><code>npm</code> 部署历史上的今天插件</h3><u>此处使用小冰老师的插件包，更多详细内容请移步小冰老师的插件包</u><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-history-calendar --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">yarn add hexo-history-calendar --save</span><br></pre></td></tr></table></figure><h3 id="新增根目录-config-history-calendar-配置项">新增根目录 <code>_config</code> <code>history_calendar</code> 配置项</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">history_calendar:</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">4</span> <span class="comment"># 插件的叠放顺序，数字越大，叠放越靠前</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 启用插件</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 路由地址，all代表全局开启，/ 代表首页 此处逻辑由location.pathname 所判断</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载在何处</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span> <span class="comment"># class 或 id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span> <span class="comment"># class name 或 id name</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span> <span class="comment"># 如果是id 此处省略，如果是 class 表示挂载哪个类标签下</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;card-widget card-history&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div class=&quot;item-headline&quot;&gt;&lt;i class=&quot;fas fa-clock fa-spin&quot;&gt;&lt;/i&gt;&lt;span&gt;那年今日&lt;/span&gt;&lt;/div&gt;&lt;div id=&quot;history-baidu&quot; style=&quot;height: 100px;overflow: hidden&quot;&gt;&lt;div class=&quot;history_swiper-container&quot; id=&quot;history-container&quot; style=&quot;width: 100%;height: 100%&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;history_container_wrapper&quot; style=&quot;height:20px&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span> <span class="comment"># html 模板字段，包括挂载容器</span></span><br></pre></td></tr></table></figure><h3 id="那年今日模板">那年今日模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-widget card-history&quot;</span>&gt;</span> <span class="comment">&lt;!-- 挂载容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item-headline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-clock fa-spin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>那年今日<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;history-baidu&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 100px;overflow: hidden&quot;</span>&gt;</span> <span class="comment">&lt;!-- 挂载器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;history_swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;history-container&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 100%&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span> <span class="attr">id</span>=<span class="string">&quot;history_container_wrapper&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height:20px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文章置顶">文章置顶</h2><h3 id="npm-部署文章置顶插件"><code>npm</code> 部署文章置顶插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-swiper-bar-plus --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">yarn add hexo-swiper-bar-plus --save</span><br></pre></td></tr></table></figure><h3 id="新增根目录-config-swiper-配置项">新增根目录 <code>_config</code> <code>swiper</code> 配置项</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">temple_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot; id=&quot;swiper_container&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="文章置顶模板">文章置顶模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: auto;width: 100%&quot;</span>&gt;</span><span class="comment">&lt;!--文章容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot;</span> <span class="attr">id</span>=<span class="string">&quot;swiper_container&quot;</span>&gt;</span><span class="comment">&lt;!-- swiper容器 --&gt;</span></span><br><span class="line">    $&#123;temple_html_item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="挂载方法">挂载方法</h3><p>在 <code>Front-matter</code> 添加以下参数，<code>index</code> 数字越大越靠前显示，默认是拿描述和封面作为置顶的封面</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swiper<span class="emphasis">_index: 1</span></span><br><span class="line"><span class="emphasis">description: <span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">cover: <span class="strong">**<span class="emphasis">*</span></span></span></span></span></span><br></pre></td></tr></table></figure><h2 id="github-活跃度"><code>github</code> 活跃度</h2><h3 id="npm-部署插件"><code>npm</code> 部署插件</h3><u>此处使用小冰老师的插件包，更多详细内容请移步小冰老师的插件包</u><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-githubcalendar --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"></span><br><span class="line">yarn add hexo-githubcalendar --save</span><br></pre></td></tr></table></figure><h3 id="新增根目录-config-githubcalendar-配置项">新增根目录 <code>_config</code> <code>githubcalendar</code> 配置项</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">milkdue</span> <span class="comment"># github 用户名</span></span><br><span class="line">  <span class="attr">layout:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">githubcalendar_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height:auto;padding:10px;&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span> <span class="comment"># 模板页面</span></span><br><span class="line">  <span class="attr">pc_minheight:</span> <span class="string">280px</span> <span class="comment"># 电脑端插件的最小高度，减少加载带来的视觉偏移</span></span><br><span class="line">  <span class="attr">mobile_minheight:</span> <span class="string">0px</span> <span class="comment"># 手机端插件的最小高度，减少加载带来的视觉偏移</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot;</span> <span class="comment"># 活跃度主题色，具体见下方</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://python-github-calendar-api.vercel.app/api</span> <span class="comment"># 如果是gitee使用下方api，也可自建api，如何自建请移步小冰原帖</span></span><br><span class="line">  <span class="comment"># api: https://python-gitee-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="attr">calendar_js:</span> <span class="string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span> <span class="comment"># 将 github calendar 挂载入容器中的脚本 </span></span><br><span class="line">  <span class="attr">plus_style:</span> <span class="string">&quot;&quot;</span> <span class="comment"># 提供自定义的style </span></span><br></pre></td></tr></table></figure><h3 id="github-活跃度模板"><code>github</code> 活跃度模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recent-post-item&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:100%;height:auto;padding:10px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这个是画框，顾名思义就是借用文章样式给加个框--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是loading的样式，可自行调整--&gt;</span></span><br><span class="line">  &lt;div</span><br><span class="line">    id=&quot;github_loading&quot;</span><br><span class="line">    style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;svg</span><br><span class="line">      xmlns=&quot;http://www.w3.org/2000/svg&quot;</span><br><span class="line">      xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;</span><br><span class="line">      viewBox=&quot;0 0 50 50&quot;</span><br><span class="line">      style=&quot;enable-background:new 0 0 50 50&quot;</span><br><span class="line">      xml:space=&quot;preserve&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;path</span><br><span class="line">        fill=&quot;#d0d0d0&quot;</span><br><span class="line">        d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot;</span><br><span class="line">        transform=&quot;rotate(275.098 25 25)&quot;</span><br><span class="line">      &gt;</span><br><span class="line">        &lt;animateTransform</span><br><span class="line">          attributeType=&quot;xml&quot;</span><br><span class="line">          attributeName=&quot;transform&quot;</span><br><span class="line">          type=&quot;rotate&quot;</span><br><span class="line">          from=&quot;0 25 25&quot;</span><br><span class="line">          to=&quot;360 25 25&quot;</span><br><span class="line">          dur=&quot;0.6s&quot;</span><br><span class="line">          repeatCount=&quot;indefinite&quot;</span><br><span class="line">        &gt;<span class="tag">&lt;/<span class="name">animateTransform</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--这个是github_containner容器，也就是纸--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;github_container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="主题色">主题色</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下色调选择喜欢的一行保留即可</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">&quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot;</span> <span class="comment">#橘黄色调</span></span><br><span class="line"><span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot; #浅紫色调</span></span><br><span class="line"><span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot; #翠绿色调</span></span><br><span class="line"><span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot; #天青色调</span></span><br></pre></td></tr></table></figure><h2 id="旋转的小人">旋转的小人</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在主题配置文件搜索 card_announcement</span></span><br><span class="line"></span><br><span class="line"><span class="attr">card_announcement:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">content:</span> <span class="string">欢迎来到可以清心的小站...</span></span><br><span class="line">  <span class="attr">twopeople:</span> <span class="string">&#x27;&lt;div class=&quot;twopeople&quot;&gt;&lt;div class=&quot;container&quot;style=&quot;height:200px;&quot;&gt;&lt;canvas class=&quot;illo&quot;width=&quot;800&quot;height=&quot;800&quot;style=&quot;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&quot;&gt;&lt;/canvas&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/combine/npm/hexo-beautiful-page@latest/lib/onepeople.min.js,npm/hexo-beautiful-page@latest/lib/zdog.min.js,npm/hexo-beautiful-page@latest/lib/twopeople.min.js&quot;&gt;&lt;/script&gt;&lt;style&gt;.twopeople&#123;margin:0;align-items:center;justify-content:center;text-align:center&#125;.illo&#123;display:block;margin:0 auto;cursor:url(&quot;https://cdn.jsdelivr.net/gh/milkdue/cursors@latest/ori/move.cur&quot;), auto !important;&#125;&lt;/style&gt;&lt;/div&gt;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;twopeople&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span><span class="attr">style</span>=<span class="string">&quot;height:200px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">&quot;illo&quot;</span><span class="attr">width</span>=<span class="string">&quot;800&quot;</span><span class="attr">height</span>=<span class="string">&quot;800&quot;</span><span class="attr">style</span>=<span class="string">&quot;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/combine/npm/hexo-beautiful-page@latest/lib/onepeople.min.js,npm/hexo-beautiful-page@latest/lib/zdog.min.js,npm/hexo-beautiful-page@latest/lib/twopeople.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .twopeople&#123;</span><br><span class="line"><span class="css">      <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="css">      <span class="attribute">align-items</span>:center;</span></span><br><span class="line"><span class="css">      <span class="attribute">justify-content</span>:center;</span></span><br><span class="line"><span class="css">      <span class="attribute">text-align</span>:center</span></span><br><span class="line">    &#125;</span><br><span class="line">    .illo&#123;</span><br><span class="line"><span class="css">      <span class="attribute">display</span>:block;</span></span><br><span class="line"><span class="css">      <span class="attribute">margin</span>:<span class="number">0</span> auto;</span></span><br><span class="line"><span class="css">      <span class="attribute">cursor</span>:<span class="built_in">url</span>(<span class="string">&quot;https://cdn.jsdelivr.net/gh/milkdue/cursors@latest/ori/move.cur&quot;</span>), auto <span class="meta">!important</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="首页樱花">首页樱花</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建js文件在inject中的buttom中引入</span></span><br><span class="line"><span class="keyword">var</span> stop, staticx;</span><br><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">&quot;.....png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sakura</span>(<span class="params">x, y, s, r, fn</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">    <span class="built_in">this</span>.s = s;</span><br><span class="line">    <span class="built_in">this</span>.r = r;</span><br><span class="line">    <span class="built_in">this</span>.fn = fn;</span><br><span class="line">&#125;</span><br><span class="line">Sakura.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params">cxt</span>) </span>&#123;</span><br><span class="line">    cxt.save();</span><br><span class="line">    <span class="keyword">var</span> xc = <span class="number">40</span> * <span class="built_in">this</span>.s / <span class="number">4</span>;</span><br><span class="line">    cxt.translate(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">    cxt.rotate(<span class="built_in">this</span>.r);</span><br><span class="line">    cxt.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">40</span> * <span class="built_in">this</span>.s, <span class="number">40</span> * <span class="built_in">this</span>.s)</span><br><span class="line">    cxt.restore();</span><br><span class="line">&#125;</span><br><span class="line">Sakura.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="built_in">this</span>.fn.x(<span class="built_in">this</span>.x, <span class="built_in">this</span>.y);</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="built_in">this</span>.fn.y(<span class="built_in">this</span>.y, <span class="built_in">this</span>.y);</span><br><span class="line">    <span class="built_in">this</span>.r = <span class="built_in">this</span>.fn.r(<span class="built_in">this</span>.r);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.x &gt; <span class="built_in">window</span>.innerWidth || <span class="built_in">this</span>.x &lt; <span class="number">0</span> || <span class="built_in">this</span>.y &gt; <span class="built_in">window</span>.innerHeight || <span class="built_in">this</span>.y &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.r = getRandom(<span class="string">&#x27;fnr&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.random() &gt; <span class="number">0.4</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = getRandom(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.y = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">this</span>.s = getRandom(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.r = getRandom(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.x = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">            <span class="built_in">this</span>.y = getRandom(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.s = getRandom(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">            <span class="built_in">this</span>.r = getRandom(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SakuraList = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.list = [];</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">sakura</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.list.push(sakura);</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">this</span>.list.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list[i].update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params">cxt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">this</span>.list.length; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list[i].draw(cxt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.get = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list[i];</span><br><span class="line">&#125;</span><br><span class="line">SakuraList.prototype.size = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.list.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret, random;</span><br><span class="line">    <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            ret = <span class="built_in">Math</span>.random() * <span class="built_in">window</span>.innerWidth;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line">            ret = <span class="built_in">Math</span>.random() * <span class="built_in">window</span>.innerHeight;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            ret = <span class="built_in">Math</span>.random();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            ret = <span class="built_in">Math</span>.random() * <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;fnx&#x27;</span>:</span><br><span class="line">            random = -<span class="number">0.5</span> + <span class="built_in">Math</span>.random() * <span class="number">1</span>;</span><br><span class="line">            ret = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> x + <span class="number">0.5</span> * random - <span class="number">1.7</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;fny&#x27;</span>:</span><br><span class="line">            random = <span class="number">1.5</span> + <span class="built_in">Math</span>.random() * <span class="number">0.7</span></span><br><span class="line">            ret = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> y + random;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;fnr&#x27;</span>:</span><br><span class="line">            random = <span class="built_in">Math</span>.random() * <span class="number">0.03</span>;</span><br><span class="line">            ret = <span class="function"><span class="keyword">function</span> (<span class="params">r</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> r + random;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startSakura</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame || <span class="built_in">window</span>.oRequestAnimationFrame;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">&#x27;canvas&#x27;</span>),</span><br><span class="line">        cxt;</span><br><span class="line">    staticx = <span class="literal">true</span>;</span><br><span class="line">    canvas.height = <span class="built_in">window</span>.innerHeight;</span><br><span class="line">    canvas.width = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    canvas.setAttribute(<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;position: fixed;left: 0;top: 0;pointer-events: none;&#x27;</span>);</span><br><span class="line">    canvas.setAttribute(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;canvas_sakura&#x27;</span>);</span><br><span class="line">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>].appendChild(canvas);</span><br><span class="line">    cxt = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> sakuraList = <span class="keyword">new</span> SakuraList();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> sakura, randomX, randomY, randomS, randomR, randomFnx, randomFny;</span><br><span class="line">        randomX = getRandom(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">        randomY = getRandom(<span class="string">&#x27;y&#x27;</span>);</span><br><span class="line">        randomR = getRandom(<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        randomS = getRandom(<span class="string">&#x27;s&#x27;</span>);</span><br><span class="line">        randomFnx = getRandom(<span class="string">&#x27;fnx&#x27;</span>);</span><br><span class="line">        randomFny = getRandom(<span class="string">&#x27;fny&#x27;</span>);</span><br><span class="line">        randomFnR = getRandom(<span class="string">&#x27;fnr&#x27;</span>);</span><br><span class="line">        sakura = <span class="keyword">new</span> Sakura(randomX, randomY, randomS, randomR, &#123;</span><br><span class="line">            x: randomFnx,</span><br><span class="line">            y: randomFny,</span><br><span class="line">            r: randomFnR</span><br><span class="line">        &#125;);</span><br><span class="line">        sakura.draw(cxt);</span><br><span class="line">        sakuraList.push(sakura);</span><br><span class="line">    &#125;</span><br><span class="line">    stop = requestAnimationFrame(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        cxt.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">        sakuraList.update();</span><br><span class="line">        sakuraList.draw(cxt);</span><br><span class="line">        stop = requestAnimationFrame(<span class="built_in">arguments</span>.callee);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(location.pathname === <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">      startSakura();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="picX-图床"><code>picX</code> 图床</h2><div class="note orange icon flat"><i class="note-icon fas fa-battery-half"></i><p>一个简单的图床工具，进入点击使用教程~</p></div><div class="tag link"><a class="link-card" title="picX图床" href="https://picx.xpoet.cn/#/upload"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://picx.xpoet.cn/assets/logo.206d082d.png"/></div><div class="right"><p class="text">picX图床</p><p class="url">https://picx.xpoet.cn/#/upload</p></div></a></div><h2 id="Lorem-Picsum"><code>Lorem Picsum</code></h2><div class="tag link"><a class="link-card" title="Lorem Picsum" href="https://picsum.photos/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://picsum.photos/seed/picsum/200/300"/></div><div class="right"><p class="text">Lorem Picsum</p><p class="url">https://picsum.photos/</p></div></a></div><h2 id="utool-插件图床-fileBed"><code>utool</code> 插件图床(<code>fileBed</code>)</h2><div class="tip key"><p>请安装utools后，插件中心中搜索图床，安装fileBed图床，按照相应配置文件进行配置</p></div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布一个npm包</title>
      <link href="f5fee1ca/"/>
      <url>f5fee1ca/</url>
      
        <content type="html"><![CDATA[<div class="tip faa-horizontal animated"><p>我们每天都要安装各种npm依赖，那npm是怎么发布到远程仓库中的?<br>下面展示一个包发布到npm中的方法。</p></div><h2 id="构建一个-npm-包">构建一个 <code>npm</code> 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h3 id="初始化参数">初始化参数</h3><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>name: 项目的名称，确保在npm包里是独一无二的</p>            </div><div class='checkbox red checked'><input type="checkbox" checked="checked"/>            <p>version: 版本号默认1.0.0</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>description: 包描述</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>entry point: 包主入口文件，默认index.js</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>test command: 测试命令</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>git repository: git远程地址</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>keywords: 关键词</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>author: 作者</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>license: MIT</p>            </div><h2 id="添加-README-md">添加 <code>README.md</code></h2><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxxxx</span><br></pre></td></tr></table></figure><h2 id="注册-npm-账号">注册 <code>npm</code> 账号</h2><ul><li><a href="https://www.npmjs.com">npm官网</a></li><li>记住自己的账号和密码(之后需要)</li></ul><div class="tip ban faa-horizontal animated"><p>下面的操作请确保你的node没有配置淘宝或其他镜像地址，否则执行 <code>npm config set registry https://registry.npmjs.org/</code> 将源调整回来</p></div><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">添加npm账户</button></li><li class="tab"><button type="button" data-href="#test1-2">填入参数</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username:</span><br><span class="line">password:</span><br><span class="line">email:</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="发布-npm">发布 <code>npm</code></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm publish --access=public</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm publish</span><br></pre></td></tr></table></figure><ul><li>进入<a href="https://www.npmjs.com">官网</a>查找你的包</li></ul><h2 id="引入-npm-包">引入 <code>npm</code> 包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 普通的安装方法(commonjs规范)</span></span><br><span class="line">npm i packageName --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举个栗子</span></span><br><span class="line"></span><br><span class="line">npm i jquery --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你的包中有可以直接在浏览器端使用(umd规范)，那么可以通过script标签进行引入</span></span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/npm/package@version/file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 举个栗子 加上min npm默认压缩文件</span></span><br><span class="line"></span><br><span class="line">https://cdn.jsdelivr.net/npm/jquery@3.2/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不要版本号 默认以最后发布的版本为准</span></span><br><span class="line">https://cdn.jsdelivr.net/npm/jquery/dist/jquery.min.js</span><br></pre></td></tr></table></figure><h2 id="使用-unpkg-引用-npm-中的包">使用 <code>unpkg</code> 引用 <code>npm</code> 中的包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unpkg.com/:package@:version/:file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蜡烛吹灭动画</title>
      <link href="33c03019/"/>
      <url>33c03019/</url>
      
        <content type="html"><![CDATA[<div class="tip faa-horizontal animated"><p>一个来自gitee上的项目，<emp><a href="https://gitee.com/ji-xia-xiaozhen/html-demo">仓库地址</a></emp></p></div><iframe id="cp_embed_NWpXgvM" src="//codepen.io/milkdue/embed/NWpXgvM?height=300&theme-id=dark&slug-hash=NWpXgvM&default-tab=html,result&editable=true" scrolling="no" frameborder="no" height="300" allowTransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><iframe src="https://codesandbox.io/embed/holy-smoke-u192q?expanddevtools=0&fontsize=14&hidenavigation=1&theme=dark" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"    title="holy-smoke-u192q"    allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"    sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"  ></iframe>]]></content>
      
      
      <categories>
          
          <category> 作品集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bufferfly主题的应用和即时推送</title>
      <link href="317ea436/"/>
      <url>317ea436/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-bufferfly-的安装">关于 <code>bufferfly</code> 的安装</h2><ul><li>请查看以下官方文档</li></ul><div class="btns rounded center grid5">            <a class="button" href='https://butterfly.js.org/posts/21cfbf15/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="valine-的应用"><code>valine</code> 的应用</h2><h3 id="遵循-valine-的指示配置你的-LeanCloud">遵循 <code>valine</code> 的指示配置你的 <code>LeanCloud</code></h3><ul><li><code>bufferfly</code> 中使用 <code>valine</code> 在上方文档中，有所提及，下方文档是关于如果配置 <code>leanCloud</code> 的文档</li></ul><div class="btns rounded center grid5">            <a class="button" href='https://valine.js.org/quickstart.html' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h3 id="评论的邮件提醒">评论的邮件提醒</h3><ul><li><code>bufferfly</code> 应用 <code>valine</code> 的评论系统上方官方文档有所提及，关于开启邮件提醒</li></ul><div class="btns rounded center grid5">            <a class="button" href='https://github.com/zhaojun1998/Valine-Admin' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="twikoo-的应用"><code>twikoo</code> 的应用</h2><ul><li><code>bufferfly</code> 支持双评论系统，只需要按照文档中的指示去配置自己的评论系统即可</li><li><code>Twikoo</code> 是一个简洁、安全、无后端的静态网站评论系统，基于<a href="https://cloud.tencent.com/act/pro/cloudbase01?fromSource=gwzcw.3814800.3814800.3814800&amp;utm_medium=cps&amp;utm_id=gwzcw.3814800.3814800.3814800&amp;cps_key=44b3b34da3e3b77bae971b11ed4b2639">腾讯云开发</a></li><li>关于如何配置twikoo评论系统，请参考官方文档，并按照bufferfly的指示配置自己的环境id</li></ul><div class="btns rounded center grid5">            <a class="button" href='https://twikoo.js.org/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="server-酱和邮件的推送服务"><code>server</code> 酱和邮件的推送服务</h2><ol><li>点击twikoo设置按钮</li><li>微信提醒需要设置SC_SENDKEY(请在server酱中获取，只支持博主提醒)</li><li>邮件(QQ邮箱)提醒按照下方配置设置</li></ol><div class="hide-toggle" ><div class="hide-button toggle-title" style=""><i class="fas fa-caret-right fa-fw"></i><span>邮件提醒</span></div>    <div class="hide-content"><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &#x27;SENDER_EMAIL&#x27;: &#x27;xxxx.@qq.com&#x27;,</span><br><span class="line">    &#x27;SMTP_SERVICE&#x27;: &#x27;QQ&#x27;,</span><br><span class="line">    &#x27;SMTP_HOST&#x27;: &#x27;smtp.qq.com&#x27;,</span><br><span class="line">    &#x27;SMTP_SECURE&#x27;: true,</span><br><span class="line">    &#x27;SMTP_USER&#x27;: &#x27;xxxx.@qq.com&#x27;,</span><br><span class="line">    &#x27;SMTP_PASS&#x27;: &#x27;QQ邮箱授权码，开启smtp&#x27;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><div class="btns rounded center grid5">            <a class="button" href='http://sc.ftqq.com/9.version' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div><h2 id="关于哔哔点啥">关于哔哔点啥</h2><ol><li>对于哔哔点啥可参考<a href="https://immmmm.com/">木木</a>的文档自行配置，更多样式配置请参考</li></ol><div class="tag link"><a class="link-card" title="给bber换个皮肤" href="https://www.antmoe.com/posts/7ec820ee/"><div class="left"><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://7.dusays.com/2021/03/24/8a39889ea730e.png"/></div><div class="right"><p class="text">给bber换个皮肤</p><p class="url">https://www.antmoe.com/posts/7ec820ee/</p></div></a></div><div class="btns rounded center grid5">            <a class="button" href='https://immmmm.com/bb-by-wechat-pro/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github-jsdelivr搭建自己的免费cdn</title>
      <link href="c7f33302/"/>
      <url>c7f33302/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作">准备工作</h2><ul><li>新建一个github仓库，命名为cdn(或者其他名字)</li><li>关联仓库，将文件push上去</li></ul><p><img src="https://cdn.keyiqingxin.cn/img/loading.gif" data-original="https://cdn.jsdelivr.net/gh/milkdue/cdn@1.1/blog/cdn/1.png" alt="release"></p><ul><li>填写tag version版本号</li><li>jsDeliver的引用</li></ul><div class="hide-toggle" style="border: 1px solid #FF7242"><div class="hide-button toggle-title" style="background-color: #FF7242;color: #fff"><i class="fas fa-caret-right fa-fw"></i><span>jsDeliver的引用</span></div>    <div class="hide-content"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;user&#x2F;repo@version&#x2F;file</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;你的用户名&#x2F;你的仓库名@发布的版本号&#x2F;文件路径</span><br><span class="line"></span><br><span class="line"># 例如</span><br><span class="line">https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;milkdue&#x2F;cdn@1.1&#x2F;img&#x2F;avatar.jpg</span><br></pre></td></tr></table></figure></div></div><span class="hide-inline"><button type="button" class="hide-button button--animated" style="">小提示  </button><span class="hide-content">新上传文件后需要发布新版本Draft a new release</span></span><h2 id="合并多个文件">合并多个文件</h2><p><code>jsdelivr</code> 的组合端点允许在一个请求中从 <code>npm</code> 和 <code>github</code> 端点加载多个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/combine/url1,url2,url3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 举个栗子</span></span><br><span class="line">https://cdn.jsdelivr.net/combine/gh/jquery/jquery@3.2/dist/jquery.min.js,gh/twbs/bootstrap@3.3/dist/js/bootstrap.min.js</span><br><span class="line">https://cdn.jsdelivr.net/combine/npm/bootstrap@3.3/dist/css/bootstrap.min.css,npm/bootstrap@3.3/dist/css/bootstrap-theme.min.css</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习&amp;教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单词速听</title>
      <link href="4fd0a8fb/"/>
      <url>4fd0a8fb/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="58a10521e63dc82ec76a56c84c104bbffe1c5b3fa87367f71388ca739e2d1149">757d6246220447313784a310f701cd409b70bb03622973a505b2127954a6644635a725b199e17ad79a580a2ae04157f5fbf631004d8456e5a6440a85c1e27df326ca2cd5b062daf982a4e790fa115316923cb3a1c352f4f8dd8da584a83bceb192d4bd75b8cb78db1817f139863625c1d700094158f51700eaef4a8d15c8fa88b4debfb7b9f5fde9f6155b3ce8693284bf13283c309ed9a5b3a86bc5201b6f8e3756d1bcd617fd4ff2114c2eacd3ad5d495b532a6f646a6c2cf491641ab3314ab3aba1b185d2171d091226c0a9a3550179ff264d5a118187eff7be28bbe93255f52613a4be770653b9338b634382bfa3a0f4a92ce47da53259399e9fc25aef46d70e2b531f9c2097e56f284f76112b8ae9a5d4c34577f77e32f8ed6b0b7b7446563c78ab1fb92128b3f774835f004043429bd7e583f1304364eba28659514fa47c2d40a0e4a674f92d82636bbe1ffdb3072225bc8d869e6204cf54ec0e13522714c354dfbb2b2e86a8e29be6fa465b96251b47e199a12efea040533977331b75980b216f2070f37f1c61b2481640c194ac18fd508b87b70a9f2e7ae9be773798673fe5553c148fb7528a8f0ead713faccf5d38f54caad41ee7878e2eedcc12c94f0947497d6f10acba8ca77aa3f991d362f0785288021cee4965ec9fbca1c7dbe7d7538721cc28f7969dbb6e37e7c54b446052b6a42af607b47ce38f625124c2b0d419458eea6eb10e4d5d42e86cd2dac97fa0a3c78fc24bb3d44719b446456a7f71bc95f6c5f783d23fe0eae7db1d10364200d02d7eb429f3d04c94265827627871f9b556bc4b4dd44090dc7f472fd999615678b2fae8996d67779497fd7605eae53c0c54dbcc7d4f510fecdc063b0896acad6fd0935d3c0cd3071020372c1e6cca2a307e49470c941c88116148890a129ac80f71f2e76935c56568dd32dee334799cc53a06b30d5a91b1f4c8a0f02be0e2237fc5ec23b8da178dcb5d977f7987d643a0460edbe862ef94534e6829379cdbe8e62aa6f24274d557c1ccc562e8d79bbb32f326bb4a83efbbea85763935719877375aa3f6098feb2aeb39667feae12ee6a76376381bc502b0c281e7ad28e0ff3d85ec7c053ff026ab8bdb37e305b52f5a5fecc7e75197d578b4a5fe11aadef4fb363039f53da2051a98ab6f179da9981574c83977dcdb42e1283a6bc69d51901411ee7cde4409e99168fe886b5ef5638f45bf25435e788fe395cb6a8a41f64cc4d9383cf24b7d26b8f5fdfb983ce60448570f80d539bc3b40dd34528be47e193dd07de203b02d70cd6aed53522e6861492928b7a18cb07b7e8a4de731c5c0d38a4d098f8fe9225e413954cf307fe2339f0e8295e8721bc335e69cf84a10482772bb7d84ea33e95326187c2dfed53fff8d217cc75603bc17b2541a9fcfa9fd13330abe9e66afb53a70ac3db15d2623bb39df1a47a97b763f027566dba528687aad9fd9fe13176185a56183e2c04439ade62b57d57afc4d1d45ea2f5396823f2a4457ca262fd89471bbbfca9bbb242b5ab2d719323fb0b2a99b6ce490019f6b286cda2bfc22d9696e99e5a6ea498a66f2c45e484f82aa72f40f51f8a7e9802c4bd71bf806e79167186bf4710695adeb59cc18d1aff2eca8288e2957f37be7f62824285ba590dbb094f569058435d58312bfc39ef3e8fa4c86045a5061b587106e5843f7b16f644312c88a5d7875dbf074043878d83d2e515b035a175a197ec6a06e12486eff1095e26ab47c9d8cde733d61ff2027ab37c55009fc787eb809b14322c06128b8727946e1c5d2745b4cd980efbec7d19401f3090137649453e16a28e85c6cb8501d71c522ceed13b679cab947b692101085a054a88155f4bec90a1d209a22a002c7bc71c9216360568e7641ef8274c4c1e94fcf4142e1ccf70a6f0d6c823a6ba89111dba78b2bb6014632dd263c49a2363a3b64fb6322be9ea0c897223dd5d8933496a7ebc133dfec581b0671167026473c0e2006b02f638b344e6623131a0e0f54427e2398494c3f639214262c481ee087c5afe00e15f84b9a2b258d01c034412223ef376c8c3468b20135fc18de8e793e2941021c736d7215decc9cf3077328e54acc2bfa3c2f55ecd37c06146662ab676351d15619deb2ec18035af7fab38d2ee32e022c5552ab1535771f3976d68e23bfca99f82828acb01d36cb25999779bd6d165cdd0273aeca3c9d9229b7b7059161af0c53d42c54f1f87c856c9d5f16946e1ad0ec438138cb518034048317661d764de0a29f32730c1a1fb0412191966b2aa8a1a1a5be4d6d82befb5381ff3a9bc7be4730ecba7d1065c2967f993f036c6a3ae1d4a49a459fa270d74ab31d4ca0222971bfcea7a5ceafba287b7e429cd7bb679f18b192a2e2f292e72b10d5edcfc0eae8d2e06dd6e372b186a253b5457f520e8b2ced7801236e817450eb9bc79fe1d2e555a8390e78076a1a602f5be878eaef13b5516676e6de163aaff632706cf42b67cf542790196a2937f92491fb6198228214541ec45bc4175fea04997dbc71e2031b61113c7b0d53b28190fdf32e52ffedcfc53a6fbea8e4ecb1a82311ad4572779b5febbd0f134db2856922d9c9de08030558fe5b57a7c57ec84a3f5ba00d6421bc405fcffd7a9d5fea244b6fa1561285512c34a3b22146e67b7cdce7363b9dcec120fa4aac5d4c05fa010800aae7f21948cc993b6dfa2dc381cb4fb209c82441038b628cac2eaee361193292106da70bff8609a053a1909f2b9d8af91f7732394bfa444967adb012203e15938e01161b0e2ce7427c3b22466b7247cbe06c55a0d222deb85818733ac63a32d4489bcebe8b5d1f0858ee4a9485de5600c8d767f41d07043ffd4aeca8e580077baac533d59157a0d485da5f7dd6fbd83357682d52e2d7d37acb4ea6a06dfd9aee4f39df99409b7a0471d5d30f201e3a13ccefe66c30f8985baa459a9060bf2458a0a1efe1a44aa7e7327e2efc5502a927b7839c35fc4c0478c60c3532bd8b62a6724a1713287fc79faa1ab2faa6e4a7994d57619fc2e112f91e25123f0ed7a42615d4f813aecf1e1cec2c20b906cdd43f5f6c87bb4092ffa4421a4bdc938fd627581f7314f79fa21787b7db41ce2c59b8d4a6f30b01727ade91ee2200002ae5dcacd6e6d220a263cb5bab1f4f315007fa46b5e2bfae07d1acf7968d7d8ce7cca6c05246dd1426cb0974cad989d9d34ed6800fc08888e5f3afcbcedde9828b3b3d82f8acf1e6f03604cfd559f0a7124769a2b5facddf88f1d93ec8d3541dda2cf49542e36b4bdb840448a282b7694e1bfff2494ecef81fc85a4a6fc79ca344b2632ce41546ad2b639c2c6752a3a57e99d99133c45663f242c1da3c2056a5016a324b56057cff25f1d3e121db498c614bb89ea83ff9f743c0504f2771bc802c0f1256f2096812cfbd1d22f557ab95051b8013e18cb4bd0984e43144f27ec92302ee3acc29bb1a58d172f933b59a3cafdcbbba6223cf30d33f95e5a449044743c94842355461a2da87d579b6148e9c0d1c6226420e0e149eec0fd51f02c95ad44de931df4bcbaa28fe1be425dbdf7185f4fda24f2cabdb848dd51e12799218a85c7da15c049b3a8904d1f89c38940b21114cdd1750a8691d9a5e32bdeec1938ac06de70e5b6bcf2cf949e8b5bce6ad873f0afea2193952eb9a8ae16383e685ca488326801eda069294d6abf1568ac3d45ab4367f7f64cf1ca27f77ef397aff168e3358c739f0b7aaa2fbde98d9d9fbaa9d8b4831d5e9d045245e80f17f92e07f605b4e2e7bf87ec444a92958b06e33221c90292119ef4a10e22015dae7f21ac8df292ba5b8c52137b2d5b0c9cf39f8461f2a17e834ed54aeaf5baffb8d0f8f9fa8fccd010d7051508bc39aa7007cbe30cad0c714db573745fa329c5b5cafbc4b45c47bea58f72c5456d1ac648e15fb324f14cce98a8339f07f19df60153e34e00e56a64d14cb2bf50e4281dc81728400e0172ed262a1ce0977c7c2567da23a2360ec727f5430875c59abe461f8bd3432562e4a237905a97e608996fe58f82c782a7ae37cf4ef1d1e46b942720e3e297ff22f21963b7cbfed5ce0a263d261bc6ef369710dd83639146b8c769912fbff813fceb0ce28fd9a54b4fa9352cea540438b677b7e9164cf87b226551a13cb8852a19c641975ea145d1c075081272d59505f6044a0e52e2678cb81ace25613e01897dde2a55a3ef667954436eb92c9b12b81274a88c1f81251a4d8bb0a8b074eabb323daf7362b1aa85927e4c53ce9d5ccf0cdb6fadccdf08cf80dbcceb23aeb56cf654622d6fcb2a6d639e8db3520bd38c39ecf643cffbf5ba089d709347c1f15e43ce1c32effc0f00253dea0c4012a6365237aa697b59677b1ab680657ac762c776c95c1cde4f6d401bb9a3fc5cc95218f4b29213659b9407a93a5bc647a087be67d6d43d0fc10f427c7c3067189c580a26dec38ed476a510ecec86d91bf52f2568e5f1e97f64a216d4b04dcb0ba768605aded96d7f13c7b5223f827247d8f99f1f47392a6da4e7be629dbedddf69dae1738cf25a53e7cf6419ff1856c7d6933cf371e7abdd57222d888e6ad0bd96ae1201c4436988ed9a7647ee5704ec743969b66e73e5a418dc8d8ed435cfa447e2ad796d247e07bbaa5b52c8a54c03be6f446dab188a6bae42c6f2b6fd5e1d6ab6b72352989ec6959a8034485bed126e9814a20c2af11fe5b027ef8ca42502db4dc0e608874399628511bc98291e7cdc6bc21bc241bb1ebaf45633a5748ccad41bd4c37315a13d1604ab50030dc25bbaeb908947f1f4aaba1ef88504a633c8bac41168be9d8db0acc9bbbbc81687f76f880cd450763d7d63e3e7ad84ad0c17293dc760a5baaa1ff784cbab62ca32c14f49c19dae96b45617ce44398b6a0a312fcad4df7d2538284be19b94badb35223001ccc74c160b2fb13aa0b12f909b86405736b3569f26889b61c4ef9d18c8ac3ac6de9bd2f4d666c11667eace344215c2b33d1a6e9490642892a4a4f92fedd4403f7676da7c9016b2b16a44859a057c4a2850088223b2b049e0443b1e40c64dbf24044b263ba5a3ac0c92cd345f15741928493dcc46916b03d5ad22326da1b2f71d6f769ed5291cd40544553ce04fb833e126d88e7792db652d3bf4d42672c24cce34b7b431c2018cfd900aa70b91b21386452f1149dc2a14e7568c595b40c01a9bb918e4b98d302076fad3ae794c52734eb61b1836fb6fe3b747f7ba1018f6cba59f8e723dd4aa9561607268252a91aa0cbbaf61f149e0f7fb68c6b7de46a4e16f94e7d33012c2f41b79ecee797b413ecea69a5c313f35a0fd8ad97eb7864c734b03e33359576bed5cd539476ffe1826f9a5796c971deb8d89ef088eb5ba49f9e0603bdfc92da56fd2e22e265fd7a02503f248b9eb50b71f6fc42f0cbc3b9547b31640408c13b8f129ca85b8e9812c23229106d9c6824bab735be0ee0f2a3f698d05a7ac5845d7a38b7b3a189535645030823798c4b9ecdc828e1e969659c7e4f96e893ed34eed375b563f6a17ca526c30a8d2d8a0d9d157e6c2d46221d914889a971f45afaebcb8bbd7176cc02aef78dca6f00af26d9c1a5cf9b2504b34e8b5afd2adb39bd12ff10fcc03874779cf0b69995142361c2608958961dd4ed5c0b59f038c9f8fca478aa175bc706c9ce656f72215b0123d7d0f33b5e91b735d2035142bb262ffb4b61dc2e4e5ca214c361ab49b511cc357efbf6fa017b31533a94ccea50874cfd038ed65661e00b461aa99e406745db12518afccb1c06a8af369d81a56295276c620f6d760919f5b78b525293f896142f41c21bf84b6f9b439345f4e78c0bfa3f5a284a7c704e0d310be2f527301d5359849c77b451e78cc4e6a3110363b586569a5961499a2bfd691871a62b3202390c83d2a43fb143bad7b03f816344e9a6c6838c7b683c6b02c8bd543f8b87ecd44773c27668b8b186cd8f9ef2b85c77691e28f9804c0d369d9ee1bcdf98752ef1d08f65b483047d21a81396ce214539a08a1cfd1eb39682b003c83617bb38ac769bf4f79349b1d68c2e556a12fa3a27cae44c9e7161928f6358ac658b24d9acb7130712cf51c3172424f5f4722b655e8764361835ec638ef794b5d5a2c99d65e146d297657baf8d1561c09909e5e052394f2db7debfc2e40a8715869087af1536d13f8c5df6d6060c9f6f1d437a8d6dfdccdb81586c05d4a06d6ecafa6df5bf39f0d875520c9e6fa4f642e219a06a912b14004c2242946e2a12ac83667aca2dfda348e0535ba6a12bda8fc2f813d86c3271a35e451aaca7ce4a2259918ef911246acc300fbaa61e49a4d4054024e681b46e598169d89be56200c72c4f0da036fda03c267f14a02eb4d07e27c865f306429474fa4e0c30ec48ac0f10e557c5fb2a221d50cf0b6c57c971debeaa505a2c5cb1b77664a5f9e26a29dad92f200a3b6026349d1f79269412fa04973e9ccf7f9bef246ea22a4475f141d883c156f937f90517225fb902c4f96f92c1fd6f63f64dcd9a9930a524384ab80d80c82ed719d0c4fb36acfcb8fd5fea6f5f326ced9de98da358d5fabdd8b60624427e6613798015331fbf43ba796d6f026f909b9cc41bee58b0aa2804a0942bdbf9dba8daf35c116b20d317e3f846da2ac0411ebd0cdaf550abcbb7002eeb73513bae8352cb16b7f88020c56160a0349d66689b8b7f54e86f1fcf580b82dc47d3c49215d2047201dc70631af07476cae205c24a06701ee1e4bf62a93aef0c451696b596c266faa3a113cbfc0aca42580897240dc37a1008e3856bfd95a15e0acb966ad56a7fd78a8003cf31e762d48664f52ed54efd3005871e2d746c1fb5b3252b6828b12d05d1e9714cb93584ff9be184751fb85d79582a8f244652ebc68d728e0593491b6400ae90ba945c60ce05c6e69d9d7fcfe8122e8c589128425f24c3eda6135a1a73569ffb5f06dd7ebdde63220055653c2617bfc2a9c4eba2dfee78370b96d41a88cbefcb6f4a3349efcc0041eafff620c4e66f855078792d18f1e514a95814b0931663ee33e3ad42d93d725203894f92ddc3fe0ebdeda2aaedfd8657265171c7d16432fec8ef11c38e1d9ac8ca39837738d8122c797934c4c758c46d0e5589bf725e6a2db243a0f6fba4d057fc781edf897ed83df769c78366e1d509a55c55360960db6a26bd94ad10ba9238673a46074472eabea23ce6f357b345736ca4aa0f1d1389760e1fcf2fed3a971f13a302fa5733b6877076aca97fa38efbd868e70b675664f3f95d9738534d0f2f460c23e25f7484311b41e55d4eb51c4f6f9989d4ca1fe22b537a3161adb08f16b00c9553344aebce650e1f5839a3865563bb760fd4f83156a814e8575e9826fb06b1d5273ca3e997b70e5ab6d22a1d99b6d0b5616dfb46177c5838b5d7318604f5737d3d1622bea1a129347962270846e47197a9b7a5ba3fd559ea737de24b284a4674877b33c1a412f6703361932f1614206280f774ec92fb26912854127514cf2a27f416da277ac8b66a02af9e720d0bf8704f50a1c220b539c48c9242dd84494efdb2ecbf82953e2b9b0901cf568f06f68bc2e4e136ccd6b3370a6de7bb99e4c1bcce20cdfe4cfd33f0a8ce5aacb58f299f144a1cb79a09dceebf8939f6e1e082c47085301f2d18c0c09def416dbb91413def0245b59bf979f956be3086aaf83c1472fa5075dc6a7a832ead2954107aaeb99d8ec6e114007bb7631b6f913da498c1fa0b1907b72f2a829ded16d2af2ef9e9ebadfd1e24ac95a9535751f82da678f3995db3e63154c7d5645f913166a9895c6e8aa61abeeb2e04fc430e7748b0595e45bf47de9ccb3cebf659569e53c056cbd2050644cdbf8638524be0e560fd30450f33575b901cb3c5a89dfb37e9987699b2629e8924dc0d454cc6113aad88cb746eed6511dfa59a51401217c36bd2b6e5dadd7bc5661e796604bed3275baae519f150bb8daba34128545bd91609b8451669ecebc0f75773c3a7d8e06d7f6282ac664c0d4688a9506bb90de436938a67929dc0b4f33350de6e04b1529e644feaad09f90e62c3b69c3e27046565f76c5de9612daa0749f196671a1199a716097be15916c97e96151dc2ff6998f85daa0231bf84cce881c9c91bcb9bff5b8eff21a98fb89ceda561982c57e95544e2f8aec2a4460d1a62fb19960a8e91a9e93b11524ccfa2ace274af796b765dc63c8b66f6e951b42c69f3ee7d8a9736f7e47d4bd66c267d21554121b46371f380c234233875d2e5928e221897b7fc91fa85b129a61f0790a8255db59dae14729561e11d90fd61e9604490832674528205f0d286b4b476aff880e623ed2ea22baffb0665ea40ada2a708432a05ed60083b8229d66ca56e8f899917cddf31489bfbcd41e9eea1d3020d0c9ebd0f8fcf280691e14134a2a242dd6f9afd6b9961a6739dcdba427263b1982837a0ed9db97a909271a077a6d768a73556eacf130f9b67d24b725f20bd098b5778ecadd68dee51d64f54a4664bfb5aa84b226bd8a9feb4529881ad834d53cef97ee20d7af683b88e895ab49a783b5fcf82ac3d671a48964556e235d0f78583d8e50749c45a1cf46bf7ff6846e7c566d9552b74a8927e209090a998a15111c1cfa4ec8f80ca7414f2083def1defb38d738c67936de10a83629ee65b47794ce7e32f8f9ed6411997861425fe01d310cd56d8ab86e32a804c447f488e662e43f4f65770266c7a0531775b8846160d5c767f12dbfef4431041b7af76bb23163db189567d8d09ca282752705430adf30a08facd48b7ef3b256bb90dab7f791af408ead0942639fc8c4bb57ad71933ad0e8f624a2eb123c817f7d5ec04fc8707acca8cf74f60106d2a926cb0836d4e14d103d86eaa2a43d7aee404c9497045041aef5c0c5654e6d97b43ac970c94c4a12a5b992d056465403b195add101a532601b64edda7498d4a37b75aab93662eb4f11637569762a3853af5dc6ad98994e942d2020f07d3502dd02057691931a3da742c7b94bba8bae7c02e9bcb71cc1114d50097cb349408cb1c463320cc1ac418dd25ca5ca6d52b8ece5699f0a6ee624fcf16e42789c7b10886bc4cb1ae234c1a0832e2353ad64d1f9dae1f14f9c9555557491b83fc4f0d9b37f82e926cecfff3acf0052fe0fab9c1ec0b9b4807c9552f5b20de8555d4c69c92e75003b8f1d735089e13c8697ee3dce76888888adff7efd8d28b464d55c001e9b8660385f309453de29390cd4f964942141578e07ac4331cd8d97f559c78eb2162fc071ac514f6d1087291309ed721f710394ae012e245ff91ef0cfaad7662648f482d5bc0b7e98bfc17501ff1cfdc77ddf4d09106eea4fcbc27159d374452b24d86aec26834e30d018bc2f2524aad5c9ea1ef1cc03e0ed0e619da5db45c7f4556fbe980ab199225129fe5ae385949d9eebc0a04ac6d1d1da36758ca32c3b480f9f08830746bc174a59798a93f8ad47d8e767f6dcae8b1ae297e90c4dc765e651fdc01cc71fbe266ccbb68f88767a74bf204312f60010938e900b5a2cc0837ade3c4a173fe8fc5ea747deecbc2a45394d601c3fc429ce30d752dd781b49ae6a97a493690579c9a5615dff6883ea3a336f09a2b3577baa3c2d3fca29a9b8b493e0e6468b639429b377fe5fec3ad8a1fbd88fc517b55be17b37f3b0d3502d3af7f9d90649b38b4f6bbee1b9e17555db7464be5219ef11f7b2d45ea890cf4f7d645bf73f7aa380d9e71180beb3e52569728663fe46b4e75ea5980a4bfe22570d965910318106b7d1d30f640cffce3a7f0db8106b0660b5b4ccbf5ffa94e203ddf40807a6799c290e9c715eee9d6a01c2294365ff5286b0327d87f50dc979c330e2a96f9ec96b548dedcc49d01b5558a298c1b4b2abd7552eb02a2f589f78aa6a3f9d451e9cedc332da38ab272199b428f67d4c415a9f5e807ad39b8a0ac9ea2f6f7dc3a1f7cef8518ab24c207d72fd432a8fa8c1db884f32c3bf5e28c491bcd8dcf88ab78c1da3e9de24b1c8301cca8741dc823d0bdc668255c7dada6e3fd7aac9c99e69a4e54fa0676f9e4bb7c08a678614865bfcc763fff03c277e222bc8e94d99a1cc6763a94b0555d1229ac5e52052b9a0134459b2aab52febed9cf6d56ee6ee984f9ad8e22d2d3d24b546865a85887a8d0578bf341e964120e54510090dd4c9a7f09176970ab111f904f3f014d4379c952ae90812161e6f06ed74be4d43790663440f1138e89719128c4b0823645d1a4751fa89b74f7a3541cfa6721c56035256454df5222decb4d348c926316ee68540c14b36e6e32e2b86b9f67337b1cfa8ce7b858f19000c40d17b1fdf8839dc47aaebe7f278de368af5fea35e76264b8ce9ac1e63af12cf595315821d14c1d219ae44fc3ab48b5bda1c16145d2a89b2a2584e6212ff2c674a700e631fcd4d76e4f3bc2c9fbeb478c636b44422a0335e18be81763b163b3d81a1a8441cdb76a18b26b0b7f3c488dfa11cfd8d6410fcfb0071815819a1b3dfe21968ca37e54e9fe85caa9b376a0142435bde96dcbd0c24d26a1d292e4948807137839a466e9602cd975dcdf529abd7a2aa1970beed8bea078539f23ced384380f8f5ba7168e76aa49d331a3f6267116dc14529ab6a1975134fce7e75a02a082aacac318d81fa34e5388e9dd809126eacc5ebd72e7edf91d9c7eccdcb83245a28e5b6b9af888d63f83dd032829c297bf695e93b97540069e79dc517b7e331bcb7dcc5dfd57faa61f1f58ec6c5fe70fc2180f9625733d8019a291b1479723d1b6e9c49a1ad5cc330f8f6bdf2744f6d4520e42f4a3ebe66b07db409e1a870663e3afd11128adef6998f2a014ecc54fcd3bceb3df065e6f58a9ac61b491a5b31a31be4ef9cc73f8dc0ca35eaa25195297cc980efd5fcecd7b8b441d99670b4aaa397b9105831d553a5d03304b5aa65e80e1904f5fcfff9da7e0c5f17917853ac90264a25ef4d1bb35b60577bc0a4622cf85f4700593567e26ff8177534decdb42d2726ab896b7c7faaca7ab2b2f0760858fdb49b603895738f7cddf9768f95162a374e637c0a3429aba674627f957717b0cbfcac4cb84d9373af51bf7537d67cdf719c17d6b9f3ccdb3846bbbe17749b55db630328addab7465dce481028015e7ebe869dbdb2a5af5aade47b86921df640bc093651810bc30c683fea105cf1facdf4d6c17102289146586da8e635366e8085fb124c46e3070f00fa2297507f80ffd4a7eee0bc66b1b9af8da5b9cd2d1ba150bc45beb0587cf0960e35141df18c40778705978e7b56b407daabc6d4c5ca3d6d40e55f1816cba9688c0d3d471c20b33408484c92662fa087982529fe2bdf0abaee1e6b0259fd31b20075a8ccd1b74bd04f414ccd1d15008898ffa586a62dd463e8591ad6a3e2c065cb3b2337bbe7c93fb09231ae56897ffa0066d99f3b2e5e62f4084a62e98b568dcae40775a3e610fec0383a013dd2cd5eb03a5f21c36886f2a1c912c1301e1b69ec3a94d22eaf90cbfd6220ed359749ef889b6a8f081a76c61f9de6420e7e5782299caf6be8fa35aec9231d9dac914eb0f2c339f5cef25dcd8c13bbb62aa8610003cbe8df07f63dc8712c32b21140eedfdc8dde40aac96c501e4a5cced8d4b55320d272825d19a41c9d364ab66cc6de1ecafaa1dfff75c4bc4aad14ed744e0f078d3159723036c74d256d216cad40e2da8751f963f44cae52c4b5adcdfa3ad0f5b82cf7b8ce698c7e3078a5a7a38b47e8ab3e7c4c7151348b46a94be07f23a9e406e68870594092963eb11169e9f7610abe3bfa1ce5dd8e59fc80ba2205eb5365831a2001dac6f763054ba80377b1b76d1b51eecbb57fe959d3da7e610d2bf4afbbbd48ec17c586ae790b3d98a4f4793afae16feeb755bf364a28f40d439bfbd27f9d6ab82523cc9f827dd305335ac315f65c3039f1bef8a14319db332a3d4747806500aa0634eb696dc730a944cd6c2d87f3e0a7111613836cd980d7b1c0ddcecc94d8ee18294cb786638ddf72b17eeec2b2d328d5975aa54171e7c244d1a0004c40dd0c92b31ccb324b076c635267863d44b7b8824282e38de546a0a794f9e031363ad9672104f85cc4bea580506c1ee1511e7971edd633639e135ae956a1ddfa9cec6ef616063fb75264e0b7054dfea6d5769cfd71410b2ae0a419aed1cb4455c6b3facb24ccdaae4693540c06c7d900634f06640be4afdf52652899f730964fcf0f146480a63c4d609899eca5c9c71331dda82bd61ba5e8ba9d9e1f107138a7e349c42ac759c716498385a5530cde6b83d181be2905aeead80fbebfef73a5c06c0579b5c5efeb470622162fd22b00bfeca4d5b4328f00c76851a579054ddb663990328c36c05d506bf798f9444f0c9598f463918213b4174bdd876cc495a79d781c23b361ead036407f08385fe509439da597917e71495a675462f82a73b8fa1697326502bddc6d683b23a8f41dafd029e2b00c25aa0d109c143fab18ed9c24c2734a0e54c5f65494a7480187233ad0117bcc243a9063e167775686cb9a2452b28689468a8aeaa82badd4ce0b4b9ac42b15c80bfa3a9f0efbd046150ad8db44a72d644308634faf5c714b132ec6128a152c4aec87a833ec8f676dd965f01b75e42131f2f862bdcc995bb8c67d6d08ccdb32b6133aa2faf398eeacd1ce1a842e8a5be0dfd0701adceee0f96d9dac566d27f3098606c4b27893d77c122dde84bf20d2e170ac164b3dbe98aec98500a05c6ffbe12d6f1263aac22d72496e86aba274bc7c1f0d055bcfd07f36debfa0764c9cee989ad53c4742c8132f10aed68420db247c67bcbf164b206887c0fd840f084ed718c2c48d6216983169655d979b9b4c38cd7de7c8fbf1784e0f81b610c99ca50e86def93e15f8d3986f004b7cd0f2cfdc62d7a5bc151ae68e65042463dee211920c2b1253f5ea8394b0d04f8cdc028589ed3d343a9a8d3705beb1887dbb5dbbb170baf3321754ced3e51dc9937362920dabfa4ff3dc5d535f98306df142e861c29efec5be25dcc8f34d840402122397a6e983ff71a823979df40382f788eb5446845f5197a97d2a26dfabc40e3c21e03a796b5286f08fdd04d0f5457268b826133e216d3557f3e299b5c0630f9a5c2e6d245bc14a8bfd5683824481aa2eaff642ebc355f2bbbda0657a0f74753f247c18ba658faa95bbc828162883f9449479618042842121458d363f1db4d57aea3ed9cdd7c5be76804085bf22dd64fe769c0efc8860686b70138fe995ce0ca5b0740bfd17ae603a0d20d432bd31e50bcca7abe695af14786afc22af87c0b5557d7f8d2d668ea20bdd0944d2caf16feda7bada5ce0fb3a3715cb68eeebb328b1fa05965411de5002cd03e369af65a578f8a436f2431400a7385d2b0b6b1afbe8fdef9eb702e7ce4e175ab7f3006450ccded4d0acc1ad27b44c738367ecfe771aabbb93c6782e2ef0453e2faea8724202780707aaf2b08152cb7f2383a755846fae879321abeebabbdffdf8b15156cacc62108c74369d62de408423ac2128f598301ecbd4b90286820c315ed082acf51c1b5f5cd3d65faf3417612c158b1c41f986b829c65eb670ec7100efa804a1de0f2ce13745e75e6281dc8685a98d42233c8e7c4849b259942c186af2e5e45305dfecdc8bf0f516aa7a83a6a6aea8492d535c9c7139e3b3d052dd0b1fe0220b1130cac07c6fe46c40936be37acc6294cdfaf8621bd483adf1076d48523b35e39d83dbcc2cfa8eff3278f050cc20dfa915034d58112d7d34ddaaa4b9e40167c4a61f5bdf2075dfe2f65d6811c56e80f9fdf10fcbad3aedb807b56ad45b51fc1803e2dde5c4d119c7ca5902f90166cb214b986994ff01f365d4e004e0514c590f556f69d21bc1652d4ab4715909ba7bd27ed1b4237622e958731282465f983ce663a69d38fb6520f8c564deb27dc37ece63e4d2fc263b4446ab8412de8a6d19f613ca473dd7b5c77bf361d64af2639ac9e0b01c048e410184b8a66acbf8a6588a0f9be53c6e8cb83491ea6c87af591a827a29c2a95b62af0278595a3bc838d60ae07f6f3333faa29365caa67dc1796aa61ea9e082bd79892ff37319393be4de7de547e5cdec2f40233aa82834e11354ee1bc535702481f1e290b5bc0558044db9086196e22fbc57dadaf73fe82b28d4071e1bf5b0aec4850856e78e7501de51b0db694dac160bfdd37b25fcad9064a7b6d2de726d1c46b8a53d95857aa1083fb171c08b44bda6d6db0896df885e3372842ebd48f69523f56a5caf9be186ddaebfcf90db1a491c6bc0b28c31933c02cc7f28abdb84af5a91285a13d47492fc64b72df70374e45d23e0fe07a457159e83f3f6de90589ff7ca184201afb801acad49802e18da8c8f94a5b080ea0903e8683e318686f1c1e83be22a645fa1980724cb2a4153afda606c3918e51f5432991c467b5cf57a18b19b957641acc3f7411be890001940903d3fc2eeee16965f4339e4aa8cfb48db45ad594ec631445ca787e63364b97302120b6d8e6af3f21c89e04d531ffb4bbd29a1fd2fdc7c5bb625bef90b9483fbfc9e293917f6bc2d0a3597f2e79747cd0df72bd4d8e81d811ffdae6c2bcab384668e5b5d1f9714b549e6c8265dee493465e71749e277c452b824523cc0befb47189a9f8b4b4bbbb547f7a2a402f9d3e88c712cad9fc304fc4b644f8aaab934ebbdd7152f25b699d0674486e8be4db058843972d42639f969d74174b4355698d40bd482dc9d05a3bf94234e563bd538dd30384ccaf5873ed5851c9217b84aabb9e38e2a2c5ae54ba3e07fbd7a4b41643fa063733a9844ce0f91e0b2de273da9960a3bdbf17b82cfbd44fdd2da29979381a3edb3162587dcbfba66e8a0b4daa3d3e1fff837a4ccc419cb0e0b11c17e8baaa6881da891a6536c28a0d09d2b49b70c8f9177d164ffc7c133fabf3a5dd55e712dd5a94ee437b4aa284c3c32f1bd85b218c47748392af68cf5413b7226f1714d5c96a07a706b0ded71367b8037e616e2af098e25c07a2412efe090e75bed5ab5a74f70a5e231f0632ea82b249e1fd944ced2029bb3d86ce3c72bd5222f35076d7a390352acbb29c646cbf625250bd557bf1742d0fc40c32a18f30d5cc89c66875193c35670174e87ac81fb2c0f77c179106b5a72c9c39d63e84f158e6135618750bf9c6009a0320ca859217e1187a3594e49f77f39b7bd83b6960267e083ee94a673782f27a19b55fabaca3c34eff250b5a2011a8b70e597f890378a6bcfaac2cbe27f751ac9ddea8fcfb6a5aaa1605b7b4c325962d71c5a9d495b9263883c422d383c17ac29d6b5c8558f469c56f33aa21d3168987a552f44b012fbb056015e610280d429aad68fe6d4da6ec1a9305f1ae93096c54f8c5e0cd4184a963324c8319b9a2b80b6aed72992ed23e946a4998f8bccadd5cd276bef2820a97668d3b72a30645e50eae08df288e5262e40412e5ccc2c6310bb33fee638e19d5b5272f5cc08cb67a4ed15a316f3c3a3e69a88f666941c46a57bd79e79dd30b8fe5e1f6bc3e2268bc423ca9f60a7c5ef9a6847aa872041455c6e9208bd9cf6d749d1d020964a118f755d5f2f66a3eee2d69f1ac8703264ca92c3a52b31cd291042796b0deeecd78d262bfab354fe631529c5048475265a45b18f3bf0f161103c92b63c8136221d3451634f4585bf1e489d42d695d467f93f3af69f5adf2024928792474d6116bba71dd7a8233691c01cff978623e4577893019bce3c5738cbc78aa40320f4617803384fac7cccb28f29a00448f3bcfb6a7c0b854892fccc299999dd13b6d9355430e13007d294143496445034fe9d06dbd5a1a71f7e4df800e0883e6bf5b5332b183b9b565f0a5fa28b591bcc823dd689a8055d51999a22f2094463c4fe06c938e9d431090ab4df3d09d93b1e92276394f81165f9236fa65079d895f184047fccebdcdb5f88f87045dd6dd0d019800352de5a73f885467280e023d51743d3270cde6eee8c29b6e36b5a5cc89737813f13fa1105c9d9db84234c0a0f9e2a616782d2944ba8a5103e06676edc0615affa0bd255f1aebc826f596715146dd6abb6d0d5c8a73ee555811b59cd704525adf08b11333929f1f1652e747eb02511bc740215e5d7b7ae3c4784bb9737a7f37d30033d048646466af514ac96647e48a30c9ca707d77aac23c4ccefbf5854c900d527a09f7af3ea59bfef60ef9cdbe37f0a7c4ac6666c0a9d55813fc83ddcb7429e23401390826b3fb69d7c72190aeec08320cd5840cb1334b8a3b661f81962c1697afb1c5d1db7110ee0253f1dbb9ee4c154edbe68782efb25ba337dc3893737e90cb97bba2e2de1205237dc0285d560ccf9959c0ff7c7e6a6b7922c39dc0f3db4990b02b79982bae4d58cd833b283e3a0b1b1901779c9faff242df1dc15746ee324ec57557a350075920ef995cc8168bb09f810f1b59476b605cf065253e0ecb14852b4906dfa9be43b73ccbf61d380f873a290a665a99ed3dfcf945ab4c8bebe3251862e110277041fa7696fb9c953327fe7bff0d368bec959b2ce9739188148970b550a0ecfbdd53c217b201a66fe0fbfbb2b8e89d5759a68e3e0712cc659f3189a0e2e4b7c71e73255580c2a68ad71c14d84a484f2830416a3238f42085915ab76cf0207a9f5ee47df66e1e819ce9bc7008121944a05cc274ae2cdffcebfea1218c404158a404034e9a72b9d5b5955c7a2aac84d6e85beff956926dd3501fe2bfa4f438eb802fbf52bcdb32d227227b6c7065cab896e934eeb30c1e1d369accd9d9bb5eaa177072e1971fa0149827bf85704edc0088fe302b10fff3539e15ab7513754c9e8d3d2f09ec465d4c44d31edaa790501314b91073964c5a8abfff51ed19ad0a48ab51eaa1dd46f91f24d8166a790aa92b293a9eaa7f48dd7f289f7155eaab272ccde0f029e29df0b13fdcc2b6a19eb749aba3b4cd11c6f42ad1731202cd21180d531f153b6071ed4ccaad37ae210f00adb12a6324ac9ff54263c0b7d69a42e3de900b3f46a249e75471beacb0adb2ccc1d5d6de3bc416fc397d0e2bee529fb91d2b3784bcaa0be63f37ed73ab24db7d4fb737413d5eca593e3947aa1a6687515a62370564929ca0ddac357ac0efe025fbdfb3056751e0e8eaee99de7f4603b476262f9732ccf6bce99edad4fe4f818b1c2fa9521858375f6c522461b72b7eb9a4d56a56ecde311b310b5a3e3fbc33b9ca797a45fec575b7b874a29345272809981708fabc123320016e29402e4e9c86b278b94e89e27f30cbe4140111f1e8d21e3eedbcb4209b5f9cb362e19431fffe1004ea20bab0dc3a4a75d87d540ba7b23411acf064c9aa39484598032757f58776b4fead13484d41429002407fe71d932c3ec439bb36b98d3173aef490e8415014cf5d20ae5ff7f7b6db35f9a34d9e5051a4344f50893733871e9542a11760a83d0fd2ed47097c426d5f675f747737123d2c17f3a3d1641923e91d38706876ca6e5ae046923641ea3f2daee5f496b6b754b3899d2cdb707acb5bc26004216e2cd49fb71befde45d36fa485250cb35729d7879c7b25faf20f836a367f19d3921d9948b956b3ccc73ea3df34a82cd21a47b4f578dfc887849284024a276e00d40b2ef5db75ebcc095454d5ebf50c87d67fd37f59885349b34ef60bb206c9fa013eb548f729f916c334b2aa8e2d34ba0a285b96880dfb333c44465cf6cff06e6ad6065bc478e797062ecb52bb909ece5c67938bb3912a02007116b512f48298863506afc7de267840d0402087003e9dca8b7f874e0e24a8308dc91cb9d0db955d01283669cc1982c4b2bc6396bdec35aee4d1c07d07c8981d1e6a70b24471be3434501b2f806a8a52140fcef5ceb6c83b14caa94e956befa98cfec7ac70b6ff72ee3b352bd7f58922f6ec730c21630468adc2142c5e4699cacfafff660bf4b9033fd0cdefa4ff490357c790ce6f7ee0de05e602ff17b24e8341eb60e3e8ffe887a858d901f40ca20c06204ca442b8040205450beeddd0edceeb2cff51d2f2f50aa2e80cec74b82b648bf71b90d846890f792766d63400a66ae8e1afa1b0f051367874119b24390bb6045be2d2ec4036045f83ab45ee3a2bb8dcae6669799d1ecbd9e7d126ebb1fdc520a3d828b428ac07b23a4ff5344ecdeb0311d73b199ddd3425813223f7373c016898c41ab1e64df291337d02a57b99e8a9a5ec75e20c44a763a8a19d058a87e4bc59dd5a9710b54d40be2a3007d2d3bcfcdc4fb55fb6b03f26e3c3a3932c7d2c7b43afb0897c8ee39496388fce8865a1842488f0c2a1e4b580c6741e21d4231d72d310d24c53aa09731aebaafde3aeb58a4adca72aff0882f2c3890a84502637942e86bf6592b3549aa7bce39c3158ff55a434cd7c73283d92bb0d0dbb4fbeb262329174cc642468a1eda4ff43e6db4f30cb8bb8d56475a346c62bd20f5a704d170efbafb987aac34c67c0b2a27f47dad8a7bdf68e483c35bffb635d1f4854913abf0fa1a209fa9f46b62e53b543de8bacb308eba7319a8023331204937062dee05b167ccfb1686875cad086494d3b8d7ed4544298a52107f0f013b3db501e09d8a673bd2b649d23bf8a5bf7641be62b5fc9daa18b77493c7eeeade038592c8e84359369823e73ee104df1678f000a46b4f330346106d2e89a57e65cc621f2486586af0c7549c7a84c005c19201137ad93999341d85a5229b1827f807dbc21b1678820a47242fe98a065e857ba50741715852ff08578b5758dda248e31c149801381acaefaaecb4ada6aa851dbb2c8bd41ee9e3b7cd3f1b8e50b85bde3822d9828d0fbb5ee99ec496672e353c2deb5eadb39daec89fb2d7bcdde750187e619229536ac54b866fc8311b704149f1026a695bd247f2be645a3423c501d6624ea0928fc1885d56e2afe8f276d6fa4c853dac3f0422f41342488e8c730e5cdd8159dad0ba9ea6f2596f82de27bd1657a57b1ca18daae13f76be2e85f71f660ce92e2aa26fe1ad8dc0571e42e1cd3cbdcab220014a12e850f451134fec7cd436af64d59d2b642dbd053884a46cf795c960c6461818976f8f4cec021fa3e2e9de97446c86760f6ecb3442a074f020427561d7acabce3d57563b5b9c92660528e28caabe2a2291b3402ad517aafef0b0b2927fa9bae6604d0ad57a83cb053977246d16c768a320c95e30b081ba8b21dd758e2af2a5705d5ec7fddf1363080bcbc5fc9aa090261e62ee3e062659a1572ecc7f9677759071ffd8c30f433ca3327b8838bb3a2349e188e0872524d00c5612856c0ffa316cd6c8916c853fb621fe8ce4fafa3c2ee6ff2d58185006d2b12ae8b98a7654eb725747f2c48009a3fef616f8bbdc3977ae4f1af18606d8527c614dbfaf01aa599674f2464623eb0d8cd1aa383a1c48d72ef11b23884aadcfc8f4ec810356db6456a060777d42459b7443121846cecd55b5c81ff94f79376aea51b709489d88cb16b89251ec8d33b4475ae9406225a037b2fa5169e50cf6f89d259d250b5f03a3b0dd08794ebe1279505378c430a7690757c9e95497f43de1a1f21918048aba4d8960acf31eee73b76bfb33dcbe4627e898ca48cbb2cedfb7aceacc8512b5944be11673b0b9c9d1cbd1b5f5d882647fa413443d1d997ec2058de2eb7e3ca68c5eb3b4e629f0115112d6f2c1bc7b2e837a814782ef118dd771e94735c538fecc7fdf00bf0869a579c0d1097d3d1b156b7aae14d49e73abaef41707ab37e2a04364ed03e133a6937a450e83b966c8c89d8f349b7bc8cde19d69af69941e6ab18d682b0be08702bbbfc42b18f1a74fdf35251e6ea07c4bcfb002d6cfacc6e573cd8c4bab6e0367d3784f22c6851f81976f877480bb8514269a314ff0d354a0559d671d30c50b1f8200033f37085f4a9094b74a02bb287d93c7679925465df725fd3cf0d18fc097e0bd49a1043297f330a415928e5ac3447b2f8ce9f655ad42b5cdd36cc6a30f6357897129ccf849a7827d9d667750e5b569a22a61e0fcb0af3f33ea8561d7c91da08d7d7722c3a1e94c496b01af01119b66b608f7e7af556f2fb09ff9fb02d0e76da9bef5948933a28ebb14229622c18ebb0c791a6b0cac62946e60be9a7a8e4ceeb8d57746b9896bddf0c36d5a5d9dafd3684989c88c65b1d9f24d12ea79d92f29b707330e6bf5e4c8e2f5890f14ab8fe95bd41d78466665323b427dfff169f655020f152553d89a71f4f1c41e608789465a5b2758ff62604398581b2387ccc185853f0dc7571d3487b1b6afd96d6e6238978e9722af6ce9855048e3f6a7c50cf57bb6b6f04f4e42ef8556aff435f28dbb693e224826b4e6ecdc9532df22e4e6693aa726e867d4cb77884b02e50a6b7e1d1802952923f977ded74a29e12142e1173300113ffa5c44e19b1ce279386ddfae6489aaada6d3ae45187c697732b36eb77ccfaa3408d12eeb747253de51211f435728d32484321dc96f8124707567944f9196fb21dff668448c4b4640c6ef31fdbb3ab094c47a4cf2559000436831a9fbfa2d6a977b6bfe68d9c58c7be8c9dc7f0ab6db09cd6c4dd50917c089d8f33a07ef82a1a6f58b4ea167e99a71286ebb5520720cc8c150a841ed9c0d2d29e0f8e83b073e3e0a616daea0853b5dfa80c0133a22806a6f7c634dcc6bb4780021199b4e61b8d2b66b43c7ce985b11260b3e9be289304e7fbe0c71a4be0590c0ef9d1b4ee1e8f60159858fa6ed219bd98323c790ee8cde43e78dfb4fc77cd9358e74a84e0273ee59a097051a156b7345473c5eb4fea91366c62e056df4880d29920a97597e206eb76d535d1ed57c8de3594c5baac97d6d4a187a99cb0897cf37d3002c115c4faefcdb23e132f0bd6610d6a9d53d40bc6849e30027c829946640b6e995080e57f99b09ba5cd6cc6b2049c599ae595edb9b22371845e9994dde8538d5da02a37d304717c9029683f660c5613b06fbced17e45c7feb8358e3b8c679ea44459ccfad44cb18cb66fe463ac28848fe08e8ad12ca999bd1ec2af89efca9e2cc6943f6f2f859cd9b1cb9a0506e8484b02e3ff424bef28350f46a06b4811a3559d0f11721920d90541bf5fe1260a1c7938c56b405f1e90a4ca39ecbebd56067bceebdc50ef11317561f849f7f8b0a17ae4c75f818847d89ec3aee4e62460f8bb47f39ce30803b6882625b78ffb8a038c45dd878f9a712af6b6ee96c7425a894893692f1bbd032b165e4f861a71ac75a1f26f27d8c1b21104c5ebeeff65313d8ac3279c23adbf901519097d308c6af43c24d24ce3a35d329406dfe8f32e4b3ad7f242e891da70b079960d76fd73952cf6e03282483d5da33a1dc346905c3e20b251d137d9b9efbf3e2926ae2a863960e62cfda76cec76c2da9287c7ff51be4ccc0719060e013636f0f11a2dccaccd36c5dec3774a612cd987aca2e4cefd6eff92d9a8cbc68b3d277d7ee8e0ac462977861d46b082de8f6e69fe77feba1c401348d929c2f304374f508f443e9c2487d90e75fd559dffecf22db6cec24b381ba7e3c78a94e16dd89a62fd07be1535c09f81a3cffecd7772a5724044a060a09c0cff201c99b342ee6028863cbf73730b98bd6cb05a19f0072fc355110adbe7a3064724d13dd599699415722754246d9497c2902d72896de3e56b8480e558f04e66ff1c983330d37c46422e00680741c64127a335dc76c25a7e354b138e172f18df2c271785b0f32f9f2aa0a6564ee9115c17d5486d30cf13e807490add3b8578f07e6abda9e4893569bc14152b21373ee858b91d88db3254f6ff578e74761a4f02f6d4c323a739d75bf51a34f75f16814d24d37b55ecaceb7ef645eb3cc15ec99e79358125a3416a45c5c17286db82c58c824e07054208f88572a7c8da251007f26c7eb753329262c836f57ef5e96bf4cf4cc2dda26bd3a3d2bebda956b0bade708daef7705e10487e469aae79bca7afa4397f675514ffbe644513bbede4f9a3b50e1823a21693e460befdde85d9e9deb4a1023b7cbf4ed22cff7031aae5502181a0a54eb5f50bc21cf85f404cbe06e77901136563b05d444467a7cb4dc954023296ca5fba02476420646c6380f128bfc0ecc32c3b53da26e17057e96c8731f3683416317633c1296402650ef066a8edb05d953ecd5dee0257ce58c9def04fb927231f8c90bb06aef30da2a640b164280c9479928ee59c9501b821e3150108c7f5f73b6d6ec8f70e601076f67decb303a1f0bc6bde3808d6cc065b37ebc6ca63e260f3b1202c35ec2af8a95557e69f3b5f6d051a52169c2ff2155df2bb964dae8769d6ab466e0776331171f037664477dd511318413a08c3bd4708a6c4b3af427078811deb13cf8005f8f74a5074dc08c531b018580775c102fa98a1cd8b2a5cd86fd7b8df8995f1b753203648cf058ae8aea01f56626ecd324d661e0d4ae43242bef7190fe7911deb08f6fe435b17dda0e1480684bb9cc4d357b4889988c09ecf914d5c6dd60acadcc6b73331778a8adb9eaa70b1875e98b2abc56c856257aa684a54c5751be9137e7eb7595add573a67d593f6c915561cd20972a47e0abe47a8ad2973a78a73f7dc49cc92387c849580e29c6d41b0f1dce542fc72672cb5956fc06c34a7acdbe7bc0f576924237ee5123e7732698e682c73ff9e714dfe63dee0f806447f7586ff841c9ff0b2f4da998f9c2f5365ba7bfb7ede9864f456afaad08f789d966ab70d51c8b8c1b734112a070dbd8827b19a2ae39ed604fe4aa072cc3f7d0f9af157d456f2c32a279ae4de8e66f33b437e2d166ce3ad9138a7b1635b0720b6db5136499ef9206b15eb8bc7dad7303b1a4a08682686a9d7ba96043dfef311bf7b82c1db827b4565b98b2ba1546a63091bbbfe54bb5b9fa0cfc50dca63532829b578871ee7bc387a27649e9ba75150eddcee4054d4628f61fc10eb944466e5c12273aa7e6461bff0355abc9d9fba529603de6db6ae12a382871519b941008caa3ea44af913308beb2fc9f92c0df093fe3d4bb78d923769adcf2d85b0e27c5143a121f4714b672512eaf61d0f9149d660ed0fd4d10195bc16e3472b1e2bf8f37dad05de918543373b1719871f13b81c7331509637b7da7be763b50c1867b39bc39a910ba45f13ae83d9575be07e6941548f9541f29960f95556b08b657fccd12cdfb7afdb12ebc2f44e4e328aa693159b902c0a06fd2df796800efe4632e02345ea60b0f59da8168157f44b1bcd04d58e6c5bca38867fd0eada54eae5ef39cd9e9efd02f61670ed32b735422b0bbdc761434320ac7e1503735250e9cf92ff4fe0447ca384acb2551b54e5f9353c66783d74c780e0193b70a479fcb768b4aee6b702b451c9140645f80e9b2988c1e82f7c77ef7a627b2f20caa8c993a2b013748a201d4eab43dcba2afc40e8db5bcfcb102ec33e835cf4784f2c229b05a98eca98e873d3ffc053dd25cff5760652eaacc4dca5deb2ea43c3e7ee3f3fd28018a2fe42d75d947d4a30b2e3392b8d8ab902ddc75d517418b860b1f4a6abd42734c0c3937833155ed9887e47b20335dd582421ab929ccd6d501e37f2fde6029468c2fa7c5d1d7590f97f50d27156035a5426e70763a3090d8f49982024747441946bf9db5443f587615323f966304df2510f4ec39bf3261f2d5085b7c514ec2c77cd01755306f018af9f7a415435fd7c28d8562a62d7b03366d3622b15cc097da1f41a40747c6fcdbf22570f0599858abbb692965090a4981a66cd6b1cf85e461395ed41fcfe4d532d52bd99d81cc214f41352f555d2a136f883f4e4155fd6484b281afd8db1f5335db556bf15b1b9342e002babaa791ed58edffd72a298663462f6266d176e77c818a8f2e391bbc6ec9e7facb3e9a7152366942a2d26e7b10c8a37569d764375c617b63a1e8677695bf334d642cead7196594cb5b90c20bab6ba7c5a1a642068c1609cfd57c60cac150838b8940e0ded6385d57a33c39f37850c7ea4254ad3300dc1943be7fa96589c909c34468607372b321700ab2a9594b3a0a57502f01a53a3625fb517a990a3f7de2668dad70d2ead991b063b84cc94b5efe611af0c4288230db3ca0412babc4ffbb0710751d016828336aafcb4715fb84e46ac978b74952460dc35883dc8b0211cabbb0f8acdab726f662dc3f4e19c4b3f75ed4578c2bcc149ef4185969a703276cf8f737828021c5a956c6ce8b2929d65e54c3d46028991e132eeb205c350d8a9de21746c54dce251b3e72c6ec05b8e72a919707fca3ab316b3c8c9ee7c9f18945141c40682a6dbba3c1eb5c7569d05e796583d937f89c0d215a638b020281449bab6edc491578efe73ae9c59bcb22f368a54caa9539b1b5f2deb7abddbcb84e1f95a640176a1977b1ea05e0ee168b3298f030874d6aec593edd03d9261a268cd8861f965b9a4bb9ee7a8b055f3e9d1128c84462bf2159efdca34e0deef9e965d93831210dbd964c4d3653bd317769451ca6b9f259335964cc9e732371ce19e316e8e6d6007592d393254f6c58d0c59d237001e442f6399c86ef88e866b53c5fef1e0830653d4eeefce9183dcf511ac1a4cf6e85a9072b705a4931619da71309ca7f2f07ecede8014d6cbf74138efc28ec3548fc9e8db30a0ffdf50516330f6ff6ea161a153e05dd6967616ff95ccba86bac2962b6ee796f3ff80bec432c254f78d92f7833fe5821233d43e2c93dc4966ac0da084a65ccf0c1e8b046fdae942d7e4dbd5432dde2c878d73e31f09d8cc8ecc08c23ea31bf8f4ca6fb66ff84fc686d9528ee710adec253d42dd18433fa40e1cf3d3bdd3609648e654a12b80120f3454c94035953d21fdabcfece0c6daccc2ba496a8637244ac50c96be81f54e48c72ffd44133468b01ee320232f858548fc49abfb5f5e3af5124440c8dfae3b0fd30e8138612c860b3bdfd4cdaea66b60aecb29be1ad7355498b9325d7abe26b016af0e7951b924c197e8c07a8de75cb417e1e24f9d5e315cde210974d6f6654bd2b6673970f066b0dcd51fd34250cc088ec95676dc1360fc583878d223c2cd075ad534a2c693e440ba502d53fa251d4b786e2d9184ceec961a5ad4994ab4a738f7f42b494f9421e8295ecfb66ff4cd375ff8f994ecfd21ce0d00c8bdfd73def368bc0dc5d4d19a6a540f0b443b79aeb81950d7ca70bcd2ae94bac05467f921578ef2e4ceba40a23ada348640de6c17e2d9b05e00db008b446669afad96ce0ac4a0016b1f52302a0963cba71492c7266753853367edf1956686a5f2a649897eea46e38a999aa6a7a7176123912926d75f7d00bd1cd534363610c671e728a2ee791e6b7b5bf14f553128bc3345f06cf60e3bed95007581d4d9a962b57cda6467a7abc994e4b81f32227fd030e3dcaf9caffe2a94ba2156edd2a8b83f6ddc498fa25694093f543a5692b59dadf20604dcbbed98ac118162f7a3dada6715f5528ea1e861ccf60e7cc76d2f956ed30cb91892ddeaeb4b6ce2868654da67560bfb86249b4ae0b98d4fd9416f9a8c7ad435c02af384cecbd8623d54a5d159421c5ac41817a8327f1a198a3d3263b71fcdd83727d695f3acd05c23c75913b43703506d7ddc3d95aef46f5cc35f5915bd29c8203c4970fc3c3a430ce855cfe5b4e5fdc20e16b4e44555220c10d0473b0812a81a6fafc6c1d4bad5bdf09e74b4df77cdbc078360cc9c064e7b402d3b317cc25928e5ab1ae8c823c3fc65101d1e1a6e566c8774b346d7622b3555f593bfc8ba2d85282f51f14ff285ee99aa49a50ac104490842a693b631ba1d1e0ee5bb804313ab691864b56dc3d5c5626c86a0d1972126ceb4237f97bd35055b55661908eb9c74b60f18a1791cb4e9d219369423ceec717faf55c44c7885ea311716e6b0fff40028be416c52f2524e637a0c3997c8cfeb8774a5b5244d6436edecb63dbb111c9bf443ed57dddbb74d346067135cf56d51bf68f95841bcaa1e479d1967c698e85a89db7e7b8f001c01fdb4916ed031ac4e289b0330740a55ee2b119ed42958e27a99f769149c1ec2b93a3ed48ac13eb82998ba986844837b76d712c600d3209a0aafb8b0e2c7ab7f1704606b750534db20c23b903d96fa7e7e56a2b742d2cc43c6e4910b201544eab6ce3390b4f1dadb6df193d56ebf05566982f143a5a3b417e2bb91b1d6f0559545b6edbb4a4011411806074680e3077afc5f7c4ed2dbacb1c5190897ae96473d1f1d58fe0dda55294f9c5f1548a9be64653215ec3ffd5aedbe4246b69fe29a53f650b123f5509d374588fbef5b9dd824b46e6dc5d77aa2e9c24c19a3eb75697d8991b7c5462add3c5b8c611763a3492789e9555ec8aa4ee8df07ce7f9557ce9261c50eb5029bae0276af73b54444e5690bfe1e3569d001ba3e57bcac95c7ac1e656110105d5356fda7cc4d3e7fdaa3e8969e644fc196fcf90b9f55c2273e0c526ab5b5bc15f778dd65fc7e36d530beb3bbc0efe0bb997dbe4ef01cb1f0a0315705397c4f3408416ef213ce0603920da21171f4361c22e8d0cb15547becaabe4c495b726091761e1c001f2ddab9852e16e7da4d5823c6f5707817bb1bc230cf704cfcfa64d5f282b310d56d9581f6584fa6bea857673a0029297351dc7a4a1b8b283ca2ba01206337eba39e836b1b76e0cc0795e7861ddaf27086f4e9d65bb2c96dc0ec2e41b2d6930c125ee3a93e19d6a813aae810dd2fb72979af51f246fa686bc3f3b071c6e26befa93084612e632cff60297a099b6142656a9878ed956dca18035c3c95ea0014dc7b3d2122622b02a7aac806abca08d059f9a4ed39dcda55dfbae9d22bf12525d6cf8008d7eaf5fa527c658a46eb6b1b980e60fa0f06b8514f4cf3d314d8291a5f7d1e7fdaa474fd177cccabd718218054ed912b144d61917d8dfef475abda66fb973b7ff49598e484ff4abceba5887131df0e0307ad1549c72ed78321040d6b2204c9150cfa4a943145fcf42a9fe1e0427a2174b952e9350a8b6953c66ad2f5293e72d22a139198430f983e0c73a83e8d8c9549f1ad26056b1659ff2f695bcd24d739a68aa43d016e2a1b44b810ab7327f94ef648d25be29576bdca0fedd25c114d624221f816134df4de423ddc3fe7631f8f3594ad43593d3d0de25c3d511ea44b3d5920610ec64fc80f3d35239d36341dc2c8212a38a926533ccd1c4bf0a1dc00fcbf3c47785ad3c7c84336f88122f36711c500406af10a8857fdbc878b487f3976c2d6fd7ee70cb3606c790095a706f1711a78288dc648672204303f0f00939548885268320a32f53328db85593f8e3a084bf3069fa3b344b66dad9f77933f99222e753edf79114791e6e9e7f24adc3f6e98bab823cc637c92a3fcf8a78bcb2ba8f22aecb5eea667192bb402275e749d83e82081ecfdcda629c2c16f386f35ed8696bb21572c5aba5ceba8cdedbdd04ded83131f9632853bd4be7e95e6256b9845f1f1071511a47690ef1ff02d530388d672b5dcb1351a53ce1aad3215b6a98e72263af0e0732168aeab1b7864a3d68fc6ca122289f3e13e2cfb4959b4c6057a2c76289f772a877a662fe6645a2ac8dda790d105ee3f4416fce2a394799402f392bd03d6b00d7a7339fe2ab23f2af546181b5a09f10adb06ec774a765439947fbc99953d66bfd4685665f4340e19f206cfd071113bc675b8a795a7f984abb230f2279f7bf8babde348b93cc769c859df3a41889966da07a3b743a1559440d60db602e98bb64c4810d32e4004fb752879eadd623d9df131e2a834cfa7b41ca6900deef5697031948797e2088c20d3048abeb71e265334363c5e4831a31100fdd726e93e6fb30224599fa5f43958f95feac6535549e7eaa4935d727a400bd4286f5fb6519a99f5f7a43e1efedfe2b041f07fc9e0114b4edd42ede17083cc952c420ac6b8862357e7ed3eb9cd819ad65f69f545cc91dc6dd752ad5a03f9b91e2fa036f4f08a2a2f9b037f99eacb193c904319b40d7d5cec0677756df3f09cd793664eefe9d5397a5fb78a215c7406713ed8c0f8d8d1778b70c6eff55f8950733d6b2d4c664b339b4a3cddc9679ea8fbb24c687edfc45696491073e36916f64a64ea02874355efa8a59c9b67907f31ca33cbd2aca8c31de3fa5190b568dda116eeb751074982b9ec716cbbdb338423a44377737895845fd8cde2594a4872387813209ed7af1d88e5573421b904942691a3770c28b3750bff0ba7f50fa6abbd93f125d5fa0d56ef6afb00066a9cb9e6f0ce3cfce742954ef72977438f34d1b23fc7f5c46105925c5506d594eb23aa750e15b571f9db701db61136e99371a866b3b002c9e01d7cbfb984ad943531bc4dcc8e4001b106e9fe55ce347b5756b29115d3b12b73ea4d7dcbb4f1ab6f1324ddf7d39093d0ef6b1f33d5410bd97a64c032c9c94d5ac173d9dbc6c4799738e5cfbb034090b21cc08fd1fd47e6f57ee7f15c2580eed93b30c7cd944984a393616546d9478105e109f2343e43e72a26c6b9d6c6d6446bd0df18b6ea082c016367160a925844afd616a8013827393a9637357d740def5fa07f97642fa812049efff4998fa797dbf5302852db247abe8b6962fcc419d95078efed000f5ff8aa17803ff1fb7c72dd3e5c7b03df874d9aadceef63095941f28d8ce7555e8ae4ca2ed986bf667b954a3263038a7e171a5bb856896b64c664906a1988ba05f2f557032ef2374e896f0c3193b717924ff9a98edd08e07e665e02ed10fb740746df6407f848a21982741a15e1db84ab5360d6eefc2d126a940e5d91e3a73807bb986721cc3632bdcc8a4f0460068e36155bfb20dd5af984366d7ad81b9c1aa321394b0565aeb803a8fea0c6b476a87ab2f17d1b03998ff87316813006c5c7aaf556fa88825dc09b615fdd55f31d3fc20362b9d07aede681e036c985d7893970bed690ac04e20f81ebf9d6b989a063ebdaa06d66701ac4e2d07ce137cb1b0ce5bfe0b344bb71c2b0d4ed5b8d5ef42edcc05bf4b32189ea3c77c88a08dec652f0f5884512ecf86a327174f995f3de6cd7daffc0a84566b7bc6391528704b9c91cf3f327996c0925a52a3491b09b4f74ac41121264f8c1fcf6d6555c621c599bc72b107d5926b9f49208eb8104805792ea573cec899d73c2dd90ee231f171b70d79ac0a6cb71470f38b48ea43a3f694e1ff22cae83ce24f9436690c0860950088a820c15a4c1c0dc880025273ab8eb00ff0c658075d53b42f108971e8fbbb416738fd6549ef9d0c669d933e8a939d642949506957ef816d8b2d5b139f4e88af6de91847888e7d0785a03d72c3a653c5133975c8050cc749b2d38fd25aae25361bd9a965de6c78f642a41404bcfe5d5ff5e28b1624fea86dc04cc8d1ac2f986521bdf7b298eb6016450e350d572321bd6e31cca39789e7fb5a74820f4d57221e4fd495d22c36d99e05ffb5a1e118a6185eef7464ca0ff336653a1d4a8ff1de97a880a975072251dbe285b05a6d8e54dedd4cc4d053ff89227348940750daa89ec1d136fbf28782aa60b2dab50bc89de835771c4d0d34e8c7efef120f8a092234093b591e79399923d8c8cb6f0cb4b9cebb3fe368a7c22a45e2bf858dc9c4fe27b85f9b1cc514ce803d267241d2359ebaac688e4887f6b2e10cf58818da46a3ba8d047b3cfc006376863978b7388ba192e5b4b1f156ae01bcc392c48ea59d818858e88c3c521d71145d17234f3ebe0078e0d462cfb383dae8a093fbd19d8da2a23a43eab21d6012d4252144a37d4431a09141acc6c9fad938c690b8f039d072b0983deee806525df773c87325148e3cbd1d69cddebcd59a863c0cdf83266bf6c340cd8d653c65dd02c184d758106b3fb8d0a398b9a074559d882f41edbe7a486cdc4d8b5765dc0624f4671686683804059b85ff554362f3bdf37c9dbd98a8b484a45da992ac8d19e891feb4dfd5373f3fcf42fa696c018eb2811817cacdb7dc3b8da22135c2092699e869084cd591f015e6e90640cfc8ac2f695ec18138ca0a42c7fc799036053d998c55fe3e15854ca5cbadbc5e61839173f269b42df6b78259aee67b8c9ca2e26ead2c8fffa78461d29934ba61877faa8707c85b2ec0e6f661bae2487580e7964ca8cc87590ae8cd5e0516a534d7ee70107a87f187638e6c6539f8e1cf6fee469267e2e24192b9b07f5fa396495bab0e000a1f05790db7e2bcdcd7cdaad71d89486e9d7838d938c9a258f5ec4ec1f119b984ecd6dd0a3c731feced5dbc0cda97a333108705b87c8e2997a43e5743a76abc8ba0d579622a2e75321682c3d02c94d066f3d13aaaba1f2d4204e2deb8259e7a3c2c6089828d05da019c16492446e06b3b17315476e4cc6fb4f0c5fc4b283bfe548206f4ed606cabd94bd903fe1198bc52b9a7c6fd0093fb1034b182a4fdac4cabd877d671c66eaa4e1618d6c31d130a440690c5b3a827851d470f5ce682f36d36cfef4ead1ce251cee568a89b098b12aafb92545bacad16ff673f031460ba34e7e289bd93741c4d1556a4fd66af1bdea5ffa124eef9f6a8ef4f5e6faa7fb83adf95a1374368829937b811bf237435686a5ccde0fa88e08ef017ec050dae9da1214a77b0872375c942fb52a200d4c7cf542bf2164148841d258d7c423865593c6aa151c22427bda1feb76a62c3fad7dc563d8f70f50979cf99fe1bba7e4a0745071a20d7102ce359b7e2715a89085dec5fedc44a3d2b2c305f3c3b6063cc0b37d0d41303719bc867866b91eb65f8aedc374f84815b1b101a9f2ee292e93d4aff9c7e8234308b11b466373881254a51ea7285ad3c639395e4137f6ede8c4fe4e0badcee8099151b21d9338b3ec648f4efa81489e58f857e691c9e3c9d3d5669d7b1502fee6505e603809797c71ce7c813ac4fda842ed1e570255f437006bbe2db81306b2036e75c05b5dccd97f695d9a09399777ca64668465a22fb63653a1bfd4470a217ec0ed36d5bf8ba5680efb1bde82cecf709bf1b331662d8738f7ce2dbc26190b6fb99e05fe559c3e965a1e07e88a12029f60f17d4207ac59d4baf4460352a837e0fbba8f33426bc33d51e36ac665e9f9ad655806876199b3fc37f9bcfca9825c566897664ed5a8cdc38499e1c4b7a20ef6dcdf20c2c7dfb55c8bdc6dfd766588194badd9727b94e8439e468ef0ed50877a46f0531c7bc20c7d5c156be2ef3d4baba93bbf7faa0ce7b41514d411a0b8da834873b21fcd6459cf04a23d66a97dbd65dfd246cc6aa6622f51213799a03bbd46d73316a4d514d324bf3317639442b3158398319eebf02d87b655deba0faba4b528ca70aaae693130ef958d7e4e0e3f65d0a906ea2d63d9fa7583244ef657ec03ab130c4b0b4b0ecd05fa2fbd47e9aa02cc145b3bcfb12f94e30e8314111b7c3b7a7fab6776c705d1a88c22a3f0760dc40537b363cc6e8c1408806dc70f87ebf6f34e12315a2de33a72f29a5a6296b3859eff85ed1b71a8b00bb66112155b65aa2ca5f7698e1f0badf75cc4606b34b5a656a785da4cb24d72a2571edb191a244170789458263b31914ee9e2821f80224478ff4c4c872c478c067163bbefc11a5aa267d835a621da0265d98b9745e50d923e3fd593dba35019be6d6cd7260587b5e777b6c1a0c16cfaab09d055cb9489cc7804d22f6e47f714a0c1a8ffebf63d68149c496e619eaad5b7f345de1e2417b40166f7add7369d1e6f2bae476879d285d14b384036448234c1e779fe26d35d805591cf734ea41317f058d000bcc284f9f9894fefdbac53b3f3c6b3e62891e840e8b896bac93fda2ea3008ebc3f02409242cb32dc45956f0804aaab2960c4fadb12c1b7a59916113a7c9adf77616818c5da14bdac8ee588917a4b37073391d58b728b00dcf33df0dcaac84a7e22e041de600f7ef8acdff2b976f6554643665094bd40f5758b9727e8a9296d1028e73e3371647c3604c244b0b7b07639d1b2e093e1d68cce89295c697a557db89e8a4b6e3df6edbe48052488172db33db49f7fea9c2740990047af411d28ced97bdb9934c7e322da642ffdbdc4d5fadba0db11dc439c403cd2670624a83a7d4012742e3c1f49e9c7bd5d310442675ba175a92163cad25b105aca588e3d98c2d3e7635675aa8d3c779bffe98df274d9e97f7aa2329a8a6fd1469e2616f03eacad69bd64073997ecf1b8ea53fea9b0f5436ad33865bc57d4affd749ec94495cd3637096ec5eb1cc89bd5e7a151dee99a9b6e958fc1b4809acf33d995c3b44e0ec61855469f1a9ca1d448d40054d70523684ed594406f941d53f18b5af3bf773b3314c372ebe15ecfbe085acf5e6bd9027f268bea6d9adbd886212c5bf797bcdebd71a7b7a069fa598ec61656f107e990197d9fee8b373f1ed96cb477279e40e00f408d9025e498d098d78e07176b3085de01f39231b0e1ef8aeb1b40185a7d361f41b9576fa16641f293ee6eab5232f03663a624605b4b0a59bbd9a83b77406d2dd96a61fcae5111ecb5adc81276cada9ce5c1b7d6e3bf1f2761f74ea795eb4631934084271db09a3b955a00501f9d25c5862f1742e59eef8ea1b69b724d9d90c7389a00f6d4004569827646152df1130e22aa11e4d81626a462726cfd33314c113fdf1de02508b55a4bb58e22d38e3771bdd4bf752604b1eeb7ddcc30f3c0572876f4ade38e8d772e6957ac483ce40fa2508d38c56299a1371dfd0bb1f001d73472ac533504a0605361c878c759816a51fa063d6765665216e334b301091a229d4a8310d2c5c4bf890d8dc55b7141003e04976cc1966354346434c6bf6c91ffe5bb0a28f286466255c5795e8f3efad40dfa36dbb1cb9b7d412b65d0058f448e277a1ad77848b5953dfcc0603754177aa7aa4efc73b37d6257af320a764cc8680f09dca7c6432df7af4cfc173981a617d691cb4562224902a6d68a216c8abfd7a14fb9e57dff93612128852a400b644f09ea1dfaca9a0897ded11af90aa84d2b8c7b954d698ec2776a4b8b0b226f0393e58c5cb786c42f89039688f3f9c9ec4cc9cc1654654134954e567317415f40443128ae1f4bd9c45ac03c02d8d97838b663253f92f0b4baf9a0a90637be494cc5cb65422ef3b454f54dcc8981c568088eb6a4c9008914796771233860c8c2b64791ac56b62fc9fb7f4636bd134a173e1a8b146c0be01355781b4598c6495dc6a93b58872fe281986b22f2debf3c754051dc58c32bfa5bbff4f735e67806c56660e1494558645809b98f762e13202817d5b05a22e605dc36377e78a3ea4f47fadc3709e9005c481560754b5d4b7358090a90c5a676b1274bfa345000c45a987f246801ca298b0c91ed84ba64231296cb1117996baf4465696a026bcbb546dd1d56b5f98a757c72f9221e86200c1bf129f86a0c6506f989857918799c39ea17a0012b195ca1f2e8d4df33a8cb03a9411419abad94a75f402988b893aecdb1cb4996e1ce20835660c235c80f42b5c973705dd343ed5e30f49948620bbec1778bab664eb627fd2ddcd920da440e292970fc07bed7f0f67a4aa3fe46d8e846735002d08f57b3fe29d09514a41c0e4b7a1a21401ab5226fe9cc58fbfbd5012459d4e4620f10e0af9701bd5312ed429bb7565e840441a349ec854dd976d3051eae0e0a0ff9f986ae6c8434cb0ca23f45238f08c1c2e064284141952e70a097c9a2edd08a809304aeda88853f56400a9d5e4f849ad28269ef762b356a17166e81b4d720392ad782c76ce33df06bfb4834c840c751ee7bfec186ebef863085c215c2d9d2c11493f839ccf99994d5b298277fde2b1270c03ececaf72860c356fc42807a2583521202b129a13f9f5323bf746a3a17b7151ca2bd745df78f0fc6c79f856bda5a9c70384cf5d1ccff3a632d8457ffcd739d191317a4b6c3f19652c8e68ef56336521b80e06b323f5d12f304780709d0b230ea414f32012c4f40fc9ac3cb4cbccdbd7d02086bff0ca1451587ff0ba16c43f2801b43dc9d28e8c2c6b2d4b69e47fa4206f410371663326c4a70f738a70886ff176e4b2cbf667b8fcf338be99f792ae9fb4effcb077384488e0b27b5ce9bf867904b86336665a518e59bb9acf0775ae6140ca3289884031b7ebd017a8ce481093974b188951937f7dd57901dd3addae19673ee7145e9e5954e3c19988da013f197ce20e8f8aae97d1e448d409f408d706a62b44069fa60560cfbadb73e8501b1750839e6c7443383d7188b5b43672f605dbf8d1794115b3ad7f637c413c489fb99c4d1cceded8937d5ae3be4bdb1e8dc17d2468d585d1c994d09a4723fcebf96f07b3c07adae9f17238215f012d9e4cc074f395fb607fff31a895cffc86269a30b17314587ebe43784e7987776f319e6c708743e1321e1bc12e8b9c600e8fcf0b2b37a7a68574cc8bdcc18456a98dcbb81666204d1e2860bab433175468f252ab3984485392fc65a1909c9eb81d5502e6d4698ea107261dcc0072470670a353d0bc43aca6f1f780298f92e8d8100e7c909857ac254037f93c7091a802b0e77169ae798d6a7dbbf5f93ecacce2e519ab0bbaa4154d44ca9a5263821e700dd7e1e0c437949f83419b0e62fa055a7011fdfe2613dc2b977f2b89dfba4ff6668024c96fd9da320fbaec7240849ace1082d734a333214384ef512428b793cc8fcf469a70e010e24db8f527cef4986f0a750d4c4d745bbc6ad49666f89cbcd1a1e00d5ddb67a0a1c43424d93dd021effeff911cf583dffa5ce39ac9125108e0665f5d76b9c3bdfdb066b3750565c2e166991a7a770db6252d21a9f7b58085817cf3b35169a4e2f7ddcf4b4848c9c277df2bdab63fa4185add351a3286a88b9f6b85763cf2f98a64bd5327d83d6c5790a45bf70d8f2a2f62f6323789e3e1691918c98e130be4c616ccaa58e19140a21d365efe271976c131dc15ccd04c8bfce2bfccd79d0d3e0276374ae0e22090dc56f3b0c6f8bb96872c2fc936dc8b9df88c09e89ba95f692009f218c3099ff83e98ab10e19b30798dde9e74613b89cbcd11a4d5b4fb834964d1d9eb6e127a3cfaa2fd3b5a549054ea2e459f8c84a1e23d9fabcb5159d469af793474cb5c17449c4931817d4a091145516198f28deb0f614526083cd3205713581305d9cf21e5299df48f1f29fe9395afa10efac01b09c823b240661c86997b10206d2d3506ed1c4acd747c51b4be08dd793047a218068e4beb0763d78d1ba6ce15448f4eabfc914705e51b1e7e26f5bcde33a1b0db6bd7e3fd19b7b7a1a73ad5fd7da729897d7eb41a0e6c7f28c6ba9c9ef45fc8e0fb20cb31a2e5e9d112b242d52f7984b21976a13814f9767dc188623469bf5094957036f95c7a007ece33e9690a2b200ee1abdd40bd551c3d2c00a7ed86ede16baa89b37d14cafe1c03fe4c277ff29f25821babf50275e112d087729f91cceb2b96a8cc93641ea890ed1f7e6695157ca9aec7495711720c523fa115446eb980800736503b256220430dcbfd3e315854837314094b39a3ded08145bd5e7500bc8d161eec4d52a5692fa589f46098758d6dfd01fdc15b5a31b2d29d14ce6e9f724d80cbbc7279cf5d555fe74f054b4556a0a79270da454bef621b0b9126ad183118cc55a8bc0e28a6524b06bcd3ac9a7586e05d6bb6f58f8bc189c0771a1019a3f87c69635558148f3e7209a23a636698db8469da772a1c8f2ff57a0c920b020a95982ce6479bb93c4d3b5cd9322ed00b3dc275656e029540a98f3eff45fe254b96beac7f9b35605d1b8d0ef71890f65464363c15b820e00dece5f4cf190ad9227a684d38d79878d53ac97020a29dfe99d08835ab9b4af6de67f6104350ee693e3d127df0b0c93f02c13e8ae3ad3dd68a88a6a9f13150ed5fdc03eb38311ceb26f325743c098c2c7254ea18889963b0ce205abbae5ffc294c080345d53af8c5b524a2b1e0e4cd372badf1f327ae4cd8b49b1f41291a19e1e227e10a78de538c3ffd64737acffdd9d52415684dd3351778109181b0383f903ace51d60e04f6c7ae84c7a6e9a606c28a6388ec81d2c4b31b9d93aea3172011eb22ba9da9898253b713ee5cad1b592fb3ef7d4500f212956b8c6f5a166469b7dab5254c7e7a69b6fc37793f7688ccb5e3b54a763d38493559aba4905be529de332f16a7712f7cc509714134d4bc9882ef21b1f369889279405633975467024cc51bb58d6d84c9e9866789c14d9e6efba2c4ce5e5dc54ded5be05a3a97937dd68d395952a27d3de8cdc32caf6fa24077a882a6b1b13f7b5f72274019de2c04fbd386f43b641cfdb76ab7a2909ae2edf636e6c120cbeb035478f711244f7feda7a257a0e72295c2145b07b66e6b62079d2f00ab8eda16afcb516e6bff89609bd4d0d10167ffad3855f981f4db09456a901d7119a7cfe786a6088652682ee7d592e8a3435e0df7cf40fc2c759af97c7d6494fcb30890217150261709abc96d5e0600db43cac2d11605faaf096b73c1fe67241be2933b1a3cc1c7473a78c9f56e691ccc8e3a5df10bd63c3a945ba45399498873c5ea26f49a5800ef241ded4be1208bec4f64837d9d54776bb61af36f399e78e68276bcfd8ffcc11871f4b25ce5d6e5d6285810f0854e513094073a0f1bcecf0910ae02482f82b622286fd715bdcb8ca0cb1311b3835141953c34c93fe1185e88f9cb934c86797b4bdcef1bf503338d8ec2d77da79987692898a1c967ad54d9c8cb86c350bb015307472ba7e293d2eef36b87d39f6377f10bcd183c718fa992e8e2d24c9d1be6f695be3f7868dbb687eabe4a1e171309bb510c45aaef84e0b2dda2b5e5e4bc769a7f0e4ec86a521718e5464611543db470719b06ef960958379e4f0d2ff14ba80077338fd979983a274d01a622c5ca8df7c41a205a581752db64ac00fa7c7bdf328ebbb19f4a6ee83307372b5a34fd4fb960fe4c5475e5a811d49f0515ef36d65034499ea0c5adc852dc368672ea26cd0f3f48cfb486917d5f4a037f6d9abf669c970d51d46afb72847c75bedca42e36b6f8ee804c39eb3f240eb42b6a512f302f387d52f8434f8d8895a0e20c1e4546a912a6cb3950e3abf556f309e5d2267ca962a3822223c9814aa30e568c6fa8c67ce649fbb201f7f235a40b9b3117c0c17c342f32819b2ac4fab949f1e656b175f40fc854c4fcbecc3acd327e36348cd136d69a2fc1760705eb12569116606246f89b8f3e9f1cf8500f073c083ecde731f499b1186493a38277b86f46db6b3ded06e3b529f2bfef5b226aebfcfa6990755e42cf35eb9361da36621528119009f85a5c571b1f44455c0726d1f42f23ac8ae5dc02bd9cb3a5396ebd68b068250c5daa6b6757a8c31453589262197d0ae9caf31c0dcd74b0872ae561db7d5306128b4e92a1c53745415fed528aea0a2726c54809b380d614c8d4dc5ee5516fa69cb866e0ba3e677fb1e18c607ecef1441692383985b6b426c4caee5d3492793d84f6966f97d0c69e72adb8c246f7cfad62011af28716dfe922c4ca2dfebf521ced1a676adebefac7346c6606d25d29a79da509cfa9825f335640a29777d44445092b807505cec10c9b0d9e96513855a4a1de7085e99ad67f203e970f799e0787629ce9c1e744ce0150a77fedf2d8baab96b676ee06a35957ed381546a7a6fb15a370afe47f20b401675335c82a02db31cf3963a1a62b9e65242e126bde44ba21292d494e94b82b07aff1b85b684d93231709bceacd3bb65414132c3760e51e082e01e34a46f0fe88292363772f40aeca378a4bc06ed3e5ab2e82936268ab3596d0f7728d5dd7168ab1db2b37e3d1507a37f1907e2a432a30ca1418b20bca714ea91199c3cf9bf3a453bb82ecd5173b50f44d278c7851e0f4201d8afc9b9c53584339ee2d34da771fc6e1718da59e839a299d77805e6a6fc0eff29f8694da30815c92a6c9f1092bc939c07cb2bd546d2a9d2a9b4d802cd8f413cbcf21f715cd959b455a63c2428319b3b449f7512b2b69eb8c173d97e1ad0f8fc8627d70bdd1592f490bf120baa973709fdf1d0d28cf61719d7dc227d722c05590b9b348bcef76562b4a843df17fc1ab10e3a65431ba3e2cde76ffb51156fea9d1de053b43cb68b66e023be7e6bc025363165d03b85b92cb3d05f1cc2556c1e5cb655c0344c643367f161c808b42796d60229909c4ad2dc5fb959752b77b7510060a9bb02deb710f9ce135d589cbd03ec7a50136f74d113ed8e903a683863c3bafc71f6da95fc1ae5be62d20114c7272a9569024703a3e5b1746ec786e4d772a13e385ed717bb03501621b852e91e6cb5df474e2e82949b3ce92d2c477b6698ca1d40bb2e4a8f5b788f8f008208fe2e5e824e02825bea6282f457c78a7487244184e06bcc3f7b9944a8880fc1c2229802b501193454636ca852781a0ea2f5847767ac0a2ce436dfc186b5e2cc2e2c8683795a654f93361eb290a530462744235478632b9291d89ae234bdde5cd638e550599f830a5b48e7a4c5ee7c5d48ae1e30ac8809e8fa7b0b0ca09ab3bed2f1089c253691589fab1f56280e123dc5d1bd99706458325d6cfe34a8d1e17dddf2d49e5dbce0f9538079ac3210160b700c41ce0352bd5f91be0baa8cbf8d5b15e8cb145a4d8212dfdfbfd380afb5d935e2ef0140a1281605aebfece4f26aeb2c6d2ad44865172e77685c62ff56bc4ffd421122aa2b5adc33fd6f0159f6fcabf59596838124a5615e3d5c0fbd70c1e3a7764ab62b1f2e0dac5fade63b75d319d0e41c0bdb6632ede3092bc7df58245a14b99e1ee0a20a07b58853355efe3c06d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码后阅读</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 听力练习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单词 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
